/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { StackOneCore } from "../core.js";
import { dlv } from "../lib/dlv.js";
import {
  encodeDeepObjectQuery,
  encodeFormQuery,
  encodeSimple,
  queryJoin,
} from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../sdk/models/errors/httpclienterrors.js";
import * as errors from "../sdk/models/errors/index.js";
import { ResponseValidationError } from "../sdk/models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../sdk/models/errors/sdkvalidationerror.js";
import { StackOneError } from "../sdk/models/errors/stackoneerror.js";
import * as operations from "../sdk/models/operations/index.js";
import { APICall, APIPromise } from "../sdk/types/async.js";
import { Result } from "../sdk/types/fp.js";
import {
  createPageIterator,
  haltIterator,
  PageIterator,
  Paginator,
} from "../sdk/types/operations.js";

/**
 * List Work Locations
 */
export function hrisListLocations(
  client: StackOneCore,
  request: operations.HrisListLocationsRequest,
  options?: RequestOptions,
): APIPromise<
  PageIterator<
    Result<
      operations.HrisListLocationsResponse,
      | errors.BadRequestResponse
      | errors.UnauthorizedResponse
      | errors.ForbiddenResponse
      | errors.NotFoundResponse
      | errors.RequestTimedOutResponse
      | errors.ConflictResponse
      | errors.PreconditionFailedResponse
      | errors.UnprocessableEntityResponse
      | errors.TooManyRequestsResponse
      | errors.InternalServerErrorResponse
      | errors.NotImplementedResponse
      | errors.BadGatewayResponse
      | StackOneError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    { cursor: string }
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: StackOneCore,
  request: operations.HrisListLocationsRequest,
  options?: RequestOptions,
): Promise<
  [
    PageIterator<
      Result<
        operations.HrisListLocationsResponse,
        | errors.BadRequestResponse
        | errors.UnauthorizedResponse
        | errors.ForbiddenResponse
        | errors.NotFoundResponse
        | errors.RequestTimedOutResponse
        | errors.ConflictResponse
        | errors.PreconditionFailedResponse
        | errors.UnprocessableEntityResponse
        | errors.TooManyRequestsResponse
        | errors.InternalServerErrorResponse
        | errors.NotImplementedResponse
        | errors.BadGatewayResponse
        | StackOneError
        | ResponseValidationError
        | ConnectionError
        | RequestAbortedError
        | RequestTimeoutError
        | InvalidRequestError
        | UnexpectedClientError
        | SDKValidationError
      >,
      { cursor: string }
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) => operations.HrisListLocationsRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [haltIterator(parsed), { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = null;

  const path = pathToFunc("/unified/hris/locations")();

  const query = queryJoin(
    encodeDeepObjectQuery({
      "filter": payload.filter,
      "proxy": payload.proxy,
    }),
    encodeFormQuery({
      "fields": payload.fields,
      "next": payload.next,
      "page": payload.page,
      "page_size": payload.page_size,
      "raw": payload.raw,
      "updated_after": payload.updated_after,
    }),
  );

  const headers = new Headers(compactMap({
    Accept: "application/json",
    "x-account-id": encodeSimple("x-account-id", payload["x-account-id"], {
      explode: false,
      charEncoding: "none",
    }),
  }));

  const securityInput = await extractSecurity(client._options.security);
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "hris_list_locations",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || {
        strategy: "backoff",
        backoff: {
          initialInterval: 500,
          maxInterval: 60000,
          exponent: 1.5,
          maxElapsedTime: 3600000,
        },
        retryConnectionErrors: true,
      }
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "408"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "GET",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    query: query,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [haltIterator(requestRes), { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: [
      "400",
      "401",
      "403",
      "404",
      "408",
      "409",
      "412",
      "422",
      "429",
      "4XX",
      "500",
      "501",
      "502",
      "5XX",
    ],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [haltIterator(doResult), { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    ContentType: response.headers.get("content-type")
      ?? "application/octet-stream",
    StatusCode: response.status,
    RawResponse: response,
    Headers: {},
  };

  const [result, raw] = await M.match<
    operations.HrisListLocationsResponse,
    | errors.BadRequestResponse
    | errors.UnauthorizedResponse
    | errors.ForbiddenResponse
    | errors.NotFoundResponse
    | errors.RequestTimedOutResponse
    | errors.ConflictResponse
    | errors.PreconditionFailedResponse
    | errors.UnprocessableEntityResponse
    | errors.TooManyRequestsResponse
    | errors.InternalServerErrorResponse
    | errors.NotImplementedResponse
    | errors.BadGatewayResponse
    | StackOneError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(200, operations.HrisListLocationsResponse$inboundSchema, {
      key: "HRISLocationsPaginated",
    }),
    M.jsonErr(400, errors.BadRequestResponse$inboundSchema),
    M.jsonErr(401, errors.UnauthorizedResponse$inboundSchema),
    M.jsonErr(403, errors.ForbiddenResponse$inboundSchema),
    M.jsonErr(404, errors.NotFoundResponse$inboundSchema),
    M.jsonErr(408, errors.RequestTimedOutResponse$inboundSchema, {
      hdrs: true,
    }),
    M.jsonErr(409, errors.ConflictResponse$inboundSchema),
    M.jsonErr(412, errors.PreconditionFailedResponse$inboundSchema),
    M.jsonErr(422, errors.UnprocessableEntityResponse$inboundSchema),
    M.jsonErr(429, errors.TooManyRequestsResponse$inboundSchema),
    M.jsonErr(500, errors.InternalServerErrorResponse$inboundSchema),
    M.jsonErr(501, errors.NotImplementedResponse$inboundSchema),
    M.jsonErr(502, errors.BadGatewayResponse$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [haltIterator(result), {
      status: "complete",
      request: req,
      response,
    }];
  }

  const nextFunc = (
    responseData: unknown,
  ): {
    next: Paginator<
      Result<
        operations.HrisListLocationsResponse,
        | errors.BadRequestResponse
        | errors.UnauthorizedResponse
        | errors.ForbiddenResponse
        | errors.NotFoundResponse
        | errors.RequestTimedOutResponse
        | errors.ConflictResponse
        | errors.PreconditionFailedResponse
        | errors.UnprocessableEntityResponse
        | errors.TooManyRequestsResponse
        | errors.InternalServerErrorResponse
        | errors.NotImplementedResponse
        | errors.BadGatewayResponse
        | StackOneError
        | ResponseValidationError
        | ConnectionError
        | RequestAbortedError
        | RequestTimeoutError
        | InvalidRequestError
        | UnexpectedClientError
        | SDKValidationError
      >
    >;
    "~next"?: { cursor: string };
  } => {
    const nextCursor = dlv(responseData, "next");
    if (typeof nextCursor !== "string") {
      return { next: () => null };
    }
    if (nextCursor.trim() === "") {
      return { next: () => null };
    }

    const nextVal = () =>
      hrisListLocations(
        client,
        {
          ...request,
          next: nextCursor,
        },
        options,
      );

    return { next: nextVal, "~next": { cursor: nextCursor } };
  };

  const page = { ...result, ...nextFunc(raw) };
  return [{ ...page, ...createPageIterator(page, (v) => !v.ok) }, {
    status: "complete",
    request: req,
    response,
  }];
}
