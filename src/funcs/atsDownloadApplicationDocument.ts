/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { StackOneCore } from "../core.js";
import { encodeFormQuery, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../sdk/models/errors/httpclienterrors.js";
import * as errors from "../sdk/models/errors/index.js";
import { ResponseValidationError } from "../sdk/models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../sdk/models/errors/sdkvalidationerror.js";
import { StackOneError } from "../sdk/models/errors/stackoneerror.js";
import * as operations from "../sdk/models/operations/index.js";
import { APICall, APIPromise } from "../sdk/types/async.js";
import { Result } from "../sdk/types/fp.js";

export enum DownloadApplicationDocumentAcceptEnum {
  applicationJson = "application/json",
  textCsv = "text/csv",
  textPlain = "text/plain",
  applicationGzip = "application/gzip",
  applicationMsword = "application/msword",
  applicationOctetStream = "application/octet-stream",
  applicationPdf = "application/pdf",
  applicationRtf = "application/rtf",
  applicationVndMsExcel = "application/vnd.ms-excel",
  applicationVndMsOutlook = "application/vnd.ms-outlook",
  applicationVndMsPowerpoint = "application/vnd.ms-powerpoint",
  applicationVndOasisOpendocumentPresentation =
    "application/vnd.oasis.opendocument.presentation",
  applicationVndOasisOpendocumentSpreadsheet =
    "application/vnd.oasis.opendocument.spreadsheet",
  applicationVndOasisOpendocumentText =
    "application/vnd.oasis.opendocument.text",
  applicationVndOpenxmlformatsOfficedocumentPresentationmlPresentation =
    "application/vnd.openxmlformats-officedocument.presentationml.presentation",
  applicationVndOpenxmlformatsOfficedocumentSpreadsheetmlSheet =
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
  applicationVndOpenxmlformatsOfficedocumentWordprocessingmlDocument =
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
  applicationX7zCompressed = "application/x-7z-compressed",
  applicationXRarCompressed = "application/x-rar-compressed",
  applicationXml = "application/xml",
  applicationZip = "application/zip",
  audioMp4 = "audio/mp4",
  audioMpeg = "audio/mpeg",
  audioWav = "audio/wav",
  imageBmp = "image/bmp",
  imageGif = "image/gif",
  imageHeic = "image/heic",
  imageJpeg = "image/jpeg",
  imagePng = "image/png",
  imageTiff = "image/tiff",
  imageWebp = "image/webp",
  messageRfc822 = "message/rfc822",
  textHtml = "text/html",
  textRtf = "text/rtf",
  videoAvi = "video/avi",
  videoMp4 = "video/mp4",
  videoQuicktime = "video/quicktime",
  videoWebm = "video/webm",
}

/**
 * Download Application Document
 */
export function atsDownloadApplicationDocument(
  client: StackOneCore,
  request: operations.AtsDownloadApplicationDocumentRequest,
  options?: RequestOptions & {
    acceptHeaderOverride?: DownloadApplicationDocumentAcceptEnum;
  },
): APIPromise<
  Result<
    operations.AtsDownloadApplicationDocumentResponse,
    | errors.BadRequestResponse
    | errors.UnauthorizedResponse
    | errors.ForbiddenResponse
    | errors.NotFoundResponse
    | errors.RequestTimedOutResponse
    | errors.ConflictResponse
    | errors.PreconditionFailedResponse
    | errors.UnprocessableEntityResponse
    | errors.TooManyRequestsResponse
    | errors.InternalServerErrorResponse
    | errors.NotImplementedResponse
    | errors.BadGatewayResponse
    | StackOneError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: StackOneCore,
  request: operations.AtsDownloadApplicationDocumentRequest,
  options?: RequestOptions & {
    acceptHeaderOverride?: DownloadApplicationDocumentAcceptEnum;
  },
): Promise<
  [
    Result<
      operations.AtsDownloadApplicationDocumentResponse,
      | errors.BadRequestResponse
      | errors.UnauthorizedResponse
      | errors.ForbiddenResponse
      | errors.NotFoundResponse
      | errors.RequestTimedOutResponse
      | errors.ConflictResponse
      | errors.PreconditionFailedResponse
      | errors.UnprocessableEntityResponse
      | errors.TooManyRequestsResponse
      | errors.InternalServerErrorResponse
      | errors.NotImplementedResponse
      | errors.BadGatewayResponse
      | StackOneError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) =>
      operations.AtsDownloadApplicationDocumentRequest$outboundSchema.parse(
        value,
      ),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = null;

  const pathParams = {
    id: encodeSimple("id", payload.id, {
      explode: false,
      charEncoding: "percent",
    }),
    subResourceId: encodeSimple("subResourceId", payload.subResourceId, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc(
    "/unified/ats/applications/{id}/documents/{subResourceId}/download",
  )(pathParams);

  const query = encodeFormQuery({
    "export_format": payload.export_format,
    "format": payload.format,
  });

  const headers = new Headers(compactMap({
    Accept: options?.acceptHeaderOverride
      || "application/json;q=1, text/csv;q=0.97, text/plain;q=0.95, application/gzip;q=0.92, application/msword;q=0.89, application/octet-stream;q=0.87, application/pdf;q=0.84, application/rtf;q=0.82, application/vnd.ms-excel;q=0.79, application/vnd.ms-outlook;q=0.76, application/vnd.ms-powerpoint;q=0.74, application/vnd.oasis.opendocument.presentation;q=0.71, application/vnd.oasis.opendocument.spreadsheet;q=0.68, application/vnd.oasis.opendocument.text;q=0.66, application/vnd.openxmlformats-officedocument.presentationml.presentation;q=0.63, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;q=0.61, application/vnd.openxmlformats-officedocument.wordprocessingml.document;q=0.58, application/x-7z-compressed;q=0.55, application/x-rar-compressed;q=0.53, application/xml;q=0.50, application/zip;q=0.47, audio/mp4;q=0.45, audio/mpeg;q=0.42, audio/wav;q=0.39, image/bmp;q=0.37, image/gif;q=0.34, image/heic;q=0.32, image/jpeg;q=0.29, image/png;q=0.26, image/tiff;q=0.24, image/webp;q=0.21, message/rfc822;q=0.18, text/html;q=0.16, text/rtf;q=0.13, video/avi;q=0.11, video/mp4;q=0.08, video/quicktime;q=0.05, video/webm;q=0",
    "x-account-id": encodeSimple("x-account-id", payload["x-account-id"], {
      explode: false,
      charEncoding: "none",
    }),
  }));

  const securityInput = await extractSecurity(client._options.security);
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "ats_download_application_document",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || {
        strategy: "backoff",
        backoff: {
          initialInterval: 500,
          maxInterval: 60000,
          exponent: 1.5,
          maxElapsedTime: 3600000,
        },
        retryConnectionErrors: true,
      }
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "408"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "GET",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    query: query,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: [
      "400",
      "401",
      "403",
      "404",
      "408",
      "409",
      "412",
      "422",
      "429",
      "4XX",
      "500",
      "501",
      "502",
      "5XX",
    ],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    ContentType: response.headers.get("content-type")
      ?? "application/octet-stream",
    StatusCode: response.status,
    RawResponse: response,
    Headers: {},
  };

  const [result] = await M.match<
    operations.AtsDownloadApplicationDocumentResponse,
    | errors.BadRequestResponse
    | errors.UnauthorizedResponse
    | errors.ForbiddenResponse
    | errors.NotFoundResponse
    | errors.RequestTimedOutResponse
    | errors.ConflictResponse
    | errors.PreconditionFailedResponse
    | errors.UnprocessableEntityResponse
    | errors.TooManyRequestsResponse
    | errors.InternalServerErrorResponse
    | errors.NotImplementedResponse
    | errors.BadGatewayResponse
    | StackOneError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "application/gzip", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "application/msword", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "application/pdf", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "application/rtf", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "application/vnd.ms-excel", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "application/vnd.ms-outlook", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "application/vnd.ms-powerpoint", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "application/vnd.oasis.opendocument.presentation", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "application/vnd.oasis.opendocument.spreadsheet", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "application/vnd.oasis.opendocument.text", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      {
        ctype:
          "application/vnd.openxmlformats-officedocument.presentationml.presentation",
        key: "Body",
      },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      {
        ctype:
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        key: "Body",
      },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      {
        ctype:
          "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        key: "Body",
      },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "application/x-7z-compressed", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "application/x-rar-compressed", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "application/xml", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "application/zip", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "audio/mp4", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "audio/mpeg", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "audio/wav", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "image/bmp", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "image/gif", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "image/heic", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "image/jpeg", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "image/png", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "image/tiff", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "image/webp", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "message/rfc822", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "text/csv", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "text/html", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "text/rtf", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "video/avi", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "video/mp4", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "video/quicktime", key: "Body" },
    ),
    M.bytes(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { ctype: "video/webm", key: "Body" },
    ),
    M.json(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { key: "DownloadApiModel" },
    ),
    M.text(
      200,
      operations.AtsDownloadApplicationDocumentResponse$inboundSchema,
      { key: "DownloadApiModel1" },
    ),
    M.jsonErr(400, errors.BadRequestResponse$inboundSchema),
    M.jsonErr(401, errors.UnauthorizedResponse$inboundSchema),
    M.jsonErr(403, errors.ForbiddenResponse$inboundSchema),
    M.jsonErr(404, errors.NotFoundResponse$inboundSchema),
    M.jsonErr(408, errors.RequestTimedOutResponse$inboundSchema, {
      hdrs: true,
    }),
    M.jsonErr(409, errors.ConflictResponse$inboundSchema),
    M.jsonErr(412, errors.PreconditionFailedResponse$inboundSchema),
    M.jsonErr(422, errors.UnprocessableEntityResponse$inboundSchema),
    M.jsonErr(429, errors.TooManyRequestsResponse$inboundSchema),
    M.jsonErr(500, errors.InternalServerErrorResponse$inboundSchema),
    M.jsonErr(501, errors.NotImplementedResponse$inboundSchema),
    M.jsonErr(502, errors.BadGatewayResponse$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
