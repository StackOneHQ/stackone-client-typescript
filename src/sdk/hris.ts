/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { hrisBatchUploadEmployeeDocument } from "../funcs/hrisBatchUploadEmployeeDocument.js";
import { hrisCancelEmployeeTimeOffRequest } from "../funcs/hrisCancelEmployeeTimeOffRequest.js";
import { hrisCreateEmployee } from "../funcs/hrisCreateEmployee.js";
import { hrisCreateEmployeeEmployment } from "../funcs/hrisCreateEmployeeEmployment.js";
import { hrisCreateEmployeeSkill } from "../funcs/hrisCreateEmployeeSkill.js";
import { hrisCreateEmployeeTimeOffRequest } from "../funcs/hrisCreateEmployeeTimeOffRequest.js";
import { hrisCreateEmployeeWorkEligibilityRequest } from "../funcs/hrisCreateEmployeeWorkEligibilityRequest.js";
import {
  DownloadEmployeeDocumentAcceptEnum,
  hrisDownloadEmployeeDocument,
} from "../funcs/hrisDownloadEmployeeDocument.js";
import { hrisGetBenefit } from "../funcs/hrisGetBenefit.js";
import { hrisGetCompany } from "../funcs/hrisGetCompany.js";
import { hrisGetCompanyGroup } from "../funcs/hrisGetCompanyGroup.js";
import { hrisGetCostCenterGroup } from "../funcs/hrisGetCostCenterGroup.js";
import { hrisGetDepartmentGroup } from "../funcs/hrisGetDepartmentGroup.js";
import { hrisGetDivisionGroup } from "../funcs/hrisGetDivisionGroup.js";
import { hrisGetEmployee } from "../funcs/hrisGetEmployee.js";
import { hrisGetEmployeeCustomFieldDefinition } from "../funcs/hrisGetEmployeeCustomFieldDefinition.js";
import { hrisGetEmployeeDocument } from "../funcs/hrisGetEmployeeDocument.js";
import { hrisGetEmployeeDocumentCategory } from "../funcs/hrisGetEmployeeDocumentCategory.js";
import { hrisGetEmployeeEmployment } from "../funcs/hrisGetEmployeeEmployment.js";
import { hrisGetEmployeeSkill } from "../funcs/hrisGetEmployeeSkill.js";
import { hrisGetEmployeesTimeOffRequest } from "../funcs/hrisGetEmployeesTimeOffRequest.js";
import { hrisGetEmployeesWorkEligibility } from "../funcs/hrisGetEmployeesWorkEligibility.js";
import { hrisGetEmployeeTask } from "../funcs/hrisGetEmployeeTask.js";
import { hrisGetEmployeeTimeOffBalance } from "../funcs/hrisGetEmployeeTimeOffBalance.js";
import { hrisGetEmployment } from "../funcs/hrisGetEmployment.js";
import { hrisGetGroup } from "../funcs/hrisGetGroup.js";
import { hrisGetJob } from "../funcs/hrisGetJob.js";
import { hrisGetLocation } from "../funcs/hrisGetLocation.js";
import { hrisGetPosition } from "../funcs/hrisGetPosition.js";
import { hrisGetShift } from "../funcs/hrisGetShift.js";
import { hrisGetTask } from "../funcs/hrisGetTask.js";
import { hrisGetTeamGroup } from "../funcs/hrisGetTeamGroup.js";
import { hrisGetTimeEntries } from "../funcs/hrisGetTimeEntries.js";
import { hrisGetTimeOffPolicy } from "../funcs/hrisGetTimeOffPolicy.js";
import { hrisGetTimeOffRequest } from "../funcs/hrisGetTimeOffRequest.js";
import { hrisGetTimeOffType } from "../funcs/hrisGetTimeOffType.js";
import { hrisInviteEmployee } from "../funcs/hrisInviteEmployee.js";
import { hrisListBenefits } from "../funcs/hrisListBenefits.js";
import { hrisListCompanies } from "../funcs/hrisListCompanies.js";
import { hrisListCompaniesGroups } from "../funcs/hrisListCompaniesGroups.js";
import { hrisListCostCenterGroups } from "../funcs/hrisListCostCenterGroups.js";
import { hrisListDepartmentGroups } from "../funcs/hrisListDepartmentGroups.js";
import { hrisListDivisionGroups } from "../funcs/hrisListDivisionGroups.js";
import { hrisListEmployeeCategories } from "../funcs/hrisListEmployeeCategories.js";
import { hrisListEmployeeCustomFieldDefinitions } from "../funcs/hrisListEmployeeCustomFieldDefinitions.js";
import { hrisListEmployeeDocuments } from "../funcs/hrisListEmployeeDocuments.js";
import { hrisListEmployeeEmployments } from "../funcs/hrisListEmployeeEmployments.js";
import { hrisListEmployees } from "../funcs/hrisListEmployees.js";
import { hrisListEmployeeSkills } from "../funcs/hrisListEmployeeSkills.js";
import { hrisListEmployeeTasks } from "../funcs/hrisListEmployeeTasks.js";
import { hrisListEmployeeTimeOffBalances } from "../funcs/hrisListEmployeeTimeOffBalances.js";
import { hrisListEmployeeTimeOffPolicies } from "../funcs/hrisListEmployeeTimeOffPolicies.js";
import { hrisListEmployeeTimeOffRequests } from "../funcs/hrisListEmployeeTimeOffRequests.js";
import { hrisListEmployeeWorkEligibility } from "../funcs/hrisListEmployeeWorkEligibility.js";
import { hrisListEmployments } from "../funcs/hrisListEmployments.js";
import { hrisListGroups } from "../funcs/hrisListGroups.js";
import { hrisListJobs } from "../funcs/hrisListJobs.js";
import { hrisListLocations } from "../funcs/hrisListLocations.js";
import { hrisListPositions } from "../funcs/hrisListPositions.js";
import { hrisListShifts } from "../funcs/hrisListShifts.js";
import { hrisListTasks } from "../funcs/hrisListTasks.js";
import { hrisListTeamGroups } from "../funcs/hrisListTeamGroups.js";
import { hrisListTimeEntries } from "../funcs/hrisListTimeEntries.js";
import { hrisListTimeOffPolicies } from "../funcs/hrisListTimeOffPolicies.js";
import { hrisListTimeOffRequests } from "../funcs/hrisListTimeOffRequests.js";
import { hrisListTimeOffTypes } from "../funcs/hrisListTimeOffTypes.js";
import { hrisUpdateEmployee } from "../funcs/hrisUpdateEmployee.js";
import { hrisUpdateEmployeeEmployment } from "../funcs/hrisUpdateEmployeeEmployment.js";
import { hrisUpdateEmployeeTask } from "../funcs/hrisUpdateEmployeeTask.js";
import { hrisUpdateEmployeeTimeOffRequest } from "../funcs/hrisUpdateEmployeeTimeOffRequest.js";
import { hrisUpdateEmployeeWorkEligibilityRequest } from "../funcs/hrisUpdateEmployeeWorkEligibilityRequest.js";
import { hrisUploadEmployeeDocument } from "../funcs/hrisUploadEmployeeDocument.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { PageIterator, unwrapResultIterator } from "../sdk/types/operations.js";
import * as operations from "./models/operations/index.js";
import { unwrapAsync } from "./types/fp.js";

export { DownloadEmployeeDocumentAcceptEnum } from "../funcs/hrisDownloadEmployeeDocument.js";

export class Hris extends ClientSDK {
  /**
   * Batch Upload Employee Document
   */
  async batchUploadEmployeeDocument(
    request: operations.HrisBatchUploadEmployeeDocumentRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisBatchUploadEmployeeDocumentResponse> {
    return unwrapAsync(hrisBatchUploadEmployeeDocument(
      this,
      request,
      options,
    ));
  }

  /**
   * Cancel Employee Time Off Request
   */
  async cancelEmployeeTimeOffRequest(
    request: operations.HrisCancelEmployeeTimeOffRequestRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisCancelEmployeeTimeOffRequestResponse> {
    return unwrapAsync(hrisCancelEmployeeTimeOffRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Employee
   */
  async createEmployee(
    request: operations.HrisCreateEmployeeRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisCreateEmployeeResponse> {
    return unwrapAsync(hrisCreateEmployee(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Employee Employment
   */
  async createEmployeeEmployment(
    request: operations.HrisCreateEmployeeEmploymentRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisCreateEmployeeEmploymentResponse> {
    return unwrapAsync(hrisCreateEmployeeEmployment(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Employee Skill
   */
  async createEmployeeSkill(
    request: operations.HrisCreateEmployeeSkillRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisCreateEmployeeSkillResponse> {
    return unwrapAsync(hrisCreateEmployeeSkill(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Employee Time Off Request
   */
  async createEmployeeTimeOffRequest(
    request: operations.HrisCreateEmployeeTimeOffRequestRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisCreateEmployeeTimeOffRequestResponse> {
    return unwrapAsync(hrisCreateEmployeeTimeOffRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Employee Work Eligibility Request
   */
  async createEmployeeWorkEligibilityRequest(
    request: operations.HrisCreateEmployeeWorkEligibilityRequestRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisCreateEmployeeWorkEligibilityRequestResponse> {
    return unwrapAsync(hrisCreateEmployeeWorkEligibilityRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Download Employee Document
   */
  async downloadEmployeeDocument(
    request: operations.HrisDownloadEmployeeDocumentRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: DownloadEmployeeDocumentAcceptEnum;
    },
  ): Promise<operations.HrisDownloadEmployeeDocumentResponse> {
    return unwrapAsync(hrisDownloadEmployeeDocument(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Benefit
   */
  async getBenefit(
    request: operations.HrisGetBenefitRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetBenefitResponse> {
    return unwrapAsync(hrisGetBenefit(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Company
   */
  async getCompany(
    request: operations.HrisGetCompanyRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetCompanyResponse> {
    return unwrapAsync(hrisGetCompany(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Company Group
   */
  async getCompanyGroup(
    request: operations.HrisGetCompanyGroupRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetCompanyGroupResponse> {
    return unwrapAsync(hrisGetCompanyGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Cost Center Group
   */
  async getCostCenterGroup(
    request: operations.HrisGetCostCenterGroupRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetCostCenterGroupResponse> {
    return unwrapAsync(hrisGetCostCenterGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Department Group
   */
  async getDepartmentGroup(
    request: operations.HrisGetDepartmentGroupRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetDepartmentGroupResponse> {
    return unwrapAsync(hrisGetDepartmentGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Division Group
   */
  async getDivisionGroup(
    request: operations.HrisGetDivisionGroupRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetDivisionGroupResponse> {
    return unwrapAsync(hrisGetDivisionGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Employee
   */
  async getEmployee(
    request: operations.HrisGetEmployeeRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetEmployeeResponse> {
    return unwrapAsync(hrisGetEmployee(
      this,
      request,
      options,
    ));
  }

  /**
   * Get employee Custom Field Definition
   */
  async getEmployeeCustomFieldDefinition(
    request: operations.HrisGetEmployeeCustomFieldDefinitionRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetEmployeeCustomFieldDefinitionResponse> {
    return unwrapAsync(hrisGetEmployeeCustomFieldDefinition(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Employee Document
   */
  async getEmployeeDocument(
    request: operations.HrisGetEmployeeDocumentRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetEmployeeDocumentResponse> {
    return unwrapAsync(hrisGetEmployeeDocument(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Employee Document Category
   */
  async getEmployeeDocumentCategory(
    request: operations.HrisGetEmployeeDocumentCategoryRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetEmployeeDocumentCategoryResponse> {
    return unwrapAsync(hrisGetEmployeeDocumentCategory(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Employee Employment
   */
  async getEmployeeEmployment(
    request: operations.HrisGetEmployeeEmploymentRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetEmployeeEmploymentResponse> {
    return unwrapAsync(hrisGetEmployeeEmployment(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Employee Skill
   */
  async getEmployeeSkill(
    request: operations.HrisGetEmployeeSkillRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetEmployeeSkillResponse> {
    return unwrapAsync(hrisGetEmployeeSkill(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Employee Task
   */
  async getEmployeeTask(
    request: operations.HrisGetEmployeeTaskRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetEmployeeTaskResponse> {
    return unwrapAsync(hrisGetEmployeeTask(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Employee Time Off Balance
   */
  async getEmployeeTimeOffBalance(
    request: operations.HrisGetEmployeeTimeOffBalanceRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetEmployeeTimeOffBalanceResponse> {
    return unwrapAsync(hrisGetEmployeeTimeOffBalance(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Employees Time Off Request
   */
  async getEmployeesTimeOffRequest(
    request: operations.HrisGetEmployeesTimeOffRequestRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetEmployeesTimeOffRequestResponse> {
    return unwrapAsync(hrisGetEmployeesTimeOffRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Employees Work Eligibility
   */
  async getEmployeesWorkEligibility(
    request: operations.HrisGetEmployeesWorkEligibilityRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetEmployeesWorkEligibilityResponse> {
    return unwrapAsync(hrisGetEmployeesWorkEligibility(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Employment
   */
  async getEmployment(
    request: operations.HrisGetEmploymentRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetEmploymentResponse> {
    return unwrapAsync(hrisGetEmployment(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Group
   */
  async getGroup(
    request: operations.HrisGetGroupRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetGroupResponse> {
    return unwrapAsync(hrisGetGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Job
   */
  async getJob(
    request: operations.HrisGetJobRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetJobResponse> {
    return unwrapAsync(hrisGetJob(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Work Location
   */
  async getLocation(
    request: operations.HrisGetLocationRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetLocationResponse> {
    return unwrapAsync(hrisGetLocation(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Position
   */
  async getPosition(
    request: operations.HrisGetPositionRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetPositionResponse> {
    return unwrapAsync(hrisGetPosition(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Shift
   */
  async getShift(
    request: operations.HrisGetShiftRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetShiftResponse> {
    return unwrapAsync(hrisGetShift(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Task
   */
  async getTask(
    request: operations.HrisGetTaskRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetTaskResponse> {
    return unwrapAsync(hrisGetTask(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Team Group
   */
  async getTeamGroup(
    request: operations.HrisGetTeamGroupRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetTeamGroupResponse> {
    return unwrapAsync(hrisGetTeamGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Time Entry
   */
  async getTimeEntries(
    request: operations.HrisGetTimeEntriesRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetTimeEntriesResponse> {
    return unwrapAsync(hrisGetTimeEntries(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Time Off Policy
   */
  async getTimeOffPolicy(
    request: operations.HrisGetTimeOffPolicyRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetTimeOffPolicyResponse> {
    return unwrapAsync(hrisGetTimeOffPolicy(
      this,
      request,
      options,
    ));
  }

  /**
   * Get time off request
   */
  async getTimeOffRequest(
    request: operations.HrisGetTimeOffRequestRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetTimeOffRequestResponse> {
    return unwrapAsync(hrisGetTimeOffRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Get time off type
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async getTimeOffType(
    request: operations.HrisGetTimeOffTypeRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetTimeOffTypeResponse> {
    return unwrapAsync(hrisGetTimeOffType(
      this,
      request,
      options,
    ));
  }

  /**
   * Invite Employee
   */
  async inviteEmployee(
    request: operations.HrisInviteEmployeeRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisInviteEmployeeResponse> {
    return unwrapAsync(hrisInviteEmployee(
      this,
      request,
      options,
    ));
  }

  /**
   * List benefits
   */
  async listBenefits(
    request: operations.HrisListBenefitsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.HrisListBenefitsResponse, { cursor: string }>
  > {
    return unwrapResultIterator(hrisListBenefits(
      this,
      request,
      options,
    ));
  }

  /**
   * List Companies
   */
  async listCompanies(
    request: operations.HrisListCompaniesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.HrisListCompaniesResponse, { cursor: string }>
  > {
    return unwrapResultIterator(hrisListCompanies(
      this,
      request,
      options,
    ));
  }

  /**
   * List Companies Groups
   */
  async listCompaniesGroups(
    request: operations.HrisListCompaniesGroupsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.HrisListCompaniesGroupsResponse, { cursor: string }>
  > {
    return unwrapResultIterator(hrisListCompaniesGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * List Cost Center Groups
   */
  async listCostCenterGroups(
    request: operations.HrisListCostCenterGroupsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.HrisListCostCenterGroupsResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(hrisListCostCenterGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * List Department Groups
   */
  async listDepartmentGroups(
    request: operations.HrisListDepartmentGroupsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.HrisListDepartmentGroupsResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(hrisListDepartmentGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * List Division Groups
   */
  async listDivisionGroups(
    request: operations.HrisListDivisionGroupsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.HrisListDivisionGroupsResponse, { cursor: string }>
  > {
    return unwrapResultIterator(hrisListDivisionGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * List Employee Document Categories
   */
  async listEmployeeCategories(
    request: operations.HrisListEmployeeCategoriesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.HrisListEmployeeCategoriesResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(hrisListEmployeeCategories(
      this,
      request,
      options,
    ));
  }

  /**
   * List employee Custom Field Definitions
   */
  async listEmployeeCustomFieldDefinitions(
    request: operations.HrisListEmployeeCustomFieldDefinitionsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.HrisListEmployeeCustomFieldDefinitionsResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(hrisListEmployeeCustomFieldDefinitions(
      this,
      request,
      options,
    ));
  }

  /**
   * List Employee Documents
   */
  async listEmployeeDocuments(
    request: operations.HrisListEmployeeDocumentsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.HrisListEmployeeDocumentsResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(hrisListEmployeeDocuments(
      this,
      request,
      options,
    ));
  }

  /**
   * List Employee Employments
   */
  async listEmployeeEmployments(
    request: operations.HrisListEmployeeEmploymentsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.HrisListEmployeeEmploymentsResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(hrisListEmployeeEmployments(
      this,
      request,
      options,
    ));
  }

  /**
   * List Employee Skills
   */
  async listEmployeeSkills(
    request: operations.HrisListEmployeeSkillsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.HrisListEmployeeSkillsResponse, { cursor: string }>
  > {
    return unwrapResultIterator(hrisListEmployeeSkills(
      this,
      request,
      options,
    ));
  }

  /**
   * List Employee Tasks
   */
  async listEmployeeTasks(
    request: operations.HrisListEmployeeTasksRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.HrisListEmployeeTasksResponse, { cursor: string }>
  > {
    return unwrapResultIterator(hrisListEmployeeTasks(
      this,
      request,
      options,
    ));
  }

  /**
   * List Employee Time Off Balances
   */
  async listEmployeeTimeOffBalances(
    request: operations.HrisListEmployeeTimeOffBalancesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.HrisListEmployeeTimeOffBalancesResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(hrisListEmployeeTimeOffBalances(
      this,
      request,
      options,
    ));
  }

  /**
   * List Assigned Time Off Policies
   */
  async listEmployeeTimeOffPolicies(
    request: operations.HrisListEmployeeTimeOffPoliciesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.HrisListEmployeeTimeOffPoliciesResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(hrisListEmployeeTimeOffPolicies(
      this,
      request,
      options,
    ));
  }

  /**
   * List Employee Time Off Requests
   */
  async listEmployeeTimeOffRequests(
    request: operations.HrisListEmployeeTimeOffRequestsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.HrisListEmployeeTimeOffRequestsResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(hrisListEmployeeTimeOffRequests(
      this,
      request,
      options,
    ));
  }

  /**
   * List Employee Work Eligibility
   */
  async listEmployeeWorkEligibility(
    request: operations.HrisListEmployeeWorkEligibilityRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.HrisListEmployeeWorkEligibilityResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(hrisListEmployeeWorkEligibility(
      this,
      request,
      options,
    ));
  }

  /**
   * List Employees
   */
  async listEmployees(
    request: operations.HrisListEmployeesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.HrisListEmployeesResponse, { cursor: string }>
  > {
    return unwrapResultIterator(hrisListEmployees(
      this,
      request,
      options,
    ));
  }

  /**
   * List Employments
   */
  async listEmployments(
    request: operations.HrisListEmploymentsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.HrisListEmploymentsResponse, { cursor: string }>
  > {
    return unwrapResultIterator(hrisListEmployments(
      this,
      request,
      options,
    ));
  }

  /**
   * List Groups
   */
  async listGroups(
    request: operations.HrisListGroupsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.HrisListGroupsResponse, { cursor: string }>
  > {
    return unwrapResultIterator(hrisListGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * List Jobs
   */
  async listJobs(
    request: operations.HrisListJobsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.HrisListJobsResponse, { cursor: string }>
  > {
    return unwrapResultIterator(hrisListJobs(
      this,
      request,
      options,
    ));
  }

  /**
   * List Work Locations
   */
  async listLocations(
    request: operations.HrisListLocationsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.HrisListLocationsResponse, { cursor: string }>
  > {
    return unwrapResultIterator(hrisListLocations(
      this,
      request,
      options,
    ));
  }

  /**
   * List Positions
   */
  async listPositions(
    request: operations.HrisListPositionsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.HrisListPositionsResponse, { cursor: string }>
  > {
    return unwrapResultIterator(hrisListPositions(
      this,
      request,
      options,
    ));
  }

  /**
   * List Shifts
   */
  async listShifts(
    request: operations.HrisListShiftsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.HrisListShiftsResponse, { cursor: string }>
  > {
    return unwrapResultIterator(hrisListShifts(
      this,
      request,
      options,
    ));
  }

  /**
   * List Tasks
   */
  async listTasks(
    request: operations.HrisListTasksRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.HrisListTasksResponse, { cursor: string }>
  > {
    return unwrapResultIterator(hrisListTasks(
      this,
      request,
      options,
    ));
  }

  /**
   * List Team Groups
   */
  async listTeamGroups(
    request: operations.HrisListTeamGroupsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.HrisListTeamGroupsResponse, { cursor: string }>
  > {
    return unwrapResultIterator(hrisListTeamGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * List Time Entries
   */
  async listTimeEntries(
    request: operations.HrisListTimeEntriesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.HrisListTimeEntriesResponse, { cursor: string }>
  > {
    return unwrapResultIterator(hrisListTimeEntries(
      this,
      request,
      options,
    ));
  }

  /**
   * List Time Off Policies
   */
  async listTimeOffPolicies(
    request: operations.HrisListTimeOffPoliciesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.HrisListTimeOffPoliciesResponse, { cursor: string }>
  > {
    return unwrapResultIterator(hrisListTimeOffPolicies(
      this,
      request,
      options,
    ));
  }

  /**
   * List time off requests
   */
  async listTimeOffRequests(
    request: operations.HrisListTimeOffRequestsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.HrisListTimeOffRequestsResponse, { cursor: string }>
  > {
    return unwrapResultIterator(hrisListTimeOffRequests(
      this,
      request,
      options,
    ));
  }

  /**
   * List time off types
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async listTimeOffTypes(
    request: operations.HrisListTimeOffTypesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.HrisListTimeOffTypesResponse, { cursor: string }>
  > {
    return unwrapResultIterator(hrisListTimeOffTypes(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Employee
   */
  async updateEmployee(
    request: operations.HrisUpdateEmployeeRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisUpdateEmployeeResponse> {
    return unwrapAsync(hrisUpdateEmployee(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Employee Employment
   */
  async updateEmployeeEmployment(
    request: operations.HrisUpdateEmployeeEmploymentRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisUpdateEmployeeEmploymentResponse> {
    return unwrapAsync(hrisUpdateEmployeeEmployment(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Employee Task
   */
  async updateEmployeeTask(
    request: operations.HrisUpdateEmployeeTaskRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisUpdateEmployeeTaskResponse> {
    return unwrapAsync(hrisUpdateEmployeeTask(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Employee Time Off Request
   */
  async updateEmployeeTimeOffRequest(
    request: operations.HrisUpdateEmployeeTimeOffRequestRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisUpdateEmployeeTimeOffRequestResponse> {
    return unwrapAsync(hrisUpdateEmployeeTimeOffRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Employee Work Eligibility Request
   */
  async updateEmployeeWorkEligibilityRequest(
    request: operations.HrisUpdateEmployeeWorkEligibilityRequestRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisUpdateEmployeeWorkEligibilityRequestResponse> {
    return unwrapAsync(hrisUpdateEmployeeWorkEligibilityRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Upload Employee Document
   */
  async uploadEmployeeDocument(
    request: operations.HrisUploadEmployeeDocumentRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisUploadEmployeeDocumentResponse> {
    return unwrapAsync(hrisUploadEmployeeDocument(
      this,
      request,
      options,
    ));
  }
}
