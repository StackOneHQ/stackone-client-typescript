/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { hrisBatchUploadEmployeeDocument } from "../funcs/hrisBatchUploadEmployeeDocument.js";
import { hrisCreateEmployee } from "../funcs/hrisCreateEmployee.js";
import { hrisCreateEmployeeEmployment } from "../funcs/hrisCreateEmployeeEmployment.js";
import { hrisCreateEmployeeTimeOffRequest } from "../funcs/hrisCreateEmployeeTimeOffRequest.js";
import { hrisCreateEmployeeWorkEligibilityRequest } from "../funcs/hrisCreateEmployeeWorkEligibilityRequest.js";
import { hrisCreateTimeOffRequest } from "../funcs/hrisCreateTimeOffRequest.js";
import { hrisDownloadEmployeeDocument } from "../funcs/hrisDownloadEmployeeDocument.js";
import { hrisGetBenefit } from "../funcs/hrisGetBenefit.js";
import { hrisGetCompany } from "../funcs/hrisGetCompany.js";
import { hrisGetCostCenterGroup } from "../funcs/hrisGetCostCenterGroup.js";
import { hrisGetDepartmentGroup } from "../funcs/hrisGetDepartmentGroup.js";
import { hrisGetEmployee } from "../funcs/hrisGetEmployee.js";
import { hrisGetEmployeeDocument } from "../funcs/hrisGetEmployeeDocument.js";
import { hrisGetEmployeeDocumentCategory } from "../funcs/hrisGetEmployeeDocumentCategory.js";
import { hrisGetEmployeeEmployment } from "../funcs/hrisGetEmployeeEmployment.js";
import { hrisGetEmployeesTimeOffRequest } from "../funcs/hrisGetEmployeesTimeOffRequest.js";
import { hrisGetEmployeesWorkEligibility } from "../funcs/hrisGetEmployeesWorkEligibility.js";
import { hrisGetEmployment } from "../funcs/hrisGetEmployment.js";
import { hrisGetGroup } from "../funcs/hrisGetGroup.js";
import { hrisGetJob } from "../funcs/hrisGetJob.js";
import { hrisGetLocation } from "../funcs/hrisGetLocation.js";
import { hrisGetTimeOffRequest } from "../funcs/hrisGetTimeOffRequest.js";
import { hrisListBenefits } from "../funcs/hrisListBenefits.js";
import { hrisListCompanies } from "../funcs/hrisListCompanies.js";
import { hrisListCostCenterGroups } from "../funcs/hrisListCostCenterGroups.js";
import { hrisListDepartmentGroups } from "../funcs/hrisListDepartmentGroups.js";
import { hrisListEmployeeCategories } from "../funcs/hrisListEmployeeCategories.js";
import { hrisListEmployeeDocuments } from "../funcs/hrisListEmployeeDocuments.js";
import { hrisListEmployeeEmployments } from "../funcs/hrisListEmployeeEmployments.js";
import { hrisListEmployees } from "../funcs/hrisListEmployees.js";
import { hrisListEmployeeTimeOffRequests } from "../funcs/hrisListEmployeeTimeOffRequests.js";
import { hrisListEmployeeWorkEligibility } from "../funcs/hrisListEmployeeWorkEligibility.js";
import { hrisListEmployments } from "../funcs/hrisListEmployments.js";
import { hrisListGroups } from "../funcs/hrisListGroups.js";
import { hrisListJobs } from "../funcs/hrisListJobs.js";
import { hrisListLocations } from "../funcs/hrisListLocations.js";
import { hrisListTimeOffRequests } from "../funcs/hrisListTimeOffRequests.js";
import { hrisUpdateEmployee } from "../funcs/hrisUpdateEmployee.js";
import { hrisUpdateEmployeeEmployment } from "../funcs/hrisUpdateEmployeeEmployment.js";
import { hrisUpdateEmployeeWorkEligibilityRequest } from "../funcs/hrisUpdateEmployeeWorkEligibilityRequest.js";
import { hrisUpdateTimeOffRequest } from "../funcs/hrisUpdateTimeOffRequest.js";
import { hrisUploadEmployeeDocument } from "../funcs/hrisUploadEmployeeDocument.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { PageIterator, unwrapResultIterator } from "../sdk/types/operations.js";
import * as operations from "./models/operations/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Hris extends ClientSDK {
  /**
   * Batch Upload Employee Document
   */
  async batchUploadEmployeeDocument(
    request: operations.HrisBatchUploadEmployeeDocumentRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisBatchUploadEmployeeDocumentResponse> {
    return unwrapAsync(hrisBatchUploadEmployeeDocument(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates an employee
   */
  async createEmployee(
    request: operations.HrisCreateEmployeeRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisCreateEmployeeResponse> {
    return unwrapAsync(hrisCreateEmployee(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Employee Employment
   */
  async createEmployeeEmployment(
    request: operations.HrisCreateEmployeeEmploymentRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisCreateEmployeeEmploymentResponse> {
    return unwrapAsync(hrisCreateEmployeeEmployment(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Employee Time Off Request
   */
  async createEmployeeTimeOffRequest(
    request: operations.HrisCreateEmployeeTimeOffRequestRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisCreateEmployeeTimeOffRequestResponse> {
    return unwrapAsync(hrisCreateEmployeeTimeOffRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Employee Work Eligibility Request
   */
  async createEmployeeWorkEligibilityRequest(
    request: operations.HrisCreateEmployeeWorkEligibilityRequestRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisCreateEmployeeWorkEligibilityRequestResponse> {
    return unwrapAsync(hrisCreateEmployeeWorkEligibilityRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates a time off request
   */
  async createTimeOffRequest(
    request: operations.HrisCreateTimeOffRequestRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisCreateTimeOffRequestResponse> {
    return unwrapAsync(hrisCreateTimeOffRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Download Employee Document
   */
  async downloadEmployeeDocument(
    request: operations.HrisDownloadEmployeeDocumentRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisDownloadEmployeeDocumentResponse> {
    return unwrapAsync(hrisDownloadEmployeeDocument(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Benefit
   */
  async getBenefit(
    request: operations.HrisGetBenefitRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetBenefitResponse> {
    return unwrapAsync(hrisGetBenefit(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Company
   */
  async getCompany(
    request: operations.HrisGetCompanyRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetCompanyResponse> {
    return unwrapAsync(hrisGetCompany(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Cost Center Group
   */
  async getCostCenterGroup(
    request: operations.HrisGetCostCenterGroupRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetCostCenterGroupResponse> {
    return unwrapAsync(hrisGetCostCenterGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Department Group
   */
  async getDepartmentGroup(
    request: operations.HrisGetDepartmentGroupRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetDepartmentGroupResponse> {
    return unwrapAsync(hrisGetDepartmentGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Employee
   */
  async getEmployee(
    request: operations.HrisGetEmployeeRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetEmployeeResponse> {
    return unwrapAsync(hrisGetEmployee(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Employee Document
   */
  async getEmployeeDocument(
    request: operations.HrisGetEmployeeDocumentRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetEmployeeDocumentResponse> {
    return unwrapAsync(hrisGetEmployeeDocument(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Employee Document Category
   */
  async getEmployeeDocumentCategory(
    request: operations.HrisGetEmployeeDocumentCategoryRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetEmployeeDocumentCategoryResponse> {
    return unwrapAsync(hrisGetEmployeeDocumentCategory(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Employee Employment
   */
  async getEmployeeEmployment(
    request: operations.HrisGetEmployeeEmploymentRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetEmployeeEmploymentResponse> {
    return unwrapAsync(hrisGetEmployeeEmployment(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Employees Time Off Request
   */
  async getEmployeesTimeOffRequest(
    request: operations.HrisGetEmployeesTimeOffRequestRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetEmployeesTimeOffRequestResponse> {
    return unwrapAsync(hrisGetEmployeesTimeOffRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Employees Work Eligibility
   */
  async getEmployeesWorkEligibility(
    request: operations.HrisGetEmployeesWorkEligibilityRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetEmployeesWorkEligibilityResponse> {
    return unwrapAsync(hrisGetEmployeesWorkEligibility(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Employment
   */
  async getEmployment(
    request: operations.HrisGetEmploymentRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetEmploymentResponse> {
    return unwrapAsync(hrisGetEmployment(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Group
   */
  async getGroup(
    request: operations.HrisGetGroupRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetGroupResponse> {
    return unwrapAsync(hrisGetGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Job
   */
  async getJob(
    request: operations.HrisGetJobRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetJobResponse> {
    return unwrapAsync(hrisGetJob(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Location
   */
  async getLocation(
    request: operations.HrisGetLocationRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetLocationResponse> {
    return unwrapAsync(hrisGetLocation(
      this,
      request,
      options,
    ));
  }

  /**
   * Get time off request
   */
  async getTimeOffRequest(
    request: operations.HrisGetTimeOffRequestRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisGetTimeOffRequestResponse> {
    return unwrapAsync(hrisGetTimeOffRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * List benefits
   */
  async listBenefits(
    request: operations.HrisListBenefitsRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisListBenefitsResponse> {
    return unwrapAsync(hrisListBenefits(
      this,
      request,
      options,
    ));
  }

  /**
   * List Companies
   */
  async listCompanies(
    request: operations.HrisListCompaniesRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisListCompaniesResponse> {
    return unwrapAsync(hrisListCompanies(
      this,
      request,
      options,
    ));
  }

  /**
   * List Cost Center Groups
   */
  async listCostCenterGroups(
    request: operations.HrisListCostCenterGroupsRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisListCostCenterGroupsResponse> {
    return unwrapAsync(hrisListCostCenterGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * List Department Groups
   */
  async listDepartmentGroups(
    request: operations.HrisListDepartmentGroupsRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisListDepartmentGroupsResponse> {
    return unwrapAsync(hrisListDepartmentGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * List Employee Document Categories
   */
  async listEmployeeCategories(
    request: operations.HrisListEmployeeCategoriesRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisListEmployeeCategoriesResponse> {
    return unwrapAsync(hrisListEmployeeCategories(
      this,
      request,
      options,
    ));
  }

  /**
   * List Employee Documents
   */
  async listEmployeeDocuments(
    request: operations.HrisListEmployeeDocumentsRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisListEmployeeDocumentsResponse> {
    return unwrapAsync(hrisListEmployeeDocuments(
      this,
      request,
      options,
    ));
  }

  /**
   * List Employee Employments
   */
  async listEmployeeEmployments(
    request: operations.HrisListEmployeeEmploymentsRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisListEmployeeEmploymentsResponse> {
    return unwrapAsync(hrisListEmployeeEmployments(
      this,
      request,
      options,
    ));
  }

  /**
   * List Employee Time Off Requests
   */
  async listEmployeeTimeOffRequests(
    request: operations.HrisListEmployeeTimeOffRequestsRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisListEmployeeTimeOffRequestsResponse> {
    return unwrapAsync(hrisListEmployeeTimeOffRequests(
      this,
      request,
      options,
    ));
  }

  /**
   * List Employee Work Eligibility
   */
  async listEmployeeWorkEligibility(
    request: operations.HrisListEmployeeWorkEligibilityRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisListEmployeeWorkEligibilityResponse> {
    return unwrapAsync(hrisListEmployeeWorkEligibility(
      this,
      request,
      options,
    ));
  }

  /**
   * List Employees
   */
  async listEmployees(
    request: operations.HrisListEmployeesRequest,
    options?: RequestOptions,
  ): Promise<PageIterator<operations.HrisListEmployeesResponse>> {
    return unwrapResultIterator(hrisListEmployees(
      this,
      request,
      options,
    ));
  }

  /**
   * List Employments
   */
  async listEmployments(
    request: operations.HrisListEmploymentsRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisListEmploymentsResponse> {
    return unwrapAsync(hrisListEmployments(
      this,
      request,
      options,
    ));
  }

  /**
   * List Groups
   */
  async listGroups(
    request: operations.HrisListGroupsRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisListGroupsResponse> {
    return unwrapAsync(hrisListGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * List Jobs
   */
  async listJobs(
    request: operations.HrisListJobsRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisListJobsResponse> {
    return unwrapAsync(hrisListJobs(
      this,
      request,
      options,
    ));
  }

  /**
   * List locations
   */
  async listLocations(
    request: operations.HrisListLocationsRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisListLocationsResponse> {
    return unwrapAsync(hrisListLocations(
      this,
      request,
      options,
    ));
  }

  /**
   * List time off requests
   */
  async listTimeOffRequests(
    request: operations.HrisListTimeOffRequestsRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisListTimeOffRequestsResponse> {
    return unwrapAsync(hrisListTimeOffRequests(
      this,
      request,
      options,
    ));
  }

  /**
   * Updates an employee
   */
  async updateEmployee(
    request: operations.HrisUpdateEmployeeRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisUpdateEmployeeResponse> {
    return unwrapAsync(hrisUpdateEmployee(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Employee Employment
   */
  async updateEmployeeEmployment(
    request: operations.HrisUpdateEmployeeEmploymentRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisUpdateEmployeeEmploymentResponse> {
    return unwrapAsync(hrisUpdateEmployeeEmployment(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Employee Work Eligibility Request
   */
  async updateEmployeeWorkEligibilityRequest(
    request: operations.HrisUpdateEmployeeWorkEligibilityRequestRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisUpdateEmployeeWorkEligibilityRequestResponse> {
    return unwrapAsync(hrisUpdateEmployeeWorkEligibilityRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Update time off request
   */
  async updateTimeOffRequest(
    request: operations.HrisUpdateTimeOffRequestRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisUpdateTimeOffRequestResponse> {
    return unwrapAsync(hrisUpdateTimeOffRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Upload Employee Document
   */
  async uploadEmployeeDocument(
    request: operations.HrisUploadEmployeeDocumentRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisUploadEmployeeDocumentResponse> {
    return unwrapAsync(hrisUploadEmployeeDocument(
      this,
      request,
      options,
    ));
  }
}
