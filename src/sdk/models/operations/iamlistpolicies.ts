/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * Filter parameters that allow greater customisation of the list response
 */
export type IamListPoliciesQueryParamFilter = {
  /**
   * Use a string with a date to only select results updated after that given date
   */
  updatedAfter?: string | null | undefined;
};

export type IamListPoliciesRequest = {
  /**
   * The comma separated list of fields that will be expanded in the response
   */
  expand?: string | null | undefined;
  /**
   * The comma separated list of fields that will be returned in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  /**
   * Filter parameters that allow greater customisation of the list response
   */
  filter?: IamListPoliciesQueryParamFilter | null | undefined;
  /**
   * The unified cursor
   */
  next?: string | null | undefined;
  /**
   * The page number of the results to fetch
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  page?: string | null | undefined;
  /**
   * The number of results per page
   */
  pageSize?: string | null | undefined;
  /**
   * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
   */
  proxy?: { [k: string]: any } | null | undefined;
  /**
   * Indicates that the raw request result is returned
   */
  raw?: boolean | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  updatedAfter?: string | null | undefined;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type IamListPoliciesResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * The list of policies was retrieved.
   */
  iamPoliciesPaginated?: shared.IamPoliciesPaginated | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const IamListPoliciesQueryParamFilter$inboundSchema: z.ZodType<
  IamListPoliciesQueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  updated_after: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "updated_after": "updatedAfter",
  });
});

/** @internal */
export type IamListPoliciesQueryParamFilter$Outbound = {
  updated_after?: string | null | undefined;
};

/** @internal */
export const IamListPoliciesQueryParamFilter$outboundSchema: z.ZodType<
  IamListPoliciesQueryParamFilter$Outbound,
  z.ZodTypeDef,
  IamListPoliciesQueryParamFilter
> = z.object({
  updatedAfter: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    updatedAfter: "updated_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IamListPoliciesQueryParamFilter$ {
  /** @deprecated use `IamListPoliciesQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema = IamListPoliciesQueryParamFilter$inboundSchema;
  /** @deprecated use `IamListPoliciesQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema = IamListPoliciesQueryParamFilter$outboundSchema;
  /** @deprecated use `IamListPoliciesQueryParamFilter$Outbound` instead. */
  export type Outbound = IamListPoliciesQueryParamFilter$Outbound;
}

export function iamListPoliciesQueryParamFilterToJSON(
  iamListPoliciesQueryParamFilter: IamListPoliciesQueryParamFilter,
): string {
  return JSON.stringify(
    IamListPoliciesQueryParamFilter$outboundSchema.parse(
      iamListPoliciesQueryParamFilter,
    ),
  );
}

export function iamListPoliciesQueryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<IamListPoliciesQueryParamFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IamListPoliciesQueryParamFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IamListPoliciesQueryParamFilter' from JSON`,
  );
}

/** @internal */
export const IamListPoliciesRequest$inboundSchema: z.ZodType<
  IamListPoliciesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  expand: z.nullable(z.string()).optional(),
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => IamListPoliciesQueryParamFilter$inboundSchema),
  ).optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  page_size: z.nullable(z.string().default("25")),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean().default(false)),
  updated_after: z.nullable(z.string()).optional(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "updated_after": "updatedAfter",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type IamListPoliciesRequest$Outbound = {
  expand?: string | null | undefined;
  fields?: string | null | undefined;
  filter?: IamListPoliciesQueryParamFilter$Outbound | null | undefined;
  next?: string | null | undefined;
  page?: string | null | undefined;
  page_size: string | null;
  proxy?: { [k: string]: any } | null | undefined;
  raw: boolean | null;
  updated_after?: string | null | undefined;
  "x-account-id": string;
};

/** @internal */
export const IamListPoliciesRequest$outboundSchema: z.ZodType<
  IamListPoliciesRequest$Outbound,
  z.ZodTypeDef,
  IamListPoliciesRequest
> = z.object({
  expand: z.nullable(z.string()).optional(),
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => IamListPoliciesQueryParamFilter$outboundSchema),
  ).optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  pageSize: z.nullable(z.string().default("25")),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean().default(false)),
  updatedAfter: z.nullable(z.string()).optional(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    updatedAfter: "updated_after",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IamListPoliciesRequest$ {
  /** @deprecated use `IamListPoliciesRequest$inboundSchema` instead. */
  export const inboundSchema = IamListPoliciesRequest$inboundSchema;
  /** @deprecated use `IamListPoliciesRequest$outboundSchema` instead. */
  export const outboundSchema = IamListPoliciesRequest$outboundSchema;
  /** @deprecated use `IamListPoliciesRequest$Outbound` instead. */
  export type Outbound = IamListPoliciesRequest$Outbound;
}

export function iamListPoliciesRequestToJSON(
  iamListPoliciesRequest: IamListPoliciesRequest,
): string {
  return JSON.stringify(
    IamListPoliciesRequest$outboundSchema.parse(iamListPoliciesRequest),
  );
}

export function iamListPoliciesRequestFromJSON(
  jsonString: string,
): SafeParseResult<IamListPoliciesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IamListPoliciesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IamListPoliciesRequest' from JSON`,
  );
}

/** @internal */
export const IamListPoliciesResponse$inboundSchema: z.ZodType<
  IamListPoliciesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  IamPoliciesPaginated: shared.IamPoliciesPaginated$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "IamPoliciesPaginated": "iamPoliciesPaginated",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type IamListPoliciesResponse$Outbound = {
  ContentType: string;
  IamPoliciesPaginated?: shared.IamPoliciesPaginated$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const IamListPoliciesResponse$outboundSchema: z.ZodType<
  IamListPoliciesResponse$Outbound,
  z.ZodTypeDef,
  IamListPoliciesResponse
> = z.object({
  contentType: z.string(),
  iamPoliciesPaginated: shared.IamPoliciesPaginated$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    iamPoliciesPaginated: "IamPoliciesPaginated",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IamListPoliciesResponse$ {
  /** @deprecated use `IamListPoliciesResponse$inboundSchema` instead. */
  export const inboundSchema = IamListPoliciesResponse$inboundSchema;
  /** @deprecated use `IamListPoliciesResponse$outboundSchema` instead. */
  export const outboundSchema = IamListPoliciesResponse$outboundSchema;
  /** @deprecated use `IamListPoliciesResponse$Outbound` instead. */
  export type Outbound = IamListPoliciesResponse$Outbound;
}

export function iamListPoliciesResponseToJSON(
  iamListPoliciesResponse: IamListPoliciesResponse,
): string {
  return JSON.stringify(
    IamListPoliciesResponse$outboundSchema.parse(iamListPoliciesResponse),
  );
}

export function iamListPoliciesResponseFromJSON(
  jsonString: string,
): SafeParseResult<IamListPoliciesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IamListPoliciesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IamListPoliciesResponse' from JSON`,
  );
}
