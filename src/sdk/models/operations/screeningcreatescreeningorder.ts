/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type ScreeningCreateScreeningOrderRequest = {
  screeningCreateOrderRequestDto: shared.ScreeningCreateOrderRequestDto;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type ScreeningCreateScreeningOrderResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * The screening order was created.
   */
  createResult?: shared.CreateResult | undefined;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const ScreeningCreateScreeningOrderRequest$inboundSchema: z.ZodType<
  ScreeningCreateScreeningOrderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ScreeningCreateOrderRequestDto:
    shared.ScreeningCreateOrderRequestDto$inboundSchema,
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "ScreeningCreateOrderRequestDto": "screeningCreateOrderRequestDto",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type ScreeningCreateScreeningOrderRequest$Outbound = {
  ScreeningCreateOrderRequestDto:
    shared.ScreeningCreateOrderRequestDto$Outbound;
  "x-account-id": string;
};

/** @internal */
export const ScreeningCreateScreeningOrderRequest$outboundSchema: z.ZodType<
  ScreeningCreateScreeningOrderRequest$Outbound,
  z.ZodTypeDef,
  ScreeningCreateScreeningOrderRequest
> = z.object({
  screeningCreateOrderRequestDto:
    shared.ScreeningCreateOrderRequestDto$outboundSchema,
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    screeningCreateOrderRequestDto: "ScreeningCreateOrderRequestDto",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScreeningCreateScreeningOrderRequest$ {
  /** @deprecated use `ScreeningCreateScreeningOrderRequest$inboundSchema` instead. */
  export const inboundSchema =
    ScreeningCreateScreeningOrderRequest$inboundSchema;
  /** @deprecated use `ScreeningCreateScreeningOrderRequest$outboundSchema` instead. */
  export const outboundSchema =
    ScreeningCreateScreeningOrderRequest$outboundSchema;
  /** @deprecated use `ScreeningCreateScreeningOrderRequest$Outbound` instead. */
  export type Outbound = ScreeningCreateScreeningOrderRequest$Outbound;
}

export function screeningCreateScreeningOrderRequestToJSON(
  screeningCreateScreeningOrderRequest: ScreeningCreateScreeningOrderRequest,
): string {
  return JSON.stringify(
    ScreeningCreateScreeningOrderRequest$outboundSchema.parse(
      screeningCreateScreeningOrderRequest,
    ),
  );
}

export function screeningCreateScreeningOrderRequestFromJSON(
  jsonString: string,
): SafeParseResult<ScreeningCreateScreeningOrderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ScreeningCreateScreeningOrderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScreeningCreateScreeningOrderRequest' from JSON`,
  );
}

/** @internal */
export const ScreeningCreateScreeningOrderResponse$inboundSchema: z.ZodType<
  ScreeningCreateScreeningOrderResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  CreateResult: shared.CreateResult$inboundSchema.optional(),

  Headers: z.record(z.array(z.string())).default({}),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "CreateResult": "createResult",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type ScreeningCreateScreeningOrderResponse$Outbound = {
  ContentType: string;
  CreateResult?: shared.CreateResult$Outbound | undefined;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const ScreeningCreateScreeningOrderResponse$outboundSchema: z.ZodType<
  ScreeningCreateScreeningOrderResponse$Outbound,
  z.ZodTypeDef,
  ScreeningCreateScreeningOrderResponse
> = z.object({
  contentType: z.string(),
  createResult: shared.CreateResult$outboundSchema.optional(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    createResult: "CreateResult",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScreeningCreateScreeningOrderResponse$ {
  /** @deprecated use `ScreeningCreateScreeningOrderResponse$inboundSchema` instead. */
  export const inboundSchema =
    ScreeningCreateScreeningOrderResponse$inboundSchema;
  /** @deprecated use `ScreeningCreateScreeningOrderResponse$outboundSchema` instead. */
  export const outboundSchema =
    ScreeningCreateScreeningOrderResponse$outboundSchema;
  /** @deprecated use `ScreeningCreateScreeningOrderResponse$Outbound` instead. */
  export type Outbound = ScreeningCreateScreeningOrderResponse$Outbound;
}

export function screeningCreateScreeningOrderResponseToJSON(
  screeningCreateScreeningOrderResponse: ScreeningCreateScreeningOrderResponse,
): string {
  return JSON.stringify(
    ScreeningCreateScreeningOrderResponse$outboundSchema.parse(
      screeningCreateScreeningOrderResponse,
    ),
  );
}

export function screeningCreateScreeningOrderResponseFromJSON(
  jsonString: string,
): SafeParseResult<ScreeningCreateScreeningOrderResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ScreeningCreateScreeningOrderResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScreeningCreateScreeningOrderResponse' from JSON`,
  );
}
