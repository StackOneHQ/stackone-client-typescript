/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * Filter parameters that allow greater customisation of the list response
 */
export type HrisListEmployeeTasksQueryParamFilter = {
  /**
   * Use a string with a date to only select results updated after that given date
   */
  updatedAfter?: Date | null | undefined;
};

export type HrisListEmployeeTasksRequest = {
  /**
   * The comma separated list of fields that will be expanded in the response
   */
  expand?: string | null | undefined;
  /**
   * The comma separated list of fields that will be returned in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  /**
   * Filter parameters that allow greater customisation of the list response
   */
  filter?: HrisListEmployeeTasksQueryParamFilter | null | undefined;
  id: string;
  /**
   * The unified cursor
   */
  next?: string | null | undefined;
  /**
   * The page number of the results to fetch
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  page?: string | null | undefined;
  /**
   * The number of results per page (default value is 25)
   */
  pageSize?: string | null | undefined;
  /**
   * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
   */
  proxy?: { [k: string]: any } | null | undefined;
  /**
   * Indicates that the raw request result should be returned in addition to the mapped result (default value is false)
   */
  raw?: boolean | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  updatedAfter?: string | null | undefined;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type HrisListEmployeeTasksResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The list of tasks for the employee with the given identifier was retrieved.
   */
  tasksPaginated?: shared.TasksPaginated | undefined;
};

/** @internal */
export const HrisListEmployeeTasksQueryParamFilter$inboundSchema: z.ZodType<
  HrisListEmployeeTasksQueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  updated_after: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "updated_after": "updatedAfter",
  });
});

/** @internal */
export type HrisListEmployeeTasksQueryParamFilter$Outbound = {
  updated_after?: string | null | undefined;
};

/** @internal */
export const HrisListEmployeeTasksQueryParamFilter$outboundSchema: z.ZodType<
  HrisListEmployeeTasksQueryParamFilter$Outbound,
  z.ZodTypeDef,
  HrisListEmployeeTasksQueryParamFilter
> = z.object({
  updatedAfter: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    updatedAfter: "updated_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisListEmployeeTasksQueryParamFilter$ {
  /** @deprecated use `HrisListEmployeeTasksQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema =
    HrisListEmployeeTasksQueryParamFilter$inboundSchema;
  /** @deprecated use `HrisListEmployeeTasksQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema =
    HrisListEmployeeTasksQueryParamFilter$outboundSchema;
  /** @deprecated use `HrisListEmployeeTasksQueryParamFilter$Outbound` instead. */
  export type Outbound = HrisListEmployeeTasksQueryParamFilter$Outbound;
}

export function hrisListEmployeeTasksQueryParamFilterToJSON(
  hrisListEmployeeTasksQueryParamFilter: HrisListEmployeeTasksQueryParamFilter,
): string {
  return JSON.stringify(
    HrisListEmployeeTasksQueryParamFilter$outboundSchema.parse(
      hrisListEmployeeTasksQueryParamFilter,
    ),
  );
}

export function hrisListEmployeeTasksQueryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<HrisListEmployeeTasksQueryParamFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisListEmployeeTasksQueryParamFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisListEmployeeTasksQueryParamFilter' from JSON`,
  );
}

/** @internal */
export const HrisListEmployeeTasksRequest$inboundSchema: z.ZodType<
  HrisListEmployeeTasksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  expand: z.nullable(z.string()).optional(),
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => HrisListEmployeeTasksQueryParamFilter$inboundSchema),
  ).optional(),
  id: z.string(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  page_size: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  updated_after: z.nullable(z.string()).optional(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "updated_after": "updatedAfter",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type HrisListEmployeeTasksRequest$Outbound = {
  expand?: string | null | undefined;
  fields?: string | null | undefined;
  filter?: HrisListEmployeeTasksQueryParamFilter$Outbound | null | undefined;
  id: string;
  next?: string | null | undefined;
  page?: string | null | undefined;
  page_size?: string | null | undefined;
  proxy?: { [k: string]: any } | null | undefined;
  raw?: boolean | null | undefined;
  updated_after?: string | null | undefined;
  "x-account-id": string;
};

/** @internal */
export const HrisListEmployeeTasksRequest$outboundSchema: z.ZodType<
  HrisListEmployeeTasksRequest$Outbound,
  z.ZodTypeDef,
  HrisListEmployeeTasksRequest
> = z.object({
  expand: z.nullable(z.string()).optional(),
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => HrisListEmployeeTasksQueryParamFilter$outboundSchema),
  ).optional(),
  id: z.string(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  pageSize: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  updatedAfter: z.nullable(z.string()).optional(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    updatedAfter: "updated_after",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisListEmployeeTasksRequest$ {
  /** @deprecated use `HrisListEmployeeTasksRequest$inboundSchema` instead. */
  export const inboundSchema = HrisListEmployeeTasksRequest$inboundSchema;
  /** @deprecated use `HrisListEmployeeTasksRequest$outboundSchema` instead. */
  export const outboundSchema = HrisListEmployeeTasksRequest$outboundSchema;
  /** @deprecated use `HrisListEmployeeTasksRequest$Outbound` instead. */
  export type Outbound = HrisListEmployeeTasksRequest$Outbound;
}

export function hrisListEmployeeTasksRequestToJSON(
  hrisListEmployeeTasksRequest: HrisListEmployeeTasksRequest,
): string {
  return JSON.stringify(
    HrisListEmployeeTasksRequest$outboundSchema.parse(
      hrisListEmployeeTasksRequest,
    ),
  );
}

export function hrisListEmployeeTasksRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisListEmployeeTasksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisListEmployeeTasksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisListEmployeeTasksRequest' from JSON`,
  );
}

/** @internal */
export const HrisListEmployeeTasksResponse$inboundSchema: z.ZodType<
  HrisListEmployeeTasksResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  TasksPaginated: shared.TasksPaginated$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "TasksPaginated": "tasksPaginated",
  });
});

/** @internal */
export type HrisListEmployeeTasksResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
  TasksPaginated?: shared.TasksPaginated$Outbound | undefined;
};

/** @internal */
export const HrisListEmployeeTasksResponse$outboundSchema: z.ZodType<
  HrisListEmployeeTasksResponse$Outbound,
  z.ZodTypeDef,
  HrisListEmployeeTasksResponse
> = z.object({
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  tasksPaginated: shared.TasksPaginated$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    tasksPaginated: "TasksPaginated",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisListEmployeeTasksResponse$ {
  /** @deprecated use `HrisListEmployeeTasksResponse$inboundSchema` instead. */
  export const inboundSchema = HrisListEmployeeTasksResponse$inboundSchema;
  /** @deprecated use `HrisListEmployeeTasksResponse$outboundSchema` instead. */
  export const outboundSchema = HrisListEmployeeTasksResponse$outboundSchema;
  /** @deprecated use `HrisListEmployeeTasksResponse$Outbound` instead. */
  export type Outbound = HrisListEmployeeTasksResponse$Outbound;
}

export function hrisListEmployeeTasksResponseToJSON(
  hrisListEmployeeTasksResponse: HrisListEmployeeTasksResponse,
): string {
  return JSON.stringify(
    HrisListEmployeeTasksResponse$outboundSchema.parse(
      hrisListEmployeeTasksResponse,
    ),
  );
}

export function hrisListEmployeeTasksResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisListEmployeeTasksResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisListEmployeeTasksResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisListEmployeeTasksResponse' from JSON`,
  );
}
