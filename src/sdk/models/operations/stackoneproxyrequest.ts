/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

export type StackoneProxyRequestRequest = {
  /**
   * The request body
   */
  proxyRequestBody: shared.ProxyRequestBody;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type StackoneProxyRequestResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const StackoneProxyRequestRequest$inboundSchema: z.ZodType<
  StackoneProxyRequestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ProxyRequestBody: shared.ProxyRequestBody$inboundSchema,
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "ProxyRequestBody": "proxyRequestBody",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type StackoneProxyRequestRequest$Outbound = {
  ProxyRequestBody: shared.ProxyRequestBody$Outbound;
  "x-account-id": string;
};

/** @internal */
export const StackoneProxyRequestRequest$outboundSchema: z.ZodType<
  StackoneProxyRequestRequest$Outbound,
  z.ZodTypeDef,
  StackoneProxyRequestRequest
> = z.object({
  proxyRequestBody: shared.ProxyRequestBody$outboundSchema,
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    proxyRequestBody: "ProxyRequestBody",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StackoneProxyRequestRequest$ {
  /** @deprecated use `StackoneProxyRequestRequest$inboundSchema` instead. */
  export const inboundSchema = StackoneProxyRequestRequest$inboundSchema;
  /** @deprecated use `StackoneProxyRequestRequest$outboundSchema` instead. */
  export const outboundSchema = StackoneProxyRequestRequest$outboundSchema;
  /** @deprecated use `StackoneProxyRequestRequest$Outbound` instead. */
  export type Outbound = StackoneProxyRequestRequest$Outbound;
}

/** @internal */
export const StackoneProxyRequestResponse$inboundSchema: z.ZodType<
  StackoneProxyRequestResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type StackoneProxyRequestResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const StackoneProxyRequestResponse$outboundSchema: z.ZodType<
  StackoneProxyRequestResponse$Outbound,
  z.ZodTypeDef,
  StackoneProxyRequestResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StackoneProxyRequestResponse$ {
  /** @deprecated use `StackoneProxyRequestResponse$inboundSchema` instead. */
  export const inboundSchema = StackoneProxyRequestResponse$inboundSchema;
  /** @deprecated use `StackoneProxyRequestResponse$outboundSchema` instead. */
  export const outboundSchema = StackoneProxyRequestResponse$outboundSchema;
  /** @deprecated use `StackoneProxyRequestResponse$Outbound` instead. */
  export type Outbound = StackoneProxyRequestResponse$Outbound;
}
