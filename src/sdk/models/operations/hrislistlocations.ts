/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

/**
 * Filter parameters that allow greater customisation of the list response
 */
export type HrisListLocationsQueryParamFilter = {
    /**
     * Use a string with a date to only select results updated after that given date
     */
    updatedAfter?: string | null | undefined;
};

export type HrisListLocationsRequest = {
    /**
     * The comma separated list of fields that will be returned in the response (if empty, all fields are returned)
     */
    fields?: string | null | undefined;
    /**
     * Filter parameters that allow greater customisation of the list response
     */
    filter?: HrisListLocationsQueryParamFilter | null | undefined;
    /**
     * The unified cursor
     */
    next?: string | null | undefined;
    /**
     * The page number of the results to fetch
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    page?: string | null | undefined;
    /**
     * The number of results per page
     */
    pageSize?: string | null | undefined;
    /**
     * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
     */
    proxy?: Record<string, any> | null | undefined;
    /**
     * Indicates that the raw request result is returned
     */
    raw?: boolean | null | undefined;
    /**
     * Use a string with a date to only select results updated after that given date
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    updatedAfter?: string | null | undefined;
    /**
     * The account identifier
     */
    xAccountId: string;
};

export type HrisListLocationsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * The list of Locations was retrieved.
     */
    hrisLocationsPaginated?: shared.HRISLocationsPaginated | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace HrisListLocationsQueryParamFilter$ {
    export const inboundSchema: z.ZodType<
        HrisListLocationsQueryParamFilter,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            updated_after: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.updated_after === undefined ? null : { updatedAfter: v.updated_after }),
            };
        });

    export type Outbound = {
        updated_after?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        HrisListLocationsQueryParamFilter
    > = z
        .object({
            updatedAfter: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.updatedAfter === undefined ? null : { updated_after: v.updatedAfter }),
            };
        });
}

/** @internal */
export namespace HrisListLocationsRequest$ {
    export const inboundSchema: z.ZodType<HrisListLocationsRequest, z.ZodTypeDef, unknown> = z
        .object({
            fields: z.nullable(z.string()).optional(),
            filter: z
                .nullable(z.lazy(() => HrisListLocationsQueryParamFilter$.inboundSchema))
                .optional(),
            next: z.nullable(z.string()).optional(),
            page: z.nullable(z.string()).optional(),
            page_size: z.nullable(z.string().default("25")),
            proxy: z.nullable(z.record(z.any())).optional(),
            raw: z.nullable(z.boolean().default(false)),
            updated_after: z.nullable(z.string()).optional(),
            "x-account-id": z.string(),
        })
        .transform((v) => {
            return {
                ...(v.fields === undefined ? null : { fields: v.fields }),
                ...(v.filter === undefined ? null : { filter: v.filter }),
                ...(v.next === undefined ? null : { next: v.next }),
                ...(v.page === undefined ? null : { page: v.page }),
                pageSize: v.page_size,
                ...(v.proxy === undefined ? null : { proxy: v.proxy }),
                raw: v.raw,
                ...(v.updated_after === undefined ? null : { updatedAfter: v.updated_after }),
                xAccountId: v["x-account-id"],
            };
        });

    export type Outbound = {
        fields?: string | null | undefined;
        filter?: HrisListLocationsQueryParamFilter$.Outbound | null | undefined;
        next?: string | null | undefined;
        page?: string | null | undefined;
        page_size: string | null;
        proxy?: Record<string, any> | null | undefined;
        raw: boolean | null;
        updated_after?: string | null | undefined;
        "x-account-id": string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HrisListLocationsRequest> = z
        .object({
            fields: z.nullable(z.string()).optional(),
            filter: z
                .nullable(z.lazy(() => HrisListLocationsQueryParamFilter$.outboundSchema))
                .optional(),
            next: z.nullable(z.string()).optional(),
            page: z.nullable(z.string()).optional(),
            pageSize: z.nullable(z.string().default("25")),
            proxy: z.nullable(z.record(z.any())).optional(),
            raw: z.nullable(z.boolean().default(false)),
            updatedAfter: z.nullable(z.string()).optional(),
            xAccountId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.fields === undefined ? null : { fields: v.fields }),
                ...(v.filter === undefined ? null : { filter: v.filter }),
                ...(v.next === undefined ? null : { next: v.next }),
                ...(v.page === undefined ? null : { page: v.page }),
                page_size: v.pageSize,
                ...(v.proxy === undefined ? null : { proxy: v.proxy }),
                raw: v.raw,
                ...(v.updatedAfter === undefined ? null : { updated_after: v.updatedAfter }),
                "x-account-id": v.xAccountId,
            };
        });
}

/** @internal */
export namespace HrisListLocationsResponse$ {
    export const inboundSchema: z.ZodType<HrisListLocationsResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            HRISLocationsPaginated: shared.HRISLocationsPaginated$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.HRISLocationsPaginated === undefined
                    ? null
                    : { hrisLocationsPaginated: v.HRISLocationsPaginated }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        HRISLocationsPaginated?: shared.HRISLocationsPaginated$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HrisListLocationsResponse> = z
        .object({
            contentType: z.string(),
            hrisLocationsPaginated: shared.HRISLocationsPaginated$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.hrisLocationsPaginated === undefined
                    ? null
                    : { HRISLocationsPaginated: v.hrisLocationsPaginated }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
