/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * Filter to allow filtering of only active courses
 */
export type QueryParamActive = boolean | string;

/**
 * LMS Courses Filter
 */
export type LmsListCoursesQueryParamFilter = {
  /**
   * Filter to allow filtering of only active courses
   */
  active?: boolean | string | null | undefined;
  /**
   * Filter to select courses by external_reference
   */
  externalReference?: string | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   */
  updatedAfter?: Date | null | undefined;
};

export type LmsListCoursesRequest = {
  /**
   * The comma separated list of fields that will be returned in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  /**
   * LMS Courses Filter
   */
  filter?: LmsListCoursesQueryParamFilter | null | undefined;
  /**
   * The unified cursor
   */
  next?: string | null | undefined;
  /**
   * The page number of the results to fetch
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  page?: string | null | undefined;
  /**
   * The number of results per page (default value is 25)
   */
  pageSize?: string | null | undefined;
  /**
   * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
   */
  proxy?: { [k: string]: any } | null | undefined;
  /**
   * Indicates that the raw request result should be returned in addition to the mapped result (default value is false)
   */
  raw?: boolean | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  updatedAfter?: Date | null | undefined;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type LmsListCoursesResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * The list of courses was retrieved.
   */
  coursePaginated?: shared.CoursePaginated | undefined;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const QueryParamActive$inboundSchema: z.ZodType<
  QueryParamActive,
  z.ZodTypeDef,
  unknown
> = z.union([z.boolean(), z.string()]);

/** @internal */
export type QueryParamActive$Outbound = boolean | string;

/** @internal */
export const QueryParamActive$outboundSchema: z.ZodType<
  QueryParamActive$Outbound,
  z.ZodTypeDef,
  QueryParamActive
> = z.union([z.boolean(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamActive$ {
  /** @deprecated use `QueryParamActive$inboundSchema` instead. */
  export const inboundSchema = QueryParamActive$inboundSchema;
  /** @deprecated use `QueryParamActive$outboundSchema` instead. */
  export const outboundSchema = QueryParamActive$outboundSchema;
  /** @deprecated use `QueryParamActive$Outbound` instead. */
  export type Outbound = QueryParamActive$Outbound;
}

export function queryParamActiveToJSON(
  queryParamActive: QueryParamActive,
): string {
  return JSON.stringify(
    QueryParamActive$outboundSchema.parse(queryParamActive),
  );
}

export function queryParamActiveFromJSON(
  jsonString: string,
): SafeParseResult<QueryParamActive, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParamActive$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParamActive' from JSON`,
  );
}

/** @internal */
export const LmsListCoursesQueryParamFilter$inboundSchema: z.ZodType<
  LmsListCoursesQueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  active: z.nullable(z.union([z.boolean(), z.string()])).optional(),
  external_reference: z.nullable(z.string()).optional(),
  updated_after: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "external_reference": "externalReference",
    "updated_after": "updatedAfter",
  });
});

/** @internal */
export type LmsListCoursesQueryParamFilter$Outbound = {
  active?: boolean | string | null | undefined;
  external_reference?: string | null | undefined;
  updated_after?: string | null | undefined;
};

/** @internal */
export const LmsListCoursesQueryParamFilter$outboundSchema: z.ZodType<
  LmsListCoursesQueryParamFilter$Outbound,
  z.ZodTypeDef,
  LmsListCoursesQueryParamFilter
> = z.object({
  active: z.nullable(z.union([z.boolean(), z.string()])).optional(),
  externalReference: z.nullable(z.string()).optional(),
  updatedAfter: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    externalReference: "external_reference",
    updatedAfter: "updated_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LmsListCoursesQueryParamFilter$ {
  /** @deprecated use `LmsListCoursesQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema = LmsListCoursesQueryParamFilter$inboundSchema;
  /** @deprecated use `LmsListCoursesQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema = LmsListCoursesQueryParamFilter$outboundSchema;
  /** @deprecated use `LmsListCoursesQueryParamFilter$Outbound` instead. */
  export type Outbound = LmsListCoursesQueryParamFilter$Outbound;
}

export function lmsListCoursesQueryParamFilterToJSON(
  lmsListCoursesQueryParamFilter: LmsListCoursesQueryParamFilter,
): string {
  return JSON.stringify(
    LmsListCoursesQueryParamFilter$outboundSchema.parse(
      lmsListCoursesQueryParamFilter,
    ),
  );
}

export function lmsListCoursesQueryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<LmsListCoursesQueryParamFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LmsListCoursesQueryParamFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LmsListCoursesQueryParamFilter' from JSON`,
  );
}

/** @internal */
export const LmsListCoursesRequest$inboundSchema: z.ZodType<
  LmsListCoursesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(z.lazy(() => LmsListCoursesQueryParamFilter$inboundSchema))
    .optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  page_size: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  updated_after: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "updated_after": "updatedAfter",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type LmsListCoursesRequest$Outbound = {
  fields?: string | null | undefined;
  filter?: LmsListCoursesQueryParamFilter$Outbound | null | undefined;
  next?: string | null | undefined;
  page?: string | null | undefined;
  page_size?: string | null | undefined;
  proxy?: { [k: string]: any } | null | undefined;
  raw?: boolean | null | undefined;
  updated_after?: string | null | undefined;
  "x-account-id": string;
};

/** @internal */
export const LmsListCoursesRequest$outboundSchema: z.ZodType<
  LmsListCoursesRequest$Outbound,
  z.ZodTypeDef,
  LmsListCoursesRequest
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => LmsListCoursesQueryParamFilter$outboundSchema),
  ).optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  pageSize: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  updatedAfter: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    updatedAfter: "updated_after",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LmsListCoursesRequest$ {
  /** @deprecated use `LmsListCoursesRequest$inboundSchema` instead. */
  export const inboundSchema = LmsListCoursesRequest$inboundSchema;
  /** @deprecated use `LmsListCoursesRequest$outboundSchema` instead. */
  export const outboundSchema = LmsListCoursesRequest$outboundSchema;
  /** @deprecated use `LmsListCoursesRequest$Outbound` instead. */
  export type Outbound = LmsListCoursesRequest$Outbound;
}

export function lmsListCoursesRequestToJSON(
  lmsListCoursesRequest: LmsListCoursesRequest,
): string {
  return JSON.stringify(
    LmsListCoursesRequest$outboundSchema.parse(lmsListCoursesRequest),
  );
}

export function lmsListCoursesRequestFromJSON(
  jsonString: string,
): SafeParseResult<LmsListCoursesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LmsListCoursesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LmsListCoursesRequest' from JSON`,
  );
}

/** @internal */
export const LmsListCoursesResponse$inboundSchema: z.ZodType<
  LmsListCoursesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  CoursePaginated: shared.CoursePaginated$inboundSchema.optional(),
  Headers: z.record(z.array(z.string())),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "CoursePaginated": "coursePaginated",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type LmsListCoursesResponse$Outbound = {
  ContentType: string;
  CoursePaginated?: shared.CoursePaginated$Outbound | undefined;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const LmsListCoursesResponse$outboundSchema: z.ZodType<
  LmsListCoursesResponse$Outbound,
  z.ZodTypeDef,
  LmsListCoursesResponse
> = z.object({
  contentType: z.string(),
  coursePaginated: shared.CoursePaginated$outboundSchema.optional(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    coursePaginated: "CoursePaginated",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LmsListCoursesResponse$ {
  /** @deprecated use `LmsListCoursesResponse$inboundSchema` instead. */
  export const inboundSchema = LmsListCoursesResponse$inboundSchema;
  /** @deprecated use `LmsListCoursesResponse$outboundSchema` instead. */
  export const outboundSchema = LmsListCoursesResponse$outboundSchema;
  /** @deprecated use `LmsListCoursesResponse$Outbound` instead. */
  export type Outbound = LmsListCoursesResponse$Outbound;
}

export function lmsListCoursesResponseToJSON(
  lmsListCoursesResponse: LmsListCoursesResponse,
): string {
  return JSON.stringify(
    LmsListCoursesResponse$outboundSchema.parse(lmsListCoursesResponse),
  );
}

export function lmsListCoursesResponseFromJSON(
  jsonString: string,
): SafeParseResult<LmsListCoursesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LmsListCoursesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LmsListCoursesResponse' from JSON`,
  );
}
