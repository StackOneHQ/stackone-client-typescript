/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TicketingDownloadTicketingAttachmentRequest = {
  /**
   * The export format of the file
   */
  exportFormat?: string | null | undefined;
  /**
   * The format to download the file in
   */
  format?: string | null | undefined;
  id: string;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type TicketingDownloadTicketingAttachmentResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The document related to the application with the given identifiers was retrieved.
   */
  responseStream?: ReadableStream<Uint8Array> | undefined;
};

/** @internal */
export const TicketingDownloadTicketingAttachmentRequest$inboundSchema:
  z.ZodType<
    TicketingDownloadTicketingAttachmentRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    export_format: z.nullable(z.string()).optional(),
    format: z.nullable(z.string()).optional(),
    id: z.string(),
    "x-account-id": z.string(),
  }).transform((v) => {
    return remap$(v, {
      "export_format": "exportFormat",
      "x-account-id": "xAccountId",
    });
  });

/** @internal */
export type TicketingDownloadTicketingAttachmentRequest$Outbound = {
  export_format?: string | null | undefined;
  format?: string | null | undefined;
  id: string;
  "x-account-id": string;
};

/** @internal */
export const TicketingDownloadTicketingAttachmentRequest$outboundSchema:
  z.ZodType<
    TicketingDownloadTicketingAttachmentRequest$Outbound,
    z.ZodTypeDef,
    TicketingDownloadTicketingAttachmentRequest
  > = z.object({
    exportFormat: z.nullable(z.string()).optional(),
    format: z.nullable(z.string()).optional(),
    id: z.string(),
    xAccountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      exportFormat: "export_format",
      xAccountId: "x-account-id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingDownloadTicketingAttachmentRequest$ {
  /** @deprecated use `TicketingDownloadTicketingAttachmentRequest$inboundSchema` instead. */
  export const inboundSchema =
    TicketingDownloadTicketingAttachmentRequest$inboundSchema;
  /** @deprecated use `TicketingDownloadTicketingAttachmentRequest$outboundSchema` instead. */
  export const outboundSchema =
    TicketingDownloadTicketingAttachmentRequest$outboundSchema;
  /** @deprecated use `TicketingDownloadTicketingAttachmentRequest$Outbound` instead. */
  export type Outbound = TicketingDownloadTicketingAttachmentRequest$Outbound;
}

export function ticketingDownloadTicketingAttachmentRequestToJSON(
  ticketingDownloadTicketingAttachmentRequest:
    TicketingDownloadTicketingAttachmentRequest,
): string {
  return JSON.stringify(
    TicketingDownloadTicketingAttachmentRequest$outboundSchema.parse(
      ticketingDownloadTicketingAttachmentRequest,
    ),
  );
}

export function ticketingDownloadTicketingAttachmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  TicketingDownloadTicketingAttachmentRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TicketingDownloadTicketingAttachmentRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TicketingDownloadTicketingAttachmentRequest' from JSON`,
  );
}

/** @internal */
export const TicketingDownloadTicketingAttachmentResponse$inboundSchema:
  z.ZodType<
    TicketingDownloadTicketingAttachmentResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    Headers: z.record(z.array(z.string())),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    "response-stream": z.instanceof(ReadableStream<Uint8Array>).optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "Headers": "headers",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "response-stream": "responseStream",
    });
  });

/** @internal */
export type TicketingDownloadTicketingAttachmentResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
  "response-stream"?: ReadableStream<Uint8Array> | undefined;
};

/** @internal */
export const TicketingDownloadTicketingAttachmentResponse$outboundSchema:
  z.ZodType<
    TicketingDownloadTicketingAttachmentResponse$Outbound,
    z.ZodTypeDef,
    TicketingDownloadTicketingAttachmentResponse
  > = z.object({
    contentType: z.string(),
    headers: z.record(z.array(z.string())),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    responseStream: z.instanceof(ReadableStream<Uint8Array>).optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      headers: "Headers",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      responseStream: "response-stream",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingDownloadTicketingAttachmentResponse$ {
  /** @deprecated use `TicketingDownloadTicketingAttachmentResponse$inboundSchema` instead. */
  export const inboundSchema =
    TicketingDownloadTicketingAttachmentResponse$inboundSchema;
  /** @deprecated use `TicketingDownloadTicketingAttachmentResponse$outboundSchema` instead. */
  export const outboundSchema =
    TicketingDownloadTicketingAttachmentResponse$outboundSchema;
  /** @deprecated use `TicketingDownloadTicketingAttachmentResponse$Outbound` instead. */
  export type Outbound = TicketingDownloadTicketingAttachmentResponse$Outbound;
}

export function ticketingDownloadTicketingAttachmentResponseToJSON(
  ticketingDownloadTicketingAttachmentResponse:
    TicketingDownloadTicketingAttachmentResponse,
): string {
  return JSON.stringify(
    TicketingDownloadTicketingAttachmentResponse$outboundSchema.parse(
      ticketingDownloadTicketingAttachmentResponse,
    ),
  );
}

export function ticketingDownloadTicketingAttachmentResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  TicketingDownloadTicketingAttachmentResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TicketingDownloadTicketingAttachmentResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TicketingDownloadTicketingAttachmentResponse' from JSON`,
  );
}
