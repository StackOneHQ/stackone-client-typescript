/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type LmsCreateUserCompletionRequest = {
  lmsCreateCompletionRequestDto: shared.LmsCreateCompletionRequestDto;
  id: string;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type LmsCreateUserCompletionResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * The completion was created successfully.
   */
  createResult?: shared.CreateResult | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const LmsCreateUserCompletionRequest$inboundSchema: z.ZodType<
  LmsCreateUserCompletionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  LmsCreateCompletionRequestDto:
    shared.LmsCreateCompletionRequestDto$inboundSchema,
  id: z.string(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "LmsCreateCompletionRequestDto": "lmsCreateCompletionRequestDto",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type LmsCreateUserCompletionRequest$Outbound = {
  LmsCreateCompletionRequestDto: shared.LmsCreateCompletionRequestDto$Outbound;
  id: string;
  "x-account-id": string;
};

/** @internal */
export const LmsCreateUserCompletionRequest$outboundSchema: z.ZodType<
  LmsCreateUserCompletionRequest$Outbound,
  z.ZodTypeDef,
  LmsCreateUserCompletionRequest
> = z.object({
  lmsCreateCompletionRequestDto:
    shared.LmsCreateCompletionRequestDto$outboundSchema,
  id: z.string(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    lmsCreateCompletionRequestDto: "LmsCreateCompletionRequestDto",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LmsCreateUserCompletionRequest$ {
  /** @deprecated use `LmsCreateUserCompletionRequest$inboundSchema` instead. */
  export const inboundSchema = LmsCreateUserCompletionRequest$inboundSchema;
  /** @deprecated use `LmsCreateUserCompletionRequest$outboundSchema` instead. */
  export const outboundSchema = LmsCreateUserCompletionRequest$outboundSchema;
  /** @deprecated use `LmsCreateUserCompletionRequest$Outbound` instead. */
  export type Outbound = LmsCreateUserCompletionRequest$Outbound;
}

export function lmsCreateUserCompletionRequestToJSON(
  lmsCreateUserCompletionRequest: LmsCreateUserCompletionRequest,
): string {
  return JSON.stringify(
    LmsCreateUserCompletionRequest$outboundSchema.parse(
      lmsCreateUserCompletionRequest,
    ),
  );
}

export function lmsCreateUserCompletionRequestFromJSON(
  jsonString: string,
): SafeParseResult<LmsCreateUserCompletionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LmsCreateUserCompletionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LmsCreateUserCompletionRequest' from JSON`,
  );
}

/** @internal */
export const LmsCreateUserCompletionResponse$inboundSchema: z.ZodType<
  LmsCreateUserCompletionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  CreateResult: shared.CreateResult$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "CreateResult": "createResult",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type LmsCreateUserCompletionResponse$Outbound = {
  ContentType: string;
  CreateResult?: shared.CreateResult$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const LmsCreateUserCompletionResponse$outboundSchema: z.ZodType<
  LmsCreateUserCompletionResponse$Outbound,
  z.ZodTypeDef,
  LmsCreateUserCompletionResponse
> = z.object({
  contentType: z.string(),
  createResult: shared.CreateResult$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    createResult: "CreateResult",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LmsCreateUserCompletionResponse$ {
  /** @deprecated use `LmsCreateUserCompletionResponse$inboundSchema` instead. */
  export const inboundSchema = LmsCreateUserCompletionResponse$inboundSchema;
  /** @deprecated use `LmsCreateUserCompletionResponse$outboundSchema` instead. */
  export const outboundSchema = LmsCreateUserCompletionResponse$outboundSchema;
  /** @deprecated use `LmsCreateUserCompletionResponse$Outbound` instead. */
  export type Outbound = LmsCreateUserCompletionResponse$Outbound;
}

export function lmsCreateUserCompletionResponseToJSON(
  lmsCreateUserCompletionResponse: LmsCreateUserCompletionResponse,
): string {
  return JSON.stringify(
    LmsCreateUserCompletionResponse$outboundSchema.parse(
      lmsCreateUserCompletionResponse,
    ),
  );
}

export function lmsCreateUserCompletionResponseFromJSON(
  jsonString: string,
): SafeParseResult<LmsCreateUserCompletionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LmsCreateUserCompletionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LmsCreateUserCompletionResponse' from JSON`,
  );
}
