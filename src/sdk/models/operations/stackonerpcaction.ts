/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type StackoneRpcActionResponse = {
  /**
   * Action response
   */
  actionsRpcResponse?: shared.ActionsRpcResponse | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const StackoneRpcActionResponse$inboundSchema: z.ZodType<
  StackoneRpcActionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ActionsRpcResponse: shared.ActionsRpcResponse$inboundSchema.optional(),
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ActionsRpcResponse": "actionsRpcResponse",
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type StackoneRpcActionResponse$Outbound = {
  ActionsRpcResponse?: shared.ActionsRpcResponse$Outbound | undefined;
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const StackoneRpcActionResponse$outboundSchema: z.ZodType<
  StackoneRpcActionResponse$Outbound,
  z.ZodTypeDef,
  StackoneRpcActionResponse
> = z.object({
  actionsRpcResponse: shared.ActionsRpcResponse$outboundSchema.optional(),
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    actionsRpcResponse: "ActionsRpcResponse",
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StackoneRpcActionResponse$ {
  /** @deprecated use `StackoneRpcActionResponse$inboundSchema` instead. */
  export const inboundSchema = StackoneRpcActionResponse$inboundSchema;
  /** @deprecated use `StackoneRpcActionResponse$outboundSchema` instead. */
  export const outboundSchema = StackoneRpcActionResponse$outboundSchema;
  /** @deprecated use `StackoneRpcActionResponse$Outbound` instead. */
  export type Outbound = StackoneRpcActionResponse$Outbound;
}

export function stackoneRpcActionResponseToJSON(
  stackoneRpcActionResponse: StackoneRpcActionResponse,
): string {
  return JSON.stringify(
    StackoneRpcActionResponse$outboundSchema.parse(stackoneRpcActionResponse),
  );
}

export function stackoneRpcActionResponseFromJSON(
  jsonString: string,
): SafeParseResult<StackoneRpcActionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StackoneRpcActionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StackoneRpcActionResponse' from JSON`,
  );
}
