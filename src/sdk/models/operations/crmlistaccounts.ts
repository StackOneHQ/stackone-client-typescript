/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

/**
 * Filter parameters that allow greater customisation of the list response
 */
export type CrmListAccountsQueryParamFilter = {
    /**
     * Use a string with a date to only select results updated after that given date
     */
    updatedAfter?: string | null | undefined;
};

export type CrmListAccountsRequest = {
    /**
     * The comma separated list of fields that will be returned in the response (if empty, all fields are returned)
     */
    fields?: string | null | undefined;
    /**
     * Filter parameters that allow greater customisation of the list response
     */
    filter?: CrmListAccountsQueryParamFilter | null | undefined;
    /**
     * The unified cursor
     */
    next?: string | null | undefined;
    /**
     * The page number of the results to fetch
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    page?: string | null | undefined;
    /**
     * The number of results per page
     */
    pageSize?: string | null | undefined;
    /**
     * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
     */
    proxy?: { [k: string]: any } | null | undefined;
    /**
     * Indicates that the raw request result is returned
     */
    raw?: boolean | null | undefined;
    /**
     * Use a string with a date to only select results updated after that given date
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    updatedAfter?: string | null | undefined;
    /**
     * The account identifier
     */
    xAccountId: string;
};

export type CrmListAccountsResponse = {
    /**
     * The list of accounts was retrieved.
     */
    accountsPaginated?: shared.AccountsPaginated | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const CrmListAccountsQueryParamFilter$inboundSchema: z.ZodType<
    CrmListAccountsQueryParamFilter,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        updated_after: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            updated_after: "updatedAfter",
        });
    });

/** @internal */
export type CrmListAccountsQueryParamFilter$Outbound = {
    updated_after?: string | null | undefined;
};

/** @internal */
export const CrmListAccountsQueryParamFilter$outboundSchema: z.ZodType<
    CrmListAccountsQueryParamFilter$Outbound,
    z.ZodTypeDef,
    CrmListAccountsQueryParamFilter
> = z
    .object({
        updatedAfter: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            updatedAfter: "updated_after",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmListAccountsQueryParamFilter$ {
    /** @deprecated use `CrmListAccountsQueryParamFilter$inboundSchema` instead. */
    export const inboundSchema = CrmListAccountsQueryParamFilter$inboundSchema;
    /** @deprecated use `CrmListAccountsQueryParamFilter$outboundSchema` instead. */
    export const outboundSchema = CrmListAccountsQueryParamFilter$outboundSchema;
    /** @deprecated use `CrmListAccountsQueryParamFilter$Outbound` instead. */
    export type Outbound = CrmListAccountsQueryParamFilter$Outbound;
}

/** @internal */
export const CrmListAccountsRequest$inboundSchema: z.ZodType<
    CrmListAccountsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        fields: z.nullable(z.string()).optional(),
        filter: z.nullable(z.lazy(() => CrmListAccountsQueryParamFilter$inboundSchema)).optional(),
        next: z.nullable(z.string()).optional(),
        page: z.nullable(z.string()).optional(),
        page_size: z.nullable(z.string().default("25")),
        proxy: z.nullable(z.record(z.any())).optional(),
        raw: z.nullable(z.boolean().default(false)),
        updated_after: z.nullable(z.string()).optional(),
        "x-account-id": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            page_size: "pageSize",
            updated_after: "updatedAfter",
            "x-account-id": "xAccountId",
        });
    });

/** @internal */
export type CrmListAccountsRequest$Outbound = {
    fields?: string | null | undefined;
    filter?: CrmListAccountsQueryParamFilter$Outbound | null | undefined;
    next?: string | null | undefined;
    page?: string | null | undefined;
    page_size: string | null;
    proxy?: { [k: string]: any } | null | undefined;
    raw: boolean | null;
    updated_after?: string | null | undefined;
    "x-account-id": string;
};

/** @internal */
export const CrmListAccountsRequest$outboundSchema: z.ZodType<
    CrmListAccountsRequest$Outbound,
    z.ZodTypeDef,
    CrmListAccountsRequest
> = z
    .object({
        fields: z.nullable(z.string()).optional(),
        filter: z.nullable(z.lazy(() => CrmListAccountsQueryParamFilter$outboundSchema)).optional(),
        next: z.nullable(z.string()).optional(),
        page: z.nullable(z.string()).optional(),
        pageSize: z.nullable(z.string().default("25")),
        proxy: z.nullable(z.record(z.any())).optional(),
        raw: z.nullable(z.boolean().default(false)),
        updatedAfter: z.nullable(z.string()).optional(),
        xAccountId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            pageSize: "page_size",
            updatedAfter: "updated_after",
            xAccountId: "x-account-id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmListAccountsRequest$ {
    /** @deprecated use `CrmListAccountsRequest$inboundSchema` instead. */
    export const inboundSchema = CrmListAccountsRequest$inboundSchema;
    /** @deprecated use `CrmListAccountsRequest$outboundSchema` instead. */
    export const outboundSchema = CrmListAccountsRequest$outboundSchema;
    /** @deprecated use `CrmListAccountsRequest$Outbound` instead. */
    export type Outbound = CrmListAccountsRequest$Outbound;
}

/** @internal */
export const CrmListAccountsResponse$inboundSchema: z.ZodType<
    CrmListAccountsResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        AccountsPaginated: shared.AccountsPaginated$inboundSchema.optional(),
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
    })
    .transform((v) => {
        return remap$(v, {
            AccountsPaginated: "accountsPaginated",
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type CrmListAccountsResponse$Outbound = {
    AccountsPaginated?: shared.AccountsPaginated$Outbound | undefined;
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
};

/** @internal */
export const CrmListAccountsResponse$outboundSchema: z.ZodType<
    CrmListAccountsResponse$Outbound,
    z.ZodTypeDef,
    CrmListAccountsResponse
> = z
    .object({
        accountsPaginated: shared.AccountsPaginated$outboundSchema.optional(),
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
    })
    .transform((v) => {
        return remap$(v, {
            accountsPaginated: "AccountsPaginated",
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmListAccountsResponse$ {
    /** @deprecated use `CrmListAccountsResponse$inboundSchema` instead. */
    export const inboundSchema = CrmListAccountsResponse$inboundSchema;
    /** @deprecated use `CrmListAccountsResponse$outboundSchema` instead. */
    export const outboundSchema = CrmListAccountsResponse$outboundSchema;
    /** @deprecated use `CrmListAccountsResponse$Outbound` instead. */
    export type Outbound = CrmListAccountsResponse$Outbound;
}
