/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type LmsDeleteUserCompletionRequest = {
  id: string;
  subResourceId: string;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type LmsDeleteUserCompletionResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * The completion was deleted successfully.
   */
  deleteResult?: shared.DeleteResult | undefined;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const LmsDeleteUserCompletionRequest$inboundSchema: z.ZodType<
  LmsDeleteUserCompletionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  subResourceId: z.string(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type LmsDeleteUserCompletionRequest$Outbound = {
  id: string;
  subResourceId: string;
  "x-account-id": string;
};

/** @internal */
export const LmsDeleteUserCompletionRequest$outboundSchema: z.ZodType<
  LmsDeleteUserCompletionRequest$Outbound,
  z.ZodTypeDef,
  LmsDeleteUserCompletionRequest
> = z.object({
  id: z.string(),
  subResourceId: z.string(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LmsDeleteUserCompletionRequest$ {
  /** @deprecated use `LmsDeleteUserCompletionRequest$inboundSchema` instead. */
  export const inboundSchema = LmsDeleteUserCompletionRequest$inboundSchema;
  /** @deprecated use `LmsDeleteUserCompletionRequest$outboundSchema` instead. */
  export const outboundSchema = LmsDeleteUserCompletionRequest$outboundSchema;
  /** @deprecated use `LmsDeleteUserCompletionRequest$Outbound` instead. */
  export type Outbound = LmsDeleteUserCompletionRequest$Outbound;
}

export function lmsDeleteUserCompletionRequestToJSON(
  lmsDeleteUserCompletionRequest: LmsDeleteUserCompletionRequest,
): string {
  return JSON.stringify(
    LmsDeleteUserCompletionRequest$outboundSchema.parse(
      lmsDeleteUserCompletionRequest,
    ),
  );
}

export function lmsDeleteUserCompletionRequestFromJSON(
  jsonString: string,
): SafeParseResult<LmsDeleteUserCompletionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LmsDeleteUserCompletionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LmsDeleteUserCompletionRequest' from JSON`,
  );
}

/** @internal */
export const LmsDeleteUserCompletionResponse$inboundSchema: z.ZodType<
  LmsDeleteUserCompletionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  DeleteResult: shared.DeleteResult$inboundSchema.optional(),

  Headers: z.record(z.array(z.string())).default({}),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "DeleteResult": "deleteResult",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type LmsDeleteUserCompletionResponse$Outbound = {
  ContentType: string;
  DeleteResult?: shared.DeleteResult$Outbound | undefined;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const LmsDeleteUserCompletionResponse$outboundSchema: z.ZodType<
  LmsDeleteUserCompletionResponse$Outbound,
  z.ZodTypeDef,
  LmsDeleteUserCompletionResponse
> = z.object({
  contentType: z.string(),
  deleteResult: shared.DeleteResult$outboundSchema.optional(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    deleteResult: "DeleteResult",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LmsDeleteUserCompletionResponse$ {
  /** @deprecated use `LmsDeleteUserCompletionResponse$inboundSchema` instead. */
  export const inboundSchema = LmsDeleteUserCompletionResponse$inboundSchema;
  /** @deprecated use `LmsDeleteUserCompletionResponse$outboundSchema` instead. */
  export const outboundSchema = LmsDeleteUserCompletionResponse$outboundSchema;
  /** @deprecated use `LmsDeleteUserCompletionResponse$Outbound` instead. */
  export type Outbound = LmsDeleteUserCompletionResponse$Outbound;
}

export function lmsDeleteUserCompletionResponseToJSON(
  lmsDeleteUserCompletionResponse: LmsDeleteUserCompletionResponse,
): string {
  return JSON.stringify(
    LmsDeleteUserCompletionResponse$outboundSchema.parse(
      lmsDeleteUserCompletionResponse,
    ),
  );
}

export function lmsDeleteUserCompletionResponseFromJSON(
  jsonString: string,
): SafeParseResult<LmsDeleteUserCompletionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LmsDeleteUserCompletionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LmsDeleteUserCompletionResponse' from JSON`,
  );
}
