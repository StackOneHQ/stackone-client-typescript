/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type AccountingBatchCreateCompanyJournalsRequest = {
  accountingJournalBatchCreateRequestDto:
    shared.AccountingJournalBatchCreateRequestDto;
  id: string;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type AccountingBatchCreateCompanyJournalsResponse = {
  /**
   * Batch operation accepted
   */
  batchResultApiModel?: shared.BatchResultApiModel | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const AccountingBatchCreateCompanyJournalsRequest$inboundSchema:
  z.ZodType<
    AccountingBatchCreateCompanyJournalsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    AccountingJournalBatchCreateRequestDto:
      shared.AccountingJournalBatchCreateRequestDto$inboundSchema,
    id: z.string(),
    "x-account-id": z.string(),
  }).transform((v) => {
    return remap$(v, {
      "AccountingJournalBatchCreateRequestDto":
        "accountingJournalBatchCreateRequestDto",
      "x-account-id": "xAccountId",
    });
  });

/** @internal */
export type AccountingBatchCreateCompanyJournalsRequest$Outbound = {
  AccountingJournalBatchCreateRequestDto:
    shared.AccountingJournalBatchCreateRequestDto$Outbound;
  id: string;
  "x-account-id": string;
};

/** @internal */
export const AccountingBatchCreateCompanyJournalsRequest$outboundSchema:
  z.ZodType<
    AccountingBatchCreateCompanyJournalsRequest$Outbound,
    z.ZodTypeDef,
    AccountingBatchCreateCompanyJournalsRequest
  > = z.object({
    accountingJournalBatchCreateRequestDto:
      shared.AccountingJournalBatchCreateRequestDto$outboundSchema,
    id: z.string(),
    xAccountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountingJournalBatchCreateRequestDto:
        "AccountingJournalBatchCreateRequestDto",
      xAccountId: "x-account-id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBatchCreateCompanyJournalsRequest$ {
  /** @deprecated use `AccountingBatchCreateCompanyJournalsRequest$inboundSchema` instead. */
  export const inboundSchema =
    AccountingBatchCreateCompanyJournalsRequest$inboundSchema;
  /** @deprecated use `AccountingBatchCreateCompanyJournalsRequest$outboundSchema` instead. */
  export const outboundSchema =
    AccountingBatchCreateCompanyJournalsRequest$outboundSchema;
  /** @deprecated use `AccountingBatchCreateCompanyJournalsRequest$Outbound` instead. */
  export type Outbound = AccountingBatchCreateCompanyJournalsRequest$Outbound;
}

export function accountingBatchCreateCompanyJournalsRequestToJSON(
  accountingBatchCreateCompanyJournalsRequest:
    AccountingBatchCreateCompanyJournalsRequest,
): string {
  return JSON.stringify(
    AccountingBatchCreateCompanyJournalsRequest$outboundSchema.parse(
      accountingBatchCreateCompanyJournalsRequest,
    ),
  );
}

export function accountingBatchCreateCompanyJournalsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountingBatchCreateCompanyJournalsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingBatchCreateCompanyJournalsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountingBatchCreateCompanyJournalsRequest' from JSON`,
  );
}

/** @internal */
export const AccountingBatchCreateCompanyJournalsResponse$inboundSchema:
  z.ZodType<
    AccountingBatchCreateCompanyJournalsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    BatchResultApiModel: shared.BatchResultApiModel$inboundSchema.optional(),
    ContentType: z.string(),
    Headers: z.record(z.array(z.string())),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
  }).transform((v) => {
    return remap$(v, {
      "BatchResultApiModel": "batchResultApiModel",
      "ContentType": "contentType",
      "Headers": "headers",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
    });
  });

/** @internal */
export type AccountingBatchCreateCompanyJournalsResponse$Outbound = {
  BatchResultApiModel?: shared.BatchResultApiModel$Outbound | undefined;
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const AccountingBatchCreateCompanyJournalsResponse$outboundSchema:
  z.ZodType<
    AccountingBatchCreateCompanyJournalsResponse$Outbound,
    z.ZodTypeDef,
    AccountingBatchCreateCompanyJournalsResponse
  > = z.object({
    batchResultApiModel: shared.BatchResultApiModel$outboundSchema.optional(),
    contentType: z.string(),
    headers: z.record(z.array(z.string())),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
  }).transform((v) => {
    return remap$(v, {
      batchResultApiModel: "BatchResultApiModel",
      contentType: "ContentType",
      headers: "Headers",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBatchCreateCompanyJournalsResponse$ {
  /** @deprecated use `AccountingBatchCreateCompanyJournalsResponse$inboundSchema` instead. */
  export const inboundSchema =
    AccountingBatchCreateCompanyJournalsResponse$inboundSchema;
  /** @deprecated use `AccountingBatchCreateCompanyJournalsResponse$outboundSchema` instead. */
  export const outboundSchema =
    AccountingBatchCreateCompanyJournalsResponse$outboundSchema;
  /** @deprecated use `AccountingBatchCreateCompanyJournalsResponse$Outbound` instead. */
  export type Outbound = AccountingBatchCreateCompanyJournalsResponse$Outbound;
}

export function accountingBatchCreateCompanyJournalsResponseToJSON(
  accountingBatchCreateCompanyJournalsResponse:
    AccountingBatchCreateCompanyJournalsResponse,
): string {
  return JSON.stringify(
    AccountingBatchCreateCompanyJournalsResponse$outboundSchema.parse(
      accountingBatchCreateCompanyJournalsResponse,
    ),
  );
}

export function accountingBatchCreateCompanyJournalsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountingBatchCreateCompanyJournalsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingBatchCreateCompanyJournalsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountingBatchCreateCompanyJournalsResponse' from JSON`,
  );
}
