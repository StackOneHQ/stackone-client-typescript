/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import * as b64$ from "../../../lib/base64.js";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type AtsDownloadApplicationDocumentRequest = {
  /**
   * The export format of the file
   */
  exportFormat?: string | null | undefined;
  /**
   * The format to download the file in
   */
  format?: string | null | undefined;
  id: string;
  subResourceId: string;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type AtsDownloadApplicationDocumentResponse = {
  body?: Uint8Array | string | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * The document related to the application with the given identifiers was retrieved.
   */
  downloadApiModel?: shared.DownloadApiModel | undefined;
  /**
   * The document related to the application with the given identifiers was retrieved.
   */
  downloadApiModel1?: string | undefined;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const AtsDownloadApplicationDocumentRequest$inboundSchema: z.ZodType<
  AtsDownloadApplicationDocumentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  export_format: z.nullable(z.string()).optional(),
  format: z.nullable(z.string()).optional(),
  id: z.string(),
  subResourceId: z.string(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "export_format": "exportFormat",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type AtsDownloadApplicationDocumentRequest$Outbound = {
  export_format?: string | null | undefined;
  format?: string | null | undefined;
  id: string;
  subResourceId: string;
  "x-account-id": string;
};

/** @internal */
export const AtsDownloadApplicationDocumentRequest$outboundSchema: z.ZodType<
  AtsDownloadApplicationDocumentRequest$Outbound,
  z.ZodTypeDef,
  AtsDownloadApplicationDocumentRequest
> = z.object({
  exportFormat: z.nullable(z.string()).optional(),
  format: z.nullable(z.string()).optional(),
  id: z.string(),
  subResourceId: z.string(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    exportFormat: "export_format",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsDownloadApplicationDocumentRequest$ {
  /** @deprecated use `AtsDownloadApplicationDocumentRequest$inboundSchema` instead. */
  export const inboundSchema =
    AtsDownloadApplicationDocumentRequest$inboundSchema;
  /** @deprecated use `AtsDownloadApplicationDocumentRequest$outboundSchema` instead. */
  export const outboundSchema =
    AtsDownloadApplicationDocumentRequest$outboundSchema;
  /** @deprecated use `AtsDownloadApplicationDocumentRequest$Outbound` instead. */
  export type Outbound = AtsDownloadApplicationDocumentRequest$Outbound;
}

export function atsDownloadApplicationDocumentRequestToJSON(
  atsDownloadApplicationDocumentRequest: AtsDownloadApplicationDocumentRequest,
): string {
  return JSON.stringify(
    AtsDownloadApplicationDocumentRequest$outboundSchema.parse(
      atsDownloadApplicationDocumentRequest,
    ),
  );
}

export function atsDownloadApplicationDocumentRequestFromJSON(
  jsonString: string,
): SafeParseResult<AtsDownloadApplicationDocumentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AtsDownloadApplicationDocumentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsDownloadApplicationDocumentRequest' from JSON`,
  );
}

/** @internal */
export const AtsDownloadApplicationDocumentResponse$inboundSchema: z.ZodType<
  AtsDownloadApplicationDocumentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Body: b64$.zodInbound.optional(),
  ContentType: z.string(),
  DownloadApiModel: shared.DownloadApiModel$inboundSchema.optional(),
  DownloadApiModel1: z.string().optional(),

  Headers: z.record(z.array(z.string())).default({}),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "Body": "body",
    "ContentType": "contentType",
    "DownloadApiModel": "downloadApiModel",
    "DownloadApiModel1": "downloadApiModel1",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type AtsDownloadApplicationDocumentResponse$Outbound = {
  Body?: Uint8Array | undefined;
  ContentType: string;
  DownloadApiModel?: shared.DownloadApiModel$Outbound | undefined;
  DownloadApiModel1?: string | undefined;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const AtsDownloadApplicationDocumentResponse$outboundSchema: z.ZodType<
  AtsDownloadApplicationDocumentResponse$Outbound,
  z.ZodTypeDef,
  AtsDownloadApplicationDocumentResponse
> = z.object({
  body: b64$.zodOutbound.optional(),
  contentType: z.string(),
  downloadApiModel: shared.DownloadApiModel$outboundSchema.optional(),
  downloadApiModel1: z.string().optional(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    body: "Body",
    contentType: "ContentType",
    downloadApiModel: "DownloadApiModel",
    downloadApiModel1: "DownloadApiModel1",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsDownloadApplicationDocumentResponse$ {
  /** @deprecated use `AtsDownloadApplicationDocumentResponse$inboundSchema` instead. */
  export const inboundSchema =
    AtsDownloadApplicationDocumentResponse$inboundSchema;
  /** @deprecated use `AtsDownloadApplicationDocumentResponse$outboundSchema` instead. */
  export const outboundSchema =
    AtsDownloadApplicationDocumentResponse$outboundSchema;
  /** @deprecated use `AtsDownloadApplicationDocumentResponse$Outbound` instead. */
  export type Outbound = AtsDownloadApplicationDocumentResponse$Outbound;
}

export function atsDownloadApplicationDocumentResponseToJSON(
  atsDownloadApplicationDocumentResponse:
    AtsDownloadApplicationDocumentResponse,
): string {
  return JSON.stringify(
    AtsDownloadApplicationDocumentResponse$outboundSchema.parse(
      atsDownloadApplicationDocumentResponse,
    ),
  );
}

export function atsDownloadApplicationDocumentResponseFromJSON(
  jsonString: string,
): SafeParseResult<AtsDownloadApplicationDocumentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AtsDownloadApplicationDocumentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsDownloadApplicationDocumentResponse' from JSON`,
  );
}
