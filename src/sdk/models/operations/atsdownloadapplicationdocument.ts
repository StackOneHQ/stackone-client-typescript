/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type AtsDownloadApplicationDocumentRequest = {
    /**
     * The format to download the file in
     */
    format?: string | null | undefined;
    id: string;
    subResourceId: string;
    /**
     * The account identifier
     */
    xAccountId: string;
};

export type AtsDownloadApplicationDocumentResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The document related to the application with the given identifiers was retrieved.
     */
    stream?: ReadableStream<Uint8Array> | undefined;
};

/** @internal */
export namespace AtsDownloadApplicationDocumentRequest$ {
    export const inboundSchema: z.ZodType<
        AtsDownloadApplicationDocumentRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            format: z.nullable(z.string()).optional(),
            id: z.string(),
            subResourceId: z.string(),
            "x-account-id": z.string(),
        })
        .transform((v) => {
            return {
                ...(v.format === undefined ? null : { format: v.format }),
                id: v.id,
                subResourceId: v.subResourceId,
                xAccountId: v["x-account-id"],
            };
        });

    export type Outbound = {
        format?: string | null | undefined;
        id: string;
        subResourceId: string;
        "x-account-id": string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AtsDownloadApplicationDocumentRequest
    > = z
        .object({
            format: z.nullable(z.string()).optional(),
            id: z.string(),
            subResourceId: z.string(),
            xAccountId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.format === undefined ? null : { format: v.format }),
                id: v.id,
                subResourceId: v.subResourceId,
                "x-account-id": v.xAccountId,
            };
        });
}

/** @internal */
export namespace AtsDownloadApplicationDocumentResponse$ {
    export const inboundSchema: z.ZodType<
        AtsDownloadApplicationDocumentResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            stream: z.instanceof(ReadableStream<Uint8Array>).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.stream === undefined ? null : { stream: v.stream }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        stream?: ReadableStream<Uint8Array> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AtsDownloadApplicationDocumentResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            stream: z.instanceof(ReadableStream<Uint8Array>).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.stream === undefined ? null : { stream: v.stream }),
            };
        });
}
