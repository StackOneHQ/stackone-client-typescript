/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * Filter by the type of change that occurred to the application
 */
export enum ChangeType {
  ApplicationStatus = "application_status",
  InterviewStage = "interview_stage",
  RejectedReasons = "rejected_reasons",
  UnmappedValue = "unmapped_value",
}

/**
 * Filter parameters for application changes (supports created_after and change_type)
 */
export type AtsListApplicationChangesQueryParamFilter = {
  /**
   * Filter by the type of change that occurred to the application
   */
  changeType?: ChangeType | null | undefined;
  /**
   * Use a string with a date to only select results created after that given date
   */
  createdAfter?: Date | null | undefined;
};

export type AtsListApplicationChangesRequest = {
  /**
   * The comma separated list of fields that will be returned in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  /**
   * Filter parameters for application changes (supports created_after and change_type)
   */
  filter?: AtsListApplicationChangesQueryParamFilter | null | undefined;
  id: string;
  /**
   * The unified cursor
   */
  next?: string | null | undefined;
  /**
   * The number of results per page (default value is 25)
   */
  pageSize?: string | null | undefined;
  /**
   * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
   */
  proxy?: { [k: string]: any } | null | undefined;
  /**
   * Indicates that the raw request result should be returned in addition to the mapped result (default value is false)
   */
  raw?: boolean | null | undefined;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type AtsListApplicationChangesResponse = {
  /**
   * The changes related to the application with the given identifier was retrieved.
   */
  applicationChangesPaginated?: shared.ApplicationChangesPaginated | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const ChangeType$inboundSchema: z.ZodNativeEnum<typeof ChangeType> = z
  .nativeEnum(ChangeType);

/** @internal */
export const ChangeType$outboundSchema: z.ZodNativeEnum<typeof ChangeType> =
  ChangeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChangeType$ {
  /** @deprecated use `ChangeType$inboundSchema` instead. */
  export const inboundSchema = ChangeType$inboundSchema;
  /** @deprecated use `ChangeType$outboundSchema` instead. */
  export const outboundSchema = ChangeType$outboundSchema;
}

/** @internal */
export const AtsListApplicationChangesQueryParamFilter$inboundSchema: z.ZodType<
  AtsListApplicationChangesQueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  change_type: z.nullable(ChangeType$inboundSchema).optional(),
  created_after: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "change_type": "changeType",
    "created_after": "createdAfter",
  });
});

/** @internal */
export type AtsListApplicationChangesQueryParamFilter$Outbound = {
  change_type?: string | null | undefined;
  created_after?: string | null | undefined;
};

/** @internal */
export const AtsListApplicationChangesQueryParamFilter$outboundSchema:
  z.ZodType<
    AtsListApplicationChangesQueryParamFilter$Outbound,
    z.ZodTypeDef,
    AtsListApplicationChangesQueryParamFilter
  > = z.object({
    changeType: z.nullable(ChangeType$outboundSchema).optional(),
    createdAfter: z.nullable(z.date().transform(v => v.toISOString()))
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      changeType: "change_type",
      createdAfter: "created_after",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsListApplicationChangesQueryParamFilter$ {
  /** @deprecated use `AtsListApplicationChangesQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema =
    AtsListApplicationChangesQueryParamFilter$inboundSchema;
  /** @deprecated use `AtsListApplicationChangesQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema =
    AtsListApplicationChangesQueryParamFilter$outboundSchema;
  /** @deprecated use `AtsListApplicationChangesQueryParamFilter$Outbound` instead. */
  export type Outbound = AtsListApplicationChangesQueryParamFilter$Outbound;
}

export function atsListApplicationChangesQueryParamFilterToJSON(
  atsListApplicationChangesQueryParamFilter:
    AtsListApplicationChangesQueryParamFilter,
): string {
  return JSON.stringify(
    AtsListApplicationChangesQueryParamFilter$outboundSchema.parse(
      atsListApplicationChangesQueryParamFilter,
    ),
  );
}

export function atsListApplicationChangesQueryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  AtsListApplicationChangesQueryParamFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AtsListApplicationChangesQueryParamFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AtsListApplicationChangesQueryParamFilter' from JSON`,
  );
}

/** @internal */
export const AtsListApplicationChangesRequest$inboundSchema: z.ZodType<
  AtsListApplicationChangesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => AtsListApplicationChangesQueryParamFilter$inboundSchema),
  ).optional(),
  id: z.string(),
  next: z.nullable(z.string()).optional(),
  page_size: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type AtsListApplicationChangesRequest$Outbound = {
  fields?: string | null | undefined;
  filter?:
    | AtsListApplicationChangesQueryParamFilter$Outbound
    | null
    | undefined;
  id: string;
  next?: string | null | undefined;
  page_size?: string | null | undefined;
  proxy?: { [k: string]: any } | null | undefined;
  raw?: boolean | null | undefined;
  "x-account-id": string;
};

/** @internal */
export const AtsListApplicationChangesRequest$outboundSchema: z.ZodType<
  AtsListApplicationChangesRequest$Outbound,
  z.ZodTypeDef,
  AtsListApplicationChangesRequest
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => AtsListApplicationChangesQueryParamFilter$outboundSchema),
  ).optional(),
  id: z.string(),
  next: z.nullable(z.string()).optional(),
  pageSize: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsListApplicationChangesRequest$ {
  /** @deprecated use `AtsListApplicationChangesRequest$inboundSchema` instead. */
  export const inboundSchema = AtsListApplicationChangesRequest$inboundSchema;
  /** @deprecated use `AtsListApplicationChangesRequest$outboundSchema` instead. */
  export const outboundSchema = AtsListApplicationChangesRequest$outboundSchema;
  /** @deprecated use `AtsListApplicationChangesRequest$Outbound` instead. */
  export type Outbound = AtsListApplicationChangesRequest$Outbound;
}

export function atsListApplicationChangesRequestToJSON(
  atsListApplicationChangesRequest: AtsListApplicationChangesRequest,
): string {
  return JSON.stringify(
    AtsListApplicationChangesRequest$outboundSchema.parse(
      atsListApplicationChangesRequest,
    ),
  );
}

export function atsListApplicationChangesRequestFromJSON(
  jsonString: string,
): SafeParseResult<AtsListApplicationChangesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsListApplicationChangesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsListApplicationChangesRequest' from JSON`,
  );
}

/** @internal */
export const AtsListApplicationChangesResponse$inboundSchema: z.ZodType<
  AtsListApplicationChangesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ApplicationChangesPaginated: shared.ApplicationChangesPaginated$inboundSchema
    .optional(),
  ContentType: z.string(),

  Headers: z.record(z.array(z.string())).default({}),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ApplicationChangesPaginated": "applicationChangesPaginated",
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type AtsListApplicationChangesResponse$Outbound = {
  ApplicationChangesPaginated?:
    | shared.ApplicationChangesPaginated$Outbound
    | undefined;
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const AtsListApplicationChangesResponse$outboundSchema: z.ZodType<
  AtsListApplicationChangesResponse$Outbound,
  z.ZodTypeDef,
  AtsListApplicationChangesResponse
> = z.object({
  applicationChangesPaginated: shared.ApplicationChangesPaginated$outboundSchema
    .optional(),
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    applicationChangesPaginated: "ApplicationChangesPaginated",
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsListApplicationChangesResponse$ {
  /** @deprecated use `AtsListApplicationChangesResponse$inboundSchema` instead. */
  export const inboundSchema = AtsListApplicationChangesResponse$inboundSchema;
  /** @deprecated use `AtsListApplicationChangesResponse$outboundSchema` instead. */
  export const outboundSchema =
    AtsListApplicationChangesResponse$outboundSchema;
  /** @deprecated use `AtsListApplicationChangesResponse$Outbound` instead. */
  export type Outbound = AtsListApplicationChangesResponse$Outbound;
}

export function atsListApplicationChangesResponseToJSON(
  atsListApplicationChangesResponse: AtsListApplicationChangesResponse,
): string {
  return JSON.stringify(
    AtsListApplicationChangesResponse$outboundSchema.parse(
      atsListApplicationChangesResponse,
    ),
  );
}

export function atsListApplicationChangesResponseFromJSON(
  jsonString: string,
): SafeParseResult<AtsListApplicationChangesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsListApplicationChangesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsListApplicationChangesResponse' from JSON`,
  );
}
