/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type MarketingCreatePushTemplateRequest = {
    marketingCreatePushTemplateRequestDto: shared.MarketingCreatePushTemplateRequestDto;
    /**
     * The account identifier
     */
    xAccountId: string;
};

export type MarketingCreatePushTemplateResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Record created successfully.
     */
    createTemplateResult?: shared.CreateTemplateResult | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace MarketingCreatePushTemplateRequest$ {
    export type Inbound = {
        MarketingCreatePushTemplateRequestDto: shared.MarketingCreatePushTemplateRequestDto$.Inbound;
        "x-account-id": string;
    };

    export const inboundSchema: z.ZodType<
        MarketingCreatePushTemplateRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            MarketingCreatePushTemplateRequestDto:
                shared.MarketingCreatePushTemplateRequestDto$.inboundSchema,
            "x-account-id": z.string(),
        })
        .transform((v) => {
            return {
                marketingCreatePushTemplateRequestDto: v.MarketingCreatePushTemplateRequestDto,
                xAccountId: v["x-account-id"],
            };
        });

    export type Outbound = {
        MarketingCreatePushTemplateRequestDto: shared.MarketingCreatePushTemplateRequestDto$.Outbound;
        "x-account-id": string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MarketingCreatePushTemplateRequest
    > = z
        .object({
            marketingCreatePushTemplateRequestDto:
                shared.MarketingCreatePushTemplateRequestDto$.outboundSchema,
            xAccountId: z.string(),
        })
        .transform((v) => {
            return {
                MarketingCreatePushTemplateRequestDto: v.marketingCreatePushTemplateRequestDto,
                "x-account-id": v.xAccountId,
            };
        });
}

/** @internal */
export namespace MarketingCreatePushTemplateResponse$ {
    export type Inbound = {
        ContentType: string;
        CreateTemplateResult?: shared.CreateTemplateResult$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        MarketingCreatePushTemplateResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            CreateTemplateResult: shared.CreateTemplateResult$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.CreateTemplateResult === undefined
                    ? null
                    : { createTemplateResult: v.CreateTemplateResult }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        CreateTemplateResult?: shared.CreateTemplateResult$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MarketingCreatePushTemplateResponse
    > = z
        .object({
            contentType: z.string(),
            createTemplateResult: shared.CreateTemplateResult$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.createTemplateResult === undefined
                    ? null
                    : { CreateTemplateResult: v.createTemplateResult }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
