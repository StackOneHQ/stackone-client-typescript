/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type MessagingGetMessageQueryParamFilter = {};

export type MessagingGetMessageRequest = {
  /**
   * The comma separated list of fields that will be returned in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  filter?: MessagingGetMessageQueryParamFilter | undefined;
  id: string;
  /**
   * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
   */
  proxy?: { [k: string]: any } | null | undefined;
  /**
   * Indicates that the raw request result should be returned in addition to the mapped result (default value is false)
   */
  raw?: boolean | null | undefined;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type MessagingGetMessageResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * The message was retrieved.
   */
  messagingMessageResult?: shared.MessagingMessageResult | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const MessagingGetMessageQueryParamFilter$inboundSchema: z.ZodType<
  MessagingGetMessageQueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MessagingGetMessageQueryParamFilter$Outbound = {};

/** @internal */
export const MessagingGetMessageQueryParamFilter$outboundSchema: z.ZodType<
  MessagingGetMessageQueryParamFilter$Outbound,
  z.ZodTypeDef,
  MessagingGetMessageQueryParamFilter
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingGetMessageQueryParamFilter$ {
  /** @deprecated use `MessagingGetMessageQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema =
    MessagingGetMessageQueryParamFilter$inboundSchema;
  /** @deprecated use `MessagingGetMessageQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema =
    MessagingGetMessageQueryParamFilter$outboundSchema;
  /** @deprecated use `MessagingGetMessageQueryParamFilter$Outbound` instead. */
  export type Outbound = MessagingGetMessageQueryParamFilter$Outbound;
}

export function messagingGetMessageQueryParamFilterToJSON(
  messagingGetMessageQueryParamFilter: MessagingGetMessageQueryParamFilter,
): string {
  return JSON.stringify(
    MessagingGetMessageQueryParamFilter$outboundSchema.parse(
      messagingGetMessageQueryParamFilter,
    ),
  );
}

export function messagingGetMessageQueryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<MessagingGetMessageQueryParamFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MessagingGetMessageQueryParamFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessagingGetMessageQueryParamFilter' from JSON`,
  );
}

/** @internal */
export const MessagingGetMessageRequest$inboundSchema: z.ZodType<
  MessagingGetMessageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.lazy(() => MessagingGetMessageQueryParamFilter$inboundSchema)
    .optional(),
  id: z.string(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type MessagingGetMessageRequest$Outbound = {
  fields?: string | null | undefined;
  filter?: MessagingGetMessageQueryParamFilter$Outbound | undefined;
  id: string;
  proxy?: { [k: string]: any } | null | undefined;
  raw?: boolean | null | undefined;
  "x-account-id": string;
};

/** @internal */
export const MessagingGetMessageRequest$outboundSchema: z.ZodType<
  MessagingGetMessageRequest$Outbound,
  z.ZodTypeDef,
  MessagingGetMessageRequest
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.lazy(() => MessagingGetMessageQueryParamFilter$outboundSchema)
    .optional(),
  id: z.string(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingGetMessageRequest$ {
  /** @deprecated use `MessagingGetMessageRequest$inboundSchema` instead. */
  export const inboundSchema = MessagingGetMessageRequest$inboundSchema;
  /** @deprecated use `MessagingGetMessageRequest$outboundSchema` instead. */
  export const outboundSchema = MessagingGetMessageRequest$outboundSchema;
  /** @deprecated use `MessagingGetMessageRequest$Outbound` instead. */
  export type Outbound = MessagingGetMessageRequest$Outbound;
}

export function messagingGetMessageRequestToJSON(
  messagingGetMessageRequest: MessagingGetMessageRequest,
): string {
  return JSON.stringify(
    MessagingGetMessageRequest$outboundSchema.parse(messagingGetMessageRequest),
  );
}

export function messagingGetMessageRequestFromJSON(
  jsonString: string,
): SafeParseResult<MessagingGetMessageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessagingGetMessageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessagingGetMessageRequest' from JSON`,
  );
}

/** @internal */
export const MessagingGetMessageResponse$inboundSchema: z.ZodType<
  MessagingGetMessageResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),

  Headers: z.record(z.array(z.string())).default({}),
  MessagingMessageResult: shared.MessagingMessageResult$inboundSchema
    .optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "MessagingMessageResult": "messagingMessageResult",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type MessagingGetMessageResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  MessagingMessageResult?: shared.MessagingMessageResult$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const MessagingGetMessageResponse$outboundSchema: z.ZodType<
  MessagingGetMessageResponse$Outbound,
  z.ZodTypeDef,
  MessagingGetMessageResponse
> = z.object({
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  messagingMessageResult: shared.MessagingMessageResult$outboundSchema
    .optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    headers: "Headers",
    messagingMessageResult: "MessagingMessageResult",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingGetMessageResponse$ {
  /** @deprecated use `MessagingGetMessageResponse$inboundSchema` instead. */
  export const inboundSchema = MessagingGetMessageResponse$inboundSchema;
  /** @deprecated use `MessagingGetMessageResponse$outboundSchema` instead. */
  export const outboundSchema = MessagingGetMessageResponse$outboundSchema;
  /** @deprecated use `MessagingGetMessageResponse$Outbound` instead. */
  export type Outbound = MessagingGetMessageResponse$Outbound;
}

export function messagingGetMessageResponseToJSON(
  messagingGetMessageResponse: MessagingGetMessageResponse,
): string {
  return JSON.stringify(
    MessagingGetMessageResponse$outboundSchema.parse(
      messagingGetMessageResponse,
    ),
  );
}

export function messagingGetMessageResponseFromJSON(
  jsonString: string,
): SafeParseResult<MessagingGetMessageResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessagingGetMessageResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessagingGetMessageResponse' from JSON`,
  );
}
