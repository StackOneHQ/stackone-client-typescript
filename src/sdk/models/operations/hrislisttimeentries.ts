/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * HRIS Time Entries filters
 */
export type HrisListTimeEntriesQueryParamFilter = {
  /**
   * Filter to select time entries by employee_id
   */
  employeeId?: string | null | undefined;
  /**
   * Filter to select time entries before a given time
   */
  endTime?: string | null | undefined;
  /**
   * Filter to select time entries after a given time
   */
  startTime?: string | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   */
  updatedAfter?: string | null | undefined;
};

export type HrisListTimeEntriesRequest = {
  /**
   * The comma separated list of fields that will be returned in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  /**
   * HRIS Time Entries filters
   */
  filter?: HrisListTimeEntriesQueryParamFilter | null | undefined;
  /**
   * The unified cursor
   */
  next?: string | null | undefined;
  /**
   * The page number of the results to fetch
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  page?: string | null | undefined;
  /**
   * The number of results per page (default value is 25)
   */
  pageSize?: string | null | undefined;
  /**
   * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
   */
  proxy?: { [k: string]: any } | null | undefined;
  /**
   * Indicates that the raw request result should be returned in addition to the mapped result (default value is false)
   */
  raw?: boolean | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  updatedAfter?: string | null | undefined;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type HrisListTimeEntriesResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The list of time entries was retrieved.
   */
  timeEntriesPaginated?: shared.TimeEntriesPaginated | undefined;
};

/** @internal */
export const HrisListTimeEntriesQueryParamFilter$inboundSchema: z.ZodType<
  HrisListTimeEntriesQueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_id: z.nullable(z.string()).optional(),
  end_time: z.nullable(z.string()).optional(),
  start_time: z.nullable(z.string()).optional(),
  updated_after: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_id": "employeeId",
    "end_time": "endTime",
    "start_time": "startTime",
    "updated_after": "updatedAfter",
  });
});

/** @internal */
export type HrisListTimeEntriesQueryParamFilter$Outbound = {
  employee_id?: string | null | undefined;
  end_time?: string | null | undefined;
  start_time?: string | null | undefined;
  updated_after?: string | null | undefined;
};

/** @internal */
export const HrisListTimeEntriesQueryParamFilter$outboundSchema: z.ZodType<
  HrisListTimeEntriesQueryParamFilter$Outbound,
  z.ZodTypeDef,
  HrisListTimeEntriesQueryParamFilter
> = z.object({
  employeeId: z.nullable(z.string()).optional(),
  endTime: z.nullable(z.string()).optional(),
  startTime: z.nullable(z.string()).optional(),
  updatedAfter: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    employeeId: "employee_id",
    endTime: "end_time",
    startTime: "start_time",
    updatedAfter: "updated_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisListTimeEntriesQueryParamFilter$ {
  /** @deprecated use `HrisListTimeEntriesQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema =
    HrisListTimeEntriesQueryParamFilter$inboundSchema;
  /** @deprecated use `HrisListTimeEntriesQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema =
    HrisListTimeEntriesQueryParamFilter$outboundSchema;
  /** @deprecated use `HrisListTimeEntriesQueryParamFilter$Outbound` instead. */
  export type Outbound = HrisListTimeEntriesQueryParamFilter$Outbound;
}

export function hrisListTimeEntriesQueryParamFilterToJSON(
  hrisListTimeEntriesQueryParamFilter: HrisListTimeEntriesQueryParamFilter,
): string {
  return JSON.stringify(
    HrisListTimeEntriesQueryParamFilter$outboundSchema.parse(
      hrisListTimeEntriesQueryParamFilter,
    ),
  );
}

export function hrisListTimeEntriesQueryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<HrisListTimeEntriesQueryParamFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisListTimeEntriesQueryParamFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisListTimeEntriesQueryParamFilter' from JSON`,
  );
}

/** @internal */
export const HrisListTimeEntriesRequest$inboundSchema: z.ZodType<
  HrisListTimeEntriesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => HrisListTimeEntriesQueryParamFilter$inboundSchema),
  ).optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  page_size: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  updated_after: z.nullable(z.string()).optional(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "updated_after": "updatedAfter",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type HrisListTimeEntriesRequest$Outbound = {
  fields?: string | null | undefined;
  filter?: HrisListTimeEntriesQueryParamFilter$Outbound | null | undefined;
  next?: string | null | undefined;
  page?: string | null | undefined;
  page_size?: string | null | undefined;
  proxy?: { [k: string]: any } | null | undefined;
  raw?: boolean | null | undefined;
  updated_after?: string | null | undefined;
  "x-account-id": string;
};

/** @internal */
export const HrisListTimeEntriesRequest$outboundSchema: z.ZodType<
  HrisListTimeEntriesRequest$Outbound,
  z.ZodTypeDef,
  HrisListTimeEntriesRequest
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => HrisListTimeEntriesQueryParamFilter$outboundSchema),
  ).optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  pageSize: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  updatedAfter: z.nullable(z.string()).optional(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    updatedAfter: "updated_after",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisListTimeEntriesRequest$ {
  /** @deprecated use `HrisListTimeEntriesRequest$inboundSchema` instead. */
  export const inboundSchema = HrisListTimeEntriesRequest$inboundSchema;
  /** @deprecated use `HrisListTimeEntriesRequest$outboundSchema` instead. */
  export const outboundSchema = HrisListTimeEntriesRequest$outboundSchema;
  /** @deprecated use `HrisListTimeEntriesRequest$Outbound` instead. */
  export type Outbound = HrisListTimeEntriesRequest$Outbound;
}

export function hrisListTimeEntriesRequestToJSON(
  hrisListTimeEntriesRequest: HrisListTimeEntriesRequest,
): string {
  return JSON.stringify(
    HrisListTimeEntriesRequest$outboundSchema.parse(hrisListTimeEntriesRequest),
  );
}

export function hrisListTimeEntriesRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisListTimeEntriesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisListTimeEntriesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisListTimeEntriesRequest' from JSON`,
  );
}

/** @internal */
export const HrisListTimeEntriesResponse$inboundSchema: z.ZodType<
  HrisListTimeEntriesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  TimeEntriesPaginated: shared.TimeEntriesPaginated$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "TimeEntriesPaginated": "timeEntriesPaginated",
  });
});

/** @internal */
export type HrisListTimeEntriesResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
  TimeEntriesPaginated?: shared.TimeEntriesPaginated$Outbound | undefined;
};

/** @internal */
export const HrisListTimeEntriesResponse$outboundSchema: z.ZodType<
  HrisListTimeEntriesResponse$Outbound,
  z.ZodTypeDef,
  HrisListTimeEntriesResponse
> = z.object({
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  timeEntriesPaginated: shared.TimeEntriesPaginated$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    timeEntriesPaginated: "TimeEntriesPaginated",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisListTimeEntriesResponse$ {
  /** @deprecated use `HrisListTimeEntriesResponse$inboundSchema` instead. */
  export const inboundSchema = HrisListTimeEntriesResponse$inboundSchema;
  /** @deprecated use `HrisListTimeEntriesResponse$outboundSchema` instead. */
  export const outboundSchema = HrisListTimeEntriesResponse$outboundSchema;
  /** @deprecated use `HrisListTimeEntriesResponse$Outbound` instead. */
  export type Outbound = HrisListTimeEntriesResponse$Outbound;
}

export function hrisListTimeEntriesResponseToJSON(
  hrisListTimeEntriesResponse: HrisListTimeEntriesResponse,
): string {
  return JSON.stringify(
    HrisListTimeEntriesResponse$outboundSchema.parse(
      hrisListTimeEntriesResponse,
    ),
  );
}

export function hrisListTimeEntriesResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisListTimeEntriesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisListTimeEntriesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisListTimeEntriesResponse' from JSON`,
  );
}
