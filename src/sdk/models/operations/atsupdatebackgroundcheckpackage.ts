/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type AtsUpdateBackgroundCheckPackageRequest = {
  atsUpdateBackgroundCheckPackagesRequestDto:
    shared.AtsUpdateBackgroundCheckPackagesRequestDto;
  id: string;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type AtsUpdateBackgroundCheckPackageResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Record updated successfully.
   */
  updateResult?: shared.UpdateResult | undefined;
};

/** @internal */
export const AtsUpdateBackgroundCheckPackageRequest$inboundSchema: z.ZodType<
  AtsUpdateBackgroundCheckPackageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  AtsUpdateBackgroundCheckPackagesRequestDto:
    shared.AtsUpdateBackgroundCheckPackagesRequestDto$inboundSchema,
  id: z.string(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "AtsUpdateBackgroundCheckPackagesRequestDto":
      "atsUpdateBackgroundCheckPackagesRequestDto",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type AtsUpdateBackgroundCheckPackageRequest$Outbound = {
  AtsUpdateBackgroundCheckPackagesRequestDto:
    shared.AtsUpdateBackgroundCheckPackagesRequestDto$Outbound;
  id: string;
  "x-account-id": string;
};

/** @internal */
export const AtsUpdateBackgroundCheckPackageRequest$outboundSchema: z.ZodType<
  AtsUpdateBackgroundCheckPackageRequest$Outbound,
  z.ZodTypeDef,
  AtsUpdateBackgroundCheckPackageRequest
> = z.object({
  atsUpdateBackgroundCheckPackagesRequestDto:
    shared.AtsUpdateBackgroundCheckPackagesRequestDto$outboundSchema,
  id: z.string(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    atsUpdateBackgroundCheckPackagesRequestDto:
      "AtsUpdateBackgroundCheckPackagesRequestDto",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsUpdateBackgroundCheckPackageRequest$ {
  /** @deprecated use `AtsUpdateBackgroundCheckPackageRequest$inboundSchema` instead. */
  export const inboundSchema =
    AtsUpdateBackgroundCheckPackageRequest$inboundSchema;
  /** @deprecated use `AtsUpdateBackgroundCheckPackageRequest$outboundSchema` instead. */
  export const outboundSchema =
    AtsUpdateBackgroundCheckPackageRequest$outboundSchema;
  /** @deprecated use `AtsUpdateBackgroundCheckPackageRequest$Outbound` instead. */
  export type Outbound = AtsUpdateBackgroundCheckPackageRequest$Outbound;
}

export function atsUpdateBackgroundCheckPackageRequestToJSON(
  atsUpdateBackgroundCheckPackageRequest:
    AtsUpdateBackgroundCheckPackageRequest,
): string {
  return JSON.stringify(
    AtsUpdateBackgroundCheckPackageRequest$outboundSchema.parse(
      atsUpdateBackgroundCheckPackageRequest,
    ),
  );
}

export function atsUpdateBackgroundCheckPackageRequestFromJSON(
  jsonString: string,
): SafeParseResult<AtsUpdateBackgroundCheckPackageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AtsUpdateBackgroundCheckPackageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsUpdateBackgroundCheckPackageRequest' from JSON`,
  );
}

/** @internal */
export const AtsUpdateBackgroundCheckPackageResponse$inboundSchema: z.ZodType<
  AtsUpdateBackgroundCheckPackageResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),

  Headers: z.record(z.array(z.string())).default({}),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  UpdateResult: shared.UpdateResult$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "UpdateResult": "updateResult",
  });
});

/** @internal */
export type AtsUpdateBackgroundCheckPackageResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
  UpdateResult?: shared.UpdateResult$Outbound | undefined;
};

/** @internal */
export const AtsUpdateBackgroundCheckPackageResponse$outboundSchema: z.ZodType<
  AtsUpdateBackgroundCheckPackageResponse$Outbound,
  z.ZodTypeDef,
  AtsUpdateBackgroundCheckPackageResponse
> = z.object({
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  updateResult: shared.UpdateResult$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    updateResult: "UpdateResult",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsUpdateBackgroundCheckPackageResponse$ {
  /** @deprecated use `AtsUpdateBackgroundCheckPackageResponse$inboundSchema` instead. */
  export const inboundSchema =
    AtsUpdateBackgroundCheckPackageResponse$inboundSchema;
  /** @deprecated use `AtsUpdateBackgroundCheckPackageResponse$outboundSchema` instead. */
  export const outboundSchema =
    AtsUpdateBackgroundCheckPackageResponse$outboundSchema;
  /** @deprecated use `AtsUpdateBackgroundCheckPackageResponse$Outbound` instead. */
  export type Outbound = AtsUpdateBackgroundCheckPackageResponse$Outbound;
}

export function atsUpdateBackgroundCheckPackageResponseToJSON(
  atsUpdateBackgroundCheckPackageResponse:
    AtsUpdateBackgroundCheckPackageResponse,
): string {
  return JSON.stringify(
    AtsUpdateBackgroundCheckPackageResponse$outboundSchema.parse(
      atsUpdateBackgroundCheckPackageResponse,
    ),
  );
}

export function atsUpdateBackgroundCheckPackageResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  AtsUpdateBackgroundCheckPackageResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AtsUpdateBackgroundCheckPackageResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AtsUpdateBackgroundCheckPackageResponse' from JSON`,
  );
}
