/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type MarketingCreateInAppTemplateRequest = {
  marketingCreateInAppTemplateRequestDto:
    shared.MarketingCreateInAppTemplateRequestDto;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type MarketingCreateInAppTemplateResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * Record created successfully.
   */
  createResult?: shared.CreateResult | undefined;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const MarketingCreateInAppTemplateRequest$inboundSchema: z.ZodType<
  MarketingCreateInAppTemplateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  MarketingCreateInAppTemplateRequestDto:
    shared.MarketingCreateInAppTemplateRequestDto$inboundSchema,
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "MarketingCreateInAppTemplateRequestDto":
      "marketingCreateInAppTemplateRequestDto",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type MarketingCreateInAppTemplateRequest$Outbound = {
  MarketingCreateInAppTemplateRequestDto:
    shared.MarketingCreateInAppTemplateRequestDto$Outbound;
  "x-account-id": string;
};

/** @internal */
export const MarketingCreateInAppTemplateRequest$outboundSchema: z.ZodType<
  MarketingCreateInAppTemplateRequest$Outbound,
  z.ZodTypeDef,
  MarketingCreateInAppTemplateRequest
> = z.object({
  marketingCreateInAppTemplateRequestDto:
    shared.MarketingCreateInAppTemplateRequestDto$outboundSchema,
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    marketingCreateInAppTemplateRequestDto:
      "MarketingCreateInAppTemplateRequestDto",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MarketingCreateInAppTemplateRequest$ {
  /** @deprecated use `MarketingCreateInAppTemplateRequest$inboundSchema` instead. */
  export const inboundSchema =
    MarketingCreateInAppTemplateRequest$inboundSchema;
  /** @deprecated use `MarketingCreateInAppTemplateRequest$outboundSchema` instead. */
  export const outboundSchema =
    MarketingCreateInAppTemplateRequest$outboundSchema;
  /** @deprecated use `MarketingCreateInAppTemplateRequest$Outbound` instead. */
  export type Outbound = MarketingCreateInAppTemplateRequest$Outbound;
}

export function marketingCreateInAppTemplateRequestToJSON(
  marketingCreateInAppTemplateRequest: MarketingCreateInAppTemplateRequest,
): string {
  return JSON.stringify(
    MarketingCreateInAppTemplateRequest$outboundSchema.parse(
      marketingCreateInAppTemplateRequest,
    ),
  );
}

export function marketingCreateInAppTemplateRequestFromJSON(
  jsonString: string,
): SafeParseResult<MarketingCreateInAppTemplateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MarketingCreateInAppTemplateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MarketingCreateInAppTemplateRequest' from JSON`,
  );
}

/** @internal */
export const MarketingCreateInAppTemplateResponse$inboundSchema: z.ZodType<
  MarketingCreateInAppTemplateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  CreateResult: shared.CreateResult$inboundSchema.optional(),
  Headers: z.record(z.array(z.string())),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "CreateResult": "createResult",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type MarketingCreateInAppTemplateResponse$Outbound = {
  ContentType: string;
  CreateResult?: shared.CreateResult$Outbound | undefined;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const MarketingCreateInAppTemplateResponse$outboundSchema: z.ZodType<
  MarketingCreateInAppTemplateResponse$Outbound,
  z.ZodTypeDef,
  MarketingCreateInAppTemplateResponse
> = z.object({
  contentType: z.string(),
  createResult: shared.CreateResult$outboundSchema.optional(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    createResult: "CreateResult",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MarketingCreateInAppTemplateResponse$ {
  /** @deprecated use `MarketingCreateInAppTemplateResponse$inboundSchema` instead. */
  export const inboundSchema =
    MarketingCreateInAppTemplateResponse$inboundSchema;
  /** @deprecated use `MarketingCreateInAppTemplateResponse$outboundSchema` instead. */
  export const outboundSchema =
    MarketingCreateInAppTemplateResponse$outboundSchema;
  /** @deprecated use `MarketingCreateInAppTemplateResponse$Outbound` instead. */
  export type Outbound = MarketingCreateInAppTemplateResponse$Outbound;
}

export function marketingCreateInAppTemplateResponseToJSON(
  marketingCreateInAppTemplateResponse: MarketingCreateInAppTemplateResponse,
): string {
  return JSON.stringify(
    MarketingCreateInAppTemplateResponse$outboundSchema.parse(
      marketingCreateInAppTemplateResponse,
    ),
  );
}

export function marketingCreateInAppTemplateResponseFromJSON(
  jsonString: string,
): SafeParseResult<MarketingCreateInAppTemplateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MarketingCreateInAppTemplateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MarketingCreateInAppTemplateResponse' from JSON`,
  );
}
