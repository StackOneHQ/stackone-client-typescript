/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import * as b64$ from "../../../lib/base64.js";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DocumentsDownloadFileRequest = {
  /**
   * The export format of the file
   */
  exportFormat?: string | null | undefined;
  /**
   * The format to download the file in
   */
  format?: string | null | undefined;
  id: string;
  /**
   * The account identifier
   */
  xAccountId: string;
  /**
   * The session token
   */
  xStackoneApiSessionToken?: string | undefined;
};

export type DocumentsDownloadFileResponse = {
  body?: Uint8Array | string | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const DocumentsDownloadFileRequest$inboundSchema: z.ZodType<
  DocumentsDownloadFileRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  export_format: z.nullable(z.string()).optional(),
  format: z.nullable(z.string()).optional(),
  id: z.string(),
  "x-account-id": z.string(),
  "x-stackone-api-session-token": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "export_format": "exportFormat",
    "x-account-id": "xAccountId",
    "x-stackone-api-session-token": "xStackoneApiSessionToken",
  });
});

/** @internal */
export type DocumentsDownloadFileRequest$Outbound = {
  export_format?: string | null | undefined;
  format?: string | null | undefined;
  id: string;
  "x-account-id": string;
  "x-stackone-api-session-token"?: string | undefined;
};

/** @internal */
export const DocumentsDownloadFileRequest$outboundSchema: z.ZodType<
  DocumentsDownloadFileRequest$Outbound,
  z.ZodTypeDef,
  DocumentsDownloadFileRequest
> = z.object({
  exportFormat: z.nullable(z.string()).optional(),
  format: z.nullable(z.string()).optional(),
  id: z.string(),
  xAccountId: z.string(),
  xStackoneApiSessionToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    exportFormat: "export_format",
    xAccountId: "x-account-id",
    xStackoneApiSessionToken: "x-stackone-api-session-token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentsDownloadFileRequest$ {
  /** @deprecated use `DocumentsDownloadFileRequest$inboundSchema` instead. */
  export const inboundSchema = DocumentsDownloadFileRequest$inboundSchema;
  /** @deprecated use `DocumentsDownloadFileRequest$outboundSchema` instead. */
  export const outboundSchema = DocumentsDownloadFileRequest$outboundSchema;
  /** @deprecated use `DocumentsDownloadFileRequest$Outbound` instead. */
  export type Outbound = DocumentsDownloadFileRequest$Outbound;
}

export function documentsDownloadFileRequestToJSON(
  documentsDownloadFileRequest: DocumentsDownloadFileRequest,
): string {
  return JSON.stringify(
    DocumentsDownloadFileRequest$outboundSchema.parse(
      documentsDownloadFileRequest,
    ),
  );
}

export function documentsDownloadFileRequestFromJSON(
  jsonString: string,
): SafeParseResult<DocumentsDownloadFileRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentsDownloadFileRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentsDownloadFileRequest' from JSON`,
  );
}

/** @internal */
export const DocumentsDownloadFileResponse$inboundSchema: z.ZodType<
  DocumentsDownloadFileResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Body: b64$.zodInbound.optional(),
  ContentType: z.string(),

  Headers: z.record(z.array(z.string())).default({}),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "Body": "body",
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type DocumentsDownloadFileResponse$Outbound = {
  Body?: Uint8Array | undefined;
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const DocumentsDownloadFileResponse$outboundSchema: z.ZodType<
  DocumentsDownloadFileResponse$Outbound,
  z.ZodTypeDef,
  DocumentsDownloadFileResponse
> = z.object({
  body: b64$.zodOutbound.optional(),
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    body: "Body",
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentsDownloadFileResponse$ {
  /** @deprecated use `DocumentsDownloadFileResponse$inboundSchema` instead. */
  export const inboundSchema = DocumentsDownloadFileResponse$inboundSchema;
  /** @deprecated use `DocumentsDownloadFileResponse$outboundSchema` instead. */
  export const outboundSchema = DocumentsDownloadFileResponse$outboundSchema;
  /** @deprecated use `DocumentsDownloadFileResponse$Outbound` instead. */
  export type Outbound = DocumentsDownloadFileResponse$Outbound;
}

export function documentsDownloadFileResponseToJSON(
  documentsDownloadFileResponse: DocumentsDownloadFileResponse,
): string {
  return JSON.stringify(
    DocumentsDownloadFileResponse$outboundSchema.parse(
      documentsDownloadFileResponse,
    ),
  );
}

export function documentsDownloadFileResponseFromJSON(
  jsonString: string,
): SafeParseResult<DocumentsDownloadFileResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentsDownloadFileResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentsDownloadFileResponse' from JSON`,
  );
}
