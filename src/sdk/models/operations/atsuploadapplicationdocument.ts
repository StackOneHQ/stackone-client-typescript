/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type AtsUploadApplicationDocumentRequest = {
    unifiedUploadRequestDto: shared.UnifiedUploadRequestDto;
    id: string;
    /**
     * The account identifier
     */
    xAccountId: string;
};

export type AtsUploadApplicationDocumentResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The document related to the application with the given identifier was uploaded.
     */
    writeResultApiModel?: shared.WriteResultApiModel | undefined;
};

/** @internal */
export namespace AtsUploadApplicationDocumentRequest$ {
    export const inboundSchema: z.ZodType<
        AtsUploadApplicationDocumentRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            UnifiedUploadRequestDto: shared.UnifiedUploadRequestDto$.inboundSchema,
            id: z.string(),
            "x-account-id": z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                UnifiedUploadRequestDto: "unifiedUploadRequestDto",
                "x-account-id": "xAccountId",
            });
        });

    export type Outbound = {
        UnifiedUploadRequestDto: shared.UnifiedUploadRequestDto$.Outbound;
        id: string;
        "x-account-id": string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AtsUploadApplicationDocumentRequest
    > = z
        .object({
            unifiedUploadRequestDto: shared.UnifiedUploadRequestDto$.outboundSchema,
            id: z.string(),
            xAccountId: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                unifiedUploadRequestDto: "UnifiedUploadRequestDto",
                xAccountId: "x-account-id",
            });
        });
}

/** @internal */
export namespace AtsUploadApplicationDocumentResponse$ {
    export const inboundSchema: z.ZodType<
        AtsUploadApplicationDocumentResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            WriteResultApiModel: shared.WriteResultApiModel$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
                WriteResultApiModel: "writeResultApiModel",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        WriteResultApiModel?: shared.WriteResultApiModel$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AtsUploadApplicationDocumentResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            writeResultApiModel: shared.WriteResultApiModel$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
                writeResultApiModel: "WriteResultApiModel",
            });
        });
}
