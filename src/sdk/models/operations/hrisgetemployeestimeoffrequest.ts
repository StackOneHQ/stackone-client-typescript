/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type HrisGetEmployeesTimeOffRequestRequest = {
  /**
   * The comma separated list of fields that will be returned in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  id: string;
  /**
   * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
   */
  proxy?: { [k: string]: any } | null | undefined;
  /**
   * Indicates that the raw request result should be returned in addition to the mapped result (default value is false)
   */
  raw?: boolean | null | undefined;
  subResourceId: string;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type HrisGetEmployeesTimeOffRequestResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The time off request related to the employee with the given identifiers was retrieved.
   */
  timeOffResult?: shared.TimeOffResult | undefined;
};

/** @internal */
export const HrisGetEmployeesTimeOffRequestRequest$inboundSchema: z.ZodType<
  HrisGetEmployeesTimeOffRequestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.nullable(z.string()).optional(),
  id: z.string(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  subResourceId: z.string(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type HrisGetEmployeesTimeOffRequestRequest$Outbound = {
  fields?: string | null | undefined;
  id: string;
  proxy?: { [k: string]: any } | null | undefined;
  raw?: boolean | null | undefined;
  subResourceId: string;
  "x-account-id": string;
};

/** @internal */
export const HrisGetEmployeesTimeOffRequestRequest$outboundSchema: z.ZodType<
  HrisGetEmployeesTimeOffRequestRequest$Outbound,
  z.ZodTypeDef,
  HrisGetEmployeesTimeOffRequestRequest
> = z.object({
  fields: z.nullable(z.string()).optional(),
  id: z.string(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  subResourceId: z.string(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisGetEmployeesTimeOffRequestRequest$ {
  /** @deprecated use `HrisGetEmployeesTimeOffRequestRequest$inboundSchema` instead. */
  export const inboundSchema =
    HrisGetEmployeesTimeOffRequestRequest$inboundSchema;
  /** @deprecated use `HrisGetEmployeesTimeOffRequestRequest$outboundSchema` instead. */
  export const outboundSchema =
    HrisGetEmployeesTimeOffRequestRequest$outboundSchema;
  /** @deprecated use `HrisGetEmployeesTimeOffRequestRequest$Outbound` instead. */
  export type Outbound = HrisGetEmployeesTimeOffRequestRequest$Outbound;
}

export function hrisGetEmployeesTimeOffRequestRequestToJSON(
  hrisGetEmployeesTimeOffRequestRequest: HrisGetEmployeesTimeOffRequestRequest,
): string {
  return JSON.stringify(
    HrisGetEmployeesTimeOffRequestRequest$outboundSchema.parse(
      hrisGetEmployeesTimeOffRequestRequest,
    ),
  );
}

export function hrisGetEmployeesTimeOffRequestRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisGetEmployeesTimeOffRequestRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisGetEmployeesTimeOffRequestRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisGetEmployeesTimeOffRequestRequest' from JSON`,
  );
}

/** @internal */
export const HrisGetEmployeesTimeOffRequestResponse$inboundSchema: z.ZodType<
  HrisGetEmployeesTimeOffRequestResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  TimeOffResult: shared.TimeOffResult$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "TimeOffResult": "timeOffResult",
  });
});

/** @internal */
export type HrisGetEmployeesTimeOffRequestResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
  TimeOffResult?: shared.TimeOffResult$Outbound | undefined;
};

/** @internal */
export const HrisGetEmployeesTimeOffRequestResponse$outboundSchema: z.ZodType<
  HrisGetEmployeesTimeOffRequestResponse$Outbound,
  z.ZodTypeDef,
  HrisGetEmployeesTimeOffRequestResponse
> = z.object({
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  timeOffResult: shared.TimeOffResult$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    timeOffResult: "TimeOffResult",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisGetEmployeesTimeOffRequestResponse$ {
  /** @deprecated use `HrisGetEmployeesTimeOffRequestResponse$inboundSchema` instead. */
  export const inboundSchema =
    HrisGetEmployeesTimeOffRequestResponse$inboundSchema;
  /** @deprecated use `HrisGetEmployeesTimeOffRequestResponse$outboundSchema` instead. */
  export const outboundSchema =
    HrisGetEmployeesTimeOffRequestResponse$outboundSchema;
  /** @deprecated use `HrisGetEmployeesTimeOffRequestResponse$Outbound` instead. */
  export type Outbound = HrisGetEmployeesTimeOffRequestResponse$Outbound;
}

export function hrisGetEmployeesTimeOffRequestResponseToJSON(
  hrisGetEmployeesTimeOffRequestResponse:
    HrisGetEmployeesTimeOffRequestResponse,
): string {
  return JSON.stringify(
    HrisGetEmployeesTimeOffRequestResponse$outboundSchema.parse(
      hrisGetEmployeesTimeOffRequestResponse,
    ),
  );
}

export function hrisGetEmployeesTimeOffRequestResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisGetEmployeesTimeOffRequestResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisGetEmployeesTimeOffRequestResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisGetEmployeesTimeOffRequestResponse' from JSON`,
  );
}
