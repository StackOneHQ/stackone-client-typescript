/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * Filter parameters that allow greater customisation of the list response
 */
export type HrisListPositionsQueryParamFilter = {
  /**
   * Use a string with a date to only select results updated after that given date
   */
  updatedAfter?: string | null | undefined;
};

/**
 * Filter positions by status
 */
export enum QueryParamStatus {
  Open = "open",
  Closed = "closed",
  Paused = "paused",
  UnmappedValue = "unmapped_value",
}

export type HrisListPositionsRequest = {
  /**
   * The comma separated list of fields to return in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  /**
   * Filter parameters that allow greater customisation of the list response
   */
  filter?: HrisListPositionsQueryParamFilter | null | undefined;
  /**
   * The unified cursor
   */
  next?: string | null | undefined;
  /**
   * The page number of the results to fetch
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  page?: string | null | undefined;
  /**
   * The number of results per page (default value is 25)
   */
  pageSize?: string | null | undefined;
  /**
   * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
   */
  proxy?: { [k: string]: any } | null | undefined;
  /**
   * Indicates that the raw request result should be returned in addition to the mapped result (default value is false)
   */
  raw?: boolean | null | undefined;
  /**
   * Filter positions by status
   */
  status?: QueryParamStatus | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  updatedAfter?: string | null | undefined;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type HrisListPositionsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * The list of positions was retrieved.
   */
  positionsPaginated?: shared.PositionsPaginated | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const HrisListPositionsQueryParamFilter$inboundSchema: z.ZodType<
  HrisListPositionsQueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  updated_after: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "updated_after": "updatedAfter",
  });
});

/** @internal */
export type HrisListPositionsQueryParamFilter$Outbound = {
  updated_after?: string | null | undefined;
};

/** @internal */
export const HrisListPositionsQueryParamFilter$outboundSchema: z.ZodType<
  HrisListPositionsQueryParamFilter$Outbound,
  z.ZodTypeDef,
  HrisListPositionsQueryParamFilter
> = z.object({
  updatedAfter: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    updatedAfter: "updated_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisListPositionsQueryParamFilter$ {
  /** @deprecated use `HrisListPositionsQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema = HrisListPositionsQueryParamFilter$inboundSchema;
  /** @deprecated use `HrisListPositionsQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema =
    HrisListPositionsQueryParamFilter$outboundSchema;
  /** @deprecated use `HrisListPositionsQueryParamFilter$Outbound` instead. */
  export type Outbound = HrisListPositionsQueryParamFilter$Outbound;
}

export function hrisListPositionsQueryParamFilterToJSON(
  hrisListPositionsQueryParamFilter: HrisListPositionsQueryParamFilter,
): string {
  return JSON.stringify(
    HrisListPositionsQueryParamFilter$outboundSchema.parse(
      hrisListPositionsQueryParamFilter,
    ),
  );
}

export function hrisListPositionsQueryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<HrisListPositionsQueryParamFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisListPositionsQueryParamFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisListPositionsQueryParamFilter' from JSON`,
  );
}

/** @internal */
export const QueryParamStatus$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamStatus
> = z.nativeEnum(QueryParamStatus);

/** @internal */
export const QueryParamStatus$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamStatus
> = QueryParamStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamStatus$ {
  /** @deprecated use `QueryParamStatus$inboundSchema` instead. */
  export const inboundSchema = QueryParamStatus$inboundSchema;
  /** @deprecated use `QueryParamStatus$outboundSchema` instead. */
  export const outboundSchema = QueryParamStatus$outboundSchema;
}

/** @internal */
export const HrisListPositionsRequest$inboundSchema: z.ZodType<
  HrisListPositionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => HrisListPositionsQueryParamFilter$inboundSchema),
  ).optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  page_size: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  status: z.nullable(QueryParamStatus$inboundSchema).optional(),
  updated_after: z.nullable(z.string()).optional(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "updated_after": "updatedAfter",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type HrisListPositionsRequest$Outbound = {
  fields?: string | null | undefined;
  filter?: HrisListPositionsQueryParamFilter$Outbound | null | undefined;
  next?: string | null | undefined;
  page?: string | null | undefined;
  page_size?: string | null | undefined;
  proxy?: { [k: string]: any } | null | undefined;
  raw?: boolean | null | undefined;
  status?: string | null | undefined;
  updated_after?: string | null | undefined;
  "x-account-id": string;
};

/** @internal */
export const HrisListPositionsRequest$outboundSchema: z.ZodType<
  HrisListPositionsRequest$Outbound,
  z.ZodTypeDef,
  HrisListPositionsRequest
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => HrisListPositionsQueryParamFilter$outboundSchema),
  ).optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  pageSize: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  status: z.nullable(QueryParamStatus$outboundSchema).optional(),
  updatedAfter: z.nullable(z.string()).optional(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    updatedAfter: "updated_after",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisListPositionsRequest$ {
  /** @deprecated use `HrisListPositionsRequest$inboundSchema` instead. */
  export const inboundSchema = HrisListPositionsRequest$inboundSchema;
  /** @deprecated use `HrisListPositionsRequest$outboundSchema` instead. */
  export const outboundSchema = HrisListPositionsRequest$outboundSchema;
  /** @deprecated use `HrisListPositionsRequest$Outbound` instead. */
  export type Outbound = HrisListPositionsRequest$Outbound;
}

export function hrisListPositionsRequestToJSON(
  hrisListPositionsRequest: HrisListPositionsRequest,
): string {
  return JSON.stringify(
    HrisListPositionsRequest$outboundSchema.parse(hrisListPositionsRequest),
  );
}

export function hrisListPositionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisListPositionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisListPositionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisListPositionsRequest' from JSON`,
  );
}

/** @internal */
export const HrisListPositionsResponse$inboundSchema: z.ZodType<
  HrisListPositionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  PositionsPaginated: shared.PositionsPaginated$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "PositionsPaginated": "positionsPaginated",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type HrisListPositionsResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  PositionsPaginated?: shared.PositionsPaginated$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const HrisListPositionsResponse$outboundSchema: z.ZodType<
  HrisListPositionsResponse$Outbound,
  z.ZodTypeDef,
  HrisListPositionsResponse
> = z.object({
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  positionsPaginated: shared.PositionsPaginated$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    headers: "Headers",
    positionsPaginated: "PositionsPaginated",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisListPositionsResponse$ {
  /** @deprecated use `HrisListPositionsResponse$inboundSchema` instead. */
  export const inboundSchema = HrisListPositionsResponse$inboundSchema;
  /** @deprecated use `HrisListPositionsResponse$outboundSchema` instead. */
  export const outboundSchema = HrisListPositionsResponse$outboundSchema;
  /** @deprecated use `HrisListPositionsResponse$Outbound` instead. */
  export type Outbound = HrisListPositionsResponse$Outbound;
}

export function hrisListPositionsResponseToJSON(
  hrisListPositionsResponse: HrisListPositionsResponse,
): string {
  return JSON.stringify(
    HrisListPositionsResponse$outboundSchema.parse(hrisListPositionsResponse),
  );
}

export function hrisListPositionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisListPositionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisListPositionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisListPositionsResponse' from JSON`,
  );
}
