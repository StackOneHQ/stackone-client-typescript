/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * Actions Metadata filters
 */
export type Filter = {
  /**
   * A comma-separated list of account IDs to filter the results by.
   */
  accountIds?: string | null | undefined;
  /**
   * The action key to filter the results by
   */
  actionKey?: string | null | undefined;
  /**
   * A comma-separated list of connectors to filter the results by.
   */
  connectors?: string | null | undefined;
};

export enum Include {
  OperationDetails = "operation_details",
}

export type StackoneListActionsMetaRequest = {
  /**
   * Actions Metadata filters
   */
  filter?: Filter | null | undefined;
  /**
   * The relation to group the results by
   */
  groupBy?: string | null | undefined;
  /**
   * Additional data to include in the response
   */
  include?: Array<Include> | null | undefined;
  /**
   * The unified cursor
   */
  next?: string | null | undefined;
  /**
   * The page number of the results to fetch
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  page?: string | null | undefined;
  /**
   * The number of results per page (default value is 25)
   */
  pageSize?: string | null | undefined;
};

export type StackoneListActionsMetaResponse = {
  /**
   * List of actions metadata
   */
  actionsMetaPaginated?: shared.ActionsMetaPaginated | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const Filter$inboundSchema: z.ZodType<Filter, z.ZodTypeDef, unknown> = z
  .object({
    account_ids: z.nullable(z.string()).optional(),
    action_key: z.nullable(z.string()).optional(),
    connectors: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "account_ids": "accountIds",
      "action_key": "actionKey",
    });
  });

/** @internal */
export type Filter$Outbound = {
  account_ids?: string | null | undefined;
  action_key?: string | null | undefined;
  connectors?: string | null | undefined;
};

/** @internal */
export const Filter$outboundSchema: z.ZodType<
  Filter$Outbound,
  z.ZodTypeDef,
  Filter
> = z.object({
  accountIds: z.nullable(z.string()).optional(),
  actionKey: z.nullable(z.string()).optional(),
  connectors: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    accountIds: "account_ids",
    actionKey: "action_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filter$ {
  /** @deprecated use `Filter$inboundSchema` instead. */
  export const inboundSchema = Filter$inboundSchema;
  /** @deprecated use `Filter$outboundSchema` instead. */
  export const outboundSchema = Filter$outboundSchema;
  /** @deprecated use `Filter$Outbound` instead. */
  export type Outbound = Filter$Outbound;
}

export function filterToJSON(filter: Filter): string {
  return JSON.stringify(Filter$outboundSchema.parse(filter));
}

export function filterFromJSON(
  jsonString: string,
): SafeParseResult<Filter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filter' from JSON`,
  );
}

/** @internal */
export const Include$inboundSchema: z.ZodNativeEnum<typeof Include> = z
  .nativeEnum(Include);

/** @internal */
export const Include$outboundSchema: z.ZodNativeEnum<typeof Include> =
  Include$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Include$ {
  /** @deprecated use `Include$inboundSchema` instead. */
  export const inboundSchema = Include$inboundSchema;
  /** @deprecated use `Include$outboundSchema` instead. */
  export const outboundSchema = Include$outboundSchema;
}

/** @internal */
export const StackoneListActionsMetaRequest$inboundSchema: z.ZodType<
  StackoneListActionsMetaRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  filter: z.nullable(z.lazy(() => Filter$inboundSchema)).optional(),
  group_by: z.nullable(z.string().default("connector")),
  include: z.nullable(z.array(Include$inboundSchema)).optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  page_size: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "group_by": "groupBy",
    "page_size": "pageSize",
  });
});

/** @internal */
export type StackoneListActionsMetaRequest$Outbound = {
  filter?: Filter$Outbound | null | undefined;
  group_by: string | null;
  include?: Array<string> | null | undefined;
  next?: string | null | undefined;
  page?: string | null | undefined;
  page_size?: string | null | undefined;
};

/** @internal */
export const StackoneListActionsMetaRequest$outboundSchema: z.ZodType<
  StackoneListActionsMetaRequest$Outbound,
  z.ZodTypeDef,
  StackoneListActionsMetaRequest
> = z.object({
  filter: z.nullable(z.lazy(() => Filter$outboundSchema)).optional(),
  groupBy: z.nullable(z.string().default("connector")),
  include: z.nullable(z.array(Include$outboundSchema)).optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  pageSize: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    groupBy: "group_by",
    pageSize: "page_size",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StackoneListActionsMetaRequest$ {
  /** @deprecated use `StackoneListActionsMetaRequest$inboundSchema` instead. */
  export const inboundSchema = StackoneListActionsMetaRequest$inboundSchema;
  /** @deprecated use `StackoneListActionsMetaRequest$outboundSchema` instead. */
  export const outboundSchema = StackoneListActionsMetaRequest$outboundSchema;
  /** @deprecated use `StackoneListActionsMetaRequest$Outbound` instead. */
  export type Outbound = StackoneListActionsMetaRequest$Outbound;
}

export function stackoneListActionsMetaRequestToJSON(
  stackoneListActionsMetaRequest: StackoneListActionsMetaRequest,
): string {
  return JSON.stringify(
    StackoneListActionsMetaRequest$outboundSchema.parse(
      stackoneListActionsMetaRequest,
    ),
  );
}

export function stackoneListActionsMetaRequestFromJSON(
  jsonString: string,
): SafeParseResult<StackoneListActionsMetaRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StackoneListActionsMetaRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StackoneListActionsMetaRequest' from JSON`,
  );
}

/** @internal */
export const StackoneListActionsMetaResponse$inboundSchema: z.ZodType<
  StackoneListActionsMetaResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ActionsMetaPaginated: shared.ActionsMetaPaginated$inboundSchema.optional(),
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ActionsMetaPaginated": "actionsMetaPaginated",
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type StackoneListActionsMetaResponse$Outbound = {
  ActionsMetaPaginated?: shared.ActionsMetaPaginated$Outbound | undefined;
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const StackoneListActionsMetaResponse$outboundSchema: z.ZodType<
  StackoneListActionsMetaResponse$Outbound,
  z.ZodTypeDef,
  StackoneListActionsMetaResponse
> = z.object({
  actionsMetaPaginated: shared.ActionsMetaPaginated$outboundSchema.optional(),
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    actionsMetaPaginated: "ActionsMetaPaginated",
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StackoneListActionsMetaResponse$ {
  /** @deprecated use `StackoneListActionsMetaResponse$inboundSchema` instead. */
  export const inboundSchema = StackoneListActionsMetaResponse$inboundSchema;
  /** @deprecated use `StackoneListActionsMetaResponse$outboundSchema` instead. */
  export const outboundSchema = StackoneListActionsMetaResponse$outboundSchema;
  /** @deprecated use `StackoneListActionsMetaResponse$Outbound` instead. */
  export type Outbound = StackoneListActionsMetaResponse$Outbound;
}

export function stackoneListActionsMetaResponseToJSON(
  stackoneListActionsMetaResponse: StackoneListActionsMetaResponse,
): string {
  return JSON.stringify(
    StackoneListActionsMetaResponse$outboundSchema.parse(
      stackoneListActionsMetaResponse,
    ),
  );
}

export function stackoneListActionsMetaResponseFromJSON(
  jsonString: string,
): SafeParseResult<StackoneListActionsMetaResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StackoneListActionsMetaResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StackoneListActionsMetaResponse' from JSON`,
  );
}
