/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type AtsOrderBackgroundCheckRequestRequest = {
  atsCreateBackgroundCheckOrderRequestDto:
    shared.AtsCreateBackgroundCheckOrderRequestDto;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type AtsOrderBackgroundCheckRequestResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * The order request of the background check for candidate.
   */
  createBackgroundCheckOrderResult?:
    | shared.CreateBackgroundCheckOrderResult
    | undefined;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const AtsOrderBackgroundCheckRequestRequest$inboundSchema: z.ZodType<
  AtsOrderBackgroundCheckRequestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  AtsCreateBackgroundCheckOrderRequestDto:
    shared.AtsCreateBackgroundCheckOrderRequestDto$inboundSchema,
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "AtsCreateBackgroundCheckOrderRequestDto":
      "atsCreateBackgroundCheckOrderRequestDto",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type AtsOrderBackgroundCheckRequestRequest$Outbound = {
  AtsCreateBackgroundCheckOrderRequestDto:
    shared.AtsCreateBackgroundCheckOrderRequestDto$Outbound;
  "x-account-id": string;
};

/** @internal */
export const AtsOrderBackgroundCheckRequestRequest$outboundSchema: z.ZodType<
  AtsOrderBackgroundCheckRequestRequest$Outbound,
  z.ZodTypeDef,
  AtsOrderBackgroundCheckRequestRequest
> = z.object({
  atsCreateBackgroundCheckOrderRequestDto:
    shared.AtsCreateBackgroundCheckOrderRequestDto$outboundSchema,
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    atsCreateBackgroundCheckOrderRequestDto:
      "AtsCreateBackgroundCheckOrderRequestDto",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsOrderBackgroundCheckRequestRequest$ {
  /** @deprecated use `AtsOrderBackgroundCheckRequestRequest$inboundSchema` instead. */
  export const inboundSchema =
    AtsOrderBackgroundCheckRequestRequest$inboundSchema;
  /** @deprecated use `AtsOrderBackgroundCheckRequestRequest$outboundSchema` instead. */
  export const outboundSchema =
    AtsOrderBackgroundCheckRequestRequest$outboundSchema;
  /** @deprecated use `AtsOrderBackgroundCheckRequestRequest$Outbound` instead. */
  export type Outbound = AtsOrderBackgroundCheckRequestRequest$Outbound;
}

export function atsOrderBackgroundCheckRequestRequestToJSON(
  atsOrderBackgroundCheckRequestRequest: AtsOrderBackgroundCheckRequestRequest,
): string {
  return JSON.stringify(
    AtsOrderBackgroundCheckRequestRequest$outboundSchema.parse(
      atsOrderBackgroundCheckRequestRequest,
    ),
  );
}

export function atsOrderBackgroundCheckRequestRequestFromJSON(
  jsonString: string,
): SafeParseResult<AtsOrderBackgroundCheckRequestRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AtsOrderBackgroundCheckRequestRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsOrderBackgroundCheckRequestRequest' from JSON`,
  );
}

/** @internal */
export const AtsOrderBackgroundCheckRequestResponse$inboundSchema: z.ZodType<
  AtsOrderBackgroundCheckRequestResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  CreateBackgroundCheckOrderResult: shared
    .CreateBackgroundCheckOrderResult$inboundSchema.optional(),

  Headers: z.record(z.array(z.string())).default({}),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "CreateBackgroundCheckOrderResult": "createBackgroundCheckOrderResult",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type AtsOrderBackgroundCheckRequestResponse$Outbound = {
  ContentType: string;
  CreateBackgroundCheckOrderResult?:
    | shared.CreateBackgroundCheckOrderResult$Outbound
    | undefined;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const AtsOrderBackgroundCheckRequestResponse$outboundSchema: z.ZodType<
  AtsOrderBackgroundCheckRequestResponse$Outbound,
  z.ZodTypeDef,
  AtsOrderBackgroundCheckRequestResponse
> = z.object({
  contentType: z.string(),
  createBackgroundCheckOrderResult: shared
    .CreateBackgroundCheckOrderResult$outboundSchema.optional(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    createBackgroundCheckOrderResult: "CreateBackgroundCheckOrderResult",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsOrderBackgroundCheckRequestResponse$ {
  /** @deprecated use `AtsOrderBackgroundCheckRequestResponse$inboundSchema` instead. */
  export const inboundSchema =
    AtsOrderBackgroundCheckRequestResponse$inboundSchema;
  /** @deprecated use `AtsOrderBackgroundCheckRequestResponse$outboundSchema` instead. */
  export const outboundSchema =
    AtsOrderBackgroundCheckRequestResponse$outboundSchema;
  /** @deprecated use `AtsOrderBackgroundCheckRequestResponse$Outbound` instead. */
  export type Outbound = AtsOrderBackgroundCheckRequestResponse$Outbound;
}

export function atsOrderBackgroundCheckRequestResponseToJSON(
  atsOrderBackgroundCheckRequestResponse:
    AtsOrderBackgroundCheckRequestResponse,
): string {
  return JSON.stringify(
    AtsOrderBackgroundCheckRequestResponse$outboundSchema.parse(
      atsOrderBackgroundCheckRequestResponse,
    ),
  );
}

export function atsOrderBackgroundCheckRequestResponseFromJSON(
  jsonString: string,
): SafeParseResult<AtsOrderBackgroundCheckRequestResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AtsOrderBackgroundCheckRequestResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsOrderBackgroundCheckRequestResponse' from JSON`,
  );
}
