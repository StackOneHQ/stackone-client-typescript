/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type MessagingCreateConversationRequest = {
  messagingCreateConversationRequestDto:
    shared.MessagingCreateConversationRequestDto;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type MessagingCreateConversationResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * The conversation was created successfully.
   */
  createResult?: shared.CreateResult | undefined;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const MessagingCreateConversationRequest$inboundSchema: z.ZodType<
  MessagingCreateConversationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  MessagingCreateConversationRequestDto:
    shared.MessagingCreateConversationRequestDto$inboundSchema,
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "MessagingCreateConversationRequestDto":
      "messagingCreateConversationRequestDto",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type MessagingCreateConversationRequest$Outbound = {
  MessagingCreateConversationRequestDto:
    shared.MessagingCreateConversationRequestDto$Outbound;
  "x-account-id": string;
};

/** @internal */
export const MessagingCreateConversationRequest$outboundSchema: z.ZodType<
  MessagingCreateConversationRequest$Outbound,
  z.ZodTypeDef,
  MessagingCreateConversationRequest
> = z.object({
  messagingCreateConversationRequestDto:
    shared.MessagingCreateConversationRequestDto$outboundSchema,
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    messagingCreateConversationRequestDto:
      "MessagingCreateConversationRequestDto",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingCreateConversationRequest$ {
  /** @deprecated use `MessagingCreateConversationRequest$inboundSchema` instead. */
  export const inboundSchema = MessagingCreateConversationRequest$inboundSchema;
  /** @deprecated use `MessagingCreateConversationRequest$outboundSchema` instead. */
  export const outboundSchema =
    MessagingCreateConversationRequest$outboundSchema;
  /** @deprecated use `MessagingCreateConversationRequest$Outbound` instead. */
  export type Outbound = MessagingCreateConversationRequest$Outbound;
}

export function messagingCreateConversationRequestToJSON(
  messagingCreateConversationRequest: MessagingCreateConversationRequest,
): string {
  return JSON.stringify(
    MessagingCreateConversationRequest$outboundSchema.parse(
      messagingCreateConversationRequest,
    ),
  );
}

export function messagingCreateConversationRequestFromJSON(
  jsonString: string,
): SafeParseResult<MessagingCreateConversationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MessagingCreateConversationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessagingCreateConversationRequest' from JSON`,
  );
}

/** @internal */
export const MessagingCreateConversationResponse$inboundSchema: z.ZodType<
  MessagingCreateConversationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  CreateResult: shared.CreateResult$inboundSchema.optional(),
  Headers: z.record(z.array(z.string())),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "CreateResult": "createResult",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type MessagingCreateConversationResponse$Outbound = {
  ContentType: string;
  CreateResult?: shared.CreateResult$Outbound | undefined;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const MessagingCreateConversationResponse$outboundSchema: z.ZodType<
  MessagingCreateConversationResponse$Outbound,
  z.ZodTypeDef,
  MessagingCreateConversationResponse
> = z.object({
  contentType: z.string(),
  createResult: shared.CreateResult$outboundSchema.optional(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    createResult: "CreateResult",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingCreateConversationResponse$ {
  /** @deprecated use `MessagingCreateConversationResponse$inboundSchema` instead. */
  export const inboundSchema =
    MessagingCreateConversationResponse$inboundSchema;
  /** @deprecated use `MessagingCreateConversationResponse$outboundSchema` instead. */
  export const outboundSchema =
    MessagingCreateConversationResponse$outboundSchema;
  /** @deprecated use `MessagingCreateConversationResponse$Outbound` instead. */
  export type Outbound = MessagingCreateConversationResponse$Outbound;
}

export function messagingCreateConversationResponseToJSON(
  messagingCreateConversationResponse: MessagingCreateConversationResponse,
): string {
  return JSON.stringify(
    MessagingCreateConversationResponse$outboundSchema.parse(
      messagingCreateConversationResponse,
    ),
  );
}

export function messagingCreateConversationResponseFromJSON(
  jsonString: string,
): SafeParseResult<MessagingCreateConversationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MessagingCreateConversationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessagingCreateConversationResponse' from JSON`,
  );
}
