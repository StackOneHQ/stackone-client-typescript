/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type StackoneMcpDeleteSecurity = {
  apiKey?: string | undefined;
  basic?: shared.SchemeBasic | undefined;
};

export type StackoneMcpDeleteRequest = {
  /**
   * Session id
   */
  mcpSessionId: string;
  /**
   * Account secure id for the target provider account
   */
  xAccountId: string;
};

export type StackoneMcpDeleteResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const StackoneMcpDeleteSecurity$inboundSchema: z.ZodType<
  StackoneMcpDeleteSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  ApiKey: z.string().optional(),
  basic: shared.SchemeBasic$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ApiKey": "apiKey",
  });
});

/** @internal */
export type StackoneMcpDeleteSecurity$Outbound = {
  ApiKey?: string | undefined;
  basic?: shared.SchemeBasic$Outbound | undefined;
};

/** @internal */
export const StackoneMcpDeleteSecurity$outboundSchema: z.ZodType<
  StackoneMcpDeleteSecurity$Outbound,
  z.ZodTypeDef,
  StackoneMcpDeleteSecurity
> = z.object({
  apiKey: z.string().optional(),
  basic: shared.SchemeBasic$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    apiKey: "ApiKey",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StackoneMcpDeleteSecurity$ {
  /** @deprecated use `StackoneMcpDeleteSecurity$inboundSchema` instead. */
  export const inboundSchema = StackoneMcpDeleteSecurity$inboundSchema;
  /** @deprecated use `StackoneMcpDeleteSecurity$outboundSchema` instead. */
  export const outboundSchema = StackoneMcpDeleteSecurity$outboundSchema;
  /** @deprecated use `StackoneMcpDeleteSecurity$Outbound` instead. */
  export type Outbound = StackoneMcpDeleteSecurity$Outbound;
}

export function stackoneMcpDeleteSecurityToJSON(
  stackoneMcpDeleteSecurity: StackoneMcpDeleteSecurity,
): string {
  return JSON.stringify(
    StackoneMcpDeleteSecurity$outboundSchema.parse(stackoneMcpDeleteSecurity),
  );
}

export function stackoneMcpDeleteSecurityFromJSON(
  jsonString: string,
): SafeParseResult<StackoneMcpDeleteSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StackoneMcpDeleteSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StackoneMcpDeleteSecurity' from JSON`,
  );
}

/** @internal */
export const StackoneMcpDeleteRequest$inboundSchema: z.ZodType<
  StackoneMcpDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "mcp-session-id": z.string(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "mcp-session-id": "mcpSessionId",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type StackoneMcpDeleteRequest$Outbound = {
  "mcp-session-id": string;
  "x-account-id": string;
};

/** @internal */
export const StackoneMcpDeleteRequest$outboundSchema: z.ZodType<
  StackoneMcpDeleteRequest$Outbound,
  z.ZodTypeDef,
  StackoneMcpDeleteRequest
> = z.object({
  mcpSessionId: z.string(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    mcpSessionId: "mcp-session-id",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StackoneMcpDeleteRequest$ {
  /** @deprecated use `StackoneMcpDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = StackoneMcpDeleteRequest$inboundSchema;
  /** @deprecated use `StackoneMcpDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = StackoneMcpDeleteRequest$outboundSchema;
  /** @deprecated use `StackoneMcpDeleteRequest$Outbound` instead. */
  export type Outbound = StackoneMcpDeleteRequest$Outbound;
}

export function stackoneMcpDeleteRequestToJSON(
  stackoneMcpDeleteRequest: StackoneMcpDeleteRequest,
): string {
  return JSON.stringify(
    StackoneMcpDeleteRequest$outboundSchema.parse(stackoneMcpDeleteRequest),
  );
}

export function stackoneMcpDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<StackoneMcpDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StackoneMcpDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StackoneMcpDeleteRequest' from JSON`,
  );
}

/** @internal */
export const StackoneMcpDeleteResponse$inboundSchema: z.ZodType<
  StackoneMcpDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),

  Headers: z.record(z.array(z.string())).default({}),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type StackoneMcpDeleteResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const StackoneMcpDeleteResponse$outboundSchema: z.ZodType<
  StackoneMcpDeleteResponse$Outbound,
  z.ZodTypeDef,
  StackoneMcpDeleteResponse
> = z.object({
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StackoneMcpDeleteResponse$ {
  /** @deprecated use `StackoneMcpDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = StackoneMcpDeleteResponse$inboundSchema;
  /** @deprecated use `StackoneMcpDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = StackoneMcpDeleteResponse$outboundSchema;
  /** @deprecated use `StackoneMcpDeleteResponse$Outbound` instead. */
  export type Outbound = StackoneMcpDeleteResponse$Outbound;
}

export function stackoneMcpDeleteResponseToJSON(
  stackoneMcpDeleteResponse: StackoneMcpDeleteResponse,
): string {
  return JSON.stringify(
    StackoneMcpDeleteResponse$outboundSchema.parse(stackoneMcpDeleteResponse),
  );
}

export function stackoneMcpDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<StackoneMcpDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StackoneMcpDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StackoneMcpDeleteResponse' from JSON`,
  );
}
