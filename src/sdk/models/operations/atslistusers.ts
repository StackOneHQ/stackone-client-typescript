/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * Filter parameters that allow greater customisation of the list response
 */
export type AtsListUsersQueryParamFilter = {
  /**
   * Use a string with a date to only select results updated after that given date
   */
  updatedAfter?: string | null | undefined;
};

export type AtsListUsersRequest = {
  /**
   * The comma separated list of fields that will be returned in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  /**
   * Filter parameters that allow greater customisation of the list response
   */
  filter?: AtsListUsersQueryParamFilter | null | undefined;
  /**
   * The unified cursor
   */
  next?: string | null | undefined;
  /**
   * The page number of the results to fetch
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  page?: string | null | undefined;
  /**
   * The number of results per page
   */
  pageSize?: string | null | undefined;
  /**
   * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
   */
  proxy?: { [k: string]: any } | null | undefined;
  /**
   * Indicates that the raw request result is returned
   */
  raw?: boolean | null | undefined;
  /**
   * The sync token to select the only updated results
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  syncToken?: string | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  updatedAfter?: string | null | undefined;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type AtsListUsersResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The list of users was retrieved.
   */
  usersPaginated?: shared.UsersPaginated | undefined;
};

/** @internal */
export const AtsListUsersQueryParamFilter$inboundSchema: z.ZodType<
  AtsListUsersQueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  updated_after: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "updated_after": "updatedAfter",
  });
});

/** @internal */
export type AtsListUsersQueryParamFilter$Outbound = {
  updated_after?: string | null | undefined;
};

/** @internal */
export const AtsListUsersQueryParamFilter$outboundSchema: z.ZodType<
  AtsListUsersQueryParamFilter$Outbound,
  z.ZodTypeDef,
  AtsListUsersQueryParamFilter
> = z.object({
  updatedAfter: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    updatedAfter: "updated_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsListUsersQueryParamFilter$ {
  /** @deprecated use `AtsListUsersQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema = AtsListUsersQueryParamFilter$inboundSchema;
  /** @deprecated use `AtsListUsersQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema = AtsListUsersQueryParamFilter$outboundSchema;
  /** @deprecated use `AtsListUsersQueryParamFilter$Outbound` instead. */
  export type Outbound = AtsListUsersQueryParamFilter$Outbound;
}

export function atsListUsersQueryParamFilterToJSON(
  atsListUsersQueryParamFilter: AtsListUsersQueryParamFilter,
): string {
  return JSON.stringify(
    AtsListUsersQueryParamFilter$outboundSchema.parse(
      atsListUsersQueryParamFilter,
    ),
  );
}

export function atsListUsersQueryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<AtsListUsersQueryParamFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsListUsersQueryParamFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsListUsersQueryParamFilter' from JSON`,
  );
}

/** @internal */
export const AtsListUsersRequest$inboundSchema: z.ZodType<
  AtsListUsersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(z.lazy(() => AtsListUsersQueryParamFilter$inboundSchema))
    .optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  page_size: z.nullable(z.string().default("25")),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean().default(false)),
  sync_token: z.nullable(z.string()).optional(),
  updated_after: z.nullable(z.string()).optional(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "sync_token": "syncToken",
    "updated_after": "updatedAfter",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type AtsListUsersRequest$Outbound = {
  fields?: string | null | undefined;
  filter?: AtsListUsersQueryParamFilter$Outbound | null | undefined;
  next?: string | null | undefined;
  page?: string | null | undefined;
  page_size: string | null;
  proxy?: { [k: string]: any } | null | undefined;
  raw: boolean | null;
  sync_token?: string | null | undefined;
  updated_after?: string | null | undefined;
  "x-account-id": string;
};

/** @internal */
export const AtsListUsersRequest$outboundSchema: z.ZodType<
  AtsListUsersRequest$Outbound,
  z.ZodTypeDef,
  AtsListUsersRequest
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(z.lazy(() => AtsListUsersQueryParamFilter$outboundSchema))
    .optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  pageSize: z.nullable(z.string().default("25")),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean().default(false)),
  syncToken: z.nullable(z.string()).optional(),
  updatedAfter: z.nullable(z.string()).optional(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    syncToken: "sync_token",
    updatedAfter: "updated_after",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsListUsersRequest$ {
  /** @deprecated use `AtsListUsersRequest$inboundSchema` instead. */
  export const inboundSchema = AtsListUsersRequest$inboundSchema;
  /** @deprecated use `AtsListUsersRequest$outboundSchema` instead. */
  export const outboundSchema = AtsListUsersRequest$outboundSchema;
  /** @deprecated use `AtsListUsersRequest$Outbound` instead. */
  export type Outbound = AtsListUsersRequest$Outbound;
}

export function atsListUsersRequestToJSON(
  atsListUsersRequest: AtsListUsersRequest,
): string {
  return JSON.stringify(
    AtsListUsersRequest$outboundSchema.parse(atsListUsersRequest),
  );
}

export function atsListUsersRequestFromJSON(
  jsonString: string,
): SafeParseResult<AtsListUsersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsListUsersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsListUsersRequest' from JSON`,
  );
}

/** @internal */
export const AtsListUsersResponse$inboundSchema: z.ZodType<
  AtsListUsersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  UsersPaginated: shared.UsersPaginated$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "UsersPaginated": "usersPaginated",
  });
});

/** @internal */
export type AtsListUsersResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  UsersPaginated?: shared.UsersPaginated$Outbound | undefined;
};

/** @internal */
export const AtsListUsersResponse$outboundSchema: z.ZodType<
  AtsListUsersResponse$Outbound,
  z.ZodTypeDef,
  AtsListUsersResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  usersPaginated: shared.UsersPaginated$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    usersPaginated: "UsersPaginated",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsListUsersResponse$ {
  /** @deprecated use `AtsListUsersResponse$inboundSchema` instead. */
  export const inboundSchema = AtsListUsersResponse$inboundSchema;
  /** @deprecated use `AtsListUsersResponse$outboundSchema` instead. */
  export const outboundSchema = AtsListUsersResponse$outboundSchema;
  /** @deprecated use `AtsListUsersResponse$Outbound` instead. */
  export type Outbound = AtsListUsersResponse$Outbound;
}

export function atsListUsersResponseToJSON(
  atsListUsersResponse: AtsListUsersResponse,
): string {
  return JSON.stringify(
    AtsListUsersResponse$outboundSchema.parse(atsListUsersResponse),
  );
}

export function atsListUsersResponseFromJSON(
  jsonString: string,
): SafeParseResult<AtsListUsersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsListUsersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsListUsersResponse' from JSON`,
  );
}
