/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type AtsGetApplicationDocumentCategoryRequest = {
  /**
   * The comma separated list of fields that will be returned in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  id: string;
  /**
   * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
   */
  proxy?: { [k: string]: any } | null | undefined;
  /**
   * Indicates that the raw request result should be returned in addition to the mapped result (default value is false)
   */
  raw?: boolean | null | undefined;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type AtsGetApplicationDocumentCategoryResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * The application document category with the given identifier was retrieved.
   */
  referenceResult?: shared.ReferenceResult | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const AtsGetApplicationDocumentCategoryRequest$inboundSchema: z.ZodType<
  AtsGetApplicationDocumentCategoryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.nullable(z.string()).optional(),
  id: z.string(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type AtsGetApplicationDocumentCategoryRequest$Outbound = {
  fields?: string | null | undefined;
  id: string;
  proxy?: { [k: string]: any } | null | undefined;
  raw?: boolean | null | undefined;
  "x-account-id": string;
};

/** @internal */
export const AtsGetApplicationDocumentCategoryRequest$outboundSchema: z.ZodType<
  AtsGetApplicationDocumentCategoryRequest$Outbound,
  z.ZodTypeDef,
  AtsGetApplicationDocumentCategoryRequest
> = z.object({
  fields: z.nullable(z.string()).optional(),
  id: z.string(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsGetApplicationDocumentCategoryRequest$ {
  /** @deprecated use `AtsGetApplicationDocumentCategoryRequest$inboundSchema` instead. */
  export const inboundSchema =
    AtsGetApplicationDocumentCategoryRequest$inboundSchema;
  /** @deprecated use `AtsGetApplicationDocumentCategoryRequest$outboundSchema` instead. */
  export const outboundSchema =
    AtsGetApplicationDocumentCategoryRequest$outboundSchema;
  /** @deprecated use `AtsGetApplicationDocumentCategoryRequest$Outbound` instead. */
  export type Outbound = AtsGetApplicationDocumentCategoryRequest$Outbound;
}

export function atsGetApplicationDocumentCategoryRequestToJSON(
  atsGetApplicationDocumentCategoryRequest:
    AtsGetApplicationDocumentCategoryRequest,
): string {
  return JSON.stringify(
    AtsGetApplicationDocumentCategoryRequest$outboundSchema.parse(
      atsGetApplicationDocumentCategoryRequest,
    ),
  );
}

export function atsGetApplicationDocumentCategoryRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  AtsGetApplicationDocumentCategoryRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AtsGetApplicationDocumentCategoryRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AtsGetApplicationDocumentCategoryRequest' from JSON`,
  );
}

/** @internal */
export const AtsGetApplicationDocumentCategoryResponse$inboundSchema: z.ZodType<
  AtsGetApplicationDocumentCategoryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  ReferenceResult: shared.ReferenceResult$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "ReferenceResult": "referenceResult",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type AtsGetApplicationDocumentCategoryResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  ReferenceResult?: shared.ReferenceResult$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const AtsGetApplicationDocumentCategoryResponse$outboundSchema:
  z.ZodType<
    AtsGetApplicationDocumentCategoryResponse$Outbound,
    z.ZodTypeDef,
    AtsGetApplicationDocumentCategoryResponse
  > = z.object({
    contentType: z.string(),
    headers: z.record(z.array(z.string())),
    referenceResult: shared.ReferenceResult$outboundSchema.optional(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      headers: "Headers",
      referenceResult: "ReferenceResult",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsGetApplicationDocumentCategoryResponse$ {
  /** @deprecated use `AtsGetApplicationDocumentCategoryResponse$inboundSchema` instead. */
  export const inboundSchema =
    AtsGetApplicationDocumentCategoryResponse$inboundSchema;
  /** @deprecated use `AtsGetApplicationDocumentCategoryResponse$outboundSchema` instead. */
  export const outboundSchema =
    AtsGetApplicationDocumentCategoryResponse$outboundSchema;
  /** @deprecated use `AtsGetApplicationDocumentCategoryResponse$Outbound` instead. */
  export type Outbound = AtsGetApplicationDocumentCategoryResponse$Outbound;
}

export function atsGetApplicationDocumentCategoryResponseToJSON(
  atsGetApplicationDocumentCategoryResponse:
    AtsGetApplicationDocumentCategoryResponse,
): string {
  return JSON.stringify(
    AtsGetApplicationDocumentCategoryResponse$outboundSchema.parse(
      atsGetApplicationDocumentCategoryResponse,
    ),
  );
}

export function atsGetApplicationDocumentCategoryResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  AtsGetApplicationDocumentCategoryResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AtsGetApplicationDocumentCategoryResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AtsGetApplicationDocumentCategoryResponse' from JSON`,
  );
}
