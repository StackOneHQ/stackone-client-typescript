/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * The job_status of the job
 */
export enum JobStatus {
  Open = "open",
  Draft = "draft",
}

/**
 * The status of the job
 *
 * @deprecated enum: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export enum Status {
  Open = "open",
  Draft = "draft",
}

/**
 * ATS Jobs filters
 */
export type AtsListJobsQueryParamFilter = {
  /**
   * Use a string with a date to only select results created after that given date
   */
  createdAfter?: Date | null | undefined;
  /**
   * The job_status of the job
   */
  jobStatus?: JobStatus | null | undefined;
  /**
   * The status of the job
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  status?: Status | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   */
  updatedAfter?: Date | null | undefined;
};

export type AtsListJobsRequest = {
  /**
   * The comma separated list of fields that will be expanded in the response
   */
  expand?: string | null | undefined;
  /**
   * The comma separated list of fields that will be returned in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  /**
   * ATS Jobs filters
   */
  filter?: AtsListJobsQueryParamFilter | null | undefined;
  /**
   * The comma separated list of fields that will be included in the response
   */
  include?: string | null | undefined;
  /**
   * The unified cursor
   */
  next?: string | null | undefined;
  /**
   * The page number of the results to fetch
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  page?: string | null | undefined;
  /**
   * The number of results per page (default value is 25)
   */
  pageSize?: string | null | undefined;
  /**
   * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
   */
  proxy?: { [k: string]: any } | null | undefined;
  /**
   * Indicates that the raw request result should be returned in addition to the mapped result (default value is false)
   */
  raw?: boolean | null | undefined;
  /**
   * The sync token to select the only updated results
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  syncToken?: string | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  updatedAfter?: Date | null | undefined;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type AtsListJobsResponse = {
  /**
   * The list of jobs was retrieved.
   */
  atsJobsPaginated?: shared.AtsJobsPaginated | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const JobStatus$inboundSchema: z.ZodNativeEnum<typeof JobStatus> = z
  .nativeEnum(JobStatus);

/** @internal */
export const JobStatus$outboundSchema: z.ZodNativeEnum<typeof JobStatus> =
  JobStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobStatus$ {
  /** @deprecated use `JobStatus$inboundSchema` instead. */
  export const inboundSchema = JobStatus$inboundSchema;
  /** @deprecated use `JobStatus$outboundSchema` instead. */
  export const outboundSchema = JobStatus$outboundSchema;
}

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const AtsListJobsQueryParamFilter$inboundSchema: z.ZodType<
  AtsListJobsQueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_after: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  job_status: z.nullable(JobStatus$inboundSchema).optional(),
  status: z.nullable(Status$inboundSchema).optional(),
  updated_after: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_after": "createdAfter",
    "job_status": "jobStatus",
    "updated_after": "updatedAfter",
  });
});

/** @internal */
export type AtsListJobsQueryParamFilter$Outbound = {
  created_after?: string | null | undefined;
  job_status?: string | null | undefined;
  status?: string | null | undefined;
  updated_after?: string | null | undefined;
};

/** @internal */
export const AtsListJobsQueryParamFilter$outboundSchema: z.ZodType<
  AtsListJobsQueryParamFilter$Outbound,
  z.ZodTypeDef,
  AtsListJobsQueryParamFilter
> = z.object({
  createdAfter: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  jobStatus: z.nullable(JobStatus$outboundSchema).optional(),
  status: z.nullable(Status$outboundSchema).optional(),
  updatedAfter: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAfter: "created_after",
    jobStatus: "job_status",
    updatedAfter: "updated_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsListJobsQueryParamFilter$ {
  /** @deprecated use `AtsListJobsQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema = AtsListJobsQueryParamFilter$inboundSchema;
  /** @deprecated use `AtsListJobsQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema = AtsListJobsQueryParamFilter$outboundSchema;
  /** @deprecated use `AtsListJobsQueryParamFilter$Outbound` instead. */
  export type Outbound = AtsListJobsQueryParamFilter$Outbound;
}

export function atsListJobsQueryParamFilterToJSON(
  atsListJobsQueryParamFilter: AtsListJobsQueryParamFilter,
): string {
  return JSON.stringify(
    AtsListJobsQueryParamFilter$outboundSchema.parse(
      atsListJobsQueryParamFilter,
    ),
  );
}

export function atsListJobsQueryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<AtsListJobsQueryParamFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsListJobsQueryParamFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsListJobsQueryParamFilter' from JSON`,
  );
}

/** @internal */
export const AtsListJobsRequest$inboundSchema: z.ZodType<
  AtsListJobsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  expand: z.nullable(z.string()).optional(),
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(z.lazy(() => AtsListJobsQueryParamFilter$inboundSchema))
    .optional(),
  include: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  page_size: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  sync_token: z.nullable(z.string()).optional(),
  updated_after: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "sync_token": "syncToken",
    "updated_after": "updatedAfter",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type AtsListJobsRequest$Outbound = {
  expand?: string | null | undefined;
  fields?: string | null | undefined;
  filter?: AtsListJobsQueryParamFilter$Outbound | null | undefined;
  include?: string | null | undefined;
  next?: string | null | undefined;
  page?: string | null | undefined;
  page_size?: string | null | undefined;
  proxy?: { [k: string]: any } | null | undefined;
  raw?: boolean | null | undefined;
  sync_token?: string | null | undefined;
  updated_after?: string | null | undefined;
  "x-account-id": string;
};

/** @internal */
export const AtsListJobsRequest$outboundSchema: z.ZodType<
  AtsListJobsRequest$Outbound,
  z.ZodTypeDef,
  AtsListJobsRequest
> = z.object({
  expand: z.nullable(z.string()).optional(),
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(z.lazy(() => AtsListJobsQueryParamFilter$outboundSchema))
    .optional(),
  include: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  pageSize: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  syncToken: z.nullable(z.string()).optional(),
  updatedAfter: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    syncToken: "sync_token",
    updatedAfter: "updated_after",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsListJobsRequest$ {
  /** @deprecated use `AtsListJobsRequest$inboundSchema` instead. */
  export const inboundSchema = AtsListJobsRequest$inboundSchema;
  /** @deprecated use `AtsListJobsRequest$outboundSchema` instead. */
  export const outboundSchema = AtsListJobsRequest$outboundSchema;
  /** @deprecated use `AtsListJobsRequest$Outbound` instead. */
  export type Outbound = AtsListJobsRequest$Outbound;
}

export function atsListJobsRequestToJSON(
  atsListJobsRequest: AtsListJobsRequest,
): string {
  return JSON.stringify(
    AtsListJobsRequest$outboundSchema.parse(atsListJobsRequest),
  );
}

export function atsListJobsRequestFromJSON(
  jsonString: string,
): SafeParseResult<AtsListJobsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsListJobsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsListJobsRequest' from JSON`,
  );
}

/** @internal */
export const AtsListJobsResponse$inboundSchema: z.ZodType<
  AtsListJobsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  AtsJobsPaginated: shared.AtsJobsPaginated$inboundSchema.optional(),
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "AtsJobsPaginated": "atsJobsPaginated",
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type AtsListJobsResponse$Outbound = {
  AtsJobsPaginated?: shared.AtsJobsPaginated$Outbound | undefined;
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const AtsListJobsResponse$outboundSchema: z.ZodType<
  AtsListJobsResponse$Outbound,
  z.ZodTypeDef,
  AtsListJobsResponse
> = z.object({
  atsJobsPaginated: shared.AtsJobsPaginated$outboundSchema.optional(),
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    atsJobsPaginated: "AtsJobsPaginated",
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsListJobsResponse$ {
  /** @deprecated use `AtsListJobsResponse$inboundSchema` instead. */
  export const inboundSchema = AtsListJobsResponse$inboundSchema;
  /** @deprecated use `AtsListJobsResponse$outboundSchema` instead. */
  export const outboundSchema = AtsListJobsResponse$outboundSchema;
  /** @deprecated use `AtsListJobsResponse$Outbound` instead. */
  export type Outbound = AtsListJobsResponse$Outbound;
}

export function atsListJobsResponseToJSON(
  atsListJobsResponse: AtsListJobsResponse,
): string {
  return JSON.stringify(
    AtsListJobsResponse$outboundSchema.parse(atsListJobsResponse),
  );
}

export function atsListJobsResponseFromJSON(
  jsonString: string,
): SafeParseResult<AtsListJobsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsListJobsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsListJobsResponse' from JSON`,
  );
}
