/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * Filter parameters that allow greater customisation of the list response
 */
export type TicketingListUsersQueryParamFilter = {
  /**
   * Use a string with a date to only select results updated after that given date
   */
  updatedAfter?: string | null | undefined;
};

export type TicketingListUsersRequest = {
  /**
   * The comma separated list of fields that will be returned in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  /**
   * Filter parameters that allow greater customisation of the list response
   */
  filter?: TicketingListUsersQueryParamFilter | null | undefined;
  /**
   * The unified cursor
   */
  next?: string | null | undefined;
  /**
   * The page number of the results to fetch
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  page?: string | null | undefined;
  /**
   * The number of results per page (default value is 25)
   */
  pageSize?: string | null | undefined;
  /**
   * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
   */
  proxy?: { [k: string]: any } | null | undefined;
  /**
   * Indicates that the raw request result should be returned in addition to the mapped result (default value is false)
   */
  raw?: boolean | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  updatedAfter?: string | null | undefined;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type TicketingListUsersResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The list of users was retrieved.
   */
  ticketingUsersPaginated?: shared.TicketingUsersPaginated | undefined;
};

/** @internal */
export const TicketingListUsersQueryParamFilter$inboundSchema: z.ZodType<
  TicketingListUsersQueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  updated_after: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "updated_after": "updatedAfter",
  });
});

/** @internal */
export type TicketingListUsersQueryParamFilter$Outbound = {
  updated_after?: string | null | undefined;
};

/** @internal */
export const TicketingListUsersQueryParamFilter$outboundSchema: z.ZodType<
  TicketingListUsersQueryParamFilter$Outbound,
  z.ZodTypeDef,
  TicketingListUsersQueryParamFilter
> = z.object({
  updatedAfter: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    updatedAfter: "updated_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingListUsersQueryParamFilter$ {
  /** @deprecated use `TicketingListUsersQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema = TicketingListUsersQueryParamFilter$inboundSchema;
  /** @deprecated use `TicketingListUsersQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema =
    TicketingListUsersQueryParamFilter$outboundSchema;
  /** @deprecated use `TicketingListUsersQueryParamFilter$Outbound` instead. */
  export type Outbound = TicketingListUsersQueryParamFilter$Outbound;
}

export function ticketingListUsersQueryParamFilterToJSON(
  ticketingListUsersQueryParamFilter: TicketingListUsersQueryParamFilter,
): string {
  return JSON.stringify(
    TicketingListUsersQueryParamFilter$outboundSchema.parse(
      ticketingListUsersQueryParamFilter,
    ),
  );
}

export function ticketingListUsersQueryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<TicketingListUsersQueryParamFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TicketingListUsersQueryParamFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingListUsersQueryParamFilter' from JSON`,
  );
}

/** @internal */
export const TicketingListUsersRequest$inboundSchema: z.ZodType<
  TicketingListUsersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => TicketingListUsersQueryParamFilter$inboundSchema),
  ).optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  page_size: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  updated_after: z.nullable(z.string()).optional(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "updated_after": "updatedAfter",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type TicketingListUsersRequest$Outbound = {
  fields?: string | null | undefined;
  filter?: TicketingListUsersQueryParamFilter$Outbound | null | undefined;
  next?: string | null | undefined;
  page?: string | null | undefined;
  page_size?: string | null | undefined;
  proxy?: { [k: string]: any } | null | undefined;
  raw?: boolean | null | undefined;
  updated_after?: string | null | undefined;
  "x-account-id": string;
};

/** @internal */
export const TicketingListUsersRequest$outboundSchema: z.ZodType<
  TicketingListUsersRequest$Outbound,
  z.ZodTypeDef,
  TicketingListUsersRequest
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => TicketingListUsersQueryParamFilter$outboundSchema),
  ).optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  pageSize: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  updatedAfter: z.nullable(z.string()).optional(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    updatedAfter: "updated_after",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingListUsersRequest$ {
  /** @deprecated use `TicketingListUsersRequest$inboundSchema` instead. */
  export const inboundSchema = TicketingListUsersRequest$inboundSchema;
  /** @deprecated use `TicketingListUsersRequest$outboundSchema` instead. */
  export const outboundSchema = TicketingListUsersRequest$outboundSchema;
  /** @deprecated use `TicketingListUsersRequest$Outbound` instead. */
  export type Outbound = TicketingListUsersRequest$Outbound;
}

export function ticketingListUsersRequestToJSON(
  ticketingListUsersRequest: TicketingListUsersRequest,
): string {
  return JSON.stringify(
    TicketingListUsersRequest$outboundSchema.parse(ticketingListUsersRequest),
  );
}

export function ticketingListUsersRequestFromJSON(
  jsonString: string,
): SafeParseResult<TicketingListUsersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingListUsersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingListUsersRequest' from JSON`,
  );
}

/** @internal */
export const TicketingListUsersResponse$inboundSchema: z.ZodType<
  TicketingListUsersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  TicketingUsersPaginated: shared.TicketingUsersPaginated$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "TicketingUsersPaginated": "ticketingUsersPaginated",
  });
});

/** @internal */
export type TicketingListUsersResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
  TicketingUsersPaginated?: shared.TicketingUsersPaginated$Outbound | undefined;
};

/** @internal */
export const TicketingListUsersResponse$outboundSchema: z.ZodType<
  TicketingListUsersResponse$Outbound,
  z.ZodTypeDef,
  TicketingListUsersResponse
> = z.object({
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  ticketingUsersPaginated: shared.TicketingUsersPaginated$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    ticketingUsersPaginated: "TicketingUsersPaginated",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingListUsersResponse$ {
  /** @deprecated use `TicketingListUsersResponse$inboundSchema` instead. */
  export const inboundSchema = TicketingListUsersResponse$inboundSchema;
  /** @deprecated use `TicketingListUsersResponse$outboundSchema` instead. */
  export const outboundSchema = TicketingListUsersResponse$outboundSchema;
  /** @deprecated use `TicketingListUsersResponse$Outbound` instead. */
  export type Outbound = TicketingListUsersResponse$Outbound;
}

export function ticketingListUsersResponseToJSON(
  ticketingListUsersResponse: TicketingListUsersResponse,
): string {
  return JSON.stringify(
    TicketingListUsersResponse$outboundSchema.parse(ticketingListUsersResponse),
  );
}

export function ticketingListUsersResponseFromJSON(
  jsonString: string,
): SafeParseResult<TicketingListUsersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingListUsersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingListUsersResponse' from JSON`,
  );
}
