/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type StackoneListLinkedAccountsRequest = {
  /**
   * The providers list of the results to fetch
   */
  accountIds?: Array<string> | undefined;
  /**
   * The origin owner identifier of the results to fetch
   */
  originOwnerId?: string | null | undefined;
  /**
   * The page number of the results to fetch
   */
  page?: number | null | undefined;
  /**
   * The number of results per page
   */
  pageSize?: number | null | undefined;
  /**
   * The provider of the results to fetch
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  provider?: string | null | undefined;
  /**
   * The providers list of the results to fetch
   */
  providers?: Array<string> | undefined;
  /**
   * The status of the results to fetch
   */
  status?: Array<string> | undefined;
};

export type StackoneListLinkedAccountsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The list of accounts was retrieved.
   */
  classes?: Array<shared.LinkedAccount> | undefined;
};

/** @internal */
export const StackoneListLinkedAccountsRequest$inboundSchema: z.ZodType<
  StackoneListLinkedAccountsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_ids: z.array(z.string()).optional(),
  origin_owner_id: z.nullable(z.string()).optional(),
  page: z.nullable(z.number()).optional(),
  page_size: z.nullable(z.number().default(25)),
  provider: z.nullable(z.string()).optional(),
  providers: z.array(z.string()).optional(),
  status: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "account_ids": "accountIds",
    "origin_owner_id": "originOwnerId",
    "page_size": "pageSize",
  });
});

/** @internal */
export type StackoneListLinkedAccountsRequest$Outbound = {
  account_ids?: Array<string> | undefined;
  origin_owner_id?: string | null | undefined;
  page?: number | null | undefined;
  page_size: number | null;
  provider?: string | null | undefined;
  providers?: Array<string> | undefined;
  status?: Array<string> | undefined;
};

/** @internal */
export const StackoneListLinkedAccountsRequest$outboundSchema: z.ZodType<
  StackoneListLinkedAccountsRequest$Outbound,
  z.ZodTypeDef,
  StackoneListLinkedAccountsRequest
> = z.object({
  accountIds: z.array(z.string()).optional(),
  originOwnerId: z.nullable(z.string()).optional(),
  page: z.nullable(z.number()).optional(),
  pageSize: z.nullable(z.number().default(25)),
  provider: z.nullable(z.string()).optional(),
  providers: z.array(z.string()).optional(),
  status: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    accountIds: "account_ids",
    originOwnerId: "origin_owner_id",
    pageSize: "page_size",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StackoneListLinkedAccountsRequest$ {
  /** @deprecated use `StackoneListLinkedAccountsRequest$inboundSchema` instead. */
  export const inboundSchema = StackoneListLinkedAccountsRequest$inboundSchema;
  /** @deprecated use `StackoneListLinkedAccountsRequest$outboundSchema` instead. */
  export const outboundSchema =
    StackoneListLinkedAccountsRequest$outboundSchema;
  /** @deprecated use `StackoneListLinkedAccountsRequest$Outbound` instead. */
  export type Outbound = StackoneListLinkedAccountsRequest$Outbound;
}

export function stackoneListLinkedAccountsRequestToJSON(
  stackoneListLinkedAccountsRequest: StackoneListLinkedAccountsRequest,
): string {
  return JSON.stringify(
    StackoneListLinkedAccountsRequest$outboundSchema.parse(
      stackoneListLinkedAccountsRequest,
    ),
  );
}

export function stackoneListLinkedAccountsRequestFromJSON(
  jsonString: string,
): SafeParseResult<StackoneListLinkedAccountsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StackoneListLinkedAccountsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StackoneListLinkedAccountsRequest' from JSON`,
  );
}

/** @internal */
export const StackoneListLinkedAccountsResponse$inboundSchema: z.ZodType<
  StackoneListLinkedAccountsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  classes: z.array(shared.LinkedAccount$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type StackoneListLinkedAccountsResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
  classes?: Array<shared.LinkedAccount$Outbound> | undefined;
};

/** @internal */
export const StackoneListLinkedAccountsResponse$outboundSchema: z.ZodType<
  StackoneListLinkedAccountsResponse$Outbound,
  z.ZodTypeDef,
  StackoneListLinkedAccountsResponse
> = z.object({
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  classes: z.array(shared.LinkedAccount$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StackoneListLinkedAccountsResponse$ {
  /** @deprecated use `StackoneListLinkedAccountsResponse$inboundSchema` instead. */
  export const inboundSchema = StackoneListLinkedAccountsResponse$inboundSchema;
  /** @deprecated use `StackoneListLinkedAccountsResponse$outboundSchema` instead. */
  export const outboundSchema =
    StackoneListLinkedAccountsResponse$outboundSchema;
  /** @deprecated use `StackoneListLinkedAccountsResponse$Outbound` instead. */
  export type Outbound = StackoneListLinkedAccountsResponse$Outbound;
}

export function stackoneListLinkedAccountsResponseToJSON(
  stackoneListLinkedAccountsResponse: StackoneListLinkedAccountsResponse,
): string {
  return JSON.stringify(
    StackoneListLinkedAccountsResponse$outboundSchema.parse(
      stackoneListLinkedAccountsResponse,
    ),
  );
}

export function stackoneListLinkedAccountsResponseFromJSON(
  jsonString: string,
): SafeParseResult<StackoneListLinkedAccountsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      StackoneListLinkedAccountsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StackoneListLinkedAccountsResponse' from JSON`,
  );
}
