/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * Filter to select completions by learning object type.
 */
export enum LmsListUserCompletionsQueryParamLearningObjectType {
  Content = "content",
  Course = "course",
  Collection = "collection",
}

/**
 * LMS Completions Filter
 */
export type LmsListUserCompletionsQueryParamFilter = {
  /**
   * Filter to select completions by learning object type.
   */
  learningObjectType?:
    | LmsListUserCompletionsQueryParamLearningObjectType
    | null
    | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   */
  updatedAfter?: string | null | undefined;
};

export type LmsListUserCompletionsRequest = {
  /**
   * The comma separated list of fields that will be returned in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  /**
   * LMS Completions Filter
   */
  filter?: LmsListUserCompletionsQueryParamFilter | null | undefined;
  id: string;
  /**
   * The unified cursor
   */
  next?: string | null | undefined;
  /**
   * The page number of the results to fetch
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  page?: string | null | undefined;
  /**
   * The number of results per page
   */
  pageSize?: string | null | undefined;
  /**
   * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
   */
  proxy?: { [k: string]: any } | null | undefined;
  /**
   * Indicates that the raw request result is returned
   */
  raw?: boolean | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  updatedAfter?: string | null | undefined;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type LmsListUserCompletionsResponse = {
  /**
   * The completions with for the users with the given identifier were retrieved.
   */
  completionsPaginated?: shared.CompletionsPaginated | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const LmsListUserCompletionsQueryParamLearningObjectType$inboundSchema:
  z.ZodNativeEnum<typeof LmsListUserCompletionsQueryParamLearningObjectType> = z
    .nativeEnum(LmsListUserCompletionsQueryParamLearningObjectType);

/** @internal */
export const LmsListUserCompletionsQueryParamLearningObjectType$outboundSchema:
  z.ZodNativeEnum<typeof LmsListUserCompletionsQueryParamLearningObjectType> =
    LmsListUserCompletionsQueryParamLearningObjectType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LmsListUserCompletionsQueryParamLearningObjectType$ {
  /** @deprecated use `LmsListUserCompletionsQueryParamLearningObjectType$inboundSchema` instead. */
  export const inboundSchema =
    LmsListUserCompletionsQueryParamLearningObjectType$inboundSchema;
  /** @deprecated use `LmsListUserCompletionsQueryParamLearningObjectType$outboundSchema` instead. */
  export const outboundSchema =
    LmsListUserCompletionsQueryParamLearningObjectType$outboundSchema;
}

/** @internal */
export const LmsListUserCompletionsQueryParamFilter$inboundSchema: z.ZodType<
  LmsListUserCompletionsQueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  learning_object_type: z.nullable(
    LmsListUserCompletionsQueryParamLearningObjectType$inboundSchema,
  ).optional(),
  updated_after: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "learning_object_type": "learningObjectType",
    "updated_after": "updatedAfter",
  });
});

/** @internal */
export type LmsListUserCompletionsQueryParamFilter$Outbound = {
  learning_object_type?: string | null | undefined;
  updated_after?: string | null | undefined;
};

/** @internal */
export const LmsListUserCompletionsQueryParamFilter$outboundSchema: z.ZodType<
  LmsListUserCompletionsQueryParamFilter$Outbound,
  z.ZodTypeDef,
  LmsListUserCompletionsQueryParamFilter
> = z.object({
  learningObjectType: z.nullable(
    LmsListUserCompletionsQueryParamLearningObjectType$outboundSchema,
  ).optional(),
  updatedAfter: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    learningObjectType: "learning_object_type",
    updatedAfter: "updated_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LmsListUserCompletionsQueryParamFilter$ {
  /** @deprecated use `LmsListUserCompletionsQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema =
    LmsListUserCompletionsQueryParamFilter$inboundSchema;
  /** @deprecated use `LmsListUserCompletionsQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema =
    LmsListUserCompletionsQueryParamFilter$outboundSchema;
  /** @deprecated use `LmsListUserCompletionsQueryParamFilter$Outbound` instead. */
  export type Outbound = LmsListUserCompletionsQueryParamFilter$Outbound;
}

export function lmsListUserCompletionsQueryParamFilterToJSON(
  lmsListUserCompletionsQueryParamFilter:
    LmsListUserCompletionsQueryParamFilter,
): string {
  return JSON.stringify(
    LmsListUserCompletionsQueryParamFilter$outboundSchema.parse(
      lmsListUserCompletionsQueryParamFilter,
    ),
  );
}

export function lmsListUserCompletionsQueryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<LmsListUserCompletionsQueryParamFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      LmsListUserCompletionsQueryParamFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LmsListUserCompletionsQueryParamFilter' from JSON`,
  );
}

/** @internal */
export const LmsListUserCompletionsRequest$inboundSchema: z.ZodType<
  LmsListUserCompletionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => LmsListUserCompletionsQueryParamFilter$inboundSchema),
  ).optional(),
  id: z.string(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  page_size: z.nullable(z.string().default("25")),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean().default(false)),
  updated_after: z.nullable(z.string()).optional(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "updated_after": "updatedAfter",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type LmsListUserCompletionsRequest$Outbound = {
  fields?: string | null | undefined;
  filter?: LmsListUserCompletionsQueryParamFilter$Outbound | null | undefined;
  id: string;
  next?: string | null | undefined;
  page?: string | null | undefined;
  page_size: string | null;
  proxy?: { [k: string]: any } | null | undefined;
  raw: boolean | null;
  updated_after?: string | null | undefined;
  "x-account-id": string;
};

/** @internal */
export const LmsListUserCompletionsRequest$outboundSchema: z.ZodType<
  LmsListUserCompletionsRequest$Outbound,
  z.ZodTypeDef,
  LmsListUserCompletionsRequest
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => LmsListUserCompletionsQueryParamFilter$outboundSchema),
  ).optional(),
  id: z.string(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  pageSize: z.nullable(z.string().default("25")),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean().default(false)),
  updatedAfter: z.nullable(z.string()).optional(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    updatedAfter: "updated_after",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LmsListUserCompletionsRequest$ {
  /** @deprecated use `LmsListUserCompletionsRequest$inboundSchema` instead. */
  export const inboundSchema = LmsListUserCompletionsRequest$inboundSchema;
  /** @deprecated use `LmsListUserCompletionsRequest$outboundSchema` instead. */
  export const outboundSchema = LmsListUserCompletionsRequest$outboundSchema;
  /** @deprecated use `LmsListUserCompletionsRequest$Outbound` instead. */
  export type Outbound = LmsListUserCompletionsRequest$Outbound;
}

export function lmsListUserCompletionsRequestToJSON(
  lmsListUserCompletionsRequest: LmsListUserCompletionsRequest,
): string {
  return JSON.stringify(
    LmsListUserCompletionsRequest$outboundSchema.parse(
      lmsListUserCompletionsRequest,
    ),
  );
}

export function lmsListUserCompletionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<LmsListUserCompletionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LmsListUserCompletionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LmsListUserCompletionsRequest' from JSON`,
  );
}

/** @internal */
export const LmsListUserCompletionsResponse$inboundSchema: z.ZodType<
  LmsListUserCompletionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  CompletionsPaginated: shared.CompletionsPaginated$inboundSchema.optional(),
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "CompletionsPaginated": "completionsPaginated",
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type LmsListUserCompletionsResponse$Outbound = {
  CompletionsPaginated?: shared.CompletionsPaginated$Outbound | undefined;
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const LmsListUserCompletionsResponse$outboundSchema: z.ZodType<
  LmsListUserCompletionsResponse$Outbound,
  z.ZodTypeDef,
  LmsListUserCompletionsResponse
> = z.object({
  completionsPaginated: shared.CompletionsPaginated$outboundSchema.optional(),
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    completionsPaginated: "CompletionsPaginated",
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LmsListUserCompletionsResponse$ {
  /** @deprecated use `LmsListUserCompletionsResponse$inboundSchema` instead. */
  export const inboundSchema = LmsListUserCompletionsResponse$inboundSchema;
  /** @deprecated use `LmsListUserCompletionsResponse$outboundSchema` instead. */
  export const outboundSchema = LmsListUserCompletionsResponse$outboundSchema;
  /** @deprecated use `LmsListUserCompletionsResponse$Outbound` instead. */
  export type Outbound = LmsListUserCompletionsResponse$Outbound;
}

export function lmsListUserCompletionsResponseToJSON(
  lmsListUserCompletionsResponse: LmsListUserCompletionsResponse,
): string {
  return JSON.stringify(
    LmsListUserCompletionsResponse$outboundSchema.parse(
      lmsListUserCompletionsResponse,
    ),
  );
}

export function lmsListUserCompletionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<LmsListUserCompletionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LmsListUserCompletionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LmsListUserCompletionsResponse' from JSON`,
  );
}
