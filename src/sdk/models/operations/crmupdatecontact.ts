/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type CrmUpdateContactRequest = {
  crmCreateContactRequestDto: shared.CrmCreateContactRequestDto;
  id: string;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type CrmUpdateContactResponse = {
  /**
   * The contact was successfully updated.
   */
  contactResult?: shared.ContactResult | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const CrmUpdateContactRequest$inboundSchema: z.ZodType<
  CrmUpdateContactRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  CrmCreateContactRequestDto: shared.CrmCreateContactRequestDto$inboundSchema,
  id: z.string(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "CrmCreateContactRequestDto": "crmCreateContactRequestDto",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type CrmUpdateContactRequest$Outbound = {
  CrmCreateContactRequestDto: shared.CrmCreateContactRequestDto$Outbound;
  id: string;
  "x-account-id": string;
};

/** @internal */
export const CrmUpdateContactRequest$outboundSchema: z.ZodType<
  CrmUpdateContactRequest$Outbound,
  z.ZodTypeDef,
  CrmUpdateContactRequest
> = z.object({
  crmCreateContactRequestDto: shared.CrmCreateContactRequestDto$outboundSchema,
  id: z.string(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    crmCreateContactRequestDto: "CrmCreateContactRequestDto",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmUpdateContactRequest$ {
  /** @deprecated use `CrmUpdateContactRequest$inboundSchema` instead. */
  export const inboundSchema = CrmUpdateContactRequest$inboundSchema;
  /** @deprecated use `CrmUpdateContactRequest$outboundSchema` instead. */
  export const outboundSchema = CrmUpdateContactRequest$outboundSchema;
  /** @deprecated use `CrmUpdateContactRequest$Outbound` instead. */
  export type Outbound = CrmUpdateContactRequest$Outbound;
}

export function crmUpdateContactRequestToJSON(
  crmUpdateContactRequest: CrmUpdateContactRequest,
): string {
  return JSON.stringify(
    CrmUpdateContactRequest$outboundSchema.parse(crmUpdateContactRequest),
  );
}

export function crmUpdateContactRequestFromJSON(
  jsonString: string,
): SafeParseResult<CrmUpdateContactRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmUpdateContactRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmUpdateContactRequest' from JSON`,
  );
}

/** @internal */
export const CrmUpdateContactResponse$inboundSchema: z.ZodType<
  CrmUpdateContactResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContactResult: shared.ContactResult$inboundSchema.optional(),
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContactResult": "contactResult",
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type CrmUpdateContactResponse$Outbound = {
  ContactResult?: shared.ContactResult$Outbound | undefined;
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const CrmUpdateContactResponse$outboundSchema: z.ZodType<
  CrmUpdateContactResponse$Outbound,
  z.ZodTypeDef,
  CrmUpdateContactResponse
> = z.object({
  contactResult: shared.ContactResult$outboundSchema.optional(),
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contactResult: "ContactResult",
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmUpdateContactResponse$ {
  /** @deprecated use `CrmUpdateContactResponse$inboundSchema` instead. */
  export const inboundSchema = CrmUpdateContactResponse$inboundSchema;
  /** @deprecated use `CrmUpdateContactResponse$outboundSchema` instead. */
  export const outboundSchema = CrmUpdateContactResponse$outboundSchema;
  /** @deprecated use `CrmUpdateContactResponse$Outbound` instead. */
  export type Outbound = CrmUpdateContactResponse$Outbound;
}

export function crmUpdateContactResponseToJSON(
  crmUpdateContactResponse: CrmUpdateContactResponse,
): string {
  return JSON.stringify(
    CrmUpdateContactResponse$outboundSchema.parse(crmUpdateContactResponse),
  );
}

export function crmUpdateContactResponseFromJSON(
  jsonString: string,
): SafeParseResult<CrmUpdateContactResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmUpdateContactResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmUpdateContactResponse' from JSON`,
  );
}
