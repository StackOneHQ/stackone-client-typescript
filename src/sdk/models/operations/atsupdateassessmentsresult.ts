/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type AtsUpdateAssessmentsResultRequest = {
  atsUpdateCandidatesAssessmentsResultsRequestDto:
    shared.AtsUpdateCandidatesAssessmentsResultsRequestDto;
  id: string;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type AtsUpdateAssessmentsResultResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The result update of the assessment for candidate.
   */
  updateResult?: shared.UpdateResult | undefined;
};

/** @internal */
export const AtsUpdateAssessmentsResultRequest$inboundSchema: z.ZodType<
  AtsUpdateAssessmentsResultRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  AtsUpdateCandidatesAssessmentsResultsRequestDto:
    shared.AtsUpdateCandidatesAssessmentsResultsRequestDto$inboundSchema,
  id: z.string(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "AtsUpdateCandidatesAssessmentsResultsRequestDto":
      "atsUpdateCandidatesAssessmentsResultsRequestDto",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type AtsUpdateAssessmentsResultRequest$Outbound = {
  AtsUpdateCandidatesAssessmentsResultsRequestDto:
    shared.AtsUpdateCandidatesAssessmentsResultsRequestDto$Outbound;
  id: string;
  "x-account-id": string;
};

/** @internal */
export const AtsUpdateAssessmentsResultRequest$outboundSchema: z.ZodType<
  AtsUpdateAssessmentsResultRequest$Outbound,
  z.ZodTypeDef,
  AtsUpdateAssessmentsResultRequest
> = z.object({
  atsUpdateCandidatesAssessmentsResultsRequestDto:
    shared.AtsUpdateCandidatesAssessmentsResultsRequestDto$outboundSchema,
  id: z.string(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    atsUpdateCandidatesAssessmentsResultsRequestDto:
      "AtsUpdateCandidatesAssessmentsResultsRequestDto",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsUpdateAssessmentsResultRequest$ {
  /** @deprecated use `AtsUpdateAssessmentsResultRequest$inboundSchema` instead. */
  export const inboundSchema = AtsUpdateAssessmentsResultRequest$inboundSchema;
  /** @deprecated use `AtsUpdateAssessmentsResultRequest$outboundSchema` instead. */
  export const outboundSchema =
    AtsUpdateAssessmentsResultRequest$outboundSchema;
  /** @deprecated use `AtsUpdateAssessmentsResultRequest$Outbound` instead. */
  export type Outbound = AtsUpdateAssessmentsResultRequest$Outbound;
}

export function atsUpdateAssessmentsResultRequestToJSON(
  atsUpdateAssessmentsResultRequest: AtsUpdateAssessmentsResultRequest,
): string {
  return JSON.stringify(
    AtsUpdateAssessmentsResultRequest$outboundSchema.parse(
      atsUpdateAssessmentsResultRequest,
    ),
  );
}

export function atsUpdateAssessmentsResultRequestFromJSON(
  jsonString: string,
): SafeParseResult<AtsUpdateAssessmentsResultRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsUpdateAssessmentsResultRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsUpdateAssessmentsResultRequest' from JSON`,
  );
}

/** @internal */
export const AtsUpdateAssessmentsResultResponse$inboundSchema: z.ZodType<
  AtsUpdateAssessmentsResultResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),

  Headers: z.record(z.array(z.string())).default({}),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  UpdateResult: shared.UpdateResult$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "UpdateResult": "updateResult",
  });
});

/** @internal */
export type AtsUpdateAssessmentsResultResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
  UpdateResult?: shared.UpdateResult$Outbound | undefined;
};

/** @internal */
export const AtsUpdateAssessmentsResultResponse$outboundSchema: z.ZodType<
  AtsUpdateAssessmentsResultResponse$Outbound,
  z.ZodTypeDef,
  AtsUpdateAssessmentsResultResponse
> = z.object({
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  updateResult: shared.UpdateResult$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    updateResult: "UpdateResult",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsUpdateAssessmentsResultResponse$ {
  /** @deprecated use `AtsUpdateAssessmentsResultResponse$inboundSchema` instead. */
  export const inboundSchema = AtsUpdateAssessmentsResultResponse$inboundSchema;
  /** @deprecated use `AtsUpdateAssessmentsResultResponse$outboundSchema` instead. */
  export const outboundSchema =
    AtsUpdateAssessmentsResultResponse$outboundSchema;
  /** @deprecated use `AtsUpdateAssessmentsResultResponse$Outbound` instead. */
  export type Outbound = AtsUpdateAssessmentsResultResponse$Outbound;
}

export function atsUpdateAssessmentsResultResponseToJSON(
  atsUpdateAssessmentsResultResponse: AtsUpdateAssessmentsResultResponse,
): string {
  return JSON.stringify(
    AtsUpdateAssessmentsResultResponse$outboundSchema.parse(
      atsUpdateAssessmentsResultResponse,
    ),
  );
}

export function atsUpdateAssessmentsResultResponseFromJSON(
  jsonString: string,
): SafeParseResult<AtsUpdateAssessmentsResultResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AtsUpdateAssessmentsResultResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsUpdateAssessmentsResultResponse' from JSON`,
  );
}
