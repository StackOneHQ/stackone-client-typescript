/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as shared from "../shared";
import * as z from "zod";

export type StackoneUpdateAccountRequest = {
    patchAccountDto: shared.PatchAccountDto;
    id: string;
};

export type StackoneUpdateAccountResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * The account with the given identifier was updated.
     */
    linkedAccount?: shared.LinkedAccount | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace StackoneUpdateAccountRequest$ {
    export const inboundSchema: z.ZodType<StackoneUpdateAccountRequest, z.ZodTypeDef, unknown> = z
        .object({
            PatchAccountDto: shared.PatchAccountDto$.inboundSchema,
            id: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                PatchAccountDto: "patchAccountDto",
            });
        });

    export type Outbound = {
        PatchAccountDto: shared.PatchAccountDto$.Outbound;
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, StackoneUpdateAccountRequest> = z
        .object({
            patchAccountDto: shared.PatchAccountDto$.outboundSchema,
            id: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                patchAccountDto: "PatchAccountDto",
            });
        });
}

/** @internal */
export namespace StackoneUpdateAccountResponse$ {
    export const inboundSchema: z.ZodType<StackoneUpdateAccountResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            LinkedAccount: shared.LinkedAccount$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                LinkedAccount: "linkedAccount",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        LinkedAccount?: shared.LinkedAccount$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, StackoneUpdateAccountResponse> =
        z
            .object({
                contentType: z.string(),
                linkedAccount: shared.LinkedAccount$.outboundSchema.optional(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
            })
            .transform((v) => {
                return remap$(v, {
                    contentType: "ContentType",
                    linkedAccount: "LinkedAccount",
                    statusCode: "StatusCode",
                    rawResponse: "RawResponse",
                });
            });
}
