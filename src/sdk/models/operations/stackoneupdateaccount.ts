/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type StackoneUpdateAccountRequest = {
  patchAccountExternalDto: shared.PatchAccountExternalDto;
  id: string;
};

export type StackoneUpdateAccountResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * The account with the given identifier was updated.
   */
  linkedAccount?: shared.LinkedAccount | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const StackoneUpdateAccountRequest$inboundSchema: z.ZodType<
  StackoneUpdateAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  PatchAccountExternalDto: shared.PatchAccountExternalDto$inboundSchema,
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "PatchAccountExternalDto": "patchAccountExternalDto",
  });
});

/** @internal */
export type StackoneUpdateAccountRequest$Outbound = {
  PatchAccountExternalDto: shared.PatchAccountExternalDto$Outbound;
  id: string;
};

/** @internal */
export const StackoneUpdateAccountRequest$outboundSchema: z.ZodType<
  StackoneUpdateAccountRequest$Outbound,
  z.ZodTypeDef,
  StackoneUpdateAccountRequest
> = z.object({
  patchAccountExternalDto: shared.PatchAccountExternalDto$outboundSchema,
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    patchAccountExternalDto: "PatchAccountExternalDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StackoneUpdateAccountRequest$ {
  /** @deprecated use `StackoneUpdateAccountRequest$inboundSchema` instead. */
  export const inboundSchema = StackoneUpdateAccountRequest$inboundSchema;
  /** @deprecated use `StackoneUpdateAccountRequest$outboundSchema` instead. */
  export const outboundSchema = StackoneUpdateAccountRequest$outboundSchema;
  /** @deprecated use `StackoneUpdateAccountRequest$Outbound` instead. */
  export type Outbound = StackoneUpdateAccountRequest$Outbound;
}

export function stackoneUpdateAccountRequestToJSON(
  stackoneUpdateAccountRequest: StackoneUpdateAccountRequest,
): string {
  return JSON.stringify(
    StackoneUpdateAccountRequest$outboundSchema.parse(
      stackoneUpdateAccountRequest,
    ),
  );
}

export function stackoneUpdateAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<StackoneUpdateAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StackoneUpdateAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StackoneUpdateAccountRequest' from JSON`,
  );
}

/** @internal */
export const StackoneUpdateAccountResponse$inboundSchema: z.ZodType<
  StackoneUpdateAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),

  Headers: z.record(z.array(z.string())).default({}),
  LinkedAccount: shared.LinkedAccount$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "LinkedAccount": "linkedAccount",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type StackoneUpdateAccountResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  LinkedAccount?: shared.LinkedAccount$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const StackoneUpdateAccountResponse$outboundSchema: z.ZodType<
  StackoneUpdateAccountResponse$Outbound,
  z.ZodTypeDef,
  StackoneUpdateAccountResponse
> = z.object({
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  linkedAccount: shared.LinkedAccount$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    headers: "Headers",
    linkedAccount: "LinkedAccount",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StackoneUpdateAccountResponse$ {
  /** @deprecated use `StackoneUpdateAccountResponse$inboundSchema` instead. */
  export const inboundSchema = StackoneUpdateAccountResponse$inboundSchema;
  /** @deprecated use `StackoneUpdateAccountResponse$outboundSchema` instead. */
  export const outboundSchema = StackoneUpdateAccountResponse$outboundSchema;
  /** @deprecated use `StackoneUpdateAccountResponse$Outbound` instead. */
  export type Outbound = StackoneUpdateAccountResponse$Outbound;
}

export function stackoneUpdateAccountResponseToJSON(
  stackoneUpdateAccountResponse: StackoneUpdateAccountResponse,
): string {
  return JSON.stringify(
    StackoneUpdateAccountResponse$outboundSchema.parse(
      stackoneUpdateAccountResponse,
    ),
  );
}

export function stackoneUpdateAccountResponseFromJSON(
  jsonString: string,
): SafeParseResult<StackoneUpdateAccountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StackoneUpdateAccountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StackoneUpdateAccountResponse' from JSON`,
  );
}
