/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type HrisUpdateEmployeeEmploymentRequest = {
  hrisUpdateEmploymentRequestDto: shared.HrisUpdateEmploymentRequestDto;
  id: string;
  subResourceId: string;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type HrisUpdateEmployeeEmploymentResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The employee employment was updated successfully.
   */
  updateResult?: shared.UpdateResult | undefined;
};

/** @internal */
export const HrisUpdateEmployeeEmploymentRequest$inboundSchema: z.ZodType<
  HrisUpdateEmployeeEmploymentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  HrisUpdateEmploymentRequestDto:
    shared.HrisUpdateEmploymentRequestDto$inboundSchema,
  id: z.string(),
  subResourceId: z.string(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "HrisUpdateEmploymentRequestDto": "hrisUpdateEmploymentRequestDto",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type HrisUpdateEmployeeEmploymentRequest$Outbound = {
  HrisUpdateEmploymentRequestDto:
    shared.HrisUpdateEmploymentRequestDto$Outbound;
  id: string;
  subResourceId: string;
  "x-account-id": string;
};

/** @internal */
export const HrisUpdateEmployeeEmploymentRequest$outboundSchema: z.ZodType<
  HrisUpdateEmployeeEmploymentRequest$Outbound,
  z.ZodTypeDef,
  HrisUpdateEmployeeEmploymentRequest
> = z.object({
  hrisUpdateEmploymentRequestDto:
    shared.HrisUpdateEmploymentRequestDto$outboundSchema,
  id: z.string(),
  subResourceId: z.string(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    hrisUpdateEmploymentRequestDto: "HrisUpdateEmploymentRequestDto",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisUpdateEmployeeEmploymentRequest$ {
  /** @deprecated use `HrisUpdateEmployeeEmploymentRequest$inboundSchema` instead. */
  export const inboundSchema =
    HrisUpdateEmployeeEmploymentRequest$inboundSchema;
  /** @deprecated use `HrisUpdateEmployeeEmploymentRequest$outboundSchema` instead. */
  export const outboundSchema =
    HrisUpdateEmployeeEmploymentRequest$outboundSchema;
  /** @deprecated use `HrisUpdateEmployeeEmploymentRequest$Outbound` instead. */
  export type Outbound = HrisUpdateEmployeeEmploymentRequest$Outbound;
}

export function hrisUpdateEmployeeEmploymentRequestToJSON(
  hrisUpdateEmployeeEmploymentRequest: HrisUpdateEmployeeEmploymentRequest,
): string {
  return JSON.stringify(
    HrisUpdateEmployeeEmploymentRequest$outboundSchema.parse(
      hrisUpdateEmployeeEmploymentRequest,
    ),
  );
}

export function hrisUpdateEmployeeEmploymentRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisUpdateEmployeeEmploymentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisUpdateEmployeeEmploymentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisUpdateEmployeeEmploymentRequest' from JSON`,
  );
}

/** @internal */
export const HrisUpdateEmployeeEmploymentResponse$inboundSchema: z.ZodType<
  HrisUpdateEmployeeEmploymentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),

  Headers: z.record(z.array(z.string())).default({}),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  UpdateResult: shared.UpdateResult$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "UpdateResult": "updateResult",
  });
});

/** @internal */
export type HrisUpdateEmployeeEmploymentResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
  UpdateResult?: shared.UpdateResult$Outbound | undefined;
};

/** @internal */
export const HrisUpdateEmployeeEmploymentResponse$outboundSchema: z.ZodType<
  HrisUpdateEmployeeEmploymentResponse$Outbound,
  z.ZodTypeDef,
  HrisUpdateEmployeeEmploymentResponse
> = z.object({
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  updateResult: shared.UpdateResult$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    updateResult: "UpdateResult",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisUpdateEmployeeEmploymentResponse$ {
  /** @deprecated use `HrisUpdateEmployeeEmploymentResponse$inboundSchema` instead. */
  export const inboundSchema =
    HrisUpdateEmployeeEmploymentResponse$inboundSchema;
  /** @deprecated use `HrisUpdateEmployeeEmploymentResponse$outboundSchema` instead. */
  export const outboundSchema =
    HrisUpdateEmployeeEmploymentResponse$outboundSchema;
  /** @deprecated use `HrisUpdateEmployeeEmploymentResponse$Outbound` instead. */
  export type Outbound = HrisUpdateEmployeeEmploymentResponse$Outbound;
}

export function hrisUpdateEmployeeEmploymentResponseToJSON(
  hrisUpdateEmployeeEmploymentResponse: HrisUpdateEmployeeEmploymentResponse,
): string {
  return JSON.stringify(
    HrisUpdateEmployeeEmploymentResponse$outboundSchema.parse(
      hrisUpdateEmployeeEmploymentResponse,
    ),
  );
}

export function hrisUpdateEmployeeEmploymentResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisUpdateEmployeeEmploymentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisUpdateEmployeeEmploymentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisUpdateEmployeeEmploymentResponse' from JSON`,
  );
}
