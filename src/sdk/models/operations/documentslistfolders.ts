/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * Documents Folders Filter
 */
export type DocumentsListFoldersQueryParamFilter = {
  /**
   * Use to only include Folders within the specified Drive
   */
  driveId?: string | null | undefined;
  /**
   * Use to only include Folders within the specified Folder. Required when requesting nested items
   */
  folderId?: string | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   */
  updatedAfter?: string | null | undefined;
};

export type DocumentsListFoldersRequest = {
  /**
   * The comma separated list of fields that will be returned in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  /**
   * Documents Folders Filter
   */
  filter?: DocumentsListFoldersQueryParamFilter | null | undefined;
  /**
   * Use to only include Folders within the specified Folder. Required when requesting nested items
   */
  folderId?: string | null | undefined;
  /**
   * The comma separated list of fields that will be included in the response
   */
  include?: string | null | undefined;
  /**
   * When "true" and used with filter[folder_id], the response includes Folders and their descendant Folders
   */
  nestedItems?: string | null | undefined;
  /**
   * The unified cursor
   */
  next?: string | null | undefined;
  /**
   * The page number of the results to fetch
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  page?: string | null | undefined;
  /**
   * The number of results per page (default value is 25)
   */
  pageSize?: string | null | undefined;
  /**
   * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
   */
  proxy?: { [k: string]: any } | null | undefined;
  /**
   * Indicates that the raw request result should be returned in addition to the mapped result (default value is false)
   */
  raw?: boolean | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  updatedAfter?: string | null | undefined;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type DocumentsListFoldersResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * The list of folders was retrieved.
   */
  foldersPaginated?: shared.FoldersPaginated | undefined;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const DocumentsListFoldersQueryParamFilter$inboundSchema: z.ZodType<
  DocumentsListFoldersQueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  drive_id: z.nullable(z.string()).optional(),
  folder_id: z.nullable(z.string()).optional(),
  updated_after: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "drive_id": "driveId",
    "folder_id": "folderId",
    "updated_after": "updatedAfter",
  });
});

/** @internal */
export type DocumentsListFoldersQueryParamFilter$Outbound = {
  drive_id?: string | null | undefined;
  folder_id?: string | null | undefined;
  updated_after?: string | null | undefined;
};

/** @internal */
export const DocumentsListFoldersQueryParamFilter$outboundSchema: z.ZodType<
  DocumentsListFoldersQueryParamFilter$Outbound,
  z.ZodTypeDef,
  DocumentsListFoldersQueryParamFilter
> = z.object({
  driveId: z.nullable(z.string()).optional(),
  folderId: z.nullable(z.string()).optional(),
  updatedAfter: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    driveId: "drive_id",
    folderId: "folder_id",
    updatedAfter: "updated_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentsListFoldersQueryParamFilter$ {
  /** @deprecated use `DocumentsListFoldersQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema =
    DocumentsListFoldersQueryParamFilter$inboundSchema;
  /** @deprecated use `DocumentsListFoldersQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema =
    DocumentsListFoldersQueryParamFilter$outboundSchema;
  /** @deprecated use `DocumentsListFoldersQueryParamFilter$Outbound` instead. */
  export type Outbound = DocumentsListFoldersQueryParamFilter$Outbound;
}

export function documentsListFoldersQueryParamFilterToJSON(
  documentsListFoldersQueryParamFilter: DocumentsListFoldersQueryParamFilter,
): string {
  return JSON.stringify(
    DocumentsListFoldersQueryParamFilter$outboundSchema.parse(
      documentsListFoldersQueryParamFilter,
    ),
  );
}

export function documentsListFoldersQueryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<DocumentsListFoldersQueryParamFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentsListFoldersQueryParamFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentsListFoldersQueryParamFilter' from JSON`,
  );
}

/** @internal */
export const DocumentsListFoldersRequest$inboundSchema: z.ZodType<
  DocumentsListFoldersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => DocumentsListFoldersQueryParamFilter$inboundSchema),
  ).optional(),
  folder_id: z.nullable(z.string()).optional(),
  include: z.nullable(z.string()).optional(),
  nested_items: z.nullable(z.string().default("false")),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  page_size: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  updated_after: z.nullable(z.string()).optional(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "folder_id": "folderId",
    "nested_items": "nestedItems",
    "page_size": "pageSize",
    "updated_after": "updatedAfter",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type DocumentsListFoldersRequest$Outbound = {
  fields?: string | null | undefined;
  filter?: DocumentsListFoldersQueryParamFilter$Outbound | null | undefined;
  folder_id?: string | null | undefined;
  include?: string | null | undefined;
  nested_items: string | null;
  next?: string | null | undefined;
  page?: string | null | undefined;
  page_size?: string | null | undefined;
  proxy?: { [k: string]: any } | null | undefined;
  raw?: boolean | null | undefined;
  updated_after?: string | null | undefined;
  "x-account-id": string;
};

/** @internal */
export const DocumentsListFoldersRequest$outboundSchema: z.ZodType<
  DocumentsListFoldersRequest$Outbound,
  z.ZodTypeDef,
  DocumentsListFoldersRequest
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => DocumentsListFoldersQueryParamFilter$outboundSchema),
  ).optional(),
  folderId: z.nullable(z.string()).optional(),
  include: z.nullable(z.string()).optional(),
  nestedItems: z.nullable(z.string().default("false")),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  pageSize: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  updatedAfter: z.nullable(z.string()).optional(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    folderId: "folder_id",
    nestedItems: "nested_items",
    pageSize: "page_size",
    updatedAfter: "updated_after",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentsListFoldersRequest$ {
  /** @deprecated use `DocumentsListFoldersRequest$inboundSchema` instead. */
  export const inboundSchema = DocumentsListFoldersRequest$inboundSchema;
  /** @deprecated use `DocumentsListFoldersRequest$outboundSchema` instead. */
  export const outboundSchema = DocumentsListFoldersRequest$outboundSchema;
  /** @deprecated use `DocumentsListFoldersRequest$Outbound` instead. */
  export type Outbound = DocumentsListFoldersRequest$Outbound;
}

export function documentsListFoldersRequestToJSON(
  documentsListFoldersRequest: DocumentsListFoldersRequest,
): string {
  return JSON.stringify(
    DocumentsListFoldersRequest$outboundSchema.parse(
      documentsListFoldersRequest,
    ),
  );
}

export function documentsListFoldersRequestFromJSON(
  jsonString: string,
): SafeParseResult<DocumentsListFoldersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentsListFoldersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentsListFoldersRequest' from JSON`,
  );
}

/** @internal */
export const DocumentsListFoldersResponse$inboundSchema: z.ZodType<
  DocumentsListFoldersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  FoldersPaginated: shared.FoldersPaginated$inboundSchema.optional(),
  Headers: z.record(z.array(z.string())),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "FoldersPaginated": "foldersPaginated",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type DocumentsListFoldersResponse$Outbound = {
  ContentType: string;
  FoldersPaginated?: shared.FoldersPaginated$Outbound | undefined;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const DocumentsListFoldersResponse$outboundSchema: z.ZodType<
  DocumentsListFoldersResponse$Outbound,
  z.ZodTypeDef,
  DocumentsListFoldersResponse
> = z.object({
  contentType: z.string(),
  foldersPaginated: shared.FoldersPaginated$outboundSchema.optional(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    foldersPaginated: "FoldersPaginated",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentsListFoldersResponse$ {
  /** @deprecated use `DocumentsListFoldersResponse$inboundSchema` instead. */
  export const inboundSchema = DocumentsListFoldersResponse$inboundSchema;
  /** @deprecated use `DocumentsListFoldersResponse$outboundSchema` instead. */
  export const outboundSchema = DocumentsListFoldersResponse$outboundSchema;
  /** @deprecated use `DocumentsListFoldersResponse$Outbound` instead. */
  export type Outbound = DocumentsListFoldersResponse$Outbound;
}

export function documentsListFoldersResponseToJSON(
  documentsListFoldersResponse: DocumentsListFoldersResponse,
): string {
  return JSON.stringify(
    DocumentsListFoldersResponse$outboundSchema.parse(
      documentsListFoldersResponse,
    ),
  );
}

export function documentsListFoldersResponseFromJSON(
  jsonString: string,
): SafeParseResult<DocumentsListFoldersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentsListFoldersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentsListFoldersResponse' from JSON`,
  );
}
