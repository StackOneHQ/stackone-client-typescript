/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

export type LmsDeleteContentRequest = {
  id: string;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type LmsDeleteContentResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * The content was deleted successfully.
   */
  deleteResult?: shared.DeleteResult | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const LmsDeleteContentRequest$inboundSchema: z.ZodType<
  LmsDeleteContentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type LmsDeleteContentRequest$Outbound = {
  id: string;
  "x-account-id": string;
};

/** @internal */
export const LmsDeleteContentRequest$outboundSchema: z.ZodType<
  LmsDeleteContentRequest$Outbound,
  z.ZodTypeDef,
  LmsDeleteContentRequest
> = z.object({
  id: z.string(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LmsDeleteContentRequest$ {
  /** @deprecated use `LmsDeleteContentRequest$inboundSchema` instead. */
  export const inboundSchema = LmsDeleteContentRequest$inboundSchema;
  /** @deprecated use `LmsDeleteContentRequest$outboundSchema` instead. */
  export const outboundSchema = LmsDeleteContentRequest$outboundSchema;
  /** @deprecated use `LmsDeleteContentRequest$Outbound` instead. */
  export type Outbound = LmsDeleteContentRequest$Outbound;
}

/** @internal */
export const LmsDeleteContentResponse$inboundSchema: z.ZodType<
  LmsDeleteContentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  DeleteResult: shared.DeleteResult$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "DeleteResult": "deleteResult",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type LmsDeleteContentResponse$Outbound = {
  ContentType: string;
  DeleteResult?: shared.DeleteResult$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const LmsDeleteContentResponse$outboundSchema: z.ZodType<
  LmsDeleteContentResponse$Outbound,
  z.ZodTypeDef,
  LmsDeleteContentResponse
> = z.object({
  contentType: z.string(),
  deleteResult: shared.DeleteResult$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    deleteResult: "DeleteResult",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LmsDeleteContentResponse$ {
  /** @deprecated use `LmsDeleteContentResponse$inboundSchema` instead. */
  export const inboundSchema = LmsDeleteContentResponse$inboundSchema;
  /** @deprecated use `LmsDeleteContentResponse$outboundSchema` instead. */
  export const outboundSchema = LmsDeleteContentResponse$outboundSchema;
  /** @deprecated use `LmsDeleteContentResponse$Outbound` instead. */
  export type Outbound = LmsDeleteContentResponse$Outbound;
}
