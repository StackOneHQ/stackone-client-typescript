/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * Filter parameters that allow greater customisation of the list response
 */
export type MessagingListConversationMessagesQueryParamFilter = {
  /**
   * Use a string with a date to only select results updated after that given date
   */
  updatedAfter?: Date | null | undefined;
};

export type MessagingListConversationMessagesRequest = {
  /**
   * The comma separated list of fields that will be returned in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  /**
   * Filter parameters that allow greater customisation of the list response
   */
  filter?: MessagingListConversationMessagesQueryParamFilter | null | undefined;
  id: string;
  /**
   * The unified cursor
   */
  next?: string | null | undefined;
  /**
   * The page number of the results to fetch
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  page?: string | null | undefined;
  /**
   * The number of results per page (default value is 25)
   */
  pageSize?: string | null | undefined;
  /**
   * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
   */
  proxy?: { [k: string]: any } | null | undefined;
  /**
   * Indicates that the raw request result should be returned in addition to the mapped result (default value is false)
   */
  raw?: boolean | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  updatedAfter?: Date | null | undefined;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type MessagingListConversationMessagesResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * The list of messages in the conversation was retrieved.
   */
  messagingMessagesPaginated?: shared.MessagingMessagesPaginated | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const MessagingListConversationMessagesQueryParamFilter$inboundSchema:
  z.ZodType<
    MessagingListConversationMessagesQueryParamFilter,
    z.ZodTypeDef,
    unknown
  > = z.object({
    updated_after: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "updated_after": "updatedAfter",
    });
  });

/** @internal */
export type MessagingListConversationMessagesQueryParamFilter$Outbound = {
  updated_after?: string | null | undefined;
};

/** @internal */
export const MessagingListConversationMessagesQueryParamFilter$outboundSchema:
  z.ZodType<
    MessagingListConversationMessagesQueryParamFilter$Outbound,
    z.ZodTypeDef,
    MessagingListConversationMessagesQueryParamFilter
  > = z.object({
    updatedAfter: z.nullable(z.date().transform(v => v.toISOString()))
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      updatedAfter: "updated_after",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingListConversationMessagesQueryParamFilter$ {
  /** @deprecated use `MessagingListConversationMessagesQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema =
    MessagingListConversationMessagesQueryParamFilter$inboundSchema;
  /** @deprecated use `MessagingListConversationMessagesQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema =
    MessagingListConversationMessagesQueryParamFilter$outboundSchema;
  /** @deprecated use `MessagingListConversationMessagesQueryParamFilter$Outbound` instead. */
  export type Outbound =
    MessagingListConversationMessagesQueryParamFilter$Outbound;
}

export function messagingListConversationMessagesQueryParamFilterToJSON(
  messagingListConversationMessagesQueryParamFilter:
    MessagingListConversationMessagesQueryParamFilter,
): string {
  return JSON.stringify(
    MessagingListConversationMessagesQueryParamFilter$outboundSchema.parse(
      messagingListConversationMessagesQueryParamFilter,
    ),
  );
}

export function messagingListConversationMessagesQueryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  MessagingListConversationMessagesQueryParamFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MessagingListConversationMessagesQueryParamFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MessagingListConversationMessagesQueryParamFilter' from JSON`,
  );
}

/** @internal */
export const MessagingListConversationMessagesRequest$inboundSchema: z.ZodType<
  MessagingListConversationMessagesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() =>
      MessagingListConversationMessagesQueryParamFilter$inboundSchema
    ),
  ).optional(),
  id: z.string(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  page_size: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  updated_after: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "updated_after": "updatedAfter",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type MessagingListConversationMessagesRequest$Outbound = {
  fields?: string | null | undefined;
  filter?:
    | MessagingListConversationMessagesQueryParamFilter$Outbound
    | null
    | undefined;
  id: string;
  next?: string | null | undefined;
  page?: string | null | undefined;
  page_size?: string | null | undefined;
  proxy?: { [k: string]: any } | null | undefined;
  raw?: boolean | null | undefined;
  updated_after?: string | null | undefined;
  "x-account-id": string;
};

/** @internal */
export const MessagingListConversationMessagesRequest$outboundSchema: z.ZodType<
  MessagingListConversationMessagesRequest$Outbound,
  z.ZodTypeDef,
  MessagingListConversationMessagesRequest
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() =>
      MessagingListConversationMessagesQueryParamFilter$outboundSchema
    ),
  ).optional(),
  id: z.string(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  pageSize: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  updatedAfter: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    updatedAfter: "updated_after",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingListConversationMessagesRequest$ {
  /** @deprecated use `MessagingListConversationMessagesRequest$inboundSchema` instead. */
  export const inboundSchema =
    MessagingListConversationMessagesRequest$inboundSchema;
  /** @deprecated use `MessagingListConversationMessagesRequest$outboundSchema` instead. */
  export const outboundSchema =
    MessagingListConversationMessagesRequest$outboundSchema;
  /** @deprecated use `MessagingListConversationMessagesRequest$Outbound` instead. */
  export type Outbound = MessagingListConversationMessagesRequest$Outbound;
}

export function messagingListConversationMessagesRequestToJSON(
  messagingListConversationMessagesRequest:
    MessagingListConversationMessagesRequest,
): string {
  return JSON.stringify(
    MessagingListConversationMessagesRequest$outboundSchema.parse(
      messagingListConversationMessagesRequest,
    ),
  );
}

export function messagingListConversationMessagesRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  MessagingListConversationMessagesRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MessagingListConversationMessagesRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MessagingListConversationMessagesRequest' from JSON`,
  );
}

/** @internal */
export const MessagingListConversationMessagesResponse$inboundSchema: z.ZodType<
  MessagingListConversationMessagesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),

  Headers: z.record(z.array(z.string())).default({}),
  MessagingMessagesPaginated: shared.MessagingMessagesPaginated$inboundSchema
    .optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "MessagingMessagesPaginated": "messagingMessagesPaginated",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type MessagingListConversationMessagesResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  MessagingMessagesPaginated?:
    | shared.MessagingMessagesPaginated$Outbound
    | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const MessagingListConversationMessagesResponse$outboundSchema:
  z.ZodType<
    MessagingListConversationMessagesResponse$Outbound,
    z.ZodTypeDef,
    MessagingListConversationMessagesResponse
  > = z.object({
    contentType: z.string(),
    headers: z.record(z.array(z.string())),
    messagingMessagesPaginated: shared.MessagingMessagesPaginated$outboundSchema
      .optional(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      headers: "Headers",
      messagingMessagesPaginated: "MessagingMessagesPaginated",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingListConversationMessagesResponse$ {
  /** @deprecated use `MessagingListConversationMessagesResponse$inboundSchema` instead. */
  export const inboundSchema =
    MessagingListConversationMessagesResponse$inboundSchema;
  /** @deprecated use `MessagingListConversationMessagesResponse$outboundSchema` instead. */
  export const outboundSchema =
    MessagingListConversationMessagesResponse$outboundSchema;
  /** @deprecated use `MessagingListConversationMessagesResponse$Outbound` instead. */
  export type Outbound = MessagingListConversationMessagesResponse$Outbound;
}

export function messagingListConversationMessagesResponseToJSON(
  messagingListConversationMessagesResponse:
    MessagingListConversationMessagesResponse,
): string {
  return JSON.stringify(
    MessagingListConversationMessagesResponse$outboundSchema.parse(
      messagingListConversationMessagesResponse,
    ),
  );
}

export function messagingListConversationMessagesResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  MessagingListConversationMessagesResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MessagingListConversationMessagesResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MessagingListConversationMessagesResponse' from JSON`,
  );
}
