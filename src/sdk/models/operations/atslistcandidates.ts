/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

/**
 * ATS Candidate Filter
 */
export type AtsListCandidatesQueryParamFilter = {
  /**
   * Filter to select candidates by email
   */
  email?: string | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   */
  updatedAfter?: string | null | undefined;
};

export type AtsListCandidatesRequest = {
  /**
   * The comma separated list of fields that will be returned in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  /**
   * ATS Candidate Filter
   */
  filter?: AtsListCandidatesQueryParamFilter | null | undefined;
  /**
   * The comma separated list of fields that will be included in the response
   */
  include?: string | null | undefined;
  /**
   * The unified cursor
   */
  next?: string | null | undefined;
  /**
   * The page number of the results to fetch
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  page?: string | null | undefined;
  /**
   * The number of results per page
   */
  pageSize?: string | null | undefined;
  /**
   * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
   */
  proxy?: { [k: string]: any } | null | undefined;
  /**
   * Indicates that the raw request result is returned
   */
  raw?: boolean | null | undefined;
  /**
   * The sync token to select the only updated results
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  syncToken?: string | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  updatedAfter?: string | null | undefined;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type AtsListCandidatesResponse = {
  /**
   * The list of candidates was retrieved.
   */
  candidatesPaginated?: shared.CandidatesPaginated | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const AtsListCandidatesQueryParamFilter$inboundSchema: z.ZodType<
  AtsListCandidatesQueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.nullable(z.string()).optional(),
  updated_after: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "updated_after": "updatedAfter",
  });
});

/** @internal */
export type AtsListCandidatesQueryParamFilter$Outbound = {
  email?: string | null | undefined;
  updated_after?: string | null | undefined;
};

/** @internal */
export const AtsListCandidatesQueryParamFilter$outboundSchema: z.ZodType<
  AtsListCandidatesQueryParamFilter$Outbound,
  z.ZodTypeDef,
  AtsListCandidatesQueryParamFilter
> = z.object({
  email: z.nullable(z.string()).optional(),
  updatedAfter: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    updatedAfter: "updated_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsListCandidatesQueryParamFilter$ {
  /** @deprecated use `AtsListCandidatesQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema = AtsListCandidatesQueryParamFilter$inboundSchema;
  /** @deprecated use `AtsListCandidatesQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema =
    AtsListCandidatesQueryParamFilter$outboundSchema;
  /** @deprecated use `AtsListCandidatesQueryParamFilter$Outbound` instead. */
  export type Outbound = AtsListCandidatesQueryParamFilter$Outbound;
}

/** @internal */
export const AtsListCandidatesRequest$inboundSchema: z.ZodType<
  AtsListCandidatesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => AtsListCandidatesQueryParamFilter$inboundSchema),
  ).optional(),
  include: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  page_size: z.nullable(z.string().default("25")),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean().default(false)),
  sync_token: z.nullable(z.string()).optional(),
  updated_after: z.nullable(z.string()).optional(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "sync_token": "syncToken",
    "updated_after": "updatedAfter",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type AtsListCandidatesRequest$Outbound = {
  fields?: string | null | undefined;
  filter?: AtsListCandidatesQueryParamFilter$Outbound | null | undefined;
  include?: string | null | undefined;
  next?: string | null | undefined;
  page?: string | null | undefined;
  page_size: string | null;
  proxy?: { [k: string]: any } | null | undefined;
  raw: boolean | null;
  sync_token?: string | null | undefined;
  updated_after?: string | null | undefined;
  "x-account-id": string;
};

/** @internal */
export const AtsListCandidatesRequest$outboundSchema: z.ZodType<
  AtsListCandidatesRequest$Outbound,
  z.ZodTypeDef,
  AtsListCandidatesRequest
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => AtsListCandidatesQueryParamFilter$outboundSchema),
  ).optional(),
  include: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  pageSize: z.nullable(z.string().default("25")),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean().default(false)),
  syncToken: z.nullable(z.string()).optional(),
  updatedAfter: z.nullable(z.string()).optional(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    syncToken: "sync_token",
    updatedAfter: "updated_after",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsListCandidatesRequest$ {
  /** @deprecated use `AtsListCandidatesRequest$inboundSchema` instead. */
  export const inboundSchema = AtsListCandidatesRequest$inboundSchema;
  /** @deprecated use `AtsListCandidatesRequest$outboundSchema` instead. */
  export const outboundSchema = AtsListCandidatesRequest$outboundSchema;
  /** @deprecated use `AtsListCandidatesRequest$Outbound` instead. */
  export type Outbound = AtsListCandidatesRequest$Outbound;
}

/** @internal */
export const AtsListCandidatesResponse$inboundSchema: z.ZodType<
  AtsListCandidatesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  CandidatesPaginated: shared.CandidatesPaginated$inboundSchema.optional(),
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "CandidatesPaginated": "candidatesPaginated",
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type AtsListCandidatesResponse$Outbound = {
  CandidatesPaginated?: shared.CandidatesPaginated$Outbound | undefined;
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const AtsListCandidatesResponse$outboundSchema: z.ZodType<
  AtsListCandidatesResponse$Outbound,
  z.ZodTypeDef,
  AtsListCandidatesResponse
> = z.object({
  candidatesPaginated: shared.CandidatesPaginated$outboundSchema.optional(),
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    candidatesPaginated: "CandidatesPaginated",
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsListCandidatesResponse$ {
  /** @deprecated use `AtsListCandidatesResponse$inboundSchema` instead. */
  export const inboundSchema = AtsListCandidatesResponse$inboundSchema;
  /** @deprecated use `AtsListCandidatesResponse$outboundSchema` instead. */
  export const outboundSchema = AtsListCandidatesResponse$outboundSchema;
  /** @deprecated use `AtsListCandidatesResponse$Outbound` instead. */
  export type Outbound = AtsListCandidatesResponse$Outbound;
}
