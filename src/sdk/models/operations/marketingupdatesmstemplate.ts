/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type MarketingUpdateSmsTemplateRequest = {
  marketingCreateSmsTemplateRequestDto:
    shared.MarketingCreateSmsTemplateRequestDto;
  id: string;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type MarketingUpdateSmsTemplateResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * Record updated successfully
   */
  createResult?: shared.CreateResult | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const MarketingUpdateSmsTemplateRequest$inboundSchema: z.ZodType<
  MarketingUpdateSmsTemplateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  MarketingCreateSmsTemplateRequestDto:
    shared.MarketingCreateSmsTemplateRequestDto$inboundSchema,
  id: z.string(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "MarketingCreateSmsTemplateRequestDto":
      "marketingCreateSmsTemplateRequestDto",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type MarketingUpdateSmsTemplateRequest$Outbound = {
  MarketingCreateSmsTemplateRequestDto:
    shared.MarketingCreateSmsTemplateRequestDto$Outbound;
  id: string;
  "x-account-id": string;
};

/** @internal */
export const MarketingUpdateSmsTemplateRequest$outboundSchema: z.ZodType<
  MarketingUpdateSmsTemplateRequest$Outbound,
  z.ZodTypeDef,
  MarketingUpdateSmsTemplateRequest
> = z.object({
  marketingCreateSmsTemplateRequestDto:
    shared.MarketingCreateSmsTemplateRequestDto$outboundSchema,
  id: z.string(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    marketingCreateSmsTemplateRequestDto:
      "MarketingCreateSmsTemplateRequestDto",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MarketingUpdateSmsTemplateRequest$ {
  /** @deprecated use `MarketingUpdateSmsTemplateRequest$inboundSchema` instead. */
  export const inboundSchema = MarketingUpdateSmsTemplateRequest$inboundSchema;
  /** @deprecated use `MarketingUpdateSmsTemplateRequest$outboundSchema` instead. */
  export const outboundSchema =
    MarketingUpdateSmsTemplateRequest$outboundSchema;
  /** @deprecated use `MarketingUpdateSmsTemplateRequest$Outbound` instead. */
  export type Outbound = MarketingUpdateSmsTemplateRequest$Outbound;
}

export function marketingUpdateSmsTemplateRequestToJSON(
  marketingUpdateSmsTemplateRequest: MarketingUpdateSmsTemplateRequest,
): string {
  return JSON.stringify(
    MarketingUpdateSmsTemplateRequest$outboundSchema.parse(
      marketingUpdateSmsTemplateRequest,
    ),
  );
}

export function marketingUpdateSmsTemplateRequestFromJSON(
  jsonString: string,
): SafeParseResult<MarketingUpdateSmsTemplateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MarketingUpdateSmsTemplateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MarketingUpdateSmsTemplateRequest' from JSON`,
  );
}

/** @internal */
export const MarketingUpdateSmsTemplateResponse$inboundSchema: z.ZodType<
  MarketingUpdateSmsTemplateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  CreateResult: shared.CreateResult$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "CreateResult": "createResult",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type MarketingUpdateSmsTemplateResponse$Outbound = {
  ContentType: string;
  CreateResult?: shared.CreateResult$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const MarketingUpdateSmsTemplateResponse$outboundSchema: z.ZodType<
  MarketingUpdateSmsTemplateResponse$Outbound,
  z.ZodTypeDef,
  MarketingUpdateSmsTemplateResponse
> = z.object({
  contentType: z.string(),
  createResult: shared.CreateResult$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    createResult: "CreateResult",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MarketingUpdateSmsTemplateResponse$ {
  /** @deprecated use `MarketingUpdateSmsTemplateResponse$inboundSchema` instead. */
  export const inboundSchema = MarketingUpdateSmsTemplateResponse$inboundSchema;
  /** @deprecated use `MarketingUpdateSmsTemplateResponse$outboundSchema` instead. */
  export const outboundSchema =
    MarketingUpdateSmsTemplateResponse$outboundSchema;
  /** @deprecated use `MarketingUpdateSmsTemplateResponse$Outbound` instead. */
  export type Outbound = MarketingUpdateSmsTemplateResponse$Outbound;
}

export function marketingUpdateSmsTemplateResponseToJSON(
  marketingUpdateSmsTemplateResponse: MarketingUpdateSmsTemplateResponse,
): string {
  return JSON.stringify(
    MarketingUpdateSmsTemplateResponse$outboundSchema.parse(
      marketingUpdateSmsTemplateResponse,
    ),
  );
}

export function marketingUpdateSmsTemplateResponseFromJSON(
  jsonString: string,
): SafeParseResult<MarketingUpdateSmsTemplateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MarketingUpdateSmsTemplateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MarketingUpdateSmsTemplateResponse' from JSON`,
  );
}
