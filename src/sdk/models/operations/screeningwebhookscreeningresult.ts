/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type ScreeningWebhookScreeningResultRequest = {
  screeningResultWebhook: shared.ScreeningResultWebhook;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type ScreeningWebhookScreeningResultResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * The screening result webhook was processed.
   */
  screeningResultWebhook?: shared.ScreeningResultWebhook | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const ScreeningWebhookScreeningResultRequest$inboundSchema: z.ZodType<
  ScreeningWebhookScreeningResultRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ScreeningResultWebhook: shared.ScreeningResultWebhook$inboundSchema,
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "ScreeningResultWebhook": "screeningResultWebhook",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type ScreeningWebhookScreeningResultRequest$Outbound = {
  ScreeningResultWebhook: shared.ScreeningResultWebhook$Outbound;
  "x-account-id": string;
};

/** @internal */
export const ScreeningWebhookScreeningResultRequest$outboundSchema: z.ZodType<
  ScreeningWebhookScreeningResultRequest$Outbound,
  z.ZodTypeDef,
  ScreeningWebhookScreeningResultRequest
> = z.object({
  screeningResultWebhook: shared.ScreeningResultWebhook$outboundSchema,
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    screeningResultWebhook: "ScreeningResultWebhook",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScreeningWebhookScreeningResultRequest$ {
  /** @deprecated use `ScreeningWebhookScreeningResultRequest$inboundSchema` instead. */
  export const inboundSchema =
    ScreeningWebhookScreeningResultRequest$inboundSchema;
  /** @deprecated use `ScreeningWebhookScreeningResultRequest$outboundSchema` instead. */
  export const outboundSchema =
    ScreeningWebhookScreeningResultRequest$outboundSchema;
  /** @deprecated use `ScreeningWebhookScreeningResultRequest$Outbound` instead. */
  export type Outbound = ScreeningWebhookScreeningResultRequest$Outbound;
}

export function screeningWebhookScreeningResultRequestToJSON(
  screeningWebhookScreeningResultRequest:
    ScreeningWebhookScreeningResultRequest,
): string {
  return JSON.stringify(
    ScreeningWebhookScreeningResultRequest$outboundSchema.parse(
      screeningWebhookScreeningResultRequest,
    ),
  );
}

export function screeningWebhookScreeningResultRequestFromJSON(
  jsonString: string,
): SafeParseResult<ScreeningWebhookScreeningResultRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ScreeningWebhookScreeningResultRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScreeningWebhookScreeningResultRequest' from JSON`,
  );
}

/** @internal */
export const ScreeningWebhookScreeningResultResponse$inboundSchema: z.ZodType<
  ScreeningWebhookScreeningResultResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),

  Headers: z.record(z.array(z.string())).default({}),
  ScreeningResultWebhook: shared.ScreeningResultWebhook$inboundSchema
    .optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "ScreeningResultWebhook": "screeningResultWebhook",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type ScreeningWebhookScreeningResultResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  ScreeningResultWebhook?: shared.ScreeningResultWebhook$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const ScreeningWebhookScreeningResultResponse$outboundSchema: z.ZodType<
  ScreeningWebhookScreeningResultResponse$Outbound,
  z.ZodTypeDef,
  ScreeningWebhookScreeningResultResponse
> = z.object({
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  screeningResultWebhook: shared.ScreeningResultWebhook$outboundSchema
    .optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    headers: "Headers",
    screeningResultWebhook: "ScreeningResultWebhook",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScreeningWebhookScreeningResultResponse$ {
  /** @deprecated use `ScreeningWebhookScreeningResultResponse$inboundSchema` instead. */
  export const inboundSchema =
    ScreeningWebhookScreeningResultResponse$inboundSchema;
  /** @deprecated use `ScreeningWebhookScreeningResultResponse$outboundSchema` instead. */
  export const outboundSchema =
    ScreeningWebhookScreeningResultResponse$outboundSchema;
  /** @deprecated use `ScreeningWebhookScreeningResultResponse$Outbound` instead. */
  export type Outbound = ScreeningWebhookScreeningResultResponse$Outbound;
}

export function screeningWebhookScreeningResultResponseToJSON(
  screeningWebhookScreeningResultResponse:
    ScreeningWebhookScreeningResultResponse,
): string {
  return JSON.stringify(
    ScreeningWebhookScreeningResultResponse$outboundSchema.parse(
      screeningWebhookScreeningResultResponse,
    ),
  );
}

export function screeningWebhookScreeningResultResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ScreeningWebhookScreeningResultResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ScreeningWebhookScreeningResultResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ScreeningWebhookScreeningResultResponse' from JSON`,
  );
}
