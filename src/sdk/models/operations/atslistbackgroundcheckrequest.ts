/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * Filter parameters that allow greater customisation of the list response
 */
export type AtsListBackgroundCheckRequestQueryParamFilter = {
  /**
   * Use a string with a date to only select results updated after that given date
   */
  updatedAfter?: string | null | undefined;
};

export type AtsListBackgroundCheckRequestRequest = {
  /**
   * The comma separated list of fields that will be returned in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  /**
   * Filter parameters that allow greater customisation of the list response
   */
  filter?: AtsListBackgroundCheckRequestQueryParamFilter | null | undefined;
  /**
   * The unified cursor
   */
  next?: string | null | undefined;
  /**
   * The page number of the results to fetch
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  page?: string | null | undefined;
  /**
   * The number of results per page
   */
  pageSize?: string | null | undefined;
  /**
   * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
   */
  proxy?: { [k: string]: any } | null | undefined;
  /**
   * Indicates that the raw request result is returned
   */
  raw?: boolean | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  updatedAfter?: string | null | undefined;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type AtsListBackgroundCheckRequestResponse = {
  /**
   * The list of background check requests was retrieved.
   */
  backgroundCheckOrderPaginated?:
    | shared.BackgroundCheckOrderPaginated
    | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const AtsListBackgroundCheckRequestQueryParamFilter$inboundSchema:
  z.ZodType<
    AtsListBackgroundCheckRequestQueryParamFilter,
    z.ZodTypeDef,
    unknown
  > = z.object({
    updated_after: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "updated_after": "updatedAfter",
    });
  });

/** @internal */
export type AtsListBackgroundCheckRequestQueryParamFilter$Outbound = {
  updated_after?: string | null | undefined;
};

/** @internal */
export const AtsListBackgroundCheckRequestQueryParamFilter$outboundSchema:
  z.ZodType<
    AtsListBackgroundCheckRequestQueryParamFilter$Outbound,
    z.ZodTypeDef,
    AtsListBackgroundCheckRequestQueryParamFilter
  > = z.object({
    updatedAfter: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      updatedAfter: "updated_after",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsListBackgroundCheckRequestQueryParamFilter$ {
  /** @deprecated use `AtsListBackgroundCheckRequestQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema =
    AtsListBackgroundCheckRequestQueryParamFilter$inboundSchema;
  /** @deprecated use `AtsListBackgroundCheckRequestQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema =
    AtsListBackgroundCheckRequestQueryParamFilter$outboundSchema;
  /** @deprecated use `AtsListBackgroundCheckRequestQueryParamFilter$Outbound` instead. */
  export type Outbound = AtsListBackgroundCheckRequestQueryParamFilter$Outbound;
}

export function atsListBackgroundCheckRequestQueryParamFilterToJSON(
  atsListBackgroundCheckRequestQueryParamFilter:
    AtsListBackgroundCheckRequestQueryParamFilter,
): string {
  return JSON.stringify(
    AtsListBackgroundCheckRequestQueryParamFilter$outboundSchema.parse(
      atsListBackgroundCheckRequestQueryParamFilter,
    ),
  );
}

export function atsListBackgroundCheckRequestQueryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  AtsListBackgroundCheckRequestQueryParamFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AtsListBackgroundCheckRequestQueryParamFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AtsListBackgroundCheckRequestQueryParamFilter' from JSON`,
  );
}

/** @internal */
export const AtsListBackgroundCheckRequestRequest$inboundSchema: z.ZodType<
  AtsListBackgroundCheckRequestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => AtsListBackgroundCheckRequestQueryParamFilter$inboundSchema),
  ).optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  page_size: z.nullable(z.string().default("25")),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean().default(false)),
  updated_after: z.nullable(z.string()).optional(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "updated_after": "updatedAfter",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type AtsListBackgroundCheckRequestRequest$Outbound = {
  fields?: string | null | undefined;
  filter?:
    | AtsListBackgroundCheckRequestQueryParamFilter$Outbound
    | null
    | undefined;
  next?: string | null | undefined;
  page?: string | null | undefined;
  page_size: string | null;
  proxy?: { [k: string]: any } | null | undefined;
  raw: boolean | null;
  updated_after?: string | null | undefined;
  "x-account-id": string;
};

/** @internal */
export const AtsListBackgroundCheckRequestRequest$outboundSchema: z.ZodType<
  AtsListBackgroundCheckRequestRequest$Outbound,
  z.ZodTypeDef,
  AtsListBackgroundCheckRequestRequest
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => AtsListBackgroundCheckRequestQueryParamFilter$outboundSchema),
  ).optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  pageSize: z.nullable(z.string().default("25")),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean().default(false)),
  updatedAfter: z.nullable(z.string()).optional(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    updatedAfter: "updated_after",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsListBackgroundCheckRequestRequest$ {
  /** @deprecated use `AtsListBackgroundCheckRequestRequest$inboundSchema` instead. */
  export const inboundSchema =
    AtsListBackgroundCheckRequestRequest$inboundSchema;
  /** @deprecated use `AtsListBackgroundCheckRequestRequest$outboundSchema` instead. */
  export const outboundSchema =
    AtsListBackgroundCheckRequestRequest$outboundSchema;
  /** @deprecated use `AtsListBackgroundCheckRequestRequest$Outbound` instead. */
  export type Outbound = AtsListBackgroundCheckRequestRequest$Outbound;
}

export function atsListBackgroundCheckRequestRequestToJSON(
  atsListBackgroundCheckRequestRequest: AtsListBackgroundCheckRequestRequest,
): string {
  return JSON.stringify(
    AtsListBackgroundCheckRequestRequest$outboundSchema.parse(
      atsListBackgroundCheckRequestRequest,
    ),
  );
}

export function atsListBackgroundCheckRequestRequestFromJSON(
  jsonString: string,
): SafeParseResult<AtsListBackgroundCheckRequestRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AtsListBackgroundCheckRequestRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsListBackgroundCheckRequestRequest' from JSON`,
  );
}

/** @internal */
export const AtsListBackgroundCheckRequestResponse$inboundSchema: z.ZodType<
  AtsListBackgroundCheckRequestResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BackgroundCheckOrderPaginated: shared
    .BackgroundCheckOrderPaginated$inboundSchema.optional(),
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "BackgroundCheckOrderPaginated": "backgroundCheckOrderPaginated",
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type AtsListBackgroundCheckRequestResponse$Outbound = {
  BackgroundCheckOrderPaginated?:
    | shared.BackgroundCheckOrderPaginated$Outbound
    | undefined;
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const AtsListBackgroundCheckRequestResponse$outboundSchema: z.ZodType<
  AtsListBackgroundCheckRequestResponse$Outbound,
  z.ZodTypeDef,
  AtsListBackgroundCheckRequestResponse
> = z.object({
  backgroundCheckOrderPaginated: shared
    .BackgroundCheckOrderPaginated$outboundSchema.optional(),
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    backgroundCheckOrderPaginated: "BackgroundCheckOrderPaginated",
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsListBackgroundCheckRequestResponse$ {
  /** @deprecated use `AtsListBackgroundCheckRequestResponse$inboundSchema` instead. */
  export const inboundSchema =
    AtsListBackgroundCheckRequestResponse$inboundSchema;
  /** @deprecated use `AtsListBackgroundCheckRequestResponse$outboundSchema` instead. */
  export const outboundSchema =
    AtsListBackgroundCheckRequestResponse$outboundSchema;
  /** @deprecated use `AtsListBackgroundCheckRequestResponse$Outbound` instead. */
  export type Outbound = AtsListBackgroundCheckRequestResponse$Outbound;
}

export function atsListBackgroundCheckRequestResponseToJSON(
  atsListBackgroundCheckRequestResponse: AtsListBackgroundCheckRequestResponse,
): string {
  return JSON.stringify(
    AtsListBackgroundCheckRequestResponse$outboundSchema.parse(
      atsListBackgroundCheckRequestResponse,
    ),
  );
}

export function atsListBackgroundCheckRequestResponseFromJSON(
  jsonString: string,
): SafeParseResult<AtsListBackgroundCheckRequestResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AtsListBackgroundCheckRequestResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsListBackgroundCheckRequestResponse' from JSON`,
  );
}
