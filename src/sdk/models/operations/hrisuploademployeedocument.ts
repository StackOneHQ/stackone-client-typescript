/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type HrisUploadEmployeeDocumentRequest = {
    unifiedUploadRequestDto: shared.UnifiedUploadRequestDto;
    id: string;
    /**
     * The account identifier
     */
    xAccountId: string;
};

export type HrisUploadEmployeeDocumentResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The document related to the employee with the given identifier was uploaded.
     */
    writeResultApiModel?: shared.WriteResultApiModel | undefined;
};

/** @internal */
export namespace HrisUploadEmployeeDocumentRequest$ {
    export type Inbound = {
        UnifiedUploadRequestDto: shared.UnifiedUploadRequestDto$.Inbound;
        id: string;
        "x-account-id": string;
    };

    export const inboundSchema: z.ZodType<
        HrisUploadEmployeeDocumentRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            UnifiedUploadRequestDto: shared.UnifiedUploadRequestDto$.inboundSchema,
            id: z.string(),
            "x-account-id": z.string(),
        })
        .transform((v) => {
            return {
                unifiedUploadRequestDto: v.UnifiedUploadRequestDto,
                id: v.id,
                xAccountId: v["x-account-id"],
            };
        });

    export type Outbound = {
        UnifiedUploadRequestDto: shared.UnifiedUploadRequestDto$.Outbound;
        id: string;
        "x-account-id": string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        HrisUploadEmployeeDocumentRequest
    > = z
        .object({
            unifiedUploadRequestDto: shared.UnifiedUploadRequestDto$.outboundSchema,
            id: z.string(),
            xAccountId: z.string(),
        })
        .transform((v) => {
            return {
                UnifiedUploadRequestDto: v.unifiedUploadRequestDto,
                id: v.id,
                "x-account-id": v.xAccountId,
            };
        });
}

/** @internal */
export namespace HrisUploadEmployeeDocumentResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        WriteResultApiModel?: shared.WriteResultApiModel$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        HrisUploadEmployeeDocumentResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            WriteResultApiModel: shared.WriteResultApiModel$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.WriteResultApiModel === undefined
                    ? null
                    : { writeResultApiModel: v.WriteResultApiModel }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        WriteResultApiModel?: shared.WriteResultApiModel$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        HrisUploadEmployeeDocumentResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            writeResultApiModel: shared.WriteResultApiModel$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.writeResultApiModel === undefined
                    ? null
                    : { WriteResultApiModel: v.writeResultApiModel }),
            };
        });
}
