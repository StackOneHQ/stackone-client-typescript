/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type DocumentsSearchFilesRequest = {
  documentsFilesSearchRequestDto: shared.DocumentsFilesSearchRequestDto;
  /**
   * The account identifier
   */
  xAccountId: string;
  /**
   * The session token
   */
  xStackoneApiSessionToken?: string | undefined;
};

export type DocumentsSearchFilesResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * The list of files matching the search query was retrieved.
   */
  filesPaginated?: shared.FilesPaginated | undefined;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const DocumentsSearchFilesRequest$inboundSchema: z.ZodType<
  DocumentsSearchFilesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  DocumentsFilesSearchRequestDto:
    shared.DocumentsFilesSearchRequestDto$inboundSchema,
  "x-account-id": z.string(),
  "x-stackone-api-session-token": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "DocumentsFilesSearchRequestDto": "documentsFilesSearchRequestDto",
    "x-account-id": "xAccountId",
    "x-stackone-api-session-token": "xStackoneApiSessionToken",
  });
});

/** @internal */
export type DocumentsSearchFilesRequest$Outbound = {
  DocumentsFilesSearchRequestDto:
    shared.DocumentsFilesSearchRequestDto$Outbound;
  "x-account-id": string;
  "x-stackone-api-session-token"?: string | undefined;
};

/** @internal */
export const DocumentsSearchFilesRequest$outboundSchema: z.ZodType<
  DocumentsSearchFilesRequest$Outbound,
  z.ZodTypeDef,
  DocumentsSearchFilesRequest
> = z.object({
  documentsFilesSearchRequestDto:
    shared.DocumentsFilesSearchRequestDto$outboundSchema,
  xAccountId: z.string(),
  xStackoneApiSessionToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    documentsFilesSearchRequestDto: "DocumentsFilesSearchRequestDto",
    xAccountId: "x-account-id",
    xStackoneApiSessionToken: "x-stackone-api-session-token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentsSearchFilesRequest$ {
  /** @deprecated use `DocumentsSearchFilesRequest$inboundSchema` instead. */
  export const inboundSchema = DocumentsSearchFilesRequest$inboundSchema;
  /** @deprecated use `DocumentsSearchFilesRequest$outboundSchema` instead. */
  export const outboundSchema = DocumentsSearchFilesRequest$outboundSchema;
  /** @deprecated use `DocumentsSearchFilesRequest$Outbound` instead. */
  export type Outbound = DocumentsSearchFilesRequest$Outbound;
}

export function documentsSearchFilesRequestToJSON(
  documentsSearchFilesRequest: DocumentsSearchFilesRequest,
): string {
  return JSON.stringify(
    DocumentsSearchFilesRequest$outboundSchema.parse(
      documentsSearchFilesRequest,
    ),
  );
}

export function documentsSearchFilesRequestFromJSON(
  jsonString: string,
): SafeParseResult<DocumentsSearchFilesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentsSearchFilesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentsSearchFilesRequest' from JSON`,
  );
}

/** @internal */
export const DocumentsSearchFilesResponse$inboundSchema: z.ZodType<
  DocumentsSearchFilesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  FilesPaginated: shared.FilesPaginated$inboundSchema.optional(),
  Headers: z.record(z.array(z.string())),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "FilesPaginated": "filesPaginated",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type DocumentsSearchFilesResponse$Outbound = {
  ContentType: string;
  FilesPaginated?: shared.FilesPaginated$Outbound | undefined;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const DocumentsSearchFilesResponse$outboundSchema: z.ZodType<
  DocumentsSearchFilesResponse$Outbound,
  z.ZodTypeDef,
  DocumentsSearchFilesResponse
> = z.object({
  contentType: z.string(),
  filesPaginated: shared.FilesPaginated$outboundSchema.optional(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    filesPaginated: "FilesPaginated",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentsSearchFilesResponse$ {
  /** @deprecated use `DocumentsSearchFilesResponse$inboundSchema` instead. */
  export const inboundSchema = DocumentsSearchFilesResponse$inboundSchema;
  /** @deprecated use `DocumentsSearchFilesResponse$outboundSchema` instead. */
  export const outboundSchema = DocumentsSearchFilesResponse$outboundSchema;
  /** @deprecated use `DocumentsSearchFilesResponse$Outbound` instead. */
  export type Outbound = DocumentsSearchFilesResponse$Outbound;
}

export function documentsSearchFilesResponseToJSON(
  documentsSearchFilesResponse: DocumentsSearchFilesResponse,
): string {
  return JSON.stringify(
    DocumentsSearchFilesResponse$outboundSchema.parse(
      documentsSearchFilesResponse,
    ),
  );
}

export function documentsSearchFilesResponseFromJSON(
  jsonString: string,
): SafeParseResult<DocumentsSearchFilesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentsSearchFilesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentsSearchFilesResponse' from JSON`,
  );
}
