/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type AtsGetJobRequest = {
  /**
   * The comma separated list of fields that will be expanded in the response
   */
  expand?: string | null | undefined;
  /**
   * The comma separated list of fields that will be returned in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  id: string;
  /**
   * The comma separated list of fields that will be included in the response
   */
  include?: string | null | undefined;
  /**
   * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
   */
  proxy?: { [k: string]: any } | null | undefined;
  /**
   * Indicates that the raw request result should be returned in addition to the mapped result (default value is false)
   */
  raw?: boolean | null | undefined;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type AtsGetJobResponse = {
  /**
   * The job with the given identifier was retrieved.
   */
  atsJobResult?: shared.AtsJobResult | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const AtsGetJobRequest$inboundSchema: z.ZodType<
  AtsGetJobRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  expand: z.nullable(z.string()).optional(),
  fields: z.nullable(z.string()).optional(),
  id: z.string(),
  include: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type AtsGetJobRequest$Outbound = {
  expand?: string | null | undefined;
  fields?: string | null | undefined;
  id: string;
  include?: string | null | undefined;
  proxy?: { [k: string]: any } | null | undefined;
  raw?: boolean | null | undefined;
  "x-account-id": string;
};

/** @internal */
export const AtsGetJobRequest$outboundSchema: z.ZodType<
  AtsGetJobRequest$Outbound,
  z.ZodTypeDef,
  AtsGetJobRequest
> = z.object({
  expand: z.nullable(z.string()).optional(),
  fields: z.nullable(z.string()).optional(),
  id: z.string(),
  include: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsGetJobRequest$ {
  /** @deprecated use `AtsGetJobRequest$inboundSchema` instead. */
  export const inboundSchema = AtsGetJobRequest$inboundSchema;
  /** @deprecated use `AtsGetJobRequest$outboundSchema` instead. */
  export const outboundSchema = AtsGetJobRequest$outboundSchema;
  /** @deprecated use `AtsGetJobRequest$Outbound` instead. */
  export type Outbound = AtsGetJobRequest$Outbound;
}

export function atsGetJobRequestToJSON(
  atsGetJobRequest: AtsGetJobRequest,
): string {
  return JSON.stringify(
    AtsGetJobRequest$outboundSchema.parse(atsGetJobRequest),
  );
}

export function atsGetJobRequestFromJSON(
  jsonString: string,
): SafeParseResult<AtsGetJobRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsGetJobRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsGetJobRequest' from JSON`,
  );
}

/** @internal */
export const AtsGetJobResponse$inboundSchema: z.ZodType<
  AtsGetJobResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  AtsJobResult: shared.AtsJobResult$inboundSchema.optional(),
  ContentType: z.string(),

  Headers: z.record(z.array(z.string())).default({}),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "AtsJobResult": "atsJobResult",
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type AtsGetJobResponse$Outbound = {
  AtsJobResult?: shared.AtsJobResult$Outbound | undefined;
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const AtsGetJobResponse$outboundSchema: z.ZodType<
  AtsGetJobResponse$Outbound,
  z.ZodTypeDef,
  AtsGetJobResponse
> = z.object({
  atsJobResult: shared.AtsJobResult$outboundSchema.optional(),
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    atsJobResult: "AtsJobResult",
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsGetJobResponse$ {
  /** @deprecated use `AtsGetJobResponse$inboundSchema` instead. */
  export const inboundSchema = AtsGetJobResponse$inboundSchema;
  /** @deprecated use `AtsGetJobResponse$outboundSchema` instead. */
  export const outboundSchema = AtsGetJobResponse$outboundSchema;
  /** @deprecated use `AtsGetJobResponse$Outbound` instead. */
  export type Outbound = AtsGetJobResponse$Outbound;
}

export function atsGetJobResponseToJSON(
  atsGetJobResponse: AtsGetJobResponse,
): string {
  return JSON.stringify(
    AtsGetJobResponse$outboundSchema.parse(atsGetJobResponse),
  );
}

export function atsGetJobResponseFromJSON(
  jsonString: string,
): SafeParseResult<AtsGetJobResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsGetJobResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsGetJobResponse' from JSON`,
  );
}
