/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type HrisCreateEmployeeRequest = {
  hrisCreateEmployeeRequestDto: shared.HrisCreateEmployeeRequestDto;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type HrisCreateEmployeeResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * The employee was created successfully.
   */
  createResult?: shared.CreateResult | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const HrisCreateEmployeeRequest$inboundSchema: z.ZodType<
  HrisCreateEmployeeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  HrisCreateEmployeeRequestDto:
    shared.HrisCreateEmployeeRequestDto$inboundSchema,
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "HrisCreateEmployeeRequestDto": "hrisCreateEmployeeRequestDto",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type HrisCreateEmployeeRequest$Outbound = {
  HrisCreateEmployeeRequestDto: shared.HrisCreateEmployeeRequestDto$Outbound;
  "x-account-id": string;
};

/** @internal */
export const HrisCreateEmployeeRequest$outboundSchema: z.ZodType<
  HrisCreateEmployeeRequest$Outbound,
  z.ZodTypeDef,
  HrisCreateEmployeeRequest
> = z.object({
  hrisCreateEmployeeRequestDto:
    shared.HrisCreateEmployeeRequestDto$outboundSchema,
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    hrisCreateEmployeeRequestDto: "HrisCreateEmployeeRequestDto",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCreateEmployeeRequest$ {
  /** @deprecated use `HrisCreateEmployeeRequest$inboundSchema` instead. */
  export const inboundSchema = HrisCreateEmployeeRequest$inboundSchema;
  /** @deprecated use `HrisCreateEmployeeRequest$outboundSchema` instead. */
  export const outboundSchema = HrisCreateEmployeeRequest$outboundSchema;
  /** @deprecated use `HrisCreateEmployeeRequest$Outbound` instead. */
  export type Outbound = HrisCreateEmployeeRequest$Outbound;
}

export function hrisCreateEmployeeRequestToJSON(
  hrisCreateEmployeeRequest: HrisCreateEmployeeRequest,
): string {
  return JSON.stringify(
    HrisCreateEmployeeRequest$outboundSchema.parse(hrisCreateEmployeeRequest),
  );
}

export function hrisCreateEmployeeRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisCreateEmployeeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCreateEmployeeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCreateEmployeeRequest' from JSON`,
  );
}

/** @internal */
export const HrisCreateEmployeeResponse$inboundSchema: z.ZodType<
  HrisCreateEmployeeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  CreateResult: shared.CreateResult$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "CreateResult": "createResult",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type HrisCreateEmployeeResponse$Outbound = {
  ContentType: string;
  CreateResult?: shared.CreateResult$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const HrisCreateEmployeeResponse$outboundSchema: z.ZodType<
  HrisCreateEmployeeResponse$Outbound,
  z.ZodTypeDef,
  HrisCreateEmployeeResponse
> = z.object({
  contentType: z.string(),
  createResult: shared.CreateResult$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    createResult: "CreateResult",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCreateEmployeeResponse$ {
  /** @deprecated use `HrisCreateEmployeeResponse$inboundSchema` instead. */
  export const inboundSchema = HrisCreateEmployeeResponse$inboundSchema;
  /** @deprecated use `HrisCreateEmployeeResponse$outboundSchema` instead. */
  export const outboundSchema = HrisCreateEmployeeResponse$outboundSchema;
  /** @deprecated use `HrisCreateEmployeeResponse$Outbound` instead. */
  export type Outbound = HrisCreateEmployeeResponse$Outbound;
}

export function hrisCreateEmployeeResponseToJSON(
  hrisCreateEmployeeResponse: HrisCreateEmployeeResponse,
): string {
  return JSON.stringify(
    HrisCreateEmployeeResponse$outboundSchema.parse(hrisCreateEmployeeResponse),
  );
}

export function hrisCreateEmployeeResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisCreateEmployeeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCreateEmployeeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCreateEmployeeResponse' from JSON`,
  );
}
