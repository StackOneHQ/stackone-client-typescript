/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * Filter parameters that allow greater customisation of the list response
 */
export type HrisListBenefitsQueryParamFilter = {
  /**
   * Use a string with a date to only select results updated after that given date
   */
  updatedAfter?: string | null | undefined;
};

export type HrisListBenefitsRequest = {
  /**
   * The comma separated list of fields that will be returned in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  /**
   * Filter parameters that allow greater customisation of the list response
   */
  filter?: HrisListBenefitsQueryParamFilter | null | undefined;
  /**
   * The unified cursor
   */
  next?: string | null | undefined;
  /**
   * The page number of the results to fetch
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  page?: string | null | undefined;
  /**
   * The number of results per page
   */
  pageSize?: string | null | undefined;
  /**
   * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
   */
  proxy?: { [k: string]: any } | null | undefined;
  /**
   * Indicates that the raw request result is returned
   */
  raw?: boolean | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  updatedAfter?: string | null | undefined;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type HrisListBenefitsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * The list of Benefits was retrieved.
   */
  hrisBenefitsPaginated?: shared.HRISBenefitsPaginated | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const HrisListBenefitsQueryParamFilter$inboundSchema: z.ZodType<
  HrisListBenefitsQueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  updated_after: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "updated_after": "updatedAfter",
  });
});

/** @internal */
export type HrisListBenefitsQueryParamFilter$Outbound = {
  updated_after?: string | null | undefined;
};

/** @internal */
export const HrisListBenefitsQueryParamFilter$outboundSchema: z.ZodType<
  HrisListBenefitsQueryParamFilter$Outbound,
  z.ZodTypeDef,
  HrisListBenefitsQueryParamFilter
> = z.object({
  updatedAfter: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    updatedAfter: "updated_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisListBenefitsQueryParamFilter$ {
  /** @deprecated use `HrisListBenefitsQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema = HrisListBenefitsQueryParamFilter$inboundSchema;
  /** @deprecated use `HrisListBenefitsQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema = HrisListBenefitsQueryParamFilter$outboundSchema;
  /** @deprecated use `HrisListBenefitsQueryParamFilter$Outbound` instead. */
  export type Outbound = HrisListBenefitsQueryParamFilter$Outbound;
}

export function hrisListBenefitsQueryParamFilterToJSON(
  hrisListBenefitsQueryParamFilter: HrisListBenefitsQueryParamFilter,
): string {
  return JSON.stringify(
    HrisListBenefitsQueryParamFilter$outboundSchema.parse(
      hrisListBenefitsQueryParamFilter,
    ),
  );
}

export function hrisListBenefitsQueryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<HrisListBenefitsQueryParamFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisListBenefitsQueryParamFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisListBenefitsQueryParamFilter' from JSON`,
  );
}

/** @internal */
export const HrisListBenefitsRequest$inboundSchema: z.ZodType<
  HrisListBenefitsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => HrisListBenefitsQueryParamFilter$inboundSchema),
  ).optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  page_size: z.nullable(z.string().default("25")),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean().default(false)),
  updated_after: z.nullable(z.string()).optional(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "updated_after": "updatedAfter",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type HrisListBenefitsRequest$Outbound = {
  fields?: string | null | undefined;
  filter?: HrisListBenefitsQueryParamFilter$Outbound | null | undefined;
  next?: string | null | undefined;
  page?: string | null | undefined;
  page_size: string | null;
  proxy?: { [k: string]: any } | null | undefined;
  raw: boolean | null;
  updated_after?: string | null | undefined;
  "x-account-id": string;
};

/** @internal */
export const HrisListBenefitsRequest$outboundSchema: z.ZodType<
  HrisListBenefitsRequest$Outbound,
  z.ZodTypeDef,
  HrisListBenefitsRequest
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => HrisListBenefitsQueryParamFilter$outboundSchema),
  ).optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  pageSize: z.nullable(z.string().default("25")),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean().default(false)),
  updatedAfter: z.nullable(z.string()).optional(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    updatedAfter: "updated_after",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisListBenefitsRequest$ {
  /** @deprecated use `HrisListBenefitsRequest$inboundSchema` instead. */
  export const inboundSchema = HrisListBenefitsRequest$inboundSchema;
  /** @deprecated use `HrisListBenefitsRequest$outboundSchema` instead. */
  export const outboundSchema = HrisListBenefitsRequest$outboundSchema;
  /** @deprecated use `HrisListBenefitsRequest$Outbound` instead. */
  export type Outbound = HrisListBenefitsRequest$Outbound;
}

export function hrisListBenefitsRequestToJSON(
  hrisListBenefitsRequest: HrisListBenefitsRequest,
): string {
  return JSON.stringify(
    HrisListBenefitsRequest$outboundSchema.parse(hrisListBenefitsRequest),
  );
}

export function hrisListBenefitsRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisListBenefitsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisListBenefitsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisListBenefitsRequest' from JSON`,
  );
}

/** @internal */
export const HrisListBenefitsResponse$inboundSchema: z.ZodType<
  HrisListBenefitsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  HRISBenefitsPaginated: shared.HRISBenefitsPaginated$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "HRISBenefitsPaginated": "hrisBenefitsPaginated",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type HrisListBenefitsResponse$Outbound = {
  ContentType: string;
  HRISBenefitsPaginated?: shared.HRISBenefitsPaginated$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const HrisListBenefitsResponse$outboundSchema: z.ZodType<
  HrisListBenefitsResponse$Outbound,
  z.ZodTypeDef,
  HrisListBenefitsResponse
> = z.object({
  contentType: z.string(),
  hrisBenefitsPaginated: shared.HRISBenefitsPaginated$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    hrisBenefitsPaginated: "HRISBenefitsPaginated",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisListBenefitsResponse$ {
  /** @deprecated use `HrisListBenefitsResponse$inboundSchema` instead. */
  export const inboundSchema = HrisListBenefitsResponse$inboundSchema;
  /** @deprecated use `HrisListBenefitsResponse$outboundSchema` instead. */
  export const outboundSchema = HrisListBenefitsResponse$outboundSchema;
  /** @deprecated use `HrisListBenefitsResponse$Outbound` instead. */
  export type Outbound = HrisListBenefitsResponse$Outbound;
}

export function hrisListBenefitsResponseToJSON(
  hrisListBenefitsResponse: HrisListBenefitsResponse,
): string {
  return JSON.stringify(
    HrisListBenefitsResponse$outboundSchema.parse(hrisListBenefitsResponse),
  );
}

export function hrisListBenefitsResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisListBenefitsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisListBenefitsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisListBenefitsResponse' from JSON`,
  );
}
