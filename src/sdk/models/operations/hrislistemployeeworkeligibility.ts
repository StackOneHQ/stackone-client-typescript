/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

/**
 * Filter parameters that allow greater customisation of the list response
 */
export type HrisListEmployeeWorkEligibilityQueryParamFilter = {
  /**
   * Use a string with a date to only select results updated after that given date
   */
  updatedAfter?: string | null | undefined;
};

export type HrisListEmployeeWorkEligibilityRequest = {
  /**
   * The comma separated list of fields that will be returned in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  /**
   * Filter parameters that allow greater customisation of the list response
   */
  filter?: HrisListEmployeeWorkEligibilityQueryParamFilter | null | undefined;
  id: string;
  /**
   * The unified cursor
   */
  next?: string | null | undefined;
  /**
   * The page number of the results to fetch
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  page?: string | null | undefined;
  /**
   * The number of results per page
   */
  pageSize?: string | null | undefined;
  /**
   * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
   */
  proxy?: { [k: string]: any } | null | undefined;
  /**
   * Indicates that the raw request result is returned
   */
  raw?: boolean | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  updatedAfter?: string | null | undefined;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type HrisListEmployeeWorkEligibilityResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The work eligibility of the employee with the given identifier were retrieved.
   */
  workEligibilityPaginated?: shared.WorkEligibilityPaginated | undefined;
};

/** @internal */
export const HrisListEmployeeWorkEligibilityQueryParamFilter$inboundSchema:
  z.ZodType<
    HrisListEmployeeWorkEligibilityQueryParamFilter,
    z.ZodTypeDef,
    unknown
  > = z.object({
    updated_after: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "updated_after": "updatedAfter",
    });
  });

/** @internal */
export type HrisListEmployeeWorkEligibilityQueryParamFilter$Outbound = {
  updated_after?: string | null | undefined;
};

/** @internal */
export const HrisListEmployeeWorkEligibilityQueryParamFilter$outboundSchema:
  z.ZodType<
    HrisListEmployeeWorkEligibilityQueryParamFilter$Outbound,
    z.ZodTypeDef,
    HrisListEmployeeWorkEligibilityQueryParamFilter
  > = z.object({
    updatedAfter: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      updatedAfter: "updated_after",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisListEmployeeWorkEligibilityQueryParamFilter$ {
  /** @deprecated use `HrisListEmployeeWorkEligibilityQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema =
    HrisListEmployeeWorkEligibilityQueryParamFilter$inboundSchema;
  /** @deprecated use `HrisListEmployeeWorkEligibilityQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema =
    HrisListEmployeeWorkEligibilityQueryParamFilter$outboundSchema;
  /** @deprecated use `HrisListEmployeeWorkEligibilityQueryParamFilter$Outbound` instead. */
  export type Outbound =
    HrisListEmployeeWorkEligibilityQueryParamFilter$Outbound;
}

/** @internal */
export const HrisListEmployeeWorkEligibilityRequest$inboundSchema: z.ZodType<
  HrisListEmployeeWorkEligibilityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => HrisListEmployeeWorkEligibilityQueryParamFilter$inboundSchema),
  ).optional(),
  id: z.string(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  page_size: z.nullable(z.string().default("25")),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean().default(false)),
  updated_after: z.nullable(z.string()).optional(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "updated_after": "updatedAfter",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type HrisListEmployeeWorkEligibilityRequest$Outbound = {
  fields?: string | null | undefined;
  filter?:
    | HrisListEmployeeWorkEligibilityQueryParamFilter$Outbound
    | null
    | undefined;
  id: string;
  next?: string | null | undefined;
  page?: string | null | undefined;
  page_size: string | null;
  proxy?: { [k: string]: any } | null | undefined;
  raw: boolean | null;
  updated_after?: string | null | undefined;
  "x-account-id": string;
};

/** @internal */
export const HrisListEmployeeWorkEligibilityRequest$outboundSchema: z.ZodType<
  HrisListEmployeeWorkEligibilityRequest$Outbound,
  z.ZodTypeDef,
  HrisListEmployeeWorkEligibilityRequest
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() =>
      HrisListEmployeeWorkEligibilityQueryParamFilter$outboundSchema
    ),
  ).optional(),
  id: z.string(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  pageSize: z.nullable(z.string().default("25")),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean().default(false)),
  updatedAfter: z.nullable(z.string()).optional(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    updatedAfter: "updated_after",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisListEmployeeWorkEligibilityRequest$ {
  /** @deprecated use `HrisListEmployeeWorkEligibilityRequest$inboundSchema` instead. */
  export const inboundSchema =
    HrisListEmployeeWorkEligibilityRequest$inboundSchema;
  /** @deprecated use `HrisListEmployeeWorkEligibilityRequest$outboundSchema` instead. */
  export const outboundSchema =
    HrisListEmployeeWorkEligibilityRequest$outboundSchema;
  /** @deprecated use `HrisListEmployeeWorkEligibilityRequest$Outbound` instead. */
  export type Outbound = HrisListEmployeeWorkEligibilityRequest$Outbound;
}

/** @internal */
export const HrisListEmployeeWorkEligibilityResponse$inboundSchema: z.ZodType<
  HrisListEmployeeWorkEligibilityResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  WorkEligibilityPaginated: shared.WorkEligibilityPaginated$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "WorkEligibilityPaginated": "workEligibilityPaginated",
  });
});

/** @internal */
export type HrisListEmployeeWorkEligibilityResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  WorkEligibilityPaginated?:
    | shared.WorkEligibilityPaginated$Outbound
    | undefined;
};

/** @internal */
export const HrisListEmployeeWorkEligibilityResponse$outboundSchema: z.ZodType<
  HrisListEmployeeWorkEligibilityResponse$Outbound,
  z.ZodTypeDef,
  HrisListEmployeeWorkEligibilityResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  workEligibilityPaginated: shared.WorkEligibilityPaginated$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    workEligibilityPaginated: "WorkEligibilityPaginated",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisListEmployeeWorkEligibilityResponse$ {
  /** @deprecated use `HrisListEmployeeWorkEligibilityResponse$inboundSchema` instead. */
  export const inboundSchema =
    HrisListEmployeeWorkEligibilityResponse$inboundSchema;
  /** @deprecated use `HrisListEmployeeWorkEligibilityResponse$outboundSchema` instead. */
  export const outboundSchema =
    HrisListEmployeeWorkEligibilityResponse$outboundSchema;
  /** @deprecated use `HrisListEmployeeWorkEligibilityResponse$Outbound` instead. */
  export type Outbound = HrisListEmployeeWorkEligibilityResponse$Outbound;
}
