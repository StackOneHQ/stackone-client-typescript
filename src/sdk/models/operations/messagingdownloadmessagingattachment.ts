/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../../lib/base64.js";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MessagingDownloadMessagingAttachmentRequest = {
  /**
   * The export format of the file
   */
  exportFormat?: string | null | undefined;
  /**
   * The format to download the file in
   */
  format?: string | null | undefined;
  id: string;
  subResourceId: string;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type MessagingDownloadMessagingAttachmentResponse = {
  body?: Uint8Array | string | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const MessagingDownloadMessagingAttachmentRequest$inboundSchema:
  z.ZodType<
    MessagingDownloadMessagingAttachmentRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    export_format: z.nullable(z.string()).optional(),
    format: z.nullable(z.string()).optional(),
    id: z.string(),
    subResourceId: z.string(),
    "x-account-id": z.string(),
  }).transform((v) => {
    return remap$(v, {
      "export_format": "exportFormat",
      "x-account-id": "xAccountId",
    });
  });

/** @internal */
export type MessagingDownloadMessagingAttachmentRequest$Outbound = {
  export_format?: string | null | undefined;
  format?: string | null | undefined;
  id: string;
  subResourceId: string;
  "x-account-id": string;
};

/** @internal */
export const MessagingDownloadMessagingAttachmentRequest$outboundSchema:
  z.ZodType<
    MessagingDownloadMessagingAttachmentRequest$Outbound,
    z.ZodTypeDef,
    MessagingDownloadMessagingAttachmentRequest
  > = z.object({
    exportFormat: z.nullable(z.string()).optional(),
    format: z.nullable(z.string()).optional(),
    id: z.string(),
    subResourceId: z.string(),
    xAccountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      exportFormat: "export_format",
      xAccountId: "x-account-id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingDownloadMessagingAttachmentRequest$ {
  /** @deprecated use `MessagingDownloadMessagingAttachmentRequest$inboundSchema` instead. */
  export const inboundSchema =
    MessagingDownloadMessagingAttachmentRequest$inboundSchema;
  /** @deprecated use `MessagingDownloadMessagingAttachmentRequest$outboundSchema` instead. */
  export const outboundSchema =
    MessagingDownloadMessagingAttachmentRequest$outboundSchema;
  /** @deprecated use `MessagingDownloadMessagingAttachmentRequest$Outbound` instead. */
  export type Outbound = MessagingDownloadMessagingAttachmentRequest$Outbound;
}

export function messagingDownloadMessagingAttachmentRequestToJSON(
  messagingDownloadMessagingAttachmentRequest:
    MessagingDownloadMessagingAttachmentRequest,
): string {
  return JSON.stringify(
    MessagingDownloadMessagingAttachmentRequest$outboundSchema.parse(
      messagingDownloadMessagingAttachmentRequest,
    ),
  );
}

export function messagingDownloadMessagingAttachmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  MessagingDownloadMessagingAttachmentRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MessagingDownloadMessagingAttachmentRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MessagingDownloadMessagingAttachmentRequest' from JSON`,
  );
}

/** @internal */
export const MessagingDownloadMessagingAttachmentResponse$inboundSchema:
  z.ZodType<
    MessagingDownloadMessagingAttachmentResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Body: b64$.zodInbound.optional(),
    ContentType: z.string(),
    Headers: z.record(z.array(z.string())),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
  }).transform((v) => {
    return remap$(v, {
      "Body": "body",
      "ContentType": "contentType",
      "Headers": "headers",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
    });
  });

/** @internal */
export type MessagingDownloadMessagingAttachmentResponse$Outbound = {
  Body?: Uint8Array | undefined;
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const MessagingDownloadMessagingAttachmentResponse$outboundSchema:
  z.ZodType<
    MessagingDownloadMessagingAttachmentResponse$Outbound,
    z.ZodTypeDef,
    MessagingDownloadMessagingAttachmentResponse
  > = z.object({
    body: b64$.zodOutbound.optional(),
    contentType: z.string(),
    headers: z.record(z.array(z.string())),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
  }).transform((v) => {
    return remap$(v, {
      body: "Body",
      contentType: "ContentType",
      headers: "Headers",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingDownloadMessagingAttachmentResponse$ {
  /** @deprecated use `MessagingDownloadMessagingAttachmentResponse$inboundSchema` instead. */
  export const inboundSchema =
    MessagingDownloadMessagingAttachmentResponse$inboundSchema;
  /** @deprecated use `MessagingDownloadMessagingAttachmentResponse$outboundSchema` instead. */
  export const outboundSchema =
    MessagingDownloadMessagingAttachmentResponse$outboundSchema;
  /** @deprecated use `MessagingDownloadMessagingAttachmentResponse$Outbound` instead. */
  export type Outbound = MessagingDownloadMessagingAttachmentResponse$Outbound;
}

export function messagingDownloadMessagingAttachmentResponseToJSON(
  messagingDownloadMessagingAttachmentResponse:
    MessagingDownloadMessagingAttachmentResponse,
): string {
  return JSON.stringify(
    MessagingDownloadMessagingAttachmentResponse$outboundSchema.parse(
      messagingDownloadMessagingAttachmentResponse,
    ),
  );
}

export function messagingDownloadMessagingAttachmentResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  MessagingDownloadMessagingAttachmentResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MessagingDownloadMessagingAttachmentResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MessagingDownloadMessagingAttachmentResponse' from JSON`,
  );
}
