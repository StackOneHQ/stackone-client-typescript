/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type AtsUpdateApplicationNoteRequest = {
  atsUpdateNotesRequestDto: shared.AtsUpdateNotesRequestDto;
  id: string;
  subResourceId: string;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type AtsUpdateApplicationNoteResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Record updated successfully.
   */
  updateResult?: shared.UpdateResult | undefined;
};

/** @internal */
export const AtsUpdateApplicationNoteRequest$inboundSchema: z.ZodType<
  AtsUpdateApplicationNoteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  AtsUpdateNotesRequestDto: shared.AtsUpdateNotesRequestDto$inboundSchema,
  id: z.string(),
  subResourceId: z.string(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "AtsUpdateNotesRequestDto": "atsUpdateNotesRequestDto",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type AtsUpdateApplicationNoteRequest$Outbound = {
  AtsUpdateNotesRequestDto: shared.AtsUpdateNotesRequestDto$Outbound;
  id: string;
  subResourceId: string;
  "x-account-id": string;
};

/** @internal */
export const AtsUpdateApplicationNoteRequest$outboundSchema: z.ZodType<
  AtsUpdateApplicationNoteRequest$Outbound,
  z.ZodTypeDef,
  AtsUpdateApplicationNoteRequest
> = z.object({
  atsUpdateNotesRequestDto: shared.AtsUpdateNotesRequestDto$outboundSchema,
  id: z.string(),
  subResourceId: z.string(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    atsUpdateNotesRequestDto: "AtsUpdateNotesRequestDto",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsUpdateApplicationNoteRequest$ {
  /** @deprecated use `AtsUpdateApplicationNoteRequest$inboundSchema` instead. */
  export const inboundSchema = AtsUpdateApplicationNoteRequest$inboundSchema;
  /** @deprecated use `AtsUpdateApplicationNoteRequest$outboundSchema` instead. */
  export const outboundSchema = AtsUpdateApplicationNoteRequest$outboundSchema;
  /** @deprecated use `AtsUpdateApplicationNoteRequest$Outbound` instead. */
  export type Outbound = AtsUpdateApplicationNoteRequest$Outbound;
}

export function atsUpdateApplicationNoteRequestToJSON(
  atsUpdateApplicationNoteRequest: AtsUpdateApplicationNoteRequest,
): string {
  return JSON.stringify(
    AtsUpdateApplicationNoteRequest$outboundSchema.parse(
      atsUpdateApplicationNoteRequest,
    ),
  );
}

export function atsUpdateApplicationNoteRequestFromJSON(
  jsonString: string,
): SafeParseResult<AtsUpdateApplicationNoteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsUpdateApplicationNoteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsUpdateApplicationNoteRequest' from JSON`,
  );
}

/** @internal */
export const AtsUpdateApplicationNoteResponse$inboundSchema: z.ZodType<
  AtsUpdateApplicationNoteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  UpdateResult: shared.UpdateResult$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "UpdateResult": "updateResult",
  });
});

/** @internal */
export type AtsUpdateApplicationNoteResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
  UpdateResult?: shared.UpdateResult$Outbound | undefined;
};

/** @internal */
export const AtsUpdateApplicationNoteResponse$outboundSchema: z.ZodType<
  AtsUpdateApplicationNoteResponse$Outbound,
  z.ZodTypeDef,
  AtsUpdateApplicationNoteResponse
> = z.object({
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  updateResult: shared.UpdateResult$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    updateResult: "UpdateResult",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsUpdateApplicationNoteResponse$ {
  /** @deprecated use `AtsUpdateApplicationNoteResponse$inboundSchema` instead. */
  export const inboundSchema = AtsUpdateApplicationNoteResponse$inboundSchema;
  /** @deprecated use `AtsUpdateApplicationNoteResponse$outboundSchema` instead. */
  export const outboundSchema = AtsUpdateApplicationNoteResponse$outboundSchema;
  /** @deprecated use `AtsUpdateApplicationNoteResponse$Outbound` instead. */
  export type Outbound = AtsUpdateApplicationNoteResponse$Outbound;
}

export function atsUpdateApplicationNoteResponseToJSON(
  atsUpdateApplicationNoteResponse: AtsUpdateApplicationNoteResponse,
): string {
  return JSON.stringify(
    AtsUpdateApplicationNoteResponse$outboundSchema.parse(
      atsUpdateApplicationNoteResponse,
    ),
  );
}

export function atsUpdateApplicationNoteResponseFromJSON(
  jsonString: string,
): SafeParseResult<AtsUpdateApplicationNoteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsUpdateApplicationNoteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsUpdateApplicationNoteResponse' from JSON`,
  );
}
