/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * Filter parameters that allow greater customisation of the list response
 */
export type Filter = {
  /**
   * Use a string with a date to only select results updated after that given date
   */
  updatedAfter?: string | null | undefined;
};

export type AtsGetApplicationCustomFieldDefinitionRequest = {
  /**
   * The comma separated list of fields that will be returned in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  /**
   * Filter parameters that allow greater customisation of the list response
   */
  filter?: Filter | null | undefined;
  id: string;
  /**
   * The unified cursor
   */
  next?: string | null | undefined;
  /**
   * The page number of the results to fetch
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  page?: string | null | undefined;
  /**
   * The number of results per page
   */
  pageSize?: string | null | undefined;
  /**
   * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
   */
  proxy?: { [k: string]: any } | null | undefined;
  /**
   * Indicates that the raw request result is returned
   */
  raw?: boolean | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  updatedAfter?: string | null | undefined;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type AtsGetApplicationCustomFieldDefinitionResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * The application custom field definition was retrieved.
   */
  customFieldDefinitionResultApiModel?:
    | shared.CustomFieldDefinitionResultApiModel
    | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const Filter$inboundSchema: z.ZodType<Filter, z.ZodTypeDef, unknown> = z
  .object({
    updated_after: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "updated_after": "updatedAfter",
    });
  });

/** @internal */
export type Filter$Outbound = {
  updated_after?: string | null | undefined;
};

/** @internal */
export const Filter$outboundSchema: z.ZodType<
  Filter$Outbound,
  z.ZodTypeDef,
  Filter
> = z.object({
  updatedAfter: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    updatedAfter: "updated_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filter$ {
  /** @deprecated use `Filter$inboundSchema` instead. */
  export const inboundSchema = Filter$inboundSchema;
  /** @deprecated use `Filter$outboundSchema` instead. */
  export const outboundSchema = Filter$outboundSchema;
  /** @deprecated use `Filter$Outbound` instead. */
  export type Outbound = Filter$Outbound;
}

export function filterToJSON(filter: Filter): string {
  return JSON.stringify(Filter$outboundSchema.parse(filter));
}

export function filterFromJSON(
  jsonString: string,
): SafeParseResult<Filter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filter' from JSON`,
  );
}

/** @internal */
export const AtsGetApplicationCustomFieldDefinitionRequest$inboundSchema:
  z.ZodType<
    AtsGetApplicationCustomFieldDefinitionRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    fields: z.nullable(z.string()).optional(),
    filter: z.nullable(z.lazy(() => Filter$inboundSchema)).optional(),
    id: z.string(),
    next: z.nullable(z.string()).optional(),
    page: z.nullable(z.string()).optional(),
    page_size: z.nullable(z.string().default("25")),
    proxy: z.nullable(z.record(z.any())).optional(),
    raw: z.nullable(z.boolean().default(false)),
    updated_after: z.nullable(z.string()).optional(),
    "x-account-id": z.string(),
  }).transform((v) => {
    return remap$(v, {
      "page_size": "pageSize",
      "updated_after": "updatedAfter",
      "x-account-id": "xAccountId",
    });
  });

/** @internal */
export type AtsGetApplicationCustomFieldDefinitionRequest$Outbound = {
  fields?: string | null | undefined;
  filter?: Filter$Outbound | null | undefined;
  id: string;
  next?: string | null | undefined;
  page?: string | null | undefined;
  page_size: string | null;
  proxy?: { [k: string]: any } | null | undefined;
  raw: boolean | null;
  updated_after?: string | null | undefined;
  "x-account-id": string;
};

/** @internal */
export const AtsGetApplicationCustomFieldDefinitionRequest$outboundSchema:
  z.ZodType<
    AtsGetApplicationCustomFieldDefinitionRequest$Outbound,
    z.ZodTypeDef,
    AtsGetApplicationCustomFieldDefinitionRequest
  > = z.object({
    fields: z.nullable(z.string()).optional(),
    filter: z.nullable(z.lazy(() => Filter$outboundSchema)).optional(),
    id: z.string(),
    next: z.nullable(z.string()).optional(),
    page: z.nullable(z.string()).optional(),
    pageSize: z.nullable(z.string().default("25")),
    proxy: z.nullable(z.record(z.any())).optional(),
    raw: z.nullable(z.boolean().default(false)),
    updatedAfter: z.nullable(z.string()).optional(),
    xAccountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      pageSize: "page_size",
      updatedAfter: "updated_after",
      xAccountId: "x-account-id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsGetApplicationCustomFieldDefinitionRequest$ {
  /** @deprecated use `AtsGetApplicationCustomFieldDefinitionRequest$inboundSchema` instead. */
  export const inboundSchema =
    AtsGetApplicationCustomFieldDefinitionRequest$inboundSchema;
  /** @deprecated use `AtsGetApplicationCustomFieldDefinitionRequest$outboundSchema` instead. */
  export const outboundSchema =
    AtsGetApplicationCustomFieldDefinitionRequest$outboundSchema;
  /** @deprecated use `AtsGetApplicationCustomFieldDefinitionRequest$Outbound` instead. */
  export type Outbound = AtsGetApplicationCustomFieldDefinitionRequest$Outbound;
}

export function atsGetApplicationCustomFieldDefinitionRequestToJSON(
  atsGetApplicationCustomFieldDefinitionRequest:
    AtsGetApplicationCustomFieldDefinitionRequest,
): string {
  return JSON.stringify(
    AtsGetApplicationCustomFieldDefinitionRequest$outboundSchema.parse(
      atsGetApplicationCustomFieldDefinitionRequest,
    ),
  );
}

export function atsGetApplicationCustomFieldDefinitionRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  AtsGetApplicationCustomFieldDefinitionRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AtsGetApplicationCustomFieldDefinitionRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AtsGetApplicationCustomFieldDefinitionRequest' from JSON`,
  );
}

/** @internal */
export const AtsGetApplicationCustomFieldDefinitionResponse$inboundSchema:
  z.ZodType<
    AtsGetApplicationCustomFieldDefinitionResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    CustomFieldDefinitionResultApiModel: shared
      .CustomFieldDefinitionResultApiModel$inboundSchema.optional(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "CustomFieldDefinitionResultApiModel":
        "customFieldDefinitionResultApiModel",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
    });
  });

/** @internal */
export type AtsGetApplicationCustomFieldDefinitionResponse$Outbound = {
  ContentType: string;
  CustomFieldDefinitionResultApiModel?:
    | shared.CustomFieldDefinitionResultApiModel$Outbound
    | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const AtsGetApplicationCustomFieldDefinitionResponse$outboundSchema:
  z.ZodType<
    AtsGetApplicationCustomFieldDefinitionResponse$Outbound,
    z.ZodTypeDef,
    AtsGetApplicationCustomFieldDefinitionResponse
  > = z.object({
    contentType: z.string(),
    customFieldDefinitionResultApiModel: shared
      .CustomFieldDefinitionResultApiModel$outboundSchema.optional(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      customFieldDefinitionResultApiModel:
        "CustomFieldDefinitionResultApiModel",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsGetApplicationCustomFieldDefinitionResponse$ {
  /** @deprecated use `AtsGetApplicationCustomFieldDefinitionResponse$inboundSchema` instead. */
  export const inboundSchema =
    AtsGetApplicationCustomFieldDefinitionResponse$inboundSchema;
  /** @deprecated use `AtsGetApplicationCustomFieldDefinitionResponse$outboundSchema` instead. */
  export const outboundSchema =
    AtsGetApplicationCustomFieldDefinitionResponse$outboundSchema;
  /** @deprecated use `AtsGetApplicationCustomFieldDefinitionResponse$Outbound` instead. */
  export type Outbound =
    AtsGetApplicationCustomFieldDefinitionResponse$Outbound;
}

export function atsGetApplicationCustomFieldDefinitionResponseToJSON(
  atsGetApplicationCustomFieldDefinitionResponse:
    AtsGetApplicationCustomFieldDefinitionResponse,
): string {
  return JSON.stringify(
    AtsGetApplicationCustomFieldDefinitionResponse$outboundSchema.parse(
      atsGetApplicationCustomFieldDefinitionResponse,
    ),
  );
}

export function atsGetApplicationCustomFieldDefinitionResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  AtsGetApplicationCustomFieldDefinitionResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AtsGetApplicationCustomFieldDefinitionResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AtsGetApplicationCustomFieldDefinitionResponse' from JSON`,
  );
}
