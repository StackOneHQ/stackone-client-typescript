/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * Filter to select shifts by status
 */
export enum HrisListShiftsQueryParamStatus {
  Draft = "draft",
  Published = "published",
  Confirmed = "confirmed",
  Cancelled = "cancelled",
  UnmappedValue = "unmapped_value",
}

/**
 * HRIS Shifts filters
 */
export type HrisListShiftsQueryParamFilter = {
  /**
   * Filter to select shifts by employee ID
   */
  employeeId?: string | null | undefined;
  /**
   * Filter shifts that end before this date
   */
  endsBefore?: Date | null | undefined;
  /**
   * Filter shifts that start after this date
   */
  startsAfter?: Date | null | undefined;
  /**
   * Filter to select shifts by status
   */
  status?: HrisListShiftsQueryParamStatus | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   */
  updatedAfter?: Date | null | undefined;
};

export type HrisListShiftsRequest = {
  /**
   * The comma separated list of fields to return in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  /**
   * HRIS Shifts filters
   */
  filter?: HrisListShiftsQueryParamFilter | null | undefined;
  /**
   * The unified cursor
   */
  next?: string | null | undefined;
  /**
   * The page number of the results to fetch
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  page?: string | null | undefined;
  /**
   * The number of results per page (default value is 25)
   */
  pageSize?: string | null | undefined;
  /**
   * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
   */
  proxy?: { [k: string]: any } | null | undefined;
  /**
   * Indicates that the raw request result should be returned in addition to the mapped result (default value is false)
   */
  raw?: boolean | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  updatedAfter?: Date | null | undefined;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type HrisListShiftsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * The list of shifts was retrieved.
   */
  hrisShiftsPaginated?: shared.HrisShiftsPaginated | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const HrisListShiftsQueryParamStatus$inboundSchema: z.ZodNativeEnum<
  typeof HrisListShiftsQueryParamStatus
> = z.nativeEnum(HrisListShiftsQueryParamStatus);

/** @internal */
export const HrisListShiftsQueryParamStatus$outboundSchema: z.ZodNativeEnum<
  typeof HrisListShiftsQueryParamStatus
> = HrisListShiftsQueryParamStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisListShiftsQueryParamStatus$ {
  /** @deprecated use `HrisListShiftsQueryParamStatus$inboundSchema` instead. */
  export const inboundSchema = HrisListShiftsQueryParamStatus$inboundSchema;
  /** @deprecated use `HrisListShiftsQueryParamStatus$outboundSchema` instead. */
  export const outboundSchema = HrisListShiftsQueryParamStatus$outboundSchema;
}

/** @internal */
export const HrisListShiftsQueryParamFilter$inboundSchema: z.ZodType<
  HrisListShiftsQueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_id: z.nullable(z.string()).optional(),
  ends_before: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  starts_after: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  status: z.nullable(HrisListShiftsQueryParamStatus$inboundSchema).optional(),
  updated_after: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_id": "employeeId",
    "ends_before": "endsBefore",
    "starts_after": "startsAfter",
    "updated_after": "updatedAfter",
  });
});

/** @internal */
export type HrisListShiftsQueryParamFilter$Outbound = {
  employee_id?: string | null | undefined;
  ends_before?: string | null | undefined;
  starts_after?: string | null | undefined;
  status?: string | null | undefined;
  updated_after?: string | null | undefined;
};

/** @internal */
export const HrisListShiftsQueryParamFilter$outboundSchema: z.ZodType<
  HrisListShiftsQueryParamFilter$Outbound,
  z.ZodTypeDef,
  HrisListShiftsQueryParamFilter
> = z.object({
  employeeId: z.nullable(z.string()).optional(),
  endsBefore: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  startsAfter: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  status: z.nullable(HrisListShiftsQueryParamStatus$outboundSchema).optional(),
  updatedAfter: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    employeeId: "employee_id",
    endsBefore: "ends_before",
    startsAfter: "starts_after",
    updatedAfter: "updated_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisListShiftsQueryParamFilter$ {
  /** @deprecated use `HrisListShiftsQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema = HrisListShiftsQueryParamFilter$inboundSchema;
  /** @deprecated use `HrisListShiftsQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema = HrisListShiftsQueryParamFilter$outboundSchema;
  /** @deprecated use `HrisListShiftsQueryParamFilter$Outbound` instead. */
  export type Outbound = HrisListShiftsQueryParamFilter$Outbound;
}

export function hrisListShiftsQueryParamFilterToJSON(
  hrisListShiftsQueryParamFilter: HrisListShiftsQueryParamFilter,
): string {
  return JSON.stringify(
    HrisListShiftsQueryParamFilter$outboundSchema.parse(
      hrisListShiftsQueryParamFilter,
    ),
  );
}

export function hrisListShiftsQueryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<HrisListShiftsQueryParamFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisListShiftsQueryParamFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisListShiftsQueryParamFilter' from JSON`,
  );
}

/** @internal */
export const HrisListShiftsRequest$inboundSchema: z.ZodType<
  HrisListShiftsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(z.lazy(() => HrisListShiftsQueryParamFilter$inboundSchema))
    .optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  page_size: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  updated_after: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "updated_after": "updatedAfter",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type HrisListShiftsRequest$Outbound = {
  fields?: string | null | undefined;
  filter?: HrisListShiftsQueryParamFilter$Outbound | null | undefined;
  next?: string | null | undefined;
  page?: string | null | undefined;
  page_size?: string | null | undefined;
  proxy?: { [k: string]: any } | null | undefined;
  raw?: boolean | null | undefined;
  updated_after?: string | null | undefined;
  "x-account-id": string;
};

/** @internal */
export const HrisListShiftsRequest$outboundSchema: z.ZodType<
  HrisListShiftsRequest$Outbound,
  z.ZodTypeDef,
  HrisListShiftsRequest
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => HrisListShiftsQueryParamFilter$outboundSchema),
  ).optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  pageSize: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  updatedAfter: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    updatedAfter: "updated_after",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisListShiftsRequest$ {
  /** @deprecated use `HrisListShiftsRequest$inboundSchema` instead. */
  export const inboundSchema = HrisListShiftsRequest$inboundSchema;
  /** @deprecated use `HrisListShiftsRequest$outboundSchema` instead. */
  export const outboundSchema = HrisListShiftsRequest$outboundSchema;
  /** @deprecated use `HrisListShiftsRequest$Outbound` instead. */
  export type Outbound = HrisListShiftsRequest$Outbound;
}

export function hrisListShiftsRequestToJSON(
  hrisListShiftsRequest: HrisListShiftsRequest,
): string {
  return JSON.stringify(
    HrisListShiftsRequest$outboundSchema.parse(hrisListShiftsRequest),
  );
}

export function hrisListShiftsRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisListShiftsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisListShiftsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisListShiftsRequest' from JSON`,
  );
}

/** @internal */
export const HrisListShiftsResponse$inboundSchema: z.ZodType<
  HrisListShiftsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  HrisShiftsPaginated: shared.HrisShiftsPaginated$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "HrisShiftsPaginated": "hrisShiftsPaginated",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type HrisListShiftsResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  HrisShiftsPaginated?: shared.HrisShiftsPaginated$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const HrisListShiftsResponse$outboundSchema: z.ZodType<
  HrisListShiftsResponse$Outbound,
  z.ZodTypeDef,
  HrisListShiftsResponse
> = z.object({
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  hrisShiftsPaginated: shared.HrisShiftsPaginated$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    headers: "Headers",
    hrisShiftsPaginated: "HrisShiftsPaginated",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisListShiftsResponse$ {
  /** @deprecated use `HrisListShiftsResponse$inboundSchema` instead. */
  export const inboundSchema = HrisListShiftsResponse$inboundSchema;
  /** @deprecated use `HrisListShiftsResponse$outboundSchema` instead. */
  export const outboundSchema = HrisListShiftsResponse$outboundSchema;
  /** @deprecated use `HrisListShiftsResponse$Outbound` instead. */
  export type Outbound = HrisListShiftsResponse$Outbound;
}

export function hrisListShiftsResponseToJSON(
  hrisListShiftsResponse: HrisListShiftsResponse,
): string {
  return JSON.stringify(
    HrisListShiftsResponse$outboundSchema.parse(hrisListShiftsResponse),
  );
}

export function hrisListShiftsResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisListShiftsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisListShiftsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisListShiftsResponse' from JSON`,
  );
}
