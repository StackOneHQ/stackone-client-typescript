/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type CrmGetListRequest = {
    /**
     * The comma separated list of fields that will be returned in the response (if empty, all fields are returned)
     */
    fields?: string | null | undefined;
    id: string;
    /**
     * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
     */
    proxy?: { [k: string]: any } | null | undefined;
    /**
     * Indicates that the raw request result is returned
     */
    raw?: boolean | null | undefined;
    /**
     * The account identifier
     */
    xAccountId: string;
};

export type CrmGetListResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * The list with the given identifier was retrieved.
     */
    listResult?: shared.ListResult | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const CrmGetListRequest$inboundSchema: z.ZodType<CrmGetListRequest, z.ZodTypeDef, unknown> =
    z
        .object({
            fields: z.nullable(z.string()).optional(),
            id: z.string(),
            proxy: z.nullable(z.record(z.any())).optional(),
            raw: z.nullable(z.boolean().default(false)),
            "x-account-id": z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                "x-account-id": "xAccountId",
            });
        });

/** @internal */
export type CrmGetListRequest$Outbound = {
    fields?: string | null | undefined;
    id: string;
    proxy?: { [k: string]: any } | null | undefined;
    raw: boolean | null;
    "x-account-id": string;
};

/** @internal */
export const CrmGetListRequest$outboundSchema: z.ZodType<
    CrmGetListRequest$Outbound,
    z.ZodTypeDef,
    CrmGetListRequest
> = z
    .object({
        fields: z.nullable(z.string()).optional(),
        id: z.string(),
        proxy: z.nullable(z.record(z.any())).optional(),
        raw: z.nullable(z.boolean().default(false)),
        xAccountId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            xAccountId: "x-account-id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmGetListRequest$ {
    /** @deprecated use `CrmGetListRequest$inboundSchema` instead. */
    export const inboundSchema = CrmGetListRequest$inboundSchema;
    /** @deprecated use `CrmGetListRequest$outboundSchema` instead. */
    export const outboundSchema = CrmGetListRequest$outboundSchema;
    /** @deprecated use `CrmGetListRequest$Outbound` instead. */
    export type Outbound = CrmGetListRequest$Outbound;
}

/** @internal */
export const CrmGetListResponse$inboundSchema: z.ZodType<
    CrmGetListResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        ListResult: shared.ListResult$inboundSchema.optional(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            ListResult: "listResult",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type CrmGetListResponse$Outbound = {
    ContentType: string;
    ListResult?: shared.ListResult$Outbound | undefined;
    StatusCode: number;
    RawResponse: never;
};

/** @internal */
export const CrmGetListResponse$outboundSchema: z.ZodType<
    CrmGetListResponse$Outbound,
    z.ZodTypeDef,
    CrmGetListResponse
> = z
    .object({
        contentType: z.string(),
        listResult: shared.ListResult$outboundSchema.optional(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            listResult: "ListResult",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmGetListResponse$ {
    /** @deprecated use `CrmGetListResponse$inboundSchema` instead. */
    export const inboundSchema = CrmGetListResponse$inboundSchema;
    /** @deprecated use `CrmGetListResponse$outboundSchema` instead. */
    export const outboundSchema = CrmGetListResponse$outboundSchema;
    /** @deprecated use `CrmGetListResponse$Outbound` instead. */
    export type Outbound = CrmGetListResponse$Outbound;
}
