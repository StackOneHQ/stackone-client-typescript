/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type StackoneMcpPostSecurity = {
  apiKey?: string | undefined;
  basic?: shared.SchemeBasic | undefined;
};

export type StackoneMcpPostRequest = {
  /**
   * JSON-RPC 2.0 message
   */
  jsonRpcMessageDto: shared.JsonRpcMessageDto;
  /**
   * Session id; omit for initialize, include for subsequent calls
   */
  mcpSessionId?: string | undefined;
  /**
   * Account secure id for the target provider account
   */
  xAccountId: string;
};

export type StackoneMcpPostResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const StackoneMcpPostSecurity$inboundSchema: z.ZodType<
  StackoneMcpPostSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  ApiKey: z.string().optional(),
  basic: shared.SchemeBasic$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ApiKey": "apiKey",
  });
});

/** @internal */
export type StackoneMcpPostSecurity$Outbound = {
  ApiKey?: string | undefined;
  basic?: shared.SchemeBasic$Outbound | undefined;
};

/** @internal */
export const StackoneMcpPostSecurity$outboundSchema: z.ZodType<
  StackoneMcpPostSecurity$Outbound,
  z.ZodTypeDef,
  StackoneMcpPostSecurity
> = z.object({
  apiKey: z.string().optional(),
  basic: shared.SchemeBasic$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    apiKey: "ApiKey",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StackoneMcpPostSecurity$ {
  /** @deprecated use `StackoneMcpPostSecurity$inboundSchema` instead. */
  export const inboundSchema = StackoneMcpPostSecurity$inboundSchema;
  /** @deprecated use `StackoneMcpPostSecurity$outboundSchema` instead. */
  export const outboundSchema = StackoneMcpPostSecurity$outboundSchema;
  /** @deprecated use `StackoneMcpPostSecurity$Outbound` instead. */
  export type Outbound = StackoneMcpPostSecurity$Outbound;
}

export function stackoneMcpPostSecurityToJSON(
  stackoneMcpPostSecurity: StackoneMcpPostSecurity,
): string {
  return JSON.stringify(
    StackoneMcpPostSecurity$outboundSchema.parse(stackoneMcpPostSecurity),
  );
}

export function stackoneMcpPostSecurityFromJSON(
  jsonString: string,
): SafeParseResult<StackoneMcpPostSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StackoneMcpPostSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StackoneMcpPostSecurity' from JSON`,
  );
}

/** @internal */
export const StackoneMcpPostRequest$inboundSchema: z.ZodType<
  StackoneMcpPostRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  JsonRpcMessageDto: shared.JsonRpcMessageDto$inboundSchema,
  "mcp-session-id": z.string().optional(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "JsonRpcMessageDto": "jsonRpcMessageDto",
    "mcp-session-id": "mcpSessionId",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type StackoneMcpPostRequest$Outbound = {
  JsonRpcMessageDto: shared.JsonRpcMessageDto$Outbound;
  "mcp-session-id"?: string | undefined;
  "x-account-id": string;
};

/** @internal */
export const StackoneMcpPostRequest$outboundSchema: z.ZodType<
  StackoneMcpPostRequest$Outbound,
  z.ZodTypeDef,
  StackoneMcpPostRequest
> = z.object({
  jsonRpcMessageDto: shared.JsonRpcMessageDto$outboundSchema,
  mcpSessionId: z.string().optional(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    jsonRpcMessageDto: "JsonRpcMessageDto",
    mcpSessionId: "mcp-session-id",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StackoneMcpPostRequest$ {
  /** @deprecated use `StackoneMcpPostRequest$inboundSchema` instead. */
  export const inboundSchema = StackoneMcpPostRequest$inboundSchema;
  /** @deprecated use `StackoneMcpPostRequest$outboundSchema` instead. */
  export const outboundSchema = StackoneMcpPostRequest$outboundSchema;
  /** @deprecated use `StackoneMcpPostRequest$Outbound` instead. */
  export type Outbound = StackoneMcpPostRequest$Outbound;
}

export function stackoneMcpPostRequestToJSON(
  stackoneMcpPostRequest: StackoneMcpPostRequest,
): string {
  return JSON.stringify(
    StackoneMcpPostRequest$outboundSchema.parse(stackoneMcpPostRequest),
  );
}

export function stackoneMcpPostRequestFromJSON(
  jsonString: string,
): SafeParseResult<StackoneMcpPostRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StackoneMcpPostRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StackoneMcpPostRequest' from JSON`,
  );
}

/** @internal */
export const StackoneMcpPostResponse$inboundSchema: z.ZodType<
  StackoneMcpPostResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),

  Headers: z.record(z.array(z.string())).default({}),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type StackoneMcpPostResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const StackoneMcpPostResponse$outboundSchema: z.ZodType<
  StackoneMcpPostResponse$Outbound,
  z.ZodTypeDef,
  StackoneMcpPostResponse
> = z.object({
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StackoneMcpPostResponse$ {
  /** @deprecated use `StackoneMcpPostResponse$inboundSchema` instead. */
  export const inboundSchema = StackoneMcpPostResponse$inboundSchema;
  /** @deprecated use `StackoneMcpPostResponse$outboundSchema` instead. */
  export const outboundSchema = StackoneMcpPostResponse$outboundSchema;
  /** @deprecated use `StackoneMcpPostResponse$Outbound` instead. */
  export type Outbound = StackoneMcpPostResponse$Outbound;
}

export function stackoneMcpPostResponseToJSON(
  stackoneMcpPostResponse: StackoneMcpPostResponse,
): string {
  return JSON.stringify(
    StackoneMcpPostResponse$outboundSchema.parse(stackoneMcpPostResponse),
  );
}

export function stackoneMcpPostResponseFromJSON(
  jsonString: string,
): SafeParseResult<StackoneMcpPostResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StackoneMcpPostResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StackoneMcpPostResponse' from JSON`,
  );
}
