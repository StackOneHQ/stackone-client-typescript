/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type LmsUpsertCourseRequest = {
  lmsUpsertCourseRequestDto: shared.LmsUpsertCourseRequestDto;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type LmsUpsertCourseResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The course was upserted successfully.
   */
  upsertResult?: shared.UpsertResult | undefined;
};

/** @internal */
export const LmsUpsertCourseRequest$inboundSchema: z.ZodType<
  LmsUpsertCourseRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  LmsUpsertCourseRequestDto: shared.LmsUpsertCourseRequestDto$inboundSchema,
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "LmsUpsertCourseRequestDto": "lmsUpsertCourseRequestDto",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type LmsUpsertCourseRequest$Outbound = {
  LmsUpsertCourseRequestDto: shared.LmsUpsertCourseRequestDto$Outbound;
  "x-account-id": string;
};

/** @internal */
export const LmsUpsertCourseRequest$outboundSchema: z.ZodType<
  LmsUpsertCourseRequest$Outbound,
  z.ZodTypeDef,
  LmsUpsertCourseRequest
> = z.object({
  lmsUpsertCourseRequestDto: shared.LmsUpsertCourseRequestDto$outboundSchema,
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    lmsUpsertCourseRequestDto: "LmsUpsertCourseRequestDto",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LmsUpsertCourseRequest$ {
  /** @deprecated use `LmsUpsertCourseRequest$inboundSchema` instead. */
  export const inboundSchema = LmsUpsertCourseRequest$inboundSchema;
  /** @deprecated use `LmsUpsertCourseRequest$outboundSchema` instead. */
  export const outboundSchema = LmsUpsertCourseRequest$outboundSchema;
  /** @deprecated use `LmsUpsertCourseRequest$Outbound` instead. */
  export type Outbound = LmsUpsertCourseRequest$Outbound;
}

export function lmsUpsertCourseRequestToJSON(
  lmsUpsertCourseRequest: LmsUpsertCourseRequest,
): string {
  return JSON.stringify(
    LmsUpsertCourseRequest$outboundSchema.parse(lmsUpsertCourseRequest),
  );
}

export function lmsUpsertCourseRequestFromJSON(
  jsonString: string,
): SafeParseResult<LmsUpsertCourseRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LmsUpsertCourseRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LmsUpsertCourseRequest' from JSON`,
  );
}

/** @internal */
export const LmsUpsertCourseResponse$inboundSchema: z.ZodType<
  LmsUpsertCourseResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  UpsertResult: shared.UpsertResult$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "UpsertResult": "upsertResult",
  });
});

/** @internal */
export type LmsUpsertCourseResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  UpsertResult?: shared.UpsertResult$Outbound | undefined;
};

/** @internal */
export const LmsUpsertCourseResponse$outboundSchema: z.ZodType<
  LmsUpsertCourseResponse$Outbound,
  z.ZodTypeDef,
  LmsUpsertCourseResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  upsertResult: shared.UpsertResult$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    upsertResult: "UpsertResult",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LmsUpsertCourseResponse$ {
  /** @deprecated use `LmsUpsertCourseResponse$inboundSchema` instead. */
  export const inboundSchema = LmsUpsertCourseResponse$inboundSchema;
  /** @deprecated use `LmsUpsertCourseResponse$outboundSchema` instead. */
  export const outboundSchema = LmsUpsertCourseResponse$outboundSchema;
  /** @deprecated use `LmsUpsertCourseResponse$Outbound` instead. */
  export type Outbound = LmsUpsertCourseResponse$Outbound;
}

export function lmsUpsertCourseResponseToJSON(
  lmsUpsertCourseResponse: LmsUpsertCourseResponse,
): string {
  return JSON.stringify(
    LmsUpsertCourseResponse$outboundSchema.parse(lmsUpsertCourseResponse),
  );
}

export function lmsUpsertCourseResponseFromJSON(
  jsonString: string,
): SafeParseResult<LmsUpsertCourseResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LmsUpsertCourseResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LmsUpsertCourseResponse' from JSON`,
  );
}
