/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * Filter to select shifts by status
 */
export enum QueryParamStatus {
  Draft = "draft",
  Published = "published",
  Confirmed = "confirmed",
  Cancelled = "cancelled",
  UnmappedValue = "unmapped_value",
}

/**
 * HRIS Shifts filters
 */
export type HrisListEmployeeShiftsQueryParamFilter = {
  /**
   * Filter shifts that end before this date
   */
  endsBefore?: string | undefined;
  /**
   * Filter shifts that start after this date
   */
  startsAfter?: string | undefined;
  /**
   * Filter to select shifts by status
   */
  status?: QueryParamStatus | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   */
  updatedAfter?: Date | null | undefined;
};

export type HrisListEmployeeShiftsRequest = {
  /**
   * The comma separated list of fields to return in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  /**
   * HRIS Shifts filters
   */
  filter?: HrisListEmployeeShiftsQueryParamFilter | null | undefined;
  id: string;
  /**
   * The unified cursor
   */
  next?: string | null | undefined;
  /**
   * The page number of the results to fetch
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  page?: string | null | undefined;
  /**
   * The number of results per page (default value is 25)
   */
  pageSize?: string | null | undefined;
  /**
   * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
   */
  proxy?: { [k: string]: any } | null | undefined;
  /**
   * Indicates that the raw request result should be returned in addition to the mapped result (default value is false)
   */
  raw?: boolean | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  updatedAfter?: Date | null | undefined;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type HrisListEmployeeShiftsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * The shifts related to the employee with the given identifier were retrieved.
   */
  hrisShiftsPaginated?: shared.HrisShiftsPaginated | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const QueryParamStatus$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamStatus
> = z.nativeEnum(QueryParamStatus);

/** @internal */
export const QueryParamStatus$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamStatus
> = QueryParamStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamStatus$ {
  /** @deprecated use `QueryParamStatus$inboundSchema` instead. */
  export const inboundSchema = QueryParamStatus$inboundSchema;
  /** @deprecated use `QueryParamStatus$outboundSchema` instead. */
  export const outboundSchema = QueryParamStatus$outboundSchema;
}

/** @internal */
export const HrisListEmployeeShiftsQueryParamFilter$inboundSchema: z.ZodType<
  HrisListEmployeeShiftsQueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  ends_before: z.string().optional(),
  starts_after: z.string().optional(),
  status: z.nullable(QueryParamStatus$inboundSchema).optional(),
  updated_after: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "ends_before": "endsBefore",
    "starts_after": "startsAfter",
    "updated_after": "updatedAfter",
  });
});

/** @internal */
export type HrisListEmployeeShiftsQueryParamFilter$Outbound = {
  ends_before?: string | undefined;
  starts_after?: string | undefined;
  status?: string | null | undefined;
  updated_after?: string | null | undefined;
};

/** @internal */
export const HrisListEmployeeShiftsQueryParamFilter$outboundSchema: z.ZodType<
  HrisListEmployeeShiftsQueryParamFilter$Outbound,
  z.ZodTypeDef,
  HrisListEmployeeShiftsQueryParamFilter
> = z.object({
  endsBefore: z.string().optional(),
  startsAfter: z.string().optional(),
  status: z.nullable(QueryParamStatus$outboundSchema).optional(),
  updatedAfter: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    endsBefore: "ends_before",
    startsAfter: "starts_after",
    updatedAfter: "updated_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisListEmployeeShiftsQueryParamFilter$ {
  /** @deprecated use `HrisListEmployeeShiftsQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema =
    HrisListEmployeeShiftsQueryParamFilter$inboundSchema;
  /** @deprecated use `HrisListEmployeeShiftsQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema =
    HrisListEmployeeShiftsQueryParamFilter$outboundSchema;
  /** @deprecated use `HrisListEmployeeShiftsQueryParamFilter$Outbound` instead. */
  export type Outbound = HrisListEmployeeShiftsQueryParamFilter$Outbound;
}

export function hrisListEmployeeShiftsQueryParamFilterToJSON(
  hrisListEmployeeShiftsQueryParamFilter:
    HrisListEmployeeShiftsQueryParamFilter,
): string {
  return JSON.stringify(
    HrisListEmployeeShiftsQueryParamFilter$outboundSchema.parse(
      hrisListEmployeeShiftsQueryParamFilter,
    ),
  );
}

export function hrisListEmployeeShiftsQueryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<HrisListEmployeeShiftsQueryParamFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisListEmployeeShiftsQueryParamFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisListEmployeeShiftsQueryParamFilter' from JSON`,
  );
}

/** @internal */
export const HrisListEmployeeShiftsRequest$inboundSchema: z.ZodType<
  HrisListEmployeeShiftsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => HrisListEmployeeShiftsQueryParamFilter$inboundSchema),
  ).optional(),
  id: z.string(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  page_size: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  updated_after: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "updated_after": "updatedAfter",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type HrisListEmployeeShiftsRequest$Outbound = {
  fields?: string | null | undefined;
  filter?: HrisListEmployeeShiftsQueryParamFilter$Outbound | null | undefined;
  id: string;
  next?: string | null | undefined;
  page?: string | null | undefined;
  page_size?: string | null | undefined;
  proxy?: { [k: string]: any } | null | undefined;
  raw?: boolean | null | undefined;
  updated_after?: string | null | undefined;
  "x-account-id": string;
};

/** @internal */
export const HrisListEmployeeShiftsRequest$outboundSchema: z.ZodType<
  HrisListEmployeeShiftsRequest$Outbound,
  z.ZodTypeDef,
  HrisListEmployeeShiftsRequest
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => HrisListEmployeeShiftsQueryParamFilter$outboundSchema),
  ).optional(),
  id: z.string(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  pageSize: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  updatedAfter: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    updatedAfter: "updated_after",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisListEmployeeShiftsRequest$ {
  /** @deprecated use `HrisListEmployeeShiftsRequest$inboundSchema` instead. */
  export const inboundSchema = HrisListEmployeeShiftsRequest$inboundSchema;
  /** @deprecated use `HrisListEmployeeShiftsRequest$outboundSchema` instead. */
  export const outboundSchema = HrisListEmployeeShiftsRequest$outboundSchema;
  /** @deprecated use `HrisListEmployeeShiftsRequest$Outbound` instead. */
  export type Outbound = HrisListEmployeeShiftsRequest$Outbound;
}

export function hrisListEmployeeShiftsRequestToJSON(
  hrisListEmployeeShiftsRequest: HrisListEmployeeShiftsRequest,
): string {
  return JSON.stringify(
    HrisListEmployeeShiftsRequest$outboundSchema.parse(
      hrisListEmployeeShiftsRequest,
    ),
  );
}

export function hrisListEmployeeShiftsRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisListEmployeeShiftsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisListEmployeeShiftsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisListEmployeeShiftsRequest' from JSON`,
  );
}

/** @internal */
export const HrisListEmployeeShiftsResponse$inboundSchema: z.ZodType<
  HrisListEmployeeShiftsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  HrisShiftsPaginated: shared.HrisShiftsPaginated$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "HrisShiftsPaginated": "hrisShiftsPaginated",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type HrisListEmployeeShiftsResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  HrisShiftsPaginated?: shared.HrisShiftsPaginated$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const HrisListEmployeeShiftsResponse$outboundSchema: z.ZodType<
  HrisListEmployeeShiftsResponse$Outbound,
  z.ZodTypeDef,
  HrisListEmployeeShiftsResponse
> = z.object({
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  hrisShiftsPaginated: shared.HrisShiftsPaginated$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    headers: "Headers",
    hrisShiftsPaginated: "HrisShiftsPaginated",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisListEmployeeShiftsResponse$ {
  /** @deprecated use `HrisListEmployeeShiftsResponse$inboundSchema` instead. */
  export const inboundSchema = HrisListEmployeeShiftsResponse$inboundSchema;
  /** @deprecated use `HrisListEmployeeShiftsResponse$outboundSchema` instead. */
  export const outboundSchema = HrisListEmployeeShiftsResponse$outboundSchema;
  /** @deprecated use `HrisListEmployeeShiftsResponse$Outbound` instead. */
  export type Outbound = HrisListEmployeeShiftsResponse$Outbound;
}

export function hrisListEmployeeShiftsResponseToJSON(
  hrisListEmployeeShiftsResponse: HrisListEmployeeShiftsResponse,
): string {
  return JSON.stringify(
    HrisListEmployeeShiftsResponse$outboundSchema.parse(
      hrisListEmployeeShiftsResponse,
    ),
  );
}

export function hrisListEmployeeShiftsResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisListEmployeeShiftsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisListEmployeeShiftsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisListEmployeeShiftsResponse' from JSON`,
  );
}
