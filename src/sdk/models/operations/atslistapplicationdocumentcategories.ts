/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * Filter parameters that allow greater customisation of the list response
 */
export type AtsListApplicationDocumentCategoriesQueryParamFilter = {
  /**
   * Use a string with a date to only select results updated after that given date
   */
  updatedAfter?: Date | null | undefined;
};

export type AtsListApplicationDocumentCategoriesRequest = {
  /**
   * The comma separated list of fields that will be returned in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  /**
   * Filter parameters that allow greater customisation of the list response
   */
  filter?:
    | AtsListApplicationDocumentCategoriesQueryParamFilter
    | null
    | undefined;
  /**
   * The unified cursor
   */
  next?: string | null | undefined;
  /**
   * The page number of the results to fetch
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  page?: string | null | undefined;
  /**
   * The number of results per page (default value is 25)
   */
  pageSize?: string | null | undefined;
  /**
   * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
   */
  proxy?: { [k: string]: any } | null | undefined;
  /**
   * Indicates that the raw request result should be returned in addition to the mapped result (default value is false)
   */
  raw?: boolean | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  updatedAfter?: string | null | undefined;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type AtsListApplicationDocumentCategoriesResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * The list of application document categories were retrieved.
   */
  referencePaginated?: shared.ReferencePaginated | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const AtsListApplicationDocumentCategoriesQueryParamFilter$inboundSchema:
  z.ZodType<
    AtsListApplicationDocumentCategoriesQueryParamFilter,
    z.ZodTypeDef,
    unknown
  > = z.object({
    updated_after: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "updated_after": "updatedAfter",
    });
  });

/** @internal */
export type AtsListApplicationDocumentCategoriesQueryParamFilter$Outbound = {
  updated_after?: string | null | undefined;
};

/** @internal */
export const AtsListApplicationDocumentCategoriesQueryParamFilter$outboundSchema:
  z.ZodType<
    AtsListApplicationDocumentCategoriesQueryParamFilter$Outbound,
    z.ZodTypeDef,
    AtsListApplicationDocumentCategoriesQueryParamFilter
  > = z.object({
    updatedAfter: z.nullable(z.date().transform(v => v.toISOString()))
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      updatedAfter: "updated_after",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsListApplicationDocumentCategoriesQueryParamFilter$ {
  /** @deprecated use `AtsListApplicationDocumentCategoriesQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema =
    AtsListApplicationDocumentCategoriesQueryParamFilter$inboundSchema;
  /** @deprecated use `AtsListApplicationDocumentCategoriesQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema =
    AtsListApplicationDocumentCategoriesQueryParamFilter$outboundSchema;
  /** @deprecated use `AtsListApplicationDocumentCategoriesQueryParamFilter$Outbound` instead. */
  export type Outbound =
    AtsListApplicationDocumentCategoriesQueryParamFilter$Outbound;
}

export function atsListApplicationDocumentCategoriesQueryParamFilterToJSON(
  atsListApplicationDocumentCategoriesQueryParamFilter:
    AtsListApplicationDocumentCategoriesQueryParamFilter,
): string {
  return JSON.stringify(
    AtsListApplicationDocumentCategoriesQueryParamFilter$outboundSchema.parse(
      atsListApplicationDocumentCategoriesQueryParamFilter,
    ),
  );
}

export function atsListApplicationDocumentCategoriesQueryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  AtsListApplicationDocumentCategoriesQueryParamFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AtsListApplicationDocumentCategoriesQueryParamFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AtsListApplicationDocumentCategoriesQueryParamFilter' from JSON`,
  );
}

/** @internal */
export const AtsListApplicationDocumentCategoriesRequest$inboundSchema:
  z.ZodType<
    AtsListApplicationDocumentCategoriesRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    fields: z.nullable(z.string()).optional(),
    filter: z.nullable(
      z.lazy(() =>
        AtsListApplicationDocumentCategoriesQueryParamFilter$inboundSchema
      ),
    ).optional(),
    next: z.nullable(z.string()).optional(),
    page: z.nullable(z.string()).optional(),
    page_size: z.nullable(z.string()).optional(),
    proxy: z.nullable(z.record(z.any())).optional(),
    raw: z.nullable(z.boolean()).optional(),
    updated_after: z.nullable(z.string()).optional(),
    "x-account-id": z.string(),
  }).transform((v) => {
    return remap$(v, {
      "page_size": "pageSize",
      "updated_after": "updatedAfter",
      "x-account-id": "xAccountId",
    });
  });

/** @internal */
export type AtsListApplicationDocumentCategoriesRequest$Outbound = {
  fields?: string | null | undefined;
  filter?:
    | AtsListApplicationDocumentCategoriesQueryParamFilter$Outbound
    | null
    | undefined;
  next?: string | null | undefined;
  page?: string | null | undefined;
  page_size?: string | null | undefined;
  proxy?: { [k: string]: any } | null | undefined;
  raw?: boolean | null | undefined;
  updated_after?: string | null | undefined;
  "x-account-id": string;
};

/** @internal */
export const AtsListApplicationDocumentCategoriesRequest$outboundSchema:
  z.ZodType<
    AtsListApplicationDocumentCategoriesRequest$Outbound,
    z.ZodTypeDef,
    AtsListApplicationDocumentCategoriesRequest
  > = z.object({
    fields: z.nullable(z.string()).optional(),
    filter: z.nullable(
      z.lazy(() =>
        AtsListApplicationDocumentCategoriesQueryParamFilter$outboundSchema
      ),
    ).optional(),
    next: z.nullable(z.string()).optional(),
    page: z.nullable(z.string()).optional(),
    pageSize: z.nullable(z.string()).optional(),
    proxy: z.nullable(z.record(z.any())).optional(),
    raw: z.nullable(z.boolean()).optional(),
    updatedAfter: z.nullable(z.string()).optional(),
    xAccountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      pageSize: "page_size",
      updatedAfter: "updated_after",
      xAccountId: "x-account-id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsListApplicationDocumentCategoriesRequest$ {
  /** @deprecated use `AtsListApplicationDocumentCategoriesRequest$inboundSchema` instead. */
  export const inboundSchema =
    AtsListApplicationDocumentCategoriesRequest$inboundSchema;
  /** @deprecated use `AtsListApplicationDocumentCategoriesRequest$outboundSchema` instead. */
  export const outboundSchema =
    AtsListApplicationDocumentCategoriesRequest$outboundSchema;
  /** @deprecated use `AtsListApplicationDocumentCategoriesRequest$Outbound` instead. */
  export type Outbound = AtsListApplicationDocumentCategoriesRequest$Outbound;
}

export function atsListApplicationDocumentCategoriesRequestToJSON(
  atsListApplicationDocumentCategoriesRequest:
    AtsListApplicationDocumentCategoriesRequest,
): string {
  return JSON.stringify(
    AtsListApplicationDocumentCategoriesRequest$outboundSchema.parse(
      atsListApplicationDocumentCategoriesRequest,
    ),
  );
}

export function atsListApplicationDocumentCategoriesRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  AtsListApplicationDocumentCategoriesRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AtsListApplicationDocumentCategoriesRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AtsListApplicationDocumentCategoriesRequest' from JSON`,
  );
}

/** @internal */
export const AtsListApplicationDocumentCategoriesResponse$inboundSchema:
  z.ZodType<
    AtsListApplicationDocumentCategoriesResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    Headers: z.record(z.array(z.string())),
    ReferencePaginated: shared.ReferencePaginated$inboundSchema.optional(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "Headers": "headers",
      "ReferencePaginated": "referencePaginated",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
    });
  });

/** @internal */
export type AtsListApplicationDocumentCategoriesResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  ReferencePaginated?: shared.ReferencePaginated$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const AtsListApplicationDocumentCategoriesResponse$outboundSchema:
  z.ZodType<
    AtsListApplicationDocumentCategoriesResponse$Outbound,
    z.ZodTypeDef,
    AtsListApplicationDocumentCategoriesResponse
  > = z.object({
    contentType: z.string(),
    headers: z.record(z.array(z.string())),
    referencePaginated: shared.ReferencePaginated$outboundSchema.optional(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      headers: "Headers",
      referencePaginated: "ReferencePaginated",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsListApplicationDocumentCategoriesResponse$ {
  /** @deprecated use `AtsListApplicationDocumentCategoriesResponse$inboundSchema` instead. */
  export const inboundSchema =
    AtsListApplicationDocumentCategoriesResponse$inboundSchema;
  /** @deprecated use `AtsListApplicationDocumentCategoriesResponse$outboundSchema` instead. */
  export const outboundSchema =
    AtsListApplicationDocumentCategoriesResponse$outboundSchema;
  /** @deprecated use `AtsListApplicationDocumentCategoriesResponse$Outbound` instead. */
  export type Outbound = AtsListApplicationDocumentCategoriesResponse$Outbound;
}

export function atsListApplicationDocumentCategoriesResponseToJSON(
  atsListApplicationDocumentCategoriesResponse:
    AtsListApplicationDocumentCategoriesResponse,
): string {
  return JSON.stringify(
    AtsListApplicationDocumentCategoriesResponse$outboundSchema.parse(
      atsListApplicationDocumentCategoriesResponse,
    ),
  );
}

export function atsListApplicationDocumentCategoriesResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  AtsListApplicationDocumentCategoriesResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AtsListApplicationDocumentCategoriesResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AtsListApplicationDocumentCategoriesResponse' from JSON`,
  );
}
