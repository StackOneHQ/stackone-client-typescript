/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type StackoneMcpGetSecurity = {
  apiKey?: string | undefined;
  basic?: shared.SchemeBasic | undefined;
};

export type StackoneMcpGetRequest = {
  /**
   * Session id
   */
  mcpSessionId: string;
  /**
   * Account secure id for the target provider account
   */
  xAccountId: string;
};

export type StackoneMcpGetResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const StackoneMcpGetSecurity$inboundSchema: z.ZodType<
  StackoneMcpGetSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  ApiKey: z.string().optional(),
  basic: shared.SchemeBasic$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ApiKey": "apiKey",
  });
});

/** @internal */
export type StackoneMcpGetSecurity$Outbound = {
  ApiKey?: string | undefined;
  basic?: shared.SchemeBasic$Outbound | undefined;
};

/** @internal */
export const StackoneMcpGetSecurity$outboundSchema: z.ZodType<
  StackoneMcpGetSecurity$Outbound,
  z.ZodTypeDef,
  StackoneMcpGetSecurity
> = z.object({
  apiKey: z.string().optional(),
  basic: shared.SchemeBasic$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    apiKey: "ApiKey",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StackoneMcpGetSecurity$ {
  /** @deprecated use `StackoneMcpGetSecurity$inboundSchema` instead. */
  export const inboundSchema = StackoneMcpGetSecurity$inboundSchema;
  /** @deprecated use `StackoneMcpGetSecurity$outboundSchema` instead. */
  export const outboundSchema = StackoneMcpGetSecurity$outboundSchema;
  /** @deprecated use `StackoneMcpGetSecurity$Outbound` instead. */
  export type Outbound = StackoneMcpGetSecurity$Outbound;
}

export function stackoneMcpGetSecurityToJSON(
  stackoneMcpGetSecurity: StackoneMcpGetSecurity,
): string {
  return JSON.stringify(
    StackoneMcpGetSecurity$outboundSchema.parse(stackoneMcpGetSecurity),
  );
}

export function stackoneMcpGetSecurityFromJSON(
  jsonString: string,
): SafeParseResult<StackoneMcpGetSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StackoneMcpGetSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StackoneMcpGetSecurity' from JSON`,
  );
}

/** @internal */
export const StackoneMcpGetRequest$inboundSchema: z.ZodType<
  StackoneMcpGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "mcp-session-id": z.string(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "mcp-session-id": "mcpSessionId",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type StackoneMcpGetRequest$Outbound = {
  "mcp-session-id": string;
  "x-account-id": string;
};

/** @internal */
export const StackoneMcpGetRequest$outboundSchema: z.ZodType<
  StackoneMcpGetRequest$Outbound,
  z.ZodTypeDef,
  StackoneMcpGetRequest
> = z.object({
  mcpSessionId: z.string(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    mcpSessionId: "mcp-session-id",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StackoneMcpGetRequest$ {
  /** @deprecated use `StackoneMcpGetRequest$inboundSchema` instead. */
  export const inboundSchema = StackoneMcpGetRequest$inboundSchema;
  /** @deprecated use `StackoneMcpGetRequest$outboundSchema` instead. */
  export const outboundSchema = StackoneMcpGetRequest$outboundSchema;
  /** @deprecated use `StackoneMcpGetRequest$Outbound` instead. */
  export type Outbound = StackoneMcpGetRequest$Outbound;
}

export function stackoneMcpGetRequestToJSON(
  stackoneMcpGetRequest: StackoneMcpGetRequest,
): string {
  return JSON.stringify(
    StackoneMcpGetRequest$outboundSchema.parse(stackoneMcpGetRequest),
  );
}

export function stackoneMcpGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<StackoneMcpGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StackoneMcpGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StackoneMcpGetRequest' from JSON`,
  );
}

/** @internal */
export const StackoneMcpGetResponse$inboundSchema: z.ZodType<
  StackoneMcpGetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type StackoneMcpGetResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const StackoneMcpGetResponse$outboundSchema: z.ZodType<
  StackoneMcpGetResponse$Outbound,
  z.ZodTypeDef,
  StackoneMcpGetResponse
> = z.object({
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StackoneMcpGetResponse$ {
  /** @deprecated use `StackoneMcpGetResponse$inboundSchema` instead. */
  export const inboundSchema = StackoneMcpGetResponse$inboundSchema;
  /** @deprecated use `StackoneMcpGetResponse$outboundSchema` instead. */
  export const outboundSchema = StackoneMcpGetResponse$outboundSchema;
  /** @deprecated use `StackoneMcpGetResponse$Outbound` instead. */
  export type Outbound = StackoneMcpGetResponse$Outbound;
}

export function stackoneMcpGetResponseToJSON(
  stackoneMcpGetResponse: StackoneMcpGetResponse,
): string {
  return JSON.stringify(
    StackoneMcpGetResponse$outboundSchema.parse(stackoneMcpGetResponse),
  );
}

export function stackoneMcpGetResponseFromJSON(
  jsonString: string,
): SafeParseResult<StackoneMcpGetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StackoneMcpGetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StackoneMcpGetResponse' from JSON`,
  );
}
