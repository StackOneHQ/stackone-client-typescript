/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * The include parameter allows you to include additional data in the response.
 */
export enum QueryParamInclude {
  StepLogs = "step_logs",
  AdvancedLogs = "advanced_logs",
}

export type StackoneGetLogRequest = {
  id: string;
  /**
   * The include parameter allows you to include additional data in the response.
   */
  include?: QueryParamInclude | null | undefined;
};

export type StackoneGetLogResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The log was retrieved.
   */
  unifiedLogResult?: shared.UnifiedLogResult | undefined;
};

/** @internal */
export const QueryParamInclude$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamInclude
> = z.nativeEnum(QueryParamInclude);

/** @internal */
export const QueryParamInclude$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamInclude
> = QueryParamInclude$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamInclude$ {
  /** @deprecated use `QueryParamInclude$inboundSchema` instead. */
  export const inboundSchema = QueryParamInclude$inboundSchema;
  /** @deprecated use `QueryParamInclude$outboundSchema` instead. */
  export const outboundSchema = QueryParamInclude$outboundSchema;
}

/** @internal */
export const StackoneGetLogRequest$inboundSchema: z.ZodType<
  StackoneGetLogRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  include: z.nullable(QueryParamInclude$inboundSchema).optional(),
});

/** @internal */
export type StackoneGetLogRequest$Outbound = {
  id: string;
  include?: string | null | undefined;
};

/** @internal */
export const StackoneGetLogRequest$outboundSchema: z.ZodType<
  StackoneGetLogRequest$Outbound,
  z.ZodTypeDef,
  StackoneGetLogRequest
> = z.object({
  id: z.string(),
  include: z.nullable(QueryParamInclude$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StackoneGetLogRequest$ {
  /** @deprecated use `StackoneGetLogRequest$inboundSchema` instead. */
  export const inboundSchema = StackoneGetLogRequest$inboundSchema;
  /** @deprecated use `StackoneGetLogRequest$outboundSchema` instead. */
  export const outboundSchema = StackoneGetLogRequest$outboundSchema;
  /** @deprecated use `StackoneGetLogRequest$Outbound` instead. */
  export type Outbound = StackoneGetLogRequest$Outbound;
}

export function stackoneGetLogRequestToJSON(
  stackoneGetLogRequest: StackoneGetLogRequest,
): string {
  return JSON.stringify(
    StackoneGetLogRequest$outboundSchema.parse(stackoneGetLogRequest),
  );
}

export function stackoneGetLogRequestFromJSON(
  jsonString: string,
): SafeParseResult<StackoneGetLogRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StackoneGetLogRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StackoneGetLogRequest' from JSON`,
  );
}

/** @internal */
export const StackoneGetLogResponse$inboundSchema: z.ZodType<
  StackoneGetLogResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  UnifiedLogResult: shared.UnifiedLogResult$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "UnifiedLogResult": "unifiedLogResult",
  });
});

/** @internal */
export type StackoneGetLogResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
  UnifiedLogResult?: shared.UnifiedLogResult$Outbound | undefined;
};

/** @internal */
export const StackoneGetLogResponse$outboundSchema: z.ZodType<
  StackoneGetLogResponse$Outbound,
  z.ZodTypeDef,
  StackoneGetLogResponse
> = z.object({
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  unifiedLogResult: shared.UnifiedLogResult$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    unifiedLogResult: "UnifiedLogResult",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StackoneGetLogResponse$ {
  /** @deprecated use `StackoneGetLogResponse$inboundSchema` instead. */
  export const inboundSchema = StackoneGetLogResponse$inboundSchema;
  /** @deprecated use `StackoneGetLogResponse$outboundSchema` instead. */
  export const outboundSchema = StackoneGetLogResponse$outboundSchema;
  /** @deprecated use `StackoneGetLogResponse$Outbound` instead. */
  export type Outbound = StackoneGetLogResponse$Outbound;
}

export function stackoneGetLogResponseToJSON(
  stackoneGetLogResponse: StackoneGetLogResponse,
): string {
  return JSON.stringify(
    StackoneGetLogResponse$outboundSchema.parse(stackoneGetLogResponse),
  );
}

export function stackoneGetLogResponseFromJSON(
  jsonString: string,
): SafeParseResult<StackoneGetLogResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StackoneGetLogResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StackoneGetLogResponse' from JSON`,
  );
}
