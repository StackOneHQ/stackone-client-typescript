/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * Filter parameters that allow greater customisation of the list response
 */
export type TicketingListProjectsQueryParamFilter = {
  /**
   * Use a string with a date to only select results updated after that given date
   */
  updatedAfter?: Date | null | undefined;
};

export type TicketingListProjectsRequest = {
  /**
   * The comma separated list of fields that will be returned in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  /**
   * Filter parameters that allow greater customisation of the list response
   */
  filter?: TicketingListProjectsQueryParamFilter | null | undefined;
  /**
   * The unified cursor
   */
  next?: string | null | undefined;
  /**
   * The page number of the results to fetch
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  page?: string | null | undefined;
  /**
   * The number of results per page (default value is 25)
   */
  pageSize?: string | null | undefined;
  /**
   * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
   */
  proxy?: { [k: string]: any } | null | undefined;
  /**
   * Indicates that the raw request result should be returned in addition to the mapped result (default value is false)
   */
  raw?: boolean | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  updatedAfter?: string | null | undefined;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type TicketingListProjectsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The list of projects was retrieved.
   */
  ticketingProjectsPaginated?: shared.TicketingProjectsPaginated | undefined;
};

/** @internal */
export const TicketingListProjectsQueryParamFilter$inboundSchema: z.ZodType<
  TicketingListProjectsQueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  updated_after: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "updated_after": "updatedAfter",
  });
});

/** @internal */
export type TicketingListProjectsQueryParamFilter$Outbound = {
  updated_after?: string | null | undefined;
};

/** @internal */
export const TicketingListProjectsQueryParamFilter$outboundSchema: z.ZodType<
  TicketingListProjectsQueryParamFilter$Outbound,
  z.ZodTypeDef,
  TicketingListProjectsQueryParamFilter
> = z.object({
  updatedAfter: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    updatedAfter: "updated_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingListProjectsQueryParamFilter$ {
  /** @deprecated use `TicketingListProjectsQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema =
    TicketingListProjectsQueryParamFilter$inboundSchema;
  /** @deprecated use `TicketingListProjectsQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema =
    TicketingListProjectsQueryParamFilter$outboundSchema;
  /** @deprecated use `TicketingListProjectsQueryParamFilter$Outbound` instead. */
  export type Outbound = TicketingListProjectsQueryParamFilter$Outbound;
}

export function ticketingListProjectsQueryParamFilterToJSON(
  ticketingListProjectsQueryParamFilter: TicketingListProjectsQueryParamFilter,
): string {
  return JSON.stringify(
    TicketingListProjectsQueryParamFilter$outboundSchema.parse(
      ticketingListProjectsQueryParamFilter,
    ),
  );
}

export function ticketingListProjectsQueryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<TicketingListProjectsQueryParamFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TicketingListProjectsQueryParamFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingListProjectsQueryParamFilter' from JSON`,
  );
}

/** @internal */
export const TicketingListProjectsRequest$inboundSchema: z.ZodType<
  TicketingListProjectsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => TicketingListProjectsQueryParamFilter$inboundSchema),
  ).optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  page_size: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  updated_after: z.nullable(z.string()).optional(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "updated_after": "updatedAfter",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type TicketingListProjectsRequest$Outbound = {
  fields?: string | null | undefined;
  filter?: TicketingListProjectsQueryParamFilter$Outbound | null | undefined;
  next?: string | null | undefined;
  page?: string | null | undefined;
  page_size?: string | null | undefined;
  proxy?: { [k: string]: any } | null | undefined;
  raw?: boolean | null | undefined;
  updated_after?: string | null | undefined;
  "x-account-id": string;
};

/** @internal */
export const TicketingListProjectsRequest$outboundSchema: z.ZodType<
  TicketingListProjectsRequest$Outbound,
  z.ZodTypeDef,
  TicketingListProjectsRequest
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(
    z.lazy(() => TicketingListProjectsQueryParamFilter$outboundSchema),
  ).optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  pageSize: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  updatedAfter: z.nullable(z.string()).optional(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    updatedAfter: "updated_after",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingListProjectsRequest$ {
  /** @deprecated use `TicketingListProjectsRequest$inboundSchema` instead. */
  export const inboundSchema = TicketingListProjectsRequest$inboundSchema;
  /** @deprecated use `TicketingListProjectsRequest$outboundSchema` instead. */
  export const outboundSchema = TicketingListProjectsRequest$outboundSchema;
  /** @deprecated use `TicketingListProjectsRequest$Outbound` instead. */
  export type Outbound = TicketingListProjectsRequest$Outbound;
}

export function ticketingListProjectsRequestToJSON(
  ticketingListProjectsRequest: TicketingListProjectsRequest,
): string {
  return JSON.stringify(
    TicketingListProjectsRequest$outboundSchema.parse(
      ticketingListProjectsRequest,
    ),
  );
}

export function ticketingListProjectsRequestFromJSON(
  jsonString: string,
): SafeParseResult<TicketingListProjectsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingListProjectsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingListProjectsRequest' from JSON`,
  );
}

/** @internal */
export const TicketingListProjectsResponse$inboundSchema: z.ZodType<
  TicketingListProjectsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  TicketingProjectsPaginated: shared.TicketingProjectsPaginated$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "TicketingProjectsPaginated": "ticketingProjectsPaginated",
  });
});

/** @internal */
export type TicketingListProjectsResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
  TicketingProjectsPaginated?:
    | shared.TicketingProjectsPaginated$Outbound
    | undefined;
};

/** @internal */
export const TicketingListProjectsResponse$outboundSchema: z.ZodType<
  TicketingListProjectsResponse$Outbound,
  z.ZodTypeDef,
  TicketingListProjectsResponse
> = z.object({
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  ticketingProjectsPaginated: shared.TicketingProjectsPaginated$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    ticketingProjectsPaginated: "TicketingProjectsPaginated",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingListProjectsResponse$ {
  /** @deprecated use `TicketingListProjectsResponse$inboundSchema` instead. */
  export const inboundSchema = TicketingListProjectsResponse$inboundSchema;
  /** @deprecated use `TicketingListProjectsResponse$outboundSchema` instead. */
  export const outboundSchema = TicketingListProjectsResponse$outboundSchema;
  /** @deprecated use `TicketingListProjectsResponse$Outbound` instead. */
  export type Outbound = TicketingListProjectsResponse$Outbound;
}

export function ticketingListProjectsResponseToJSON(
  ticketingListProjectsResponse: TicketingListProjectsResponse,
): string {
  return JSON.stringify(
    TicketingListProjectsResponse$outboundSchema.parse(
      ticketingListProjectsResponse,
    ),
  );
}

export function ticketingListProjectsResponseFromJSON(
  jsonString: string,
): SafeParseResult<TicketingListProjectsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingListProjectsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingListProjectsResponse' from JSON`,
  );
}
