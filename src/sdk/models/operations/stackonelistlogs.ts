/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * The field to order the results by.
 */
export enum QueryParamOrderBy {
  Provider = "provider",
  Service = "service",
  Status = "status",
  EventDatetime = "eventDatetime",
  Duration = "duration",
}

/**
 * The direction to order the results by.
 */
export enum QueryParamOrderDirection {
  Asc = "asc",
  Desc = "desc",
}

/**
 * Filter parameters that allow greater customisation of the list response
 */
export type QueryParamFilter = {
  /**
   * A comma-separated list of account IDs to filter the results by.
   */
  accountIds?: string | null | undefined;
  /**
   * A comma-separated list of actions to filter the results by.
   */
  actions?: string | null | undefined;
  /**
   * A comma-separated list of child resources to filter the results by.
   */
  childResources?: string | null | undefined;
  /**
   * A ISO8601 date string to filter the results by end_date.
   */
  endDate?: Date | null | undefined;
  /**
   * A comma-separated list of HTTP methods to filter the results by.
   */
  httpMethods?: string | null | undefined;
  /**
   * The field to order the results by.
   */
  orderBy?: QueryParamOrderBy | null | undefined;
  /**
   * The direction to order the results by.
   */
  orderDirection?: QueryParamOrderDirection | null | undefined;
  /**
   * A comma-separated list of provider keys to filter the results by.
   */
  providers?: string | null | undefined;
  /**
   * A comma-separated list of request IDs to filter the results by.
   */
  requestIds?: string | null | undefined;
  /**
   * A comma-separated list of resources to filter the results by.
   */
  resources?: string | null | undefined;
  /**
   * A comma-separated list of services to filter the results by.
   */
  services?: string | null | undefined;
  /**
   * A comma-separated list of source IDs to filter the results by.
   */
  sourceIds?: string | null | undefined;
  /**
   * A comma-separated list of source types to filter the results by.
   */
  sourceTypes?: string | null | undefined;
  /**
   * A comma-separated list of source values to filter the results by.
   */
  sourceValues?: string | null | undefined;
  /**
   * A ISO8601 date string to filter the results by start_date.
   */
  startDate?: Date | null | undefined;
  /**
   * A comma-separated list of status codes to filter the results by.
   */
  statusCodes?: string | null | undefined;
  /**
   * A comma-separated list of sub resources to filter the results by.
   */
  subResources?: string | null | undefined;
  /**
   * A boolean value to filter the results by success or failure.
   */
  success?: boolean | null | undefined;
};

/**
 * The include parameter allows you to include additional data in the response.
 */
export enum QueryParamInclude {
  StepLogs = "step_logs",
}

/**
 * The field to order the results by.
 */
export enum OrderBy {
  Provider = "provider",
  Service = "service",
  Status = "status",
  EventDatetime = "eventDatetime",
  Duration = "duration",
}

/**
 * The direction to order the results by.
 */
export enum OrderDirection {
  Asc = "asc",
  Desc = "desc",
}

export type StackoneListLogsRequest = {
  /**
   * Filter parameters that allow greater customisation of the list response
   */
  filter?: QueryParamFilter | null | undefined;
  /**
   * The include parameter allows you to include additional data in the response.
   */
  include?: QueryParamInclude | null | undefined;
  /**
   * The unified cursor
   */
  next?: string | null | undefined;
  /**
   * The field to order the results by.
   */
  orderBy?: OrderBy | null | undefined;
  /**
   * The direction to order the results by.
   */
  orderDirection?: OrderDirection | null | undefined;
  /**
   * The number of results per page (default value is 25)
   */
  pageSize?: number | null | undefined;
};

export type StackoneListLogsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The list of logs was retrieved.
   */
  unifiedLogsPaginated?: shared.UnifiedLogsPaginated | undefined;
};

/** @internal */
export const QueryParamOrderBy$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamOrderBy
> = z.nativeEnum(QueryParamOrderBy);

/** @internal */
export const QueryParamOrderBy$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamOrderBy
> = QueryParamOrderBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamOrderBy$ {
  /** @deprecated use `QueryParamOrderBy$inboundSchema` instead. */
  export const inboundSchema = QueryParamOrderBy$inboundSchema;
  /** @deprecated use `QueryParamOrderBy$outboundSchema` instead. */
  export const outboundSchema = QueryParamOrderBy$outboundSchema;
}

/** @internal */
export const QueryParamOrderDirection$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamOrderDirection
> = z.nativeEnum(QueryParamOrderDirection);

/** @internal */
export const QueryParamOrderDirection$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamOrderDirection
> = QueryParamOrderDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamOrderDirection$ {
  /** @deprecated use `QueryParamOrderDirection$inboundSchema` instead. */
  export const inboundSchema = QueryParamOrderDirection$inboundSchema;
  /** @deprecated use `QueryParamOrderDirection$outboundSchema` instead. */
  export const outboundSchema = QueryParamOrderDirection$outboundSchema;
}

/** @internal */
export const QueryParamFilter$inboundSchema: z.ZodType<
  QueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_ids: z.nullable(z.string()).optional(),
  actions: z.nullable(z.string()).optional(),
  child_resources: z.nullable(z.string()).optional(),
  end_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  http_methods: z.nullable(z.string()).optional(),
  order_by: z.nullable(QueryParamOrderBy$inboundSchema).optional(),
  order_direction: z.nullable(QueryParamOrderDirection$inboundSchema)
    .optional(),
  providers: z.nullable(z.string()).optional(),
  request_ids: z.nullable(z.string()).optional(),
  resources: z.nullable(z.string()).optional(),
  services: z.nullable(z.string()).optional(),
  source_ids: z.nullable(z.string()).optional(),
  source_types: z.nullable(z.string()).optional(),
  source_values: z.nullable(z.string()).optional(),
  start_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  status_codes: z.nullable(z.string()).optional(),
  sub_resources: z.nullable(z.string()).optional(),
  success: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "account_ids": "accountIds",
    "child_resources": "childResources",
    "end_date": "endDate",
    "http_methods": "httpMethods",
    "order_by": "orderBy",
    "order_direction": "orderDirection",
    "request_ids": "requestIds",
    "source_ids": "sourceIds",
    "source_types": "sourceTypes",
    "source_values": "sourceValues",
    "start_date": "startDate",
    "status_codes": "statusCodes",
    "sub_resources": "subResources",
  });
});

/** @internal */
export type QueryParamFilter$Outbound = {
  account_ids?: string | null | undefined;
  actions?: string | null | undefined;
  child_resources?: string | null | undefined;
  end_date?: string | null | undefined;
  http_methods?: string | null | undefined;
  order_by?: string | null | undefined;
  order_direction?: string | null | undefined;
  providers?: string | null | undefined;
  request_ids?: string | null | undefined;
  resources?: string | null | undefined;
  services?: string | null | undefined;
  source_ids?: string | null | undefined;
  source_types?: string | null | undefined;
  source_values?: string | null | undefined;
  start_date?: string | null | undefined;
  status_codes?: string | null | undefined;
  sub_resources?: string | null | undefined;
  success?: boolean | null | undefined;
};

/** @internal */
export const QueryParamFilter$outboundSchema: z.ZodType<
  QueryParamFilter$Outbound,
  z.ZodTypeDef,
  QueryParamFilter
> = z.object({
  accountIds: z.nullable(z.string()).optional(),
  actions: z.nullable(z.string()).optional(),
  childResources: z.nullable(z.string()).optional(),
  endDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  httpMethods: z.nullable(z.string()).optional(),
  orderBy: z.nullable(QueryParamOrderBy$outboundSchema).optional(),
  orderDirection: z.nullable(QueryParamOrderDirection$outboundSchema)
    .optional(),
  providers: z.nullable(z.string()).optional(),
  requestIds: z.nullable(z.string()).optional(),
  resources: z.nullable(z.string()).optional(),
  services: z.nullable(z.string()).optional(),
  sourceIds: z.nullable(z.string()).optional(),
  sourceTypes: z.nullable(z.string()).optional(),
  sourceValues: z.nullable(z.string()).optional(),
  startDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  statusCodes: z.nullable(z.string()).optional(),
  subResources: z.nullable(z.string()).optional(),
  success: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    accountIds: "account_ids",
    childResources: "child_resources",
    endDate: "end_date",
    httpMethods: "http_methods",
    orderBy: "order_by",
    orderDirection: "order_direction",
    requestIds: "request_ids",
    sourceIds: "source_ids",
    sourceTypes: "source_types",
    sourceValues: "source_values",
    startDate: "start_date",
    statusCodes: "status_codes",
    subResources: "sub_resources",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamFilter$ {
  /** @deprecated use `QueryParamFilter$inboundSchema` instead. */
  export const inboundSchema = QueryParamFilter$inboundSchema;
  /** @deprecated use `QueryParamFilter$outboundSchema` instead. */
  export const outboundSchema = QueryParamFilter$outboundSchema;
  /** @deprecated use `QueryParamFilter$Outbound` instead. */
  export type Outbound = QueryParamFilter$Outbound;
}

export function queryParamFilterToJSON(
  queryParamFilter: QueryParamFilter,
): string {
  return JSON.stringify(
    QueryParamFilter$outboundSchema.parse(queryParamFilter),
  );
}

export function queryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<QueryParamFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParamFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParamFilter' from JSON`,
  );
}

/** @internal */
export const QueryParamInclude$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamInclude
> = z.nativeEnum(QueryParamInclude);

/** @internal */
export const QueryParamInclude$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamInclude
> = QueryParamInclude$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamInclude$ {
  /** @deprecated use `QueryParamInclude$inboundSchema` instead. */
  export const inboundSchema = QueryParamInclude$inboundSchema;
  /** @deprecated use `QueryParamInclude$outboundSchema` instead. */
  export const outboundSchema = QueryParamInclude$outboundSchema;
}

/** @internal */
export const OrderBy$inboundSchema: z.ZodNativeEnum<typeof OrderBy> = z
  .nativeEnum(OrderBy);

/** @internal */
export const OrderBy$outboundSchema: z.ZodNativeEnum<typeof OrderBy> =
  OrderBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderBy$ {
  /** @deprecated use `OrderBy$inboundSchema` instead. */
  export const inboundSchema = OrderBy$inboundSchema;
  /** @deprecated use `OrderBy$outboundSchema` instead. */
  export const outboundSchema = OrderBy$outboundSchema;
}

/** @internal */
export const OrderDirection$inboundSchema: z.ZodNativeEnum<
  typeof OrderDirection
> = z.nativeEnum(OrderDirection);

/** @internal */
export const OrderDirection$outboundSchema: z.ZodNativeEnum<
  typeof OrderDirection
> = OrderDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderDirection$ {
  /** @deprecated use `OrderDirection$inboundSchema` instead. */
  export const inboundSchema = OrderDirection$inboundSchema;
  /** @deprecated use `OrderDirection$outboundSchema` instead. */
  export const outboundSchema = OrderDirection$outboundSchema;
}

/** @internal */
export const StackoneListLogsRequest$inboundSchema: z.ZodType<
  StackoneListLogsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  filter: z.nullable(z.lazy(() => QueryParamFilter$inboundSchema)).optional(),
  include: z.nullable(QueryParamInclude$inboundSchema).optional(),
  next: z.nullable(z.string()).optional(),
  order_by: z.nullable(OrderBy$inboundSchema).optional(),
  order_direction: z.nullable(OrderDirection$inboundSchema).optional(),
  page_size: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "order_by": "orderBy",
    "order_direction": "orderDirection",
    "page_size": "pageSize",
  });
});

/** @internal */
export type StackoneListLogsRequest$Outbound = {
  filter?: QueryParamFilter$Outbound | null | undefined;
  include?: string | null | undefined;
  next?: string | null | undefined;
  order_by?: string | null | undefined;
  order_direction?: string | null | undefined;
  page_size?: number | null | undefined;
};

/** @internal */
export const StackoneListLogsRequest$outboundSchema: z.ZodType<
  StackoneListLogsRequest$Outbound,
  z.ZodTypeDef,
  StackoneListLogsRequest
> = z.object({
  filter: z.nullable(z.lazy(() => QueryParamFilter$outboundSchema)).optional(),
  include: z.nullable(QueryParamInclude$outboundSchema).optional(),
  next: z.nullable(z.string()).optional(),
  orderBy: z.nullable(OrderBy$outboundSchema).optional(),
  orderDirection: z.nullable(OrderDirection$outboundSchema).optional(),
  pageSize: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    orderBy: "order_by",
    orderDirection: "order_direction",
    pageSize: "page_size",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StackoneListLogsRequest$ {
  /** @deprecated use `StackoneListLogsRequest$inboundSchema` instead. */
  export const inboundSchema = StackoneListLogsRequest$inboundSchema;
  /** @deprecated use `StackoneListLogsRequest$outboundSchema` instead. */
  export const outboundSchema = StackoneListLogsRequest$outboundSchema;
  /** @deprecated use `StackoneListLogsRequest$Outbound` instead. */
  export type Outbound = StackoneListLogsRequest$Outbound;
}

export function stackoneListLogsRequestToJSON(
  stackoneListLogsRequest: StackoneListLogsRequest,
): string {
  return JSON.stringify(
    StackoneListLogsRequest$outboundSchema.parse(stackoneListLogsRequest),
  );
}

export function stackoneListLogsRequestFromJSON(
  jsonString: string,
): SafeParseResult<StackoneListLogsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StackoneListLogsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StackoneListLogsRequest' from JSON`,
  );
}

/** @internal */
export const StackoneListLogsResponse$inboundSchema: z.ZodType<
  StackoneListLogsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  UnifiedLogsPaginated: shared.UnifiedLogsPaginated$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "UnifiedLogsPaginated": "unifiedLogsPaginated",
  });
});

/** @internal */
export type StackoneListLogsResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
  UnifiedLogsPaginated?: shared.UnifiedLogsPaginated$Outbound | undefined;
};

/** @internal */
export const StackoneListLogsResponse$outboundSchema: z.ZodType<
  StackoneListLogsResponse$Outbound,
  z.ZodTypeDef,
  StackoneListLogsResponse
> = z.object({
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  unifiedLogsPaginated: shared.UnifiedLogsPaginated$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    unifiedLogsPaginated: "UnifiedLogsPaginated",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StackoneListLogsResponse$ {
  /** @deprecated use `StackoneListLogsResponse$inboundSchema` instead. */
  export const inboundSchema = StackoneListLogsResponse$inboundSchema;
  /** @deprecated use `StackoneListLogsResponse$outboundSchema` instead. */
  export const outboundSchema = StackoneListLogsResponse$outboundSchema;
  /** @deprecated use `StackoneListLogsResponse$Outbound` instead. */
  export type Outbound = StackoneListLogsResponse$Outbound;
}

export function stackoneListLogsResponseToJSON(
  stackoneListLogsResponse: StackoneListLogsResponse,
): string {
  return JSON.stringify(
    StackoneListLogsResponse$outboundSchema.parse(stackoneListLogsResponse),
  );
}

export function stackoneListLogsResponseFromJSON(
  jsonString: string,
): SafeParseResult<StackoneListLogsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StackoneListLogsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StackoneListLogsResponse' from JSON`,
  );
}
