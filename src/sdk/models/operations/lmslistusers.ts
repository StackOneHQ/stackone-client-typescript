/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * LMS Users Filter
 */
export type LmsListUsersQueryParamFilter = {
  /**
   * Filter to select users by email
   */
  email?: string | null | undefined;
  /**
   * Filter to select users by external_reference
   */
  externalReference?: string | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   */
  updatedAfter?: Date | null | undefined;
};

export type LmsListUsersRequest = {
  /**
   * The comma separated list of fields that will be returned in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  /**
   * LMS Users Filter
   */
  filter?: LmsListUsersQueryParamFilter | null | undefined;
  /**
   * The unified cursor
   */
  next?: string | null | undefined;
  /**
   * The page number of the results to fetch
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  page?: string | null | undefined;
  /**
   * The number of results per page (default value is 25)
   */
  pageSize?: string | null | undefined;
  /**
   * Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key
   */
  proxy?: { [k: string]: any } | null | undefined;
  /**
   * Indicates that the raw request result should be returned in addition to the mapped result (default value is false)
   */
  raw?: boolean | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  updatedAfter?: Date | null | undefined;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type LmsListUsersResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The list of users was retrieved.
   */
  usersPaginated?: shared.UsersPaginated | undefined;
};

/** @internal */
export const LmsListUsersQueryParamFilter$inboundSchema: z.ZodType<
  LmsListUsersQueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.nullable(z.string()).optional(),
  external_reference: z.nullable(z.string()).optional(),
  updated_after: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "external_reference": "externalReference",
    "updated_after": "updatedAfter",
  });
});

/** @internal */
export type LmsListUsersQueryParamFilter$Outbound = {
  email?: string | null | undefined;
  external_reference?: string | null | undefined;
  updated_after?: string | null | undefined;
};

/** @internal */
export const LmsListUsersQueryParamFilter$outboundSchema: z.ZodType<
  LmsListUsersQueryParamFilter$Outbound,
  z.ZodTypeDef,
  LmsListUsersQueryParamFilter
> = z.object({
  email: z.nullable(z.string()).optional(),
  externalReference: z.nullable(z.string()).optional(),
  updatedAfter: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    externalReference: "external_reference",
    updatedAfter: "updated_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LmsListUsersQueryParamFilter$ {
  /** @deprecated use `LmsListUsersQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema = LmsListUsersQueryParamFilter$inboundSchema;
  /** @deprecated use `LmsListUsersQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema = LmsListUsersQueryParamFilter$outboundSchema;
  /** @deprecated use `LmsListUsersQueryParamFilter$Outbound` instead. */
  export type Outbound = LmsListUsersQueryParamFilter$Outbound;
}

export function lmsListUsersQueryParamFilterToJSON(
  lmsListUsersQueryParamFilter: LmsListUsersQueryParamFilter,
): string {
  return JSON.stringify(
    LmsListUsersQueryParamFilter$outboundSchema.parse(
      lmsListUsersQueryParamFilter,
    ),
  );
}

export function lmsListUsersQueryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<LmsListUsersQueryParamFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LmsListUsersQueryParamFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LmsListUsersQueryParamFilter' from JSON`,
  );
}

/** @internal */
export const LmsListUsersRequest$inboundSchema: z.ZodType<
  LmsListUsersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(z.lazy(() => LmsListUsersQueryParamFilter$inboundSchema))
    .optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  page_size: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  updated_after: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "updated_after": "updatedAfter",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type LmsListUsersRequest$Outbound = {
  fields?: string | null | undefined;
  filter?: LmsListUsersQueryParamFilter$Outbound | null | undefined;
  next?: string | null | undefined;
  page?: string | null | undefined;
  page_size?: string | null | undefined;
  proxy?: { [k: string]: any } | null | undefined;
  raw?: boolean | null | undefined;
  updated_after?: string | null | undefined;
  "x-account-id": string;
};

/** @internal */
export const LmsListUsersRequest$outboundSchema: z.ZodType<
  LmsListUsersRequest$Outbound,
  z.ZodTypeDef,
  LmsListUsersRequest
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(z.lazy(() => LmsListUsersQueryParamFilter$outboundSchema))
    .optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  pageSize: z.nullable(z.string()).optional(),
  proxy: z.nullable(z.record(z.any())).optional(),
  raw: z.nullable(z.boolean()).optional(),
  updatedAfter: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    updatedAfter: "updated_after",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LmsListUsersRequest$ {
  /** @deprecated use `LmsListUsersRequest$inboundSchema` instead. */
  export const inboundSchema = LmsListUsersRequest$inboundSchema;
  /** @deprecated use `LmsListUsersRequest$outboundSchema` instead. */
  export const outboundSchema = LmsListUsersRequest$outboundSchema;
  /** @deprecated use `LmsListUsersRequest$Outbound` instead. */
  export type Outbound = LmsListUsersRequest$Outbound;
}

export function lmsListUsersRequestToJSON(
  lmsListUsersRequest: LmsListUsersRequest,
): string {
  return JSON.stringify(
    LmsListUsersRequest$outboundSchema.parse(lmsListUsersRequest),
  );
}

export function lmsListUsersRequestFromJSON(
  jsonString: string,
): SafeParseResult<LmsListUsersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LmsListUsersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LmsListUsersRequest' from JSON`,
  );
}

/** @internal */
export const LmsListUsersResponse$inboundSchema: z.ZodType<
  LmsListUsersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),

  Headers: z.record(z.array(z.string())).default({}),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  UsersPaginated: shared.UsersPaginated$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "UsersPaginated": "usersPaginated",
  });
});

/** @internal */
export type LmsListUsersResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
  UsersPaginated?: shared.UsersPaginated$Outbound | undefined;
};

/** @internal */
export const LmsListUsersResponse$outboundSchema: z.ZodType<
  LmsListUsersResponse$Outbound,
  z.ZodTypeDef,
  LmsListUsersResponse
> = z.object({
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  usersPaginated: shared.UsersPaginated$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    usersPaginated: "UsersPaginated",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LmsListUsersResponse$ {
  /** @deprecated use `LmsListUsersResponse$inboundSchema` instead. */
  export const inboundSchema = LmsListUsersResponse$inboundSchema;
  /** @deprecated use `LmsListUsersResponse$outboundSchema` instead. */
  export const outboundSchema = LmsListUsersResponse$outboundSchema;
  /** @deprecated use `LmsListUsersResponse$Outbound` instead. */
  export type Outbound = LmsListUsersResponse$Outbound;
}

export function lmsListUsersResponseToJSON(
  lmsListUsersResponse: LmsListUsersResponse,
): string {
  return JSON.stringify(
    LmsListUsersResponse$outboundSchema.parse(lmsListUsersResponse),
  );
}

export function lmsListUsersResponseFromJSON(
  jsonString: string,
): SafeParseResult<LmsListUsersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LmsListUsersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LmsListUsersResponse' from JSON`,
  );
}
