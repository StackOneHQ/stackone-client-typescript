/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type IamUpdateUserRequest = {
  iamUpdateUserRequestDto: shared.IamUpdateUserRequestDto;
  id: string;
  /**
   * The account identifier
   */
  xAccountId: string;
};

export type IamUpdateUserResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Record updated successfully.
   */
  updateResult?: shared.UpdateResult | undefined;
};

/** @internal */
export const IamUpdateUserRequest$inboundSchema: z.ZodType<
  IamUpdateUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  IamUpdateUserRequestDto: shared.IamUpdateUserRequestDto$inboundSchema,
  id: z.string(),
  "x-account-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "IamUpdateUserRequestDto": "iamUpdateUserRequestDto",
    "x-account-id": "xAccountId",
  });
});

/** @internal */
export type IamUpdateUserRequest$Outbound = {
  IamUpdateUserRequestDto: shared.IamUpdateUserRequestDto$Outbound;
  id: string;
  "x-account-id": string;
};

/** @internal */
export const IamUpdateUserRequest$outboundSchema: z.ZodType<
  IamUpdateUserRequest$Outbound,
  z.ZodTypeDef,
  IamUpdateUserRequest
> = z.object({
  iamUpdateUserRequestDto: shared.IamUpdateUserRequestDto$outboundSchema,
  id: z.string(),
  xAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    iamUpdateUserRequestDto: "IamUpdateUserRequestDto",
    xAccountId: "x-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IamUpdateUserRequest$ {
  /** @deprecated use `IamUpdateUserRequest$inboundSchema` instead. */
  export const inboundSchema = IamUpdateUserRequest$inboundSchema;
  /** @deprecated use `IamUpdateUserRequest$outboundSchema` instead. */
  export const outboundSchema = IamUpdateUserRequest$outboundSchema;
  /** @deprecated use `IamUpdateUserRequest$Outbound` instead. */
  export type Outbound = IamUpdateUserRequest$Outbound;
}

export function iamUpdateUserRequestToJSON(
  iamUpdateUserRequest: IamUpdateUserRequest,
): string {
  return JSON.stringify(
    IamUpdateUserRequest$outboundSchema.parse(iamUpdateUserRequest),
  );
}

export function iamUpdateUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<IamUpdateUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IamUpdateUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IamUpdateUserRequest' from JSON`,
  );
}

/** @internal */
export const IamUpdateUserResponse$inboundSchema: z.ZodType<
  IamUpdateUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),

  Headers: z.record(z.array(z.string())).default({}),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  UpdateResult: shared.UpdateResult$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "UpdateResult": "updateResult",
  });
});

/** @internal */
export type IamUpdateUserResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
  UpdateResult?: shared.UpdateResult$Outbound | undefined;
};

/** @internal */
export const IamUpdateUserResponse$outboundSchema: z.ZodType<
  IamUpdateUserResponse$Outbound,
  z.ZodTypeDef,
  IamUpdateUserResponse
> = z.object({
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  updateResult: shared.UpdateResult$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    updateResult: "UpdateResult",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IamUpdateUserResponse$ {
  /** @deprecated use `IamUpdateUserResponse$inboundSchema` instead. */
  export const inboundSchema = IamUpdateUserResponse$inboundSchema;
  /** @deprecated use `IamUpdateUserResponse$outboundSchema` instead. */
  export const outboundSchema = IamUpdateUserResponse$outboundSchema;
  /** @deprecated use `IamUpdateUserResponse$Outbound` instead. */
  export type Outbound = IamUpdateUserResponse$Outbound;
}

export function iamUpdateUserResponseToJSON(
  iamUpdateUserResponse: IamUpdateUserResponse,
): string {
  return JSON.stringify(
    IamUpdateUserResponse$outboundSchema.parse(iamUpdateUserResponse),
  );
}

export function iamUpdateUserResponseFromJSON(
  jsonString: string,
): SafeParseResult<IamUpdateUserResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IamUpdateUserResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IamUpdateUserResponse' from JSON`,
  );
}
