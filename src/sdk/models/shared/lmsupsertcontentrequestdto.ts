/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types/enums.js";
import {
    ContentLanguageEnum,
    ContentLanguageEnum$inboundSchema,
    ContentLanguageEnum$Outbound,
    ContentLanguageEnum$outboundSchema,
} from "./contentlanguageenum.js";
import {
    CreateCategoriesApiModel,
    CreateCategoriesApiModel$inboundSchema,
    CreateCategoriesApiModel$Outbound,
    CreateCategoriesApiModel$outboundSchema,
} from "./createcategoriesapimodel.js";
import * as z from "zod";

export enum LmsUpsertContentRequestDto2 {
    True = "true",
    False = "false",
}

/**
 * Whether the content is active and available for users.
 */
export type LmsUpsertContentRequestDtoActive = boolean | LmsUpsertContentRequestDto2;

export type LmsUpsertContentRequestDto4 = {};

export type LmsUpsertContentRequestDtoSourceValue =
    | LmsUpsertContentRequestDto4
    | string
    | number
    | boolean;

export enum LmsUpsertContentRequestDtoValue {
    Video = "video",
    Quiz = "quiz",
    Document = "document",
}
export type LmsUpsertContentRequestDtoValueOpen = OpenEnum<typeof LmsUpsertContentRequestDtoValue>;

/**
 * The type of content
 */
export type LmsUpsertContentRequestDtoContentType = {
    sourceValue?: LmsUpsertContentRequestDto4 | string | number | boolean | null | undefined;
    value?: LmsUpsertContentRequestDtoValueOpen | null | undefined;
};

export type LmsUpsertContentRequestDto = {
    /**
     * Whether the content is active and available for users.
     */
    active?: boolean | LmsUpsertContentRequestDto2 | null | undefined;
    /**
     * The categories associated with this content
     */
    categories?: Array<CreateCategoriesApiModel> | null | undefined;
    /**
     * The type of content
     */
    contentType?: LmsUpsertContentRequestDtoContentType | null | undefined;
    /**
     * The external URL of the content
     */
    contentUrl?: string | null | undefined;
    /**
     * The parent IDs associated with this content
     */
    courseIds?: Array<string> | null | undefined;
    /**
     * The URL of the thumbnail image associated with the content.
     */
    coverUrl?: string | null | undefined;
    /**
     * The description of the content
     */
    description?: string | null | undefined;
    /**
     * The duration of the content following the ISO8601 standard. If duration_unit is applicable we will derive this from the smallest unit given in the duration string
     */
    duration?: string | null | undefined;
    /**
     * The external ID associated with this content
     */
    externalReference?: string | null | undefined;
    /**
     * The languages associated with this content
     */
    languages?: Array<ContentLanguageEnum> | null | undefined;
    /**
     * The order of the individual content within a content grouping. This is not applicable for pushing individual content.
     */
    order?: number | null | undefined;
    /**
     * The title of the content
     */
    title?: string | null | undefined;
};

/** @internal */
export const LmsUpsertContentRequestDto2$inboundSchema: z.ZodNativeEnum<
    typeof LmsUpsertContentRequestDto2
> = z.nativeEnum(LmsUpsertContentRequestDto2);

/** @internal */
export const LmsUpsertContentRequestDto2$outboundSchema: z.ZodNativeEnum<
    typeof LmsUpsertContentRequestDto2
> = LmsUpsertContentRequestDto2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LmsUpsertContentRequestDto2$ {
    /** @deprecated use `LmsUpsertContentRequestDto2$inboundSchema` instead. */
    export const inboundSchema = LmsUpsertContentRequestDto2$inboundSchema;
    /** @deprecated use `LmsUpsertContentRequestDto2$outboundSchema` instead. */
    export const outboundSchema = LmsUpsertContentRequestDto2$outboundSchema;
}

/** @internal */
export const LmsUpsertContentRequestDtoActive$inboundSchema: z.ZodType<
    LmsUpsertContentRequestDtoActive,
    z.ZodTypeDef,
    unknown
> = z.union([z.boolean(), LmsUpsertContentRequestDto2$inboundSchema]);

/** @internal */
export type LmsUpsertContentRequestDtoActive$Outbound = boolean | string;

/** @internal */
export const LmsUpsertContentRequestDtoActive$outboundSchema: z.ZodType<
    LmsUpsertContentRequestDtoActive$Outbound,
    z.ZodTypeDef,
    LmsUpsertContentRequestDtoActive
> = z.union([z.boolean(), LmsUpsertContentRequestDto2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LmsUpsertContentRequestDtoActive$ {
    /** @deprecated use `LmsUpsertContentRequestDtoActive$inboundSchema` instead. */
    export const inboundSchema = LmsUpsertContentRequestDtoActive$inboundSchema;
    /** @deprecated use `LmsUpsertContentRequestDtoActive$outboundSchema` instead. */
    export const outboundSchema = LmsUpsertContentRequestDtoActive$outboundSchema;
    /** @deprecated use `LmsUpsertContentRequestDtoActive$Outbound` instead. */
    export type Outbound = LmsUpsertContentRequestDtoActive$Outbound;
}

/** @internal */
export const LmsUpsertContentRequestDto4$inboundSchema: z.ZodType<
    LmsUpsertContentRequestDto4,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type LmsUpsertContentRequestDto4$Outbound = {};

/** @internal */
export const LmsUpsertContentRequestDto4$outboundSchema: z.ZodType<
    LmsUpsertContentRequestDto4$Outbound,
    z.ZodTypeDef,
    LmsUpsertContentRequestDto4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LmsUpsertContentRequestDto4$ {
    /** @deprecated use `LmsUpsertContentRequestDto4$inboundSchema` instead. */
    export const inboundSchema = LmsUpsertContentRequestDto4$inboundSchema;
    /** @deprecated use `LmsUpsertContentRequestDto4$outboundSchema` instead. */
    export const outboundSchema = LmsUpsertContentRequestDto4$outboundSchema;
    /** @deprecated use `LmsUpsertContentRequestDto4$Outbound` instead. */
    export type Outbound = LmsUpsertContentRequestDto4$Outbound;
}

/** @internal */
export const LmsUpsertContentRequestDtoSourceValue$inboundSchema: z.ZodType<
    LmsUpsertContentRequestDtoSourceValue,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => LmsUpsertContentRequestDto4$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
]);

/** @internal */
export type LmsUpsertContentRequestDtoSourceValue$Outbound =
    | LmsUpsertContentRequestDto4$Outbound
    | string
    | number
    | boolean;

/** @internal */
export const LmsUpsertContentRequestDtoSourceValue$outboundSchema: z.ZodType<
    LmsUpsertContentRequestDtoSourceValue$Outbound,
    z.ZodTypeDef,
    LmsUpsertContentRequestDtoSourceValue
> = z.union([
    z.lazy(() => LmsUpsertContentRequestDto4$outboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LmsUpsertContentRequestDtoSourceValue$ {
    /** @deprecated use `LmsUpsertContentRequestDtoSourceValue$inboundSchema` instead. */
    export const inboundSchema = LmsUpsertContentRequestDtoSourceValue$inboundSchema;
    /** @deprecated use `LmsUpsertContentRequestDtoSourceValue$outboundSchema` instead. */
    export const outboundSchema = LmsUpsertContentRequestDtoSourceValue$outboundSchema;
    /** @deprecated use `LmsUpsertContentRequestDtoSourceValue$Outbound` instead. */
    export type Outbound = LmsUpsertContentRequestDtoSourceValue$Outbound;
}

/** @internal */
export const LmsUpsertContentRequestDtoValue$inboundSchema: z.ZodType<
    LmsUpsertContentRequestDtoValueOpen,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.nativeEnum(LmsUpsertContentRequestDtoValue),
    z.string().transform(catchUnrecognizedEnum),
]);

/** @internal */
export const LmsUpsertContentRequestDtoValue$outboundSchema: z.ZodType<
    LmsUpsertContentRequestDtoValueOpen,
    z.ZodTypeDef,
    LmsUpsertContentRequestDtoValueOpen
> = z.union([
    z.nativeEnum(LmsUpsertContentRequestDtoValue),
    z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LmsUpsertContentRequestDtoValue$ {
    /** @deprecated use `LmsUpsertContentRequestDtoValue$inboundSchema` instead. */
    export const inboundSchema = LmsUpsertContentRequestDtoValue$inboundSchema;
    /** @deprecated use `LmsUpsertContentRequestDtoValue$outboundSchema` instead. */
    export const outboundSchema = LmsUpsertContentRequestDtoValue$outboundSchema;
}

/** @internal */
export const LmsUpsertContentRequestDtoContentType$inboundSchema: z.ZodType<
    LmsUpsertContentRequestDtoContentType,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        source_value: z
            .nullable(
                z.union([
                    z.lazy(() => LmsUpsertContentRequestDto4$inboundSchema),
                    z.string(),
                    z.number(),
                    z.boolean(),
                ])
            )
            .optional(),
        value: z.nullable(LmsUpsertContentRequestDtoValue$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            source_value: "sourceValue",
        });
    });

/** @internal */
export type LmsUpsertContentRequestDtoContentType$Outbound = {
    source_value?:
        | LmsUpsertContentRequestDto4$Outbound
        | string
        | number
        | boolean
        | null
        | undefined;
    value?: string | null | undefined;
};

/** @internal */
export const LmsUpsertContentRequestDtoContentType$outboundSchema: z.ZodType<
    LmsUpsertContentRequestDtoContentType$Outbound,
    z.ZodTypeDef,
    LmsUpsertContentRequestDtoContentType
> = z
    .object({
        sourceValue: z
            .nullable(
                z.union([
                    z.lazy(() => LmsUpsertContentRequestDto4$outboundSchema),
                    z.string(),
                    z.number(),
                    z.boolean(),
                ])
            )
            .optional(),
        value: z.nullable(LmsUpsertContentRequestDtoValue$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            sourceValue: "source_value",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LmsUpsertContentRequestDtoContentType$ {
    /** @deprecated use `LmsUpsertContentRequestDtoContentType$inboundSchema` instead. */
    export const inboundSchema = LmsUpsertContentRequestDtoContentType$inboundSchema;
    /** @deprecated use `LmsUpsertContentRequestDtoContentType$outboundSchema` instead. */
    export const outboundSchema = LmsUpsertContentRequestDtoContentType$outboundSchema;
    /** @deprecated use `LmsUpsertContentRequestDtoContentType$Outbound` instead. */
    export type Outbound = LmsUpsertContentRequestDtoContentType$Outbound;
}

/** @internal */
export const LmsUpsertContentRequestDto$inboundSchema: z.ZodType<
    LmsUpsertContentRequestDto,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        active: z
            .nullable(z.union([z.boolean(), LmsUpsertContentRequestDto2$inboundSchema]))
            .optional(),
        categories: z.nullable(z.array(CreateCategoriesApiModel$inboundSchema)).optional(),
        content_type: z
            .nullable(z.lazy(() => LmsUpsertContentRequestDtoContentType$inboundSchema))
            .optional(),
        content_url: z.nullable(z.string()).optional(),
        course_ids: z.nullable(z.array(z.string())).optional(),
        cover_url: z.nullable(z.string()).optional(),
        description: z.nullable(z.string()).optional(),
        duration: z.nullable(z.string()).optional(),
        external_reference: z.nullable(z.string()).optional(),
        languages: z.nullable(z.array(ContentLanguageEnum$inboundSchema)).optional(),
        order: z.nullable(z.number()).optional(),
        title: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            content_type: "contentType",
            content_url: "contentUrl",
            course_ids: "courseIds",
            cover_url: "coverUrl",
            external_reference: "externalReference",
        });
    });

/** @internal */
export type LmsUpsertContentRequestDto$Outbound = {
    active?: boolean | string | null | undefined;
    categories?: Array<CreateCategoriesApiModel$Outbound> | null | undefined;
    content_type?: LmsUpsertContentRequestDtoContentType$Outbound | null | undefined;
    content_url?: string | null | undefined;
    course_ids?: Array<string> | null | undefined;
    cover_url?: string | null | undefined;
    description?: string | null | undefined;
    duration?: string | null | undefined;
    external_reference?: string | null | undefined;
    languages?: Array<ContentLanguageEnum$Outbound> | null | undefined;
    order?: number | null | undefined;
    title?: string | null | undefined;
};

/** @internal */
export const LmsUpsertContentRequestDto$outboundSchema: z.ZodType<
    LmsUpsertContentRequestDto$Outbound,
    z.ZodTypeDef,
    LmsUpsertContentRequestDto
> = z
    .object({
        active: z
            .nullable(z.union([z.boolean(), LmsUpsertContentRequestDto2$outboundSchema]))
            .optional(),
        categories: z.nullable(z.array(CreateCategoriesApiModel$outboundSchema)).optional(),
        contentType: z
            .nullable(z.lazy(() => LmsUpsertContentRequestDtoContentType$outboundSchema))
            .optional(),
        contentUrl: z.nullable(z.string()).optional(),
        courseIds: z.nullable(z.array(z.string())).optional(),
        coverUrl: z.nullable(z.string()).optional(),
        description: z.nullable(z.string()).optional(),
        duration: z.nullable(z.string()).optional(),
        externalReference: z.nullable(z.string()).optional(),
        languages: z.nullable(z.array(ContentLanguageEnum$outboundSchema)).optional(),
        order: z.nullable(z.number()).optional(),
        title: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "content_type",
            contentUrl: "content_url",
            courseIds: "course_ids",
            coverUrl: "cover_url",
            externalReference: "external_reference",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LmsUpsertContentRequestDto$ {
    /** @deprecated use `LmsUpsertContentRequestDto$inboundSchema` instead. */
    export const inboundSchema = LmsUpsertContentRequestDto$inboundSchema;
    /** @deprecated use `LmsUpsertContentRequestDto$outboundSchema` instead. */
    export const outboundSchema = LmsUpsertContentRequestDto$outboundSchema;
    /** @deprecated use `LmsUpsertContentRequestDto$Outbound` instead. */
    export type Outbound = LmsUpsertContentRequestDto$Outbound;
}
