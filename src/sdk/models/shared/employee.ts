/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CostCenters,
  CostCenters$inboundSchema,
  CostCenters$Outbound,
  CostCenters$outboundSchema,
} from "./costcenters.js";
import {
  CountryCodeEnum,
  CountryCodeEnum$inboundSchema,
  CountryCodeEnum$Outbound,
  CountryCodeEnum$outboundSchema,
} from "./countrycodeenum.js";
import {
  CustomFields,
  CustomFields$inboundSchema,
  CustomFields$Outbound,
  CustomFields$outboundSchema,
} from "./customfields.js";
import {
  Employment,
  Employment$inboundSchema,
  Employment$Outbound,
  Employment$outboundSchema,
} from "./employment.js";
import {
  HRISBenefit,
  HRISBenefit$inboundSchema,
  HRISBenefit$Outbound,
  HRISBenefit$outboundSchema,
} from "./hrisbenefit.js";
import {
  HRISGroup,
  HRISGroup$inboundSchema,
  HRISGroup$Outbound,
  HRISGroup$outboundSchema,
} from "./hrisgroup.js";
import {
  NationalIdentityNumberApiModel,
  NationalIdentityNumberApiModel$inboundSchema,
  NationalIdentityNumberApiModel$Outbound,
  NationalIdentityNumberApiModel$outboundSchema,
} from "./nationalidentitynumberapimodel.js";

/**
 * The employee avatar
 */
export type Avatar = {
  base64?: string | null | undefined;
  url?: string | null | undefined;
};

/**
 * The employee company
 */
export type EmployeeCompany = {
  /**
   * The created_at date
   */
  createdAt?: Date | null | undefined;
  /**
   * The display name of the company
   */
  displayName?: string | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The name of the company
   */
  name?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * Custom Unified Fields configured in your StackOne project
   */
  unifiedCustomFields?: { [k: string]: any } | null | undefined;
  /**
   * The updated_at date
   */
  updatedAt?: Date | null | undefined;
};

export type Employee4 = {};

export type EmployeeSourceValue =
  | Employee4
  | string
  | number
  | boolean
  | Array<any>;

export enum EmployeeValue {
  FullTime = "full_time",
  Shifts = "shifts",
  PartTime = "part_time",
  UnmappedValue = "unmapped_value",
}
export type EmployeeValueOpen = OpenEnum<typeof EmployeeValue>;

/**
 * The employment work schedule type (e.g., full-time, part-time)
 *
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type EmployeeEmploymentContractType = {
  sourceValue?:
    | Employee4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: EmployeeValueOpen | null | undefined;
};

export type EmployeeSchemas4 = {};

export type EmployeeSchemasSourceValue =
  | EmployeeSchemas4
  | string
  | number
  | boolean
  | Array<any>;

export enum EmployeeSchemasValue {
  Active = "active",
  Pending = "pending",
  Terminated = "terminated",
  Leave = "leave",
  Inactive = "inactive",
  Unknown = "unknown",
  UnmappedValue = "unmapped_value",
}
export type EmployeeSchemasValueOpen = OpenEnum<typeof EmployeeSchemasValue>;

/**
 * The employee employment status
 */
export type EmploymentStatus = {
  sourceValue?:
    | EmployeeSchemas4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: EmployeeSchemasValueOpen | null | undefined;
};

export type EmployeeSchemasEmploymentType4 = {};

/**
 * The source value of the employment type.
 */
export type EmployeeSchemasEmploymentTypeSourceValue =
  | EmployeeSchemasEmploymentType4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The type of the employment.
 */
export enum EmployeeSchemasEmploymentTypeValue {
  Contractor = "contractor",
  Intern = "intern",
  Permanent = "permanent",
  Apprentice = "apprentice",
  Freelance = "freelance",
  Terminated = "terminated",
  Temporary = "temporary",
  Seasonal = "seasonal",
  Volunteer = "volunteer",
  Probation = "probation",
  Internal = "internal",
  External = "external",
  Expatriate = "expatriate",
  EmployerOfRecord = "employer_of_record",
  Casual = "casual",
  Programme = "Programme",
  UnmappedValue = "unmapped_value",
}
/**
 * The type of the employment.
 */
export type EmployeeSchemasEmploymentTypeValueOpen = OpenEnum<
  typeof EmployeeSchemasEmploymentTypeValue
>;

/**
 * The employee employment type
 *
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type EmployeeEmploymentType = {
  /**
   * The source value of the employment type.
   */
  sourceValue?:
    | EmployeeSchemasEmploymentType4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The type of the employment.
   */
  value?: EmployeeSchemasEmploymentTypeValueOpen | null | undefined;
};

export type EmployeeSchemasEthnicity4 = {};

export type EmployeeSchemasEthnicitySourceValue =
  | EmployeeSchemasEthnicity4
  | string
  | number
  | boolean
  | Array<any>;

export enum EmployeeSchemasEthnicityValue {
  White = "white",
  BlackOrAfricanAmerican = "black_or_african_american",
  Asian = "asian",
  HispanicOrLatino = "hispanic_or_latino",
  AmericanIndianOrAlaskaNative = "american_indian_or_alaska_native",
  NativeHawaiianOrPacificIslander = "native_hawaiian_or_pacific_islander",
  TwoOrMoreRaces = "two_or_more_races",
  NotDisclosed = "not_disclosed",
  Other = "other",
  UnmappedValue = "unmapped_value",
}
export type EmployeeSchemasEthnicityValueOpen = OpenEnum<
  typeof EmployeeSchemasEthnicityValue
>;

/**
 * The employee ethnicity
 */
export type Ethnicity = {
  sourceValue?:
    | EmployeeSchemasEthnicity4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: EmployeeSchemasEthnicityValueOpen | null | undefined;
};

export type EmployeeSchemasGender4 = {};

export type EmployeeSchemasGenderSourceValue =
  | EmployeeSchemasGender4
  | string
  | number
  | boolean
  | Array<any>;

export enum EmployeeSchemasGenderValue {
  Male = "male",
  Female = "female",
  NonBinary = "non_binary",
  Other = "other",
  NotDisclosed = "not_disclosed",
  Diverse = "diverse",
  UnmappedValue = "unmapped_value",
}
export type EmployeeSchemasGenderValueOpen = OpenEnum<
  typeof EmployeeSchemasGenderValue
>;

/**
 * The employee gender
 */
export type Gender = {
  sourceValue?:
    | EmployeeSchemasGender4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: EmployeeSchemasGenderValueOpen | null | undefined;
};

export type EmployeeSchemasHomeLocation4 = {};

export type EmployeeSchemasHomeLocationSourceValue =
  | EmployeeSchemasHomeLocation4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The ISO3166-1 Alpha2 Code of the Country
 */
export enum EmployeeSchemasHomeLocationValue {
  Af = "AF",
  Al = "AL",
  Dz = "DZ",
  As = "AS",
  Ad = "AD",
  Ao = "AO",
  Ai = "AI",
  Aq = "AQ",
  Ag = "AG",
  Ar = "AR",
  Am = "AM",
  Aw = "AW",
  Au = "AU",
  At = "AT",
  Az = "AZ",
  Bs = "BS",
  Bh = "BH",
  Bd = "BD",
  Bb = "BB",
  By = "BY",
  Be = "BE",
  Bz = "BZ",
  Bj = "BJ",
  Bm = "BM",
  Bt = "BT",
  Bo = "BO",
  Bq = "BQ",
  Ba = "BA",
  Bw = "BW",
  Bv = "BV",
  Br = "BR",
  Io = "IO",
  Bn = "BN",
  Bg = "BG",
  Bf = "BF",
  Bi = "BI",
  Kh = "KH",
  Cm = "CM",
  Ca = "CA",
  Cv = "CV",
  Ky = "KY",
  Cf = "CF",
  Td = "TD",
  Cl = "CL",
  Cn = "CN",
  Cx = "CX",
  Cc = "CC",
  Co = "CO",
  Km = "KM",
  Cg = "CG",
  Cd = "CD",
  Ck = "CK",
  Cr = "CR",
  Hr = "HR",
  Cu = "CU",
  Cw = "CW",
  Cy = "CY",
  Cz = "CZ",
  Ci = "CI",
  Dk = "DK",
  Dj = "DJ",
  Dm = "DM",
  Do = "DO",
  Ec = "EC",
  Eg = "EG",
  Sv = "SV",
  Gq = "GQ",
  Er = "ER",
  Ee = "EE",
  Et = "ET",
  Fk = "FK",
  Fo = "FO",
  Fj = "FJ",
  Fi = "FI",
  Fr = "FR",
  Gf = "GF",
  Pf = "PF",
  Tf = "TF",
  Ga = "GA",
  Gm = "GM",
  Ge = "GE",
  De = "DE",
  Gh = "GH",
  Gi = "GI",
  Gr = "GR",
  Gl = "GL",
  Gd = "GD",
  Gp = "GP",
  Gu = "GU",
  Gt = "GT",
  Gg = "GG",
  Gn = "GN",
  Gw = "GW",
  Gy = "GY",
  Ht = "HT",
  Hm = "HM",
  Va = "VA",
  Hn = "HN",
  Hk = "HK",
  Hu = "HU",
  Is = "IS",
  In = "IN",
  Id = "ID",
  Ir = "IR",
  Iq = "IQ",
  Ie = "IE",
  Im = "IM",
  Il = "IL",
  It = "IT",
  Jm = "JM",
  Jp = "JP",
  Je = "JE",
  Jo = "JO",
  Kz = "KZ",
  Ke = "KE",
  Ki = "KI",
  Kp = "KP",
  Kr = "KR",
  Kw = "KW",
  Kg = "KG",
  La = "LA",
  Lv = "LV",
  Lb = "LB",
  Ls = "LS",
  Lr = "LR",
  Ly = "LY",
  Li = "LI",
  Lt = "LT",
  Lu = "LU",
  Mo = "MO",
  Mk = "MK",
  Mg = "MG",
  Mw = "MW",
  My = "MY",
  Mv = "MV",
  Ml = "ML",
  Mt = "MT",
  Mh = "MH",
  Mq = "MQ",
  Mr = "MR",
  Mu = "MU",
  Yt = "YT",
  Mx = "MX",
  Fm = "FM",
  Md = "MD",
  Mc = "MC",
  Mn = "MN",
  Me = "ME",
  Ms = "MS",
  Ma = "MA",
  Mz = "MZ",
  Mm = "MM",
  Na = "NA",
  Nr = "NR",
  Np = "NP",
  Nl = "NL",
  Nc = "NC",
  Nz = "NZ",
  Ni = "NI",
  Ne = "NE",
  Ng = "NG",
  Nu = "NU",
  Nf = "NF",
  Mp = "MP",
  No = "NO",
  Om = "OM",
  Pk = "PK",
  Pw = "PW",
  Ps = "PS",
  Pa = "PA",
  Pg = "PG",
  Py = "PY",
  Pe = "PE",
  Ph = "PH",
  Pn = "PN",
  Pl = "PL",
  Pt = "PT",
  Pr = "PR",
  Qa = "QA",
  Ro = "RO",
  Ru = "RU",
  Rw = "RW",
  Re = "RE",
  Bl = "BL",
  Sh = "SH",
  Kn = "KN",
  Lc = "LC",
  Mf = "MF",
  Pm = "PM",
  Vc = "VC",
  Ws = "WS",
  Sm = "SM",
  St = "ST",
  Sa = "SA",
  Sn = "SN",
  Rs = "RS",
  Sc = "SC",
  Sl = "SL",
  Sg = "SG",
  Sx = "SX",
  Sk = "SK",
  Si = "SI",
  Sb = "SB",
  So = "SO",
  Za = "ZA",
  Gs = "GS",
  Ss = "SS",
  Es = "ES",
  Lk = "LK",
  Sd = "SD",
  Sr = "SR",
  Sj = "SJ",
  Sz = "SZ",
  Se = "SE",
  Ch = "CH",
  Sy = "SY",
  Tw = "TW",
  Tj = "TJ",
  Tz = "TZ",
  Th = "TH",
  Tl = "TL",
  Tg = "TG",
  Tk = "TK",
  To = "TO",
  Tt = "TT",
  Tn = "TN",
  Tr = "TR",
  Tm = "TM",
  Tc = "TC",
  Tv = "TV",
  Ug = "UG",
  Ua = "UA",
  Ae = "AE",
  Gb = "GB",
  Us = "US",
  Um = "UM",
  Uy = "UY",
  Uz = "UZ",
  Vu = "VU",
  Ve = "VE",
  Vn = "VN",
  Vg = "VG",
  Vi = "VI",
  Wf = "WF",
  Eh = "EH",
  Ye = "YE",
  Zm = "ZM",
  Zw = "ZW",
  UnmappedValue = "unmapped_value",
}
/**
 * The ISO3166-1 Alpha2 Code of the Country
 */
export type EmployeeSchemasHomeLocationValueOpen = OpenEnum<
  typeof EmployeeSchemasHomeLocationValue
>;

/**
 * The country code
 */
export type EmployeeCountry = {
  sourceValue?:
    | EmployeeSchemasHomeLocation4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The ISO3166-1 Alpha2 Code of the Country
   */
  value?: EmployeeSchemasHomeLocationValueOpen | null | undefined;
};

export type EmployeeSchemasHomeLocationLocationType4 = {};

/**
 * The source value of the location type.
 */
export type EmployeeSchemasHomeLocationLocationTypeSourceValue =
  | EmployeeSchemasHomeLocationLocationType4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The type of the location.
 */
export enum EmployeeSchemasHomeLocationLocationTypeValue {
  Home = "home",
  Work = "work",
  UnmappedValue = "unmapped_value",
}
/**
 * The type of the location.
 */
export type EmployeeSchemasHomeLocationLocationTypeValueOpen = OpenEnum<
  typeof EmployeeSchemasHomeLocationLocationTypeValue
>;

/**
 * The location type
 */
export type EmployeeLocationType = {
  /**
   * The source value of the location type.
   */
  sourceValue?:
    | EmployeeSchemasHomeLocationLocationType4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The type of the location.
   */
  value?: EmployeeSchemasHomeLocationLocationTypeValueOpen | null | undefined;
};

/**
 * The employee home location
 */
export type HomeLocation = {
  /**
   * The city where the location is situated
   */
  city?: string | null | undefined;
  /**
   * The country code
   */
  country?: EmployeeCountry | null | undefined;
  /**
   * The created_at date
   */
  createdAt?: Date | null | undefined;
  /**
   * The employee ID
   */
  employeeId?: string | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The location type
   */
  locationType?: EmployeeLocationType | null | undefined;
  /**
   * The name of the location
   */
  name?: string | null | undefined;
  /**
   * The phone number of the location
   */
  phoneNumber?: string | null | undefined;
  /**
   * Provider's unique identifier of the employee
   */
  remoteEmployeeId?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * The state where the location is situated
   */
  state?: string | null | undefined;
  /**
   * The first line of the address
   */
  street1?: string | null | undefined;
  /**
   * The second line of the address
   */
  street2?: string | null | undefined;
  /**
   * Custom Unified Fields configured in your StackOne project
   */
  unifiedCustomFields?: { [k: string]: any } | null | undefined;
  /**
   * The updated_at date
   */
  updatedAt?: Date | null | undefined;
  /**
   * The ZIP code/Postal code of the location
   */
  zipCode?: string | null | undefined;
};

/**
 * The employee job description
 *
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type JobDescription = {
  text?: string | null | undefined;
};

export type EmployeeSchemasMaritalStatus4 = {};

export type EmployeeSchemasMaritalStatusSourceValue =
  | EmployeeSchemasMaritalStatus4
  | string
  | number
  | boolean
  | Array<any>;

export enum EmployeeSchemasMaritalStatusValue {
  Single = "single",
  Married = "married",
  CommonLaw = "common_law",
  Divorced = "divorced",
  Widowed = "widowed",
  DomesticPartnership = "domestic_partnership",
  Separated = "separated",
  Other = "other",
  NotDisclosed = "not_disclosed",
  UnmappedValue = "unmapped_value",
}
export type EmployeeSchemasMaritalStatusValueOpen = OpenEnum<
  typeof EmployeeSchemasMaritalStatusValue
>;

/**
 * The employee marital status
 */
export type MaritalStatus = {
  sourceValue?:
    | EmployeeSchemasMaritalStatus4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: EmployeeSchemasMaritalStatusValueOpen | null | undefined;
};

export type EmployeeSchemasNationalIdentityNumber4 = {};

export type EmployeeSchemasNationalIdentityNumberSourceValue =
  | EmployeeSchemasNationalIdentityNumber4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The ISO3166-1 Alpha2 Code of the Country
 */
export enum EmployeeSchemasNationalIdentityNumberValue {
  Af = "AF",
  Al = "AL",
  Dz = "DZ",
  As = "AS",
  Ad = "AD",
  Ao = "AO",
  Ai = "AI",
  Aq = "AQ",
  Ag = "AG",
  Ar = "AR",
  Am = "AM",
  Aw = "AW",
  Au = "AU",
  At = "AT",
  Az = "AZ",
  Bs = "BS",
  Bh = "BH",
  Bd = "BD",
  Bb = "BB",
  By = "BY",
  Be = "BE",
  Bz = "BZ",
  Bj = "BJ",
  Bm = "BM",
  Bt = "BT",
  Bo = "BO",
  Bq = "BQ",
  Ba = "BA",
  Bw = "BW",
  Bv = "BV",
  Br = "BR",
  Io = "IO",
  Bn = "BN",
  Bg = "BG",
  Bf = "BF",
  Bi = "BI",
  Kh = "KH",
  Cm = "CM",
  Ca = "CA",
  Cv = "CV",
  Ky = "KY",
  Cf = "CF",
  Td = "TD",
  Cl = "CL",
  Cn = "CN",
  Cx = "CX",
  Cc = "CC",
  Co = "CO",
  Km = "KM",
  Cg = "CG",
  Cd = "CD",
  Ck = "CK",
  Cr = "CR",
  Hr = "HR",
  Cu = "CU",
  Cw = "CW",
  Cy = "CY",
  Cz = "CZ",
  Ci = "CI",
  Dk = "DK",
  Dj = "DJ",
  Dm = "DM",
  Do = "DO",
  Ec = "EC",
  Eg = "EG",
  Sv = "SV",
  Gq = "GQ",
  Er = "ER",
  Ee = "EE",
  Et = "ET",
  Fk = "FK",
  Fo = "FO",
  Fj = "FJ",
  Fi = "FI",
  Fr = "FR",
  Gf = "GF",
  Pf = "PF",
  Tf = "TF",
  Ga = "GA",
  Gm = "GM",
  Ge = "GE",
  De = "DE",
  Gh = "GH",
  Gi = "GI",
  Gr = "GR",
  Gl = "GL",
  Gd = "GD",
  Gp = "GP",
  Gu = "GU",
  Gt = "GT",
  Gg = "GG",
  Gn = "GN",
  Gw = "GW",
  Gy = "GY",
  Ht = "HT",
  Hm = "HM",
  Va = "VA",
  Hn = "HN",
  Hk = "HK",
  Hu = "HU",
  Is = "IS",
  In = "IN",
  Id = "ID",
  Ir = "IR",
  Iq = "IQ",
  Ie = "IE",
  Im = "IM",
  Il = "IL",
  It = "IT",
  Jm = "JM",
  Jp = "JP",
  Je = "JE",
  Jo = "JO",
  Kz = "KZ",
  Ke = "KE",
  Ki = "KI",
  Kp = "KP",
  Kr = "KR",
  Kw = "KW",
  Kg = "KG",
  La = "LA",
  Lv = "LV",
  Lb = "LB",
  Ls = "LS",
  Lr = "LR",
  Ly = "LY",
  Li = "LI",
  Lt = "LT",
  Lu = "LU",
  Mo = "MO",
  Mk = "MK",
  Mg = "MG",
  Mw = "MW",
  My = "MY",
  Mv = "MV",
  Ml = "ML",
  Mt = "MT",
  Mh = "MH",
  Mq = "MQ",
  Mr = "MR",
  Mu = "MU",
  Yt = "YT",
  Mx = "MX",
  Fm = "FM",
  Md = "MD",
  Mc = "MC",
  Mn = "MN",
  Me = "ME",
  Ms = "MS",
  Ma = "MA",
  Mz = "MZ",
  Mm = "MM",
  Na = "NA",
  Nr = "NR",
  Np = "NP",
  Nl = "NL",
  Nc = "NC",
  Nz = "NZ",
  Ni = "NI",
  Ne = "NE",
  Ng = "NG",
  Nu = "NU",
  Nf = "NF",
  Mp = "MP",
  No = "NO",
  Om = "OM",
  Pk = "PK",
  Pw = "PW",
  Ps = "PS",
  Pa = "PA",
  Pg = "PG",
  Py = "PY",
  Pe = "PE",
  Ph = "PH",
  Pn = "PN",
  Pl = "PL",
  Pt = "PT",
  Pr = "PR",
  Qa = "QA",
  Ro = "RO",
  Ru = "RU",
  Rw = "RW",
  Re = "RE",
  Bl = "BL",
  Sh = "SH",
  Kn = "KN",
  Lc = "LC",
  Mf = "MF",
  Pm = "PM",
  Vc = "VC",
  Ws = "WS",
  Sm = "SM",
  St = "ST",
  Sa = "SA",
  Sn = "SN",
  Rs = "RS",
  Sc = "SC",
  Sl = "SL",
  Sg = "SG",
  Sx = "SX",
  Sk = "SK",
  Si = "SI",
  Sb = "SB",
  So = "SO",
  Za = "ZA",
  Gs = "GS",
  Ss = "SS",
  Es = "ES",
  Lk = "LK",
  Sd = "SD",
  Sr = "SR",
  Sj = "SJ",
  Sz = "SZ",
  Se = "SE",
  Ch = "CH",
  Sy = "SY",
  Tw = "TW",
  Tj = "TJ",
  Tz = "TZ",
  Th = "TH",
  Tl = "TL",
  Tg = "TG",
  Tk = "TK",
  To = "TO",
  Tt = "TT",
  Tn = "TN",
  Tr = "TR",
  Tm = "TM",
  Tc = "TC",
  Tv = "TV",
  Ug = "UG",
  Ua = "UA",
  Ae = "AE",
  Gb = "GB",
  Us = "US",
  Um = "UM",
  Uy = "UY",
  Uz = "UZ",
  Vu = "VU",
  Ve = "VE",
  Vn = "VN",
  Vg = "VG",
  Vi = "VI",
  Wf = "WF",
  Eh = "EH",
  Ye = "YE",
  Zm = "ZM",
  Zw = "ZW",
  UnmappedValue = "unmapped_value",
}
/**
 * The ISO3166-1 Alpha2 Code of the Country
 */
export type EmployeeSchemasNationalIdentityNumberValueOpen = OpenEnum<
  typeof EmployeeSchemasNationalIdentityNumberValue
>;

/**
 * The country code
 */
export type EmployeeSchemasCountry = {
  sourceValue?:
    | EmployeeSchemasNationalIdentityNumber4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The ISO3166-1 Alpha2 Code of the Country
   */
  value?: EmployeeSchemasNationalIdentityNumberValueOpen | null | undefined;
};

export type EmployeeSchemasNationalIdentityNumberType4 = {};

export type EmployeeSchemasNationalIdentityNumberTypeSourceValue =
  | EmployeeSchemasNationalIdentityNumberType4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The type of the national identity number
 */
export enum EmployeeSchemasNationalIdentityNumberTypeValue {
  Ssn = "ssn",
  Nin = "nin",
  Sin = "sin",
  Nid = "nid",
  Pin = "pin",
  Pn = "pn",
  Umcn = "umcn",
  Pic = "pic",
  Ric = "ric",
  Idnum = "idnum",
  Cid = "cid",
  Nidnr = "nidnr",
  Pan = "pan",
  Aadhaar = "aadhaar",
  Epic = "epic",
  Ptn = "ptn",
  Itin = "itin",
  Tin = "tin",
  Uprc = "uprc",
  Pcode = "pcode",
  Ssi = "ssi",
  Cedula = "cedula",
  Passport = "passport",
  Voterid = "voterid",
  Ntin = "ntin",
  Bn = "bn",
  Fnr = "fnr",
  Mva = "mva",
  CivilId = "civil_id",
  Cnic = "cnic",
  Nric = "nric",
  Fin = "fin",
  Uen = "uen",
  Registrationnumber = "registrationnumber",
  Nic = "nic",
  Personnummer = "personnummer",
  Ahv = "ahv",
  Id = "id",
  Eid = "eid",
  Va = "va",
  Pid = "pid",
  Nrt = "nrt",
  Nipt = "nipt",
  Cbu = "cbu",
  Cuit = "cuit",
  Dni = "dni",
  Businessid = "businessid",
  Vnr = "vnr",
  Abn = "abn",
  Acn = "acn",
  Tfn = "tfn",
  Jmbg = "jmbg",
  Bis = "bis",
  Insz = "insz",
  Nn = "nn",
  Egn = "egn",
  Pnf = "pnf",
  Vat = "vat",
  Cnpj = "cnpj",
  Unp = "unp",
  Gst = "gst",
  Pst = "pst",
  Qst = "qst",
  Ni = "ni",
  Dic = "dic",
  Rc = "rc",
  Uid = "uid",
  Rut = "rut",
  Uscc = "uscc",
  Cpf = "cpf",
  Cpj = "cpj",
  Cr = "cr",
  Stnr = "stnr",
  Svnr = "svnr",
  Ncf = "ncf",
  Rnc = "rnc",
  Nif = "nif",
  Ci = "ci",
  Ik = "ik",
  Kmkr = "kmkr",
  Registrikood = "registrikood",
  Tn = "tn",
  Ruc = "ruc",
  Nit = "nit",
  Alv = "alv",
  Hetu = "hetu",
  Ytunnus = "ytunnus",
  Vn = "vn",
  Utr = "utr",
  Nifp = "nifp",
  Amka = "amka",
  Cui = "cui",
  Nir = "nir",
  Siren = "siren",
  Siret = "siret",
  Tva = "tva",
  Oib = "oib",
  Hkid = "hkid",
  Anum = "anum",
  Kennitala = "kennitala",
  Vsk = "vsk",
  Npwp = "npwp",
  Pps = "pps",
  Gstin = "gstin",
  Idnr = "idnr",
  Hr = "hr",
  Aic = "aic",
  Codicefiscale = "codicefiscale",
  Iva = "iva",
  Peid = "peid",
  Asmens = "asmens",
  Pvm = "pvm",
  Ctps = "ctps",
  Vrn = "vrn",
  Vtk = "vtk",
  Int = "int",
  Tk = "tk",
  Pas = "pas",
  Rne = "rne",
  Rg = "rg",
  Nci = "nci",
  Crnm = "crnm",
  Pis = "pis",
  Insee = "insee",
  Tax = "tax",
  Mpf = "mpf",
  Epfo = "epfo",
  Esi = "esi",
  Pran = "pran",
  Uan = "uan",
  Idk = "idk",
  Bsn = "bsn",
  Mid = "mid",
  Sss = "sss",
  Nie = "nie",
  Nss = "nss",
  Arc = "arc",
  Curp = "curp",
  Imss = "imss",
  Rfc = "rfc",
  Ein = "ein",
  Other = "other",
  Unknown = "unknown",
}
/**
 * The type of the national identity number
 */
export type EmployeeSchemasNationalIdentityNumberTypeValueOpen = OpenEnum<
  typeof EmployeeSchemasNationalIdentityNumberTypeValue
>;

export type EmployeeType = {
  sourceValue?:
    | EmployeeSchemasNationalIdentityNumberType4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The type of the national identity number
   */
  value?: EmployeeSchemasNationalIdentityNumberTypeValueOpen | null | undefined;
};

/**
 * The national identity number
 *
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type NationalIdentityNumber = {
  /**
   * The country code
   */
  country?: EmployeeSchemasCountry | null | undefined;
  type?: EmployeeType | null | undefined;
  value?: string | null | undefined;
};

export type EmployeeSchemasPreferredLanguage4 = {};

export type EmployeeSchemasPreferredLanguageSourceValue =
  | EmployeeSchemasPreferredLanguage4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The ISO639-2 Code of the language
 */
export enum EmployeeSchemasPreferredLanguageValue {
  Aar = "aar",
  Afr = "afr",
  Amh = "amh",
  Ara = "ara",
  Aym = "aym",
  Aze = "aze",
  Bel = "bel",
  Bul = "bul",
  Bis = "bis",
  Ben = "ben",
  Bos = "bos",
  Byn = "byn",
  Cat = "cat",
  Cha = "cha",
  Ces = "ces",
  Deu = "deu",
  Div = "div",
  Dzo = "dzo",
  Ell = "ell",
  Eng = "eng",
  Spa = "spa",
  Est = "est",
  Fas = "fas",
  Fan = "fan",
  Ful = "ful",
  Fin = "fin",
  Fij = "fij",
  Fao = "fao",
  Fra = "fra",
  Gle = "gle",
  Grn = "grn",
  Glv = "glv",
  Heb = "heb",
  Hin = "hin",
  Hrv = "hrv",
  Hat = "hat",
  Hun = "hun",
  Hye = "hye",
  Ind = "ind",
  Isl = "isl",
  Ita = "ita",
  Jpn = "jpn",
  Kat = "kat",
  Kon = "kon",
  Kaz = "kaz",
  Kal = "kal",
  Khm = "khm",
  Kor = "kor",
  Kur = "kur",
  Kir = "kir",
  Lat = "lat",
  Ltz = "ltz",
  Lin = "lin",
  Lao = "lao",
  Lit = "lit",
  Lub = "lub",
  Lav = "lav",
  Mlg = "mlg",
  Mah = "mah",
  Mri = "mri",
  Mkd = "mkd",
  Msa = "msa",
  Mlt = "mlt",
  Mya = "mya",
  Nob = "nob",
  Nep = "nep",
  Nld = "nld",
  Nno = "nno",
  Nor = "nor",
  Nbl = "nbl",
  Nya = "nya",
  Pan = "pan",
  Pol = "pol",
  Pus = "pus",
  Por = "por",
  Rar = "rar",
  Roh = "roh",
  Rup = "rup",
  Ron = "ron",
  Rus = "rus",
  Kin = "kin",
  Sag = "sag",
  Sin = "sin",
  Slk = "slk",
  Smo = "smo",
  Sna = "sna",
  Som = "som",
  Sqi = "sqi",
  Srp = "srp",
  Ssw = "ssw",
  Swe = "swe",
  Swa = "swa",
  Tam = "tam",
  Tgk = "tgk",
  Tha = "tha",
  Tir = "tir",
  Tig = "tig",
  Zho = "zho",
  UnmappedValue = "unmapped_value",
}
/**
 * The ISO639-2 Code of the language
 */
export type EmployeeSchemasPreferredLanguageValueOpen = OpenEnum<
  typeof EmployeeSchemasPreferredLanguageValue
>;

/**
 * The employee preferred language
 */
export type PreferredLanguage = {
  sourceValue?:
    | EmployeeSchemasPreferredLanguage4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The ISO639-2 Code of the language
   */
  value?: EmployeeSchemasPreferredLanguageValueOpen | null | undefined;
};

export type EmployeeSchemasWorkLocation4 = {};

export type EmployeeSchemasWorkLocationSourceValue =
  | EmployeeSchemasWorkLocation4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The ISO3166-1 Alpha2 Code of the Country
 */
export enum EmployeeSchemasWorkLocationValue {
  Af = "AF",
  Al = "AL",
  Dz = "DZ",
  As = "AS",
  Ad = "AD",
  Ao = "AO",
  Ai = "AI",
  Aq = "AQ",
  Ag = "AG",
  Ar = "AR",
  Am = "AM",
  Aw = "AW",
  Au = "AU",
  At = "AT",
  Az = "AZ",
  Bs = "BS",
  Bh = "BH",
  Bd = "BD",
  Bb = "BB",
  By = "BY",
  Be = "BE",
  Bz = "BZ",
  Bj = "BJ",
  Bm = "BM",
  Bt = "BT",
  Bo = "BO",
  Bq = "BQ",
  Ba = "BA",
  Bw = "BW",
  Bv = "BV",
  Br = "BR",
  Io = "IO",
  Bn = "BN",
  Bg = "BG",
  Bf = "BF",
  Bi = "BI",
  Kh = "KH",
  Cm = "CM",
  Ca = "CA",
  Cv = "CV",
  Ky = "KY",
  Cf = "CF",
  Td = "TD",
  Cl = "CL",
  Cn = "CN",
  Cx = "CX",
  Cc = "CC",
  Co = "CO",
  Km = "KM",
  Cg = "CG",
  Cd = "CD",
  Ck = "CK",
  Cr = "CR",
  Hr = "HR",
  Cu = "CU",
  Cw = "CW",
  Cy = "CY",
  Cz = "CZ",
  Ci = "CI",
  Dk = "DK",
  Dj = "DJ",
  Dm = "DM",
  Do = "DO",
  Ec = "EC",
  Eg = "EG",
  Sv = "SV",
  Gq = "GQ",
  Er = "ER",
  Ee = "EE",
  Et = "ET",
  Fk = "FK",
  Fo = "FO",
  Fj = "FJ",
  Fi = "FI",
  Fr = "FR",
  Gf = "GF",
  Pf = "PF",
  Tf = "TF",
  Ga = "GA",
  Gm = "GM",
  Ge = "GE",
  De = "DE",
  Gh = "GH",
  Gi = "GI",
  Gr = "GR",
  Gl = "GL",
  Gd = "GD",
  Gp = "GP",
  Gu = "GU",
  Gt = "GT",
  Gg = "GG",
  Gn = "GN",
  Gw = "GW",
  Gy = "GY",
  Ht = "HT",
  Hm = "HM",
  Va = "VA",
  Hn = "HN",
  Hk = "HK",
  Hu = "HU",
  Is = "IS",
  In = "IN",
  Id = "ID",
  Ir = "IR",
  Iq = "IQ",
  Ie = "IE",
  Im = "IM",
  Il = "IL",
  It = "IT",
  Jm = "JM",
  Jp = "JP",
  Je = "JE",
  Jo = "JO",
  Kz = "KZ",
  Ke = "KE",
  Ki = "KI",
  Kp = "KP",
  Kr = "KR",
  Kw = "KW",
  Kg = "KG",
  La = "LA",
  Lv = "LV",
  Lb = "LB",
  Ls = "LS",
  Lr = "LR",
  Ly = "LY",
  Li = "LI",
  Lt = "LT",
  Lu = "LU",
  Mo = "MO",
  Mk = "MK",
  Mg = "MG",
  Mw = "MW",
  My = "MY",
  Mv = "MV",
  Ml = "ML",
  Mt = "MT",
  Mh = "MH",
  Mq = "MQ",
  Mr = "MR",
  Mu = "MU",
  Yt = "YT",
  Mx = "MX",
  Fm = "FM",
  Md = "MD",
  Mc = "MC",
  Mn = "MN",
  Me = "ME",
  Ms = "MS",
  Ma = "MA",
  Mz = "MZ",
  Mm = "MM",
  Na = "NA",
  Nr = "NR",
  Np = "NP",
  Nl = "NL",
  Nc = "NC",
  Nz = "NZ",
  Ni = "NI",
  Ne = "NE",
  Ng = "NG",
  Nu = "NU",
  Nf = "NF",
  Mp = "MP",
  No = "NO",
  Om = "OM",
  Pk = "PK",
  Pw = "PW",
  Ps = "PS",
  Pa = "PA",
  Pg = "PG",
  Py = "PY",
  Pe = "PE",
  Ph = "PH",
  Pn = "PN",
  Pl = "PL",
  Pt = "PT",
  Pr = "PR",
  Qa = "QA",
  Ro = "RO",
  Ru = "RU",
  Rw = "RW",
  Re = "RE",
  Bl = "BL",
  Sh = "SH",
  Kn = "KN",
  Lc = "LC",
  Mf = "MF",
  Pm = "PM",
  Vc = "VC",
  Ws = "WS",
  Sm = "SM",
  St = "ST",
  Sa = "SA",
  Sn = "SN",
  Rs = "RS",
  Sc = "SC",
  Sl = "SL",
  Sg = "SG",
  Sx = "SX",
  Sk = "SK",
  Si = "SI",
  Sb = "SB",
  So = "SO",
  Za = "ZA",
  Gs = "GS",
  Ss = "SS",
  Es = "ES",
  Lk = "LK",
  Sd = "SD",
  Sr = "SR",
  Sj = "SJ",
  Sz = "SZ",
  Se = "SE",
  Ch = "CH",
  Sy = "SY",
  Tw = "TW",
  Tj = "TJ",
  Tz = "TZ",
  Th = "TH",
  Tl = "TL",
  Tg = "TG",
  Tk = "TK",
  To = "TO",
  Tt = "TT",
  Tn = "TN",
  Tr = "TR",
  Tm = "TM",
  Tc = "TC",
  Tv = "TV",
  Ug = "UG",
  Ua = "UA",
  Ae = "AE",
  Gb = "GB",
  Us = "US",
  Um = "UM",
  Uy = "UY",
  Uz = "UZ",
  Vu = "VU",
  Ve = "VE",
  Vn = "VN",
  Vg = "VG",
  Vi = "VI",
  Wf = "WF",
  Eh = "EH",
  Ye = "YE",
  Zm = "ZM",
  Zw = "ZW",
  UnmappedValue = "unmapped_value",
}
/**
 * The ISO3166-1 Alpha2 Code of the Country
 */
export type EmployeeSchemasWorkLocationValueOpen = OpenEnum<
  typeof EmployeeSchemasWorkLocationValue
>;

/**
 * The country code
 */
export type EmployeeSchemasWorkLocationCountry = {
  sourceValue?:
    | EmployeeSchemasWorkLocation4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The ISO3166-1 Alpha2 Code of the Country
   */
  value?: EmployeeSchemasWorkLocationValueOpen | null | undefined;
};

export type EmployeeSchemasWorkLocationLocationType4 = {};

/**
 * The source value of the location type.
 */
export type EmployeeSchemasWorkLocationLocationTypeSourceValue =
  | EmployeeSchemasWorkLocationLocationType4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The type of the location.
 */
export enum EmployeeSchemasWorkLocationLocationTypeValue {
  Home = "home",
  Work = "work",
  UnmappedValue = "unmapped_value",
}
/**
 * The type of the location.
 */
export type EmployeeSchemasWorkLocationLocationTypeValueOpen = OpenEnum<
  typeof EmployeeSchemasWorkLocationLocationTypeValue
>;

/**
 * The location type
 */
export type EmployeeSchemasLocationType = {
  /**
   * The source value of the location type.
   */
  sourceValue?:
    | EmployeeSchemasWorkLocationLocationType4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The type of the location.
   */
  value?: EmployeeSchemasWorkLocationLocationTypeValueOpen | null | undefined;
};

/**
 * The employee work location
 */
export type WorkLocation = {
  /**
   * The city where the location is situated
   */
  city?: string | null | undefined;
  /**
   * The country code
   */
  country?: EmployeeSchemasWorkLocationCountry | null | undefined;
  /**
   * The created_at date
   */
  createdAt?: Date | null | undefined;
  /**
   * The employee ID
   */
  employeeId?: string | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The location type
   */
  locationType?: EmployeeSchemasLocationType | null | undefined;
  /**
   * The name of the location
   */
  name?: string | null | undefined;
  /**
   * The phone number of the location
   */
  phoneNumber?: string | null | undefined;
  /**
   * Provider's unique identifier of the employee
   */
  remoteEmployeeId?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * The state where the location is situated
   */
  state?: string | null | undefined;
  /**
   * The first line of the address
   */
  street1?: string | null | undefined;
  /**
   * The second line of the address
   */
  street2?: string | null | undefined;
  /**
   * Custom Unified Fields configured in your StackOne project
   */
  unifiedCustomFields?: { [k: string]: any } | null | undefined;
  /**
   * The updated_at date
   */
  updatedAt?: Date | null | undefined;
  /**
   * The ZIP code/Postal code of the location
   */
  zipCode?: string | null | undefined;
};

export type Employee = {
  /**
   * The employee avatar
   */
  avatar?: Avatar | null | undefined;
  /**
   * The employee avatar Url
   */
  avatarUrl?: string | null | undefined;
  /**
   * Current benefits of the employee
   */
  benefits?: Array<HRISBenefit> | null | undefined;
  /**
   * The employee birthday
   */
  birthday?: Date | null | undefined;
  /**
   * The citizenships of the Employee
   */
  citizenships?: Array<CountryCodeEnum> | null | undefined;
  /**
   * The employee company
   */
  company?: EmployeeCompany | null | undefined;
  /**
   * The employee company id
   */
  companyId?: string | null | undefined;
  /**
   * The employee company name
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  companyName?: string | null | undefined;
  /**
   * The employee cost centers
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  costCenters?: Array<CostCenters> | null | undefined;
  /**
   * The created_at date
   */
  createdAt?: Date | null | undefined;
  /**
   * The employee custom fields
   */
  customFields?: Array<CustomFields> | null | undefined;
  /**
   * The employee date_of_birth
   */
  dateOfBirth?: Date | null | undefined;
  /**
   * The employee department
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  department?: string | null | undefined;
  /**
   * The employee department id
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  departmentId?: string | null | undefined;
  /**
   * The employee display name
   */
  displayName?: string | null | undefined;
  /**
   * The assigned employee number
   */
  employeeNumber?: string | null | undefined;
  /**
   * The employment work schedule type (e.g., full-time, part-time)
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  employmentContractType?: EmployeeEmploymentContractType | null | undefined;
  /**
   * The employee employment status
   */
  employmentStatus?: EmploymentStatus | null | undefined;
  /**
   * The employee employment type
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  employmentType?: EmployeeEmploymentType | null | undefined;
  /**
   * The employee employments
   */
  employments?: Array<Employment> | null | undefined;
  /**
   * The employee ethnicity
   */
  ethnicity?: Ethnicity | null | undefined;
  /**
   * The employee first name
   */
  firstName?: string | null | undefined;
  /**
   * The employee gender
   */
  gender?: Gender | null | undefined;
  /**
   * The employee groups
   */
  groups?: Array<HRISGroup> | null | undefined;
  /**
   * The employee hire date
   */
  hireDate?: Date | null | undefined;
  /**
   * The employee home location
   */
  homeLocation?: HomeLocation | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The employee job description
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  jobDescription?: JobDescription | null | undefined;
  /**
   * The employee job id
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  jobId?: string | null | undefined;
  /**
   * The employee job title
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  jobTitle?: string | null | undefined;
  /**
   * The employee last name
   */
  lastName?: string | null | undefined;
  /**
   * The employee manager ID
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  managerId?: string | null | undefined;
  /**
   * The employee marital status
   */
  maritalStatus?: MaritalStatus | null | undefined;
  /**
   * The employee name
   */
  name?: string | null | undefined;
  /**
   * The national identity number
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  nationalIdentityNumber?: NationalIdentityNumber | null | undefined;
  /**
   * The national identity numbers
   */
  nationalIdentityNumbers?:
    | Array<NationalIdentityNumberApiModel>
    | null
    | undefined;
  /**
   * The employee personal email
   */
  personalEmail?: string | null | undefined;
  /**
   * The employee personal phone number
   */
  personalPhoneNumber?: string | null | undefined;
  /**
   * The employee preferred language
   */
  preferredLanguage?: PreferredLanguage | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * Provider's unique identifier of the manager
   */
  remoteManagerId?: string | null | undefined;
  /**
   * The employee start date
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  startDate?: Date | null | undefined;
  /**
   * The employee tenure
   */
  tenure?: number | null | undefined;
  /**
   * The employee termination date
   */
  terminationDate?: Date | null | undefined;
  /**
   * Custom Unified Fields configured in your StackOne project
   */
  unifiedCustomFields?: { [k: string]: any } | null | undefined;
  /**
   * The updated_at date
   */
  updatedAt?: Date | null | undefined;
  /**
   * The employee work anniversary
   */
  workAnniversary?: Date | null | undefined;
  /**
   * The employee work email
   */
  workEmail?: string | null | undefined;
  /**
   * The employee work location
   */
  workLocation?: WorkLocation | null | undefined;
  /**
   * The employee work phone number
   */
  workPhoneNumber?: string | null | undefined;
};

/** @internal */
export const Avatar$inboundSchema: z.ZodType<Avatar, z.ZodTypeDef, unknown> = z
  .object({
    base64: z.nullable(z.string()).optional(),
    url: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Avatar$Outbound = {
  base64?: string | null | undefined;
  url?: string | null | undefined;
};

/** @internal */
export const Avatar$outboundSchema: z.ZodType<
  Avatar$Outbound,
  z.ZodTypeDef,
  Avatar
> = z.object({
  base64: z.nullable(z.string()).optional(),
  url: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Avatar$ {
  /** @deprecated use `Avatar$inboundSchema` instead. */
  export const inboundSchema = Avatar$inboundSchema;
  /** @deprecated use `Avatar$outboundSchema` instead. */
  export const outboundSchema = Avatar$outboundSchema;
  /** @deprecated use `Avatar$Outbound` instead. */
  export type Outbound = Avatar$Outbound;
}

export function avatarToJSON(avatar: Avatar): string {
  return JSON.stringify(Avatar$outboundSchema.parse(avatar));
}

export function avatarFromJSON(
  jsonString: string,
): SafeParseResult<Avatar, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Avatar$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Avatar' from JSON`,
  );
}

/** @internal */
export const EmployeeCompany$inboundSchema: z.ZodType<
  EmployeeCompany,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  display_name: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  unified_custom_fields: z.nullable(z.record(z.any())).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "display_name": "displayName",
    "remote_id": "remoteId",
    "unified_custom_fields": "unifiedCustomFields",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type EmployeeCompany$Outbound = {
  created_at?: string | null | undefined;
  display_name?: string | null | undefined;
  id?: string | null | undefined;
  name?: string | null | undefined;
  remote_id?: string | null | undefined;
  unified_custom_fields?: { [k: string]: any } | null | undefined;
  updated_at?: string | null | undefined;
};

/** @internal */
export const EmployeeCompany$outboundSchema: z.ZodType<
  EmployeeCompany$Outbound,
  z.ZodTypeDef,
  EmployeeCompany
> = z.object({
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  displayName: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  unifiedCustomFields: z.nullable(z.record(z.any())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    displayName: "display_name",
    remoteId: "remote_id",
    unifiedCustomFields: "unified_custom_fields",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeCompany$ {
  /** @deprecated use `EmployeeCompany$inboundSchema` instead. */
  export const inboundSchema = EmployeeCompany$inboundSchema;
  /** @deprecated use `EmployeeCompany$outboundSchema` instead. */
  export const outboundSchema = EmployeeCompany$outboundSchema;
  /** @deprecated use `EmployeeCompany$Outbound` instead. */
  export type Outbound = EmployeeCompany$Outbound;
}

export function employeeCompanyToJSON(
  employeeCompany: EmployeeCompany,
): string {
  return JSON.stringify(EmployeeCompany$outboundSchema.parse(employeeCompany));
}

export function employeeCompanyFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeCompany, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeCompany$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeCompany' from JSON`,
  );
}

/** @internal */
export const Employee4$inboundSchema: z.ZodType<
  Employee4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Employee4$Outbound = {};

/** @internal */
export const Employee4$outboundSchema: z.ZodType<
  Employee4$Outbound,
  z.ZodTypeDef,
  Employee4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Employee4$ {
  /** @deprecated use `Employee4$inboundSchema` instead. */
  export const inboundSchema = Employee4$inboundSchema;
  /** @deprecated use `Employee4$outboundSchema` instead. */
  export const outboundSchema = Employee4$outboundSchema;
  /** @deprecated use `Employee4$Outbound` instead. */
  export type Outbound = Employee4$Outbound;
}

export function employee4ToJSON(employee4: Employee4): string {
  return JSON.stringify(Employee4$outboundSchema.parse(employee4));
}

export function employee4FromJSON(
  jsonString: string,
): SafeParseResult<Employee4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Employee4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Employee4' from JSON`,
  );
}

/** @internal */
export const EmployeeSourceValue$inboundSchema: z.ZodType<
  EmployeeSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Employee4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type EmployeeSourceValue$Outbound =
  | Employee4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const EmployeeSourceValue$outboundSchema: z.ZodType<
  EmployeeSourceValue$Outbound,
  z.ZodTypeDef,
  EmployeeSourceValue
> = z.union([
  z.lazy(() => Employee4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSourceValue$ {
  /** @deprecated use `EmployeeSourceValue$inboundSchema` instead. */
  export const inboundSchema = EmployeeSourceValue$inboundSchema;
  /** @deprecated use `EmployeeSourceValue$outboundSchema` instead. */
  export const outboundSchema = EmployeeSourceValue$outboundSchema;
  /** @deprecated use `EmployeeSourceValue$Outbound` instead. */
  export type Outbound = EmployeeSourceValue$Outbound;
}

export function employeeSourceValueToJSON(
  employeeSourceValue: EmployeeSourceValue,
): string {
  return JSON.stringify(
    EmployeeSourceValue$outboundSchema.parse(employeeSourceValue),
  );
}

export function employeeSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeSourceValue' from JSON`,
  );
}

/** @internal */
export const EmployeeValue$inboundSchema: z.ZodType<
  EmployeeValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EmployeeValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EmployeeValue$outboundSchema: z.ZodType<
  EmployeeValueOpen,
  z.ZodTypeDef,
  EmployeeValueOpen
> = z.union([
  z.nativeEnum(EmployeeValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeValue$ {
  /** @deprecated use `EmployeeValue$inboundSchema` instead. */
  export const inboundSchema = EmployeeValue$inboundSchema;
  /** @deprecated use `EmployeeValue$outboundSchema` instead. */
  export const outboundSchema = EmployeeValue$outboundSchema;
}

/** @internal */
export const EmployeeEmploymentContractType$inboundSchema: z.ZodType<
  EmployeeEmploymentContractType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => Employee4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmployeeValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type EmployeeEmploymentContractType$Outbound = {
  source_value?:
    | Employee4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const EmployeeEmploymentContractType$outboundSchema: z.ZodType<
  EmployeeEmploymentContractType$Outbound,
  z.ZodTypeDef,
  EmployeeEmploymentContractType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => Employee4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmployeeValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeEmploymentContractType$ {
  /** @deprecated use `EmployeeEmploymentContractType$inboundSchema` instead. */
  export const inboundSchema = EmployeeEmploymentContractType$inboundSchema;
  /** @deprecated use `EmployeeEmploymentContractType$outboundSchema` instead. */
  export const outboundSchema = EmployeeEmploymentContractType$outboundSchema;
  /** @deprecated use `EmployeeEmploymentContractType$Outbound` instead. */
  export type Outbound = EmployeeEmploymentContractType$Outbound;
}

export function employeeEmploymentContractTypeToJSON(
  employeeEmploymentContractType: EmployeeEmploymentContractType,
): string {
  return JSON.stringify(
    EmployeeEmploymentContractType$outboundSchema.parse(
      employeeEmploymentContractType,
    ),
  );
}

export function employeeEmploymentContractTypeFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeEmploymentContractType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeEmploymentContractType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeEmploymentContractType' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemas4$inboundSchema: z.ZodType<
  EmployeeSchemas4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EmployeeSchemas4$Outbound = {};

/** @internal */
export const EmployeeSchemas4$outboundSchema: z.ZodType<
  EmployeeSchemas4$Outbound,
  z.ZodTypeDef,
  EmployeeSchemas4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemas4$ {
  /** @deprecated use `EmployeeSchemas4$inboundSchema` instead. */
  export const inboundSchema = EmployeeSchemas4$inboundSchema;
  /** @deprecated use `EmployeeSchemas4$outboundSchema` instead. */
  export const outboundSchema = EmployeeSchemas4$outboundSchema;
  /** @deprecated use `EmployeeSchemas4$Outbound` instead. */
  export type Outbound = EmployeeSchemas4$Outbound;
}

export function employeeSchemas4ToJSON(
  employeeSchemas4: EmployeeSchemas4,
): string {
  return JSON.stringify(
    EmployeeSchemas4$outboundSchema.parse(employeeSchemas4),
  );
}

export function employeeSchemas4FromJSON(
  jsonString: string,
): SafeParseResult<EmployeeSchemas4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeSchemas4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeSchemas4' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasSourceValue$inboundSchema: z.ZodType<
  EmployeeSchemasSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => EmployeeSchemas4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type EmployeeSchemasSourceValue$Outbound =
  | EmployeeSchemas4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const EmployeeSchemasSourceValue$outboundSchema: z.ZodType<
  EmployeeSchemasSourceValue$Outbound,
  z.ZodTypeDef,
  EmployeeSchemasSourceValue
> = z.union([
  z.lazy(() => EmployeeSchemas4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasSourceValue$ {
  /** @deprecated use `EmployeeSchemasSourceValue$inboundSchema` instead. */
  export const inboundSchema = EmployeeSchemasSourceValue$inboundSchema;
  /** @deprecated use `EmployeeSchemasSourceValue$outboundSchema` instead. */
  export const outboundSchema = EmployeeSchemasSourceValue$outboundSchema;
  /** @deprecated use `EmployeeSchemasSourceValue$Outbound` instead. */
  export type Outbound = EmployeeSchemasSourceValue$Outbound;
}

export function employeeSchemasSourceValueToJSON(
  employeeSchemasSourceValue: EmployeeSchemasSourceValue,
): string {
  return JSON.stringify(
    EmployeeSchemasSourceValue$outboundSchema.parse(employeeSchemasSourceValue),
  );
}

export function employeeSchemasSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeSchemasSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeSchemasSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeSchemasSourceValue' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasValue$inboundSchema: z.ZodType<
  EmployeeSchemasValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EmployeeSchemasValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EmployeeSchemasValue$outboundSchema: z.ZodType<
  EmployeeSchemasValueOpen,
  z.ZodTypeDef,
  EmployeeSchemasValueOpen
> = z.union([
  z.nativeEnum(EmployeeSchemasValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasValue$ {
  /** @deprecated use `EmployeeSchemasValue$inboundSchema` instead. */
  export const inboundSchema = EmployeeSchemasValue$inboundSchema;
  /** @deprecated use `EmployeeSchemasValue$outboundSchema` instead. */
  export const outboundSchema = EmployeeSchemasValue$outboundSchema;
}

/** @internal */
export const EmploymentStatus$inboundSchema: z.ZodType<
  EmploymentStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => EmployeeSchemas4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmployeeSchemasValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type EmploymentStatus$Outbound = {
  source_value?:
    | EmployeeSchemas4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const EmploymentStatus$outboundSchema: z.ZodType<
  EmploymentStatus$Outbound,
  z.ZodTypeDef,
  EmploymentStatus
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => EmployeeSchemas4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmployeeSchemasValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentStatus$ {
  /** @deprecated use `EmploymentStatus$inboundSchema` instead. */
  export const inboundSchema = EmploymentStatus$inboundSchema;
  /** @deprecated use `EmploymentStatus$outboundSchema` instead. */
  export const outboundSchema = EmploymentStatus$outboundSchema;
  /** @deprecated use `EmploymentStatus$Outbound` instead. */
  export type Outbound = EmploymentStatus$Outbound;
}

export function employmentStatusToJSON(
  employmentStatus: EmploymentStatus,
): string {
  return JSON.stringify(
    EmploymentStatus$outboundSchema.parse(employmentStatus),
  );
}

export function employmentStatusFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentStatus' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasEmploymentType4$inboundSchema: z.ZodType<
  EmployeeSchemasEmploymentType4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EmployeeSchemasEmploymentType4$Outbound = {};

/** @internal */
export const EmployeeSchemasEmploymentType4$outboundSchema: z.ZodType<
  EmployeeSchemasEmploymentType4$Outbound,
  z.ZodTypeDef,
  EmployeeSchemasEmploymentType4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasEmploymentType4$ {
  /** @deprecated use `EmployeeSchemasEmploymentType4$inboundSchema` instead. */
  export const inboundSchema = EmployeeSchemasEmploymentType4$inboundSchema;
  /** @deprecated use `EmployeeSchemasEmploymentType4$outboundSchema` instead. */
  export const outboundSchema = EmployeeSchemasEmploymentType4$outboundSchema;
  /** @deprecated use `EmployeeSchemasEmploymentType4$Outbound` instead. */
  export type Outbound = EmployeeSchemasEmploymentType4$Outbound;
}

export function employeeSchemasEmploymentType4ToJSON(
  employeeSchemasEmploymentType4: EmployeeSchemasEmploymentType4,
): string {
  return JSON.stringify(
    EmployeeSchemasEmploymentType4$outboundSchema.parse(
      employeeSchemasEmploymentType4,
    ),
  );
}

export function employeeSchemasEmploymentType4FromJSON(
  jsonString: string,
): SafeParseResult<EmployeeSchemasEmploymentType4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeSchemasEmploymentType4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeSchemasEmploymentType4' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasEmploymentTypeSourceValue$inboundSchema: z.ZodType<
  EmployeeSchemasEmploymentTypeSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => EmployeeSchemasEmploymentType4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type EmployeeSchemasEmploymentTypeSourceValue$Outbound =
  | EmployeeSchemasEmploymentType4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const EmployeeSchemasEmploymentTypeSourceValue$outboundSchema: z.ZodType<
  EmployeeSchemasEmploymentTypeSourceValue$Outbound,
  z.ZodTypeDef,
  EmployeeSchemasEmploymentTypeSourceValue
> = z.union([
  z.lazy(() => EmployeeSchemasEmploymentType4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasEmploymentTypeSourceValue$ {
  /** @deprecated use `EmployeeSchemasEmploymentTypeSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    EmployeeSchemasEmploymentTypeSourceValue$inboundSchema;
  /** @deprecated use `EmployeeSchemasEmploymentTypeSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    EmployeeSchemasEmploymentTypeSourceValue$outboundSchema;
  /** @deprecated use `EmployeeSchemasEmploymentTypeSourceValue$Outbound` instead. */
  export type Outbound = EmployeeSchemasEmploymentTypeSourceValue$Outbound;
}

export function employeeSchemasEmploymentTypeSourceValueToJSON(
  employeeSchemasEmploymentTypeSourceValue:
    EmployeeSchemasEmploymentTypeSourceValue,
): string {
  return JSON.stringify(
    EmployeeSchemasEmploymentTypeSourceValue$outboundSchema.parse(
      employeeSchemasEmploymentTypeSourceValue,
    ),
  );
}

export function employeeSchemasEmploymentTypeSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  EmployeeSchemasEmploymentTypeSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EmployeeSchemasEmploymentTypeSourceValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EmployeeSchemasEmploymentTypeSourceValue' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasEmploymentTypeValue$inboundSchema: z.ZodType<
  EmployeeSchemasEmploymentTypeValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EmployeeSchemasEmploymentTypeValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EmployeeSchemasEmploymentTypeValue$outboundSchema: z.ZodType<
  EmployeeSchemasEmploymentTypeValueOpen,
  z.ZodTypeDef,
  EmployeeSchemasEmploymentTypeValueOpen
> = z.union([
  z.nativeEnum(EmployeeSchemasEmploymentTypeValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasEmploymentTypeValue$ {
  /** @deprecated use `EmployeeSchemasEmploymentTypeValue$inboundSchema` instead. */
  export const inboundSchema = EmployeeSchemasEmploymentTypeValue$inboundSchema;
  /** @deprecated use `EmployeeSchemasEmploymentTypeValue$outboundSchema` instead. */
  export const outboundSchema =
    EmployeeSchemasEmploymentTypeValue$outboundSchema;
}

/** @internal */
export const EmployeeEmploymentType$inboundSchema: z.ZodType<
  EmployeeEmploymentType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => EmployeeSchemasEmploymentType4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmployeeSchemasEmploymentTypeValue$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type EmployeeEmploymentType$Outbound = {
  source_value?:
    | EmployeeSchemasEmploymentType4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const EmployeeEmploymentType$outboundSchema: z.ZodType<
  EmployeeEmploymentType$Outbound,
  z.ZodTypeDef,
  EmployeeEmploymentType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => EmployeeSchemasEmploymentType4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmployeeSchemasEmploymentTypeValue$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeEmploymentType$ {
  /** @deprecated use `EmployeeEmploymentType$inboundSchema` instead. */
  export const inboundSchema = EmployeeEmploymentType$inboundSchema;
  /** @deprecated use `EmployeeEmploymentType$outboundSchema` instead. */
  export const outboundSchema = EmployeeEmploymentType$outboundSchema;
  /** @deprecated use `EmployeeEmploymentType$Outbound` instead. */
  export type Outbound = EmployeeEmploymentType$Outbound;
}

export function employeeEmploymentTypeToJSON(
  employeeEmploymentType: EmployeeEmploymentType,
): string {
  return JSON.stringify(
    EmployeeEmploymentType$outboundSchema.parse(employeeEmploymentType),
  );
}

export function employeeEmploymentTypeFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeEmploymentType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeEmploymentType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeEmploymentType' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasEthnicity4$inboundSchema: z.ZodType<
  EmployeeSchemasEthnicity4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EmployeeSchemasEthnicity4$Outbound = {};

/** @internal */
export const EmployeeSchemasEthnicity4$outboundSchema: z.ZodType<
  EmployeeSchemasEthnicity4$Outbound,
  z.ZodTypeDef,
  EmployeeSchemasEthnicity4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasEthnicity4$ {
  /** @deprecated use `EmployeeSchemasEthnicity4$inboundSchema` instead. */
  export const inboundSchema = EmployeeSchemasEthnicity4$inboundSchema;
  /** @deprecated use `EmployeeSchemasEthnicity4$outboundSchema` instead. */
  export const outboundSchema = EmployeeSchemasEthnicity4$outboundSchema;
  /** @deprecated use `EmployeeSchemasEthnicity4$Outbound` instead. */
  export type Outbound = EmployeeSchemasEthnicity4$Outbound;
}

export function employeeSchemasEthnicity4ToJSON(
  employeeSchemasEthnicity4: EmployeeSchemasEthnicity4,
): string {
  return JSON.stringify(
    EmployeeSchemasEthnicity4$outboundSchema.parse(employeeSchemasEthnicity4),
  );
}

export function employeeSchemasEthnicity4FromJSON(
  jsonString: string,
): SafeParseResult<EmployeeSchemasEthnicity4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeSchemasEthnicity4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeSchemasEthnicity4' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasEthnicitySourceValue$inboundSchema: z.ZodType<
  EmployeeSchemasEthnicitySourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => EmployeeSchemasEthnicity4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type EmployeeSchemasEthnicitySourceValue$Outbound =
  | EmployeeSchemasEthnicity4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const EmployeeSchemasEthnicitySourceValue$outboundSchema: z.ZodType<
  EmployeeSchemasEthnicitySourceValue$Outbound,
  z.ZodTypeDef,
  EmployeeSchemasEthnicitySourceValue
> = z.union([
  z.lazy(() => EmployeeSchemasEthnicity4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasEthnicitySourceValue$ {
  /** @deprecated use `EmployeeSchemasEthnicitySourceValue$inboundSchema` instead. */
  export const inboundSchema =
    EmployeeSchemasEthnicitySourceValue$inboundSchema;
  /** @deprecated use `EmployeeSchemasEthnicitySourceValue$outboundSchema` instead. */
  export const outboundSchema =
    EmployeeSchemasEthnicitySourceValue$outboundSchema;
  /** @deprecated use `EmployeeSchemasEthnicitySourceValue$Outbound` instead. */
  export type Outbound = EmployeeSchemasEthnicitySourceValue$Outbound;
}

export function employeeSchemasEthnicitySourceValueToJSON(
  employeeSchemasEthnicitySourceValue: EmployeeSchemasEthnicitySourceValue,
): string {
  return JSON.stringify(
    EmployeeSchemasEthnicitySourceValue$outboundSchema.parse(
      employeeSchemasEthnicitySourceValue,
    ),
  );
}

export function employeeSchemasEthnicitySourceValueFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeSchemasEthnicitySourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EmployeeSchemasEthnicitySourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeSchemasEthnicitySourceValue' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasEthnicityValue$inboundSchema: z.ZodType<
  EmployeeSchemasEthnicityValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EmployeeSchemasEthnicityValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EmployeeSchemasEthnicityValue$outboundSchema: z.ZodType<
  EmployeeSchemasEthnicityValueOpen,
  z.ZodTypeDef,
  EmployeeSchemasEthnicityValueOpen
> = z.union([
  z.nativeEnum(EmployeeSchemasEthnicityValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasEthnicityValue$ {
  /** @deprecated use `EmployeeSchemasEthnicityValue$inboundSchema` instead. */
  export const inboundSchema = EmployeeSchemasEthnicityValue$inboundSchema;
  /** @deprecated use `EmployeeSchemasEthnicityValue$outboundSchema` instead. */
  export const outboundSchema = EmployeeSchemasEthnicityValue$outboundSchema;
}

/** @internal */
export const Ethnicity$inboundSchema: z.ZodType<
  Ethnicity,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => EmployeeSchemasEthnicity4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmployeeSchemasEthnicityValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type Ethnicity$Outbound = {
  source_value?:
    | EmployeeSchemasEthnicity4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const Ethnicity$outboundSchema: z.ZodType<
  Ethnicity$Outbound,
  z.ZodTypeDef,
  Ethnicity
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => EmployeeSchemasEthnicity4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmployeeSchemasEthnicityValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Ethnicity$ {
  /** @deprecated use `Ethnicity$inboundSchema` instead. */
  export const inboundSchema = Ethnicity$inboundSchema;
  /** @deprecated use `Ethnicity$outboundSchema` instead. */
  export const outboundSchema = Ethnicity$outboundSchema;
  /** @deprecated use `Ethnicity$Outbound` instead. */
  export type Outbound = Ethnicity$Outbound;
}

export function ethnicityToJSON(ethnicity: Ethnicity): string {
  return JSON.stringify(Ethnicity$outboundSchema.parse(ethnicity));
}

export function ethnicityFromJSON(
  jsonString: string,
): SafeParseResult<Ethnicity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Ethnicity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Ethnicity' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasGender4$inboundSchema: z.ZodType<
  EmployeeSchemasGender4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EmployeeSchemasGender4$Outbound = {};

/** @internal */
export const EmployeeSchemasGender4$outboundSchema: z.ZodType<
  EmployeeSchemasGender4$Outbound,
  z.ZodTypeDef,
  EmployeeSchemasGender4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasGender4$ {
  /** @deprecated use `EmployeeSchemasGender4$inboundSchema` instead. */
  export const inboundSchema = EmployeeSchemasGender4$inboundSchema;
  /** @deprecated use `EmployeeSchemasGender4$outboundSchema` instead. */
  export const outboundSchema = EmployeeSchemasGender4$outboundSchema;
  /** @deprecated use `EmployeeSchemasGender4$Outbound` instead. */
  export type Outbound = EmployeeSchemasGender4$Outbound;
}

export function employeeSchemasGender4ToJSON(
  employeeSchemasGender4: EmployeeSchemasGender4,
): string {
  return JSON.stringify(
    EmployeeSchemasGender4$outboundSchema.parse(employeeSchemasGender4),
  );
}

export function employeeSchemasGender4FromJSON(
  jsonString: string,
): SafeParseResult<EmployeeSchemasGender4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeSchemasGender4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeSchemasGender4' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasGenderSourceValue$inboundSchema: z.ZodType<
  EmployeeSchemasGenderSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => EmployeeSchemasGender4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type EmployeeSchemasGenderSourceValue$Outbound =
  | EmployeeSchemasGender4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const EmployeeSchemasGenderSourceValue$outboundSchema: z.ZodType<
  EmployeeSchemasGenderSourceValue$Outbound,
  z.ZodTypeDef,
  EmployeeSchemasGenderSourceValue
> = z.union([
  z.lazy(() => EmployeeSchemasGender4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasGenderSourceValue$ {
  /** @deprecated use `EmployeeSchemasGenderSourceValue$inboundSchema` instead. */
  export const inboundSchema = EmployeeSchemasGenderSourceValue$inboundSchema;
  /** @deprecated use `EmployeeSchemasGenderSourceValue$outboundSchema` instead. */
  export const outboundSchema = EmployeeSchemasGenderSourceValue$outboundSchema;
  /** @deprecated use `EmployeeSchemasGenderSourceValue$Outbound` instead. */
  export type Outbound = EmployeeSchemasGenderSourceValue$Outbound;
}

export function employeeSchemasGenderSourceValueToJSON(
  employeeSchemasGenderSourceValue: EmployeeSchemasGenderSourceValue,
): string {
  return JSON.stringify(
    EmployeeSchemasGenderSourceValue$outboundSchema.parse(
      employeeSchemasGenderSourceValue,
    ),
  );
}

export function employeeSchemasGenderSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeSchemasGenderSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeSchemasGenderSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeSchemasGenderSourceValue' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasGenderValue$inboundSchema: z.ZodType<
  EmployeeSchemasGenderValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EmployeeSchemasGenderValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EmployeeSchemasGenderValue$outboundSchema: z.ZodType<
  EmployeeSchemasGenderValueOpen,
  z.ZodTypeDef,
  EmployeeSchemasGenderValueOpen
> = z.union([
  z.nativeEnum(EmployeeSchemasGenderValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasGenderValue$ {
  /** @deprecated use `EmployeeSchemasGenderValue$inboundSchema` instead. */
  export const inboundSchema = EmployeeSchemasGenderValue$inboundSchema;
  /** @deprecated use `EmployeeSchemasGenderValue$outboundSchema` instead. */
  export const outboundSchema = EmployeeSchemasGenderValue$outboundSchema;
}

/** @internal */
export const Gender$inboundSchema: z.ZodType<Gender, z.ZodTypeDef, unknown> = z
  .object({
    source_value: z.nullable(
      z.union([
        z.lazy(() => EmployeeSchemasGender4$inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
        z.array(z.any()),
      ]),
    ).optional(),
    value: z.nullable(EmployeeSchemasGenderValue$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "source_value": "sourceValue",
    });
  });

/** @internal */
export type Gender$Outbound = {
  source_value?:
    | EmployeeSchemasGender4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const Gender$outboundSchema: z.ZodType<
  Gender$Outbound,
  z.ZodTypeDef,
  Gender
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => EmployeeSchemasGender4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmployeeSchemasGenderValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Gender$ {
  /** @deprecated use `Gender$inboundSchema` instead. */
  export const inboundSchema = Gender$inboundSchema;
  /** @deprecated use `Gender$outboundSchema` instead. */
  export const outboundSchema = Gender$outboundSchema;
  /** @deprecated use `Gender$Outbound` instead. */
  export type Outbound = Gender$Outbound;
}

export function genderToJSON(gender: Gender): string {
  return JSON.stringify(Gender$outboundSchema.parse(gender));
}

export function genderFromJSON(
  jsonString: string,
): SafeParseResult<Gender, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Gender$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Gender' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasHomeLocation4$inboundSchema: z.ZodType<
  EmployeeSchemasHomeLocation4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EmployeeSchemasHomeLocation4$Outbound = {};

/** @internal */
export const EmployeeSchemasHomeLocation4$outboundSchema: z.ZodType<
  EmployeeSchemasHomeLocation4$Outbound,
  z.ZodTypeDef,
  EmployeeSchemasHomeLocation4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasHomeLocation4$ {
  /** @deprecated use `EmployeeSchemasHomeLocation4$inboundSchema` instead. */
  export const inboundSchema = EmployeeSchemasHomeLocation4$inboundSchema;
  /** @deprecated use `EmployeeSchemasHomeLocation4$outboundSchema` instead. */
  export const outboundSchema = EmployeeSchemasHomeLocation4$outboundSchema;
  /** @deprecated use `EmployeeSchemasHomeLocation4$Outbound` instead. */
  export type Outbound = EmployeeSchemasHomeLocation4$Outbound;
}

export function employeeSchemasHomeLocation4ToJSON(
  employeeSchemasHomeLocation4: EmployeeSchemasHomeLocation4,
): string {
  return JSON.stringify(
    EmployeeSchemasHomeLocation4$outboundSchema.parse(
      employeeSchemasHomeLocation4,
    ),
  );
}

export function employeeSchemasHomeLocation4FromJSON(
  jsonString: string,
): SafeParseResult<EmployeeSchemasHomeLocation4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeSchemasHomeLocation4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeSchemasHomeLocation4' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasHomeLocationSourceValue$inboundSchema: z.ZodType<
  EmployeeSchemasHomeLocationSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => EmployeeSchemasHomeLocation4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type EmployeeSchemasHomeLocationSourceValue$Outbound =
  | EmployeeSchemasHomeLocation4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const EmployeeSchemasHomeLocationSourceValue$outboundSchema: z.ZodType<
  EmployeeSchemasHomeLocationSourceValue$Outbound,
  z.ZodTypeDef,
  EmployeeSchemasHomeLocationSourceValue
> = z.union([
  z.lazy(() => EmployeeSchemasHomeLocation4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasHomeLocationSourceValue$ {
  /** @deprecated use `EmployeeSchemasHomeLocationSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    EmployeeSchemasHomeLocationSourceValue$inboundSchema;
  /** @deprecated use `EmployeeSchemasHomeLocationSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    EmployeeSchemasHomeLocationSourceValue$outboundSchema;
  /** @deprecated use `EmployeeSchemasHomeLocationSourceValue$Outbound` instead. */
  export type Outbound = EmployeeSchemasHomeLocationSourceValue$Outbound;
}

export function employeeSchemasHomeLocationSourceValueToJSON(
  employeeSchemasHomeLocationSourceValue:
    EmployeeSchemasHomeLocationSourceValue,
): string {
  return JSON.stringify(
    EmployeeSchemasHomeLocationSourceValue$outboundSchema.parse(
      employeeSchemasHomeLocationSourceValue,
    ),
  );
}

export function employeeSchemasHomeLocationSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeSchemasHomeLocationSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EmployeeSchemasHomeLocationSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeSchemasHomeLocationSourceValue' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasHomeLocationValue$inboundSchema: z.ZodType<
  EmployeeSchemasHomeLocationValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EmployeeSchemasHomeLocationValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EmployeeSchemasHomeLocationValue$outboundSchema: z.ZodType<
  EmployeeSchemasHomeLocationValueOpen,
  z.ZodTypeDef,
  EmployeeSchemasHomeLocationValueOpen
> = z.union([
  z.nativeEnum(EmployeeSchemasHomeLocationValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasHomeLocationValue$ {
  /** @deprecated use `EmployeeSchemasHomeLocationValue$inboundSchema` instead. */
  export const inboundSchema = EmployeeSchemasHomeLocationValue$inboundSchema;
  /** @deprecated use `EmployeeSchemasHomeLocationValue$outboundSchema` instead. */
  export const outboundSchema = EmployeeSchemasHomeLocationValue$outboundSchema;
}

/** @internal */
export const EmployeeCountry$inboundSchema: z.ZodType<
  EmployeeCountry,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => EmployeeSchemasHomeLocation4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmployeeSchemasHomeLocationValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type EmployeeCountry$Outbound = {
  source_value?:
    | EmployeeSchemasHomeLocation4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const EmployeeCountry$outboundSchema: z.ZodType<
  EmployeeCountry$Outbound,
  z.ZodTypeDef,
  EmployeeCountry
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => EmployeeSchemasHomeLocation4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmployeeSchemasHomeLocationValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeCountry$ {
  /** @deprecated use `EmployeeCountry$inboundSchema` instead. */
  export const inboundSchema = EmployeeCountry$inboundSchema;
  /** @deprecated use `EmployeeCountry$outboundSchema` instead. */
  export const outboundSchema = EmployeeCountry$outboundSchema;
  /** @deprecated use `EmployeeCountry$Outbound` instead. */
  export type Outbound = EmployeeCountry$Outbound;
}

export function employeeCountryToJSON(
  employeeCountry: EmployeeCountry,
): string {
  return JSON.stringify(EmployeeCountry$outboundSchema.parse(employeeCountry));
}

export function employeeCountryFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeCountry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeCountry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeCountry' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasHomeLocationLocationType4$inboundSchema: z.ZodType<
  EmployeeSchemasHomeLocationLocationType4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EmployeeSchemasHomeLocationLocationType4$Outbound = {};

/** @internal */
export const EmployeeSchemasHomeLocationLocationType4$outboundSchema: z.ZodType<
  EmployeeSchemasHomeLocationLocationType4$Outbound,
  z.ZodTypeDef,
  EmployeeSchemasHomeLocationLocationType4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasHomeLocationLocationType4$ {
  /** @deprecated use `EmployeeSchemasHomeLocationLocationType4$inboundSchema` instead. */
  export const inboundSchema =
    EmployeeSchemasHomeLocationLocationType4$inboundSchema;
  /** @deprecated use `EmployeeSchemasHomeLocationLocationType4$outboundSchema` instead. */
  export const outboundSchema =
    EmployeeSchemasHomeLocationLocationType4$outboundSchema;
  /** @deprecated use `EmployeeSchemasHomeLocationLocationType4$Outbound` instead. */
  export type Outbound = EmployeeSchemasHomeLocationLocationType4$Outbound;
}

export function employeeSchemasHomeLocationLocationType4ToJSON(
  employeeSchemasHomeLocationLocationType4:
    EmployeeSchemasHomeLocationLocationType4,
): string {
  return JSON.stringify(
    EmployeeSchemasHomeLocationLocationType4$outboundSchema.parse(
      employeeSchemasHomeLocationLocationType4,
    ),
  );
}

export function employeeSchemasHomeLocationLocationType4FromJSON(
  jsonString: string,
): SafeParseResult<
  EmployeeSchemasHomeLocationLocationType4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EmployeeSchemasHomeLocationLocationType4$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EmployeeSchemasHomeLocationLocationType4' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasHomeLocationLocationTypeSourceValue$inboundSchema:
  z.ZodType<
    EmployeeSchemasHomeLocationLocationTypeSourceValue,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => EmployeeSchemasHomeLocationLocationType4$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/** @internal */
export type EmployeeSchemasHomeLocationLocationTypeSourceValue$Outbound =
  | EmployeeSchemasHomeLocationLocationType4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const EmployeeSchemasHomeLocationLocationTypeSourceValue$outboundSchema:
  z.ZodType<
    EmployeeSchemasHomeLocationLocationTypeSourceValue$Outbound,
    z.ZodTypeDef,
    EmployeeSchemasHomeLocationLocationTypeSourceValue
  > = z.union([
    z.lazy(() => EmployeeSchemasHomeLocationLocationType4$outboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasHomeLocationLocationTypeSourceValue$ {
  /** @deprecated use `EmployeeSchemasHomeLocationLocationTypeSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    EmployeeSchemasHomeLocationLocationTypeSourceValue$inboundSchema;
  /** @deprecated use `EmployeeSchemasHomeLocationLocationTypeSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    EmployeeSchemasHomeLocationLocationTypeSourceValue$outboundSchema;
  /** @deprecated use `EmployeeSchemasHomeLocationLocationTypeSourceValue$Outbound` instead. */
  export type Outbound =
    EmployeeSchemasHomeLocationLocationTypeSourceValue$Outbound;
}

export function employeeSchemasHomeLocationLocationTypeSourceValueToJSON(
  employeeSchemasHomeLocationLocationTypeSourceValue:
    EmployeeSchemasHomeLocationLocationTypeSourceValue,
): string {
  return JSON.stringify(
    EmployeeSchemasHomeLocationLocationTypeSourceValue$outboundSchema.parse(
      employeeSchemasHomeLocationLocationTypeSourceValue,
    ),
  );
}

export function employeeSchemasHomeLocationLocationTypeSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  EmployeeSchemasHomeLocationLocationTypeSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EmployeeSchemasHomeLocationLocationTypeSourceValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EmployeeSchemasHomeLocationLocationTypeSourceValue' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasHomeLocationLocationTypeValue$inboundSchema:
  z.ZodType<
    EmployeeSchemasHomeLocationLocationTypeValueOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(EmployeeSchemasHomeLocationLocationTypeValue),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EmployeeSchemasHomeLocationLocationTypeValue$outboundSchema:
  z.ZodType<
    EmployeeSchemasHomeLocationLocationTypeValueOpen,
    z.ZodTypeDef,
    EmployeeSchemasHomeLocationLocationTypeValueOpen
  > = z.union([
    z.nativeEnum(EmployeeSchemasHomeLocationLocationTypeValue),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasHomeLocationLocationTypeValue$ {
  /** @deprecated use `EmployeeSchemasHomeLocationLocationTypeValue$inboundSchema` instead. */
  export const inboundSchema =
    EmployeeSchemasHomeLocationLocationTypeValue$inboundSchema;
  /** @deprecated use `EmployeeSchemasHomeLocationLocationTypeValue$outboundSchema` instead. */
  export const outboundSchema =
    EmployeeSchemasHomeLocationLocationTypeValue$outboundSchema;
}

/** @internal */
export const EmployeeLocationType$inboundSchema: z.ZodType<
  EmployeeLocationType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => EmployeeSchemasHomeLocationLocationType4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmployeeSchemasHomeLocationLocationTypeValue$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type EmployeeLocationType$Outbound = {
  source_value?:
    | EmployeeSchemasHomeLocationLocationType4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const EmployeeLocationType$outboundSchema: z.ZodType<
  EmployeeLocationType$Outbound,
  z.ZodTypeDef,
  EmployeeLocationType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => EmployeeSchemasHomeLocationLocationType4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmployeeSchemasHomeLocationLocationTypeValue$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeLocationType$ {
  /** @deprecated use `EmployeeLocationType$inboundSchema` instead. */
  export const inboundSchema = EmployeeLocationType$inboundSchema;
  /** @deprecated use `EmployeeLocationType$outboundSchema` instead. */
  export const outboundSchema = EmployeeLocationType$outboundSchema;
  /** @deprecated use `EmployeeLocationType$Outbound` instead. */
  export type Outbound = EmployeeLocationType$Outbound;
}

export function employeeLocationTypeToJSON(
  employeeLocationType: EmployeeLocationType,
): string {
  return JSON.stringify(
    EmployeeLocationType$outboundSchema.parse(employeeLocationType),
  );
}

export function employeeLocationTypeFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeLocationType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeLocationType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeLocationType' from JSON`,
  );
}

/** @internal */
export const HomeLocation$inboundSchema: z.ZodType<
  HomeLocation,
  z.ZodTypeDef,
  unknown
> = z.object({
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.lazy(() => EmployeeCountry$inboundSchema)).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  employee_id: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  location_type: z.nullable(z.lazy(() => EmployeeLocationType$inboundSchema))
    .optional(),
  name: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  remote_employee_id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  street_1: z.nullable(z.string()).optional(),
  street_2: z.nullable(z.string()).optional(),
  unified_custom_fields: z.nullable(z.record(z.any())).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  zip_code: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "employee_id": "employeeId",
    "location_type": "locationType",
    "phone_number": "phoneNumber",
    "remote_employee_id": "remoteEmployeeId",
    "remote_id": "remoteId",
    "street_1": "street1",
    "street_2": "street2",
    "unified_custom_fields": "unifiedCustomFields",
    "updated_at": "updatedAt",
    "zip_code": "zipCode",
  });
});

/** @internal */
export type HomeLocation$Outbound = {
  city?: string | null | undefined;
  country?: EmployeeCountry$Outbound | null | undefined;
  created_at?: string | null | undefined;
  employee_id?: string | null | undefined;
  id?: string | null | undefined;
  location_type?: EmployeeLocationType$Outbound | null | undefined;
  name?: string | null | undefined;
  phone_number?: string | null | undefined;
  remote_employee_id?: string | null | undefined;
  remote_id?: string | null | undefined;
  state?: string | null | undefined;
  street_1?: string | null | undefined;
  street_2?: string | null | undefined;
  unified_custom_fields?: { [k: string]: any } | null | undefined;
  updated_at?: string | null | undefined;
  zip_code?: string | null | undefined;
};

/** @internal */
export const HomeLocation$outboundSchema: z.ZodType<
  HomeLocation$Outbound,
  z.ZodTypeDef,
  HomeLocation
> = z.object({
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.lazy(() => EmployeeCountry$outboundSchema)).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  employeeId: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  locationType: z.nullable(z.lazy(() => EmployeeLocationType$outboundSchema))
    .optional(),
  name: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  remoteEmployeeId: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  street1: z.nullable(z.string()).optional(),
  street2: z.nullable(z.string()).optional(),
  unifiedCustomFields: z.nullable(z.record(z.any())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  zipCode: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    employeeId: "employee_id",
    locationType: "location_type",
    phoneNumber: "phone_number",
    remoteEmployeeId: "remote_employee_id",
    remoteId: "remote_id",
    street1: "street_1",
    street2: "street_2",
    unifiedCustomFields: "unified_custom_fields",
    updatedAt: "updated_at",
    zipCode: "zip_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HomeLocation$ {
  /** @deprecated use `HomeLocation$inboundSchema` instead. */
  export const inboundSchema = HomeLocation$inboundSchema;
  /** @deprecated use `HomeLocation$outboundSchema` instead. */
  export const outboundSchema = HomeLocation$outboundSchema;
  /** @deprecated use `HomeLocation$Outbound` instead. */
  export type Outbound = HomeLocation$Outbound;
}

export function homeLocationToJSON(homeLocation: HomeLocation): string {
  return JSON.stringify(HomeLocation$outboundSchema.parse(homeLocation));
}

export function homeLocationFromJSON(
  jsonString: string,
): SafeParseResult<HomeLocation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HomeLocation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HomeLocation' from JSON`,
  );
}

/** @internal */
export const JobDescription$inboundSchema: z.ZodType<
  JobDescription,
  z.ZodTypeDef,
  unknown
> = z.object({
  text: z.nullable(z.string()).optional(),
});

/** @internal */
export type JobDescription$Outbound = {
  text?: string | null | undefined;
};

/** @internal */
export const JobDescription$outboundSchema: z.ZodType<
  JobDescription$Outbound,
  z.ZodTypeDef,
  JobDescription
> = z.object({
  text: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobDescription$ {
  /** @deprecated use `JobDescription$inboundSchema` instead. */
  export const inboundSchema = JobDescription$inboundSchema;
  /** @deprecated use `JobDescription$outboundSchema` instead. */
  export const outboundSchema = JobDescription$outboundSchema;
  /** @deprecated use `JobDescription$Outbound` instead. */
  export type Outbound = JobDescription$Outbound;
}

export function jobDescriptionToJSON(jobDescription: JobDescription): string {
  return JSON.stringify(JobDescription$outboundSchema.parse(jobDescription));
}

export function jobDescriptionFromJSON(
  jsonString: string,
): SafeParseResult<JobDescription, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobDescription$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobDescription' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasMaritalStatus4$inboundSchema: z.ZodType<
  EmployeeSchemasMaritalStatus4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EmployeeSchemasMaritalStatus4$Outbound = {};

/** @internal */
export const EmployeeSchemasMaritalStatus4$outboundSchema: z.ZodType<
  EmployeeSchemasMaritalStatus4$Outbound,
  z.ZodTypeDef,
  EmployeeSchemasMaritalStatus4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasMaritalStatus4$ {
  /** @deprecated use `EmployeeSchemasMaritalStatus4$inboundSchema` instead. */
  export const inboundSchema = EmployeeSchemasMaritalStatus4$inboundSchema;
  /** @deprecated use `EmployeeSchemasMaritalStatus4$outboundSchema` instead. */
  export const outboundSchema = EmployeeSchemasMaritalStatus4$outboundSchema;
  /** @deprecated use `EmployeeSchemasMaritalStatus4$Outbound` instead. */
  export type Outbound = EmployeeSchemasMaritalStatus4$Outbound;
}

export function employeeSchemasMaritalStatus4ToJSON(
  employeeSchemasMaritalStatus4: EmployeeSchemasMaritalStatus4,
): string {
  return JSON.stringify(
    EmployeeSchemasMaritalStatus4$outboundSchema.parse(
      employeeSchemasMaritalStatus4,
    ),
  );
}

export function employeeSchemasMaritalStatus4FromJSON(
  jsonString: string,
): SafeParseResult<EmployeeSchemasMaritalStatus4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeSchemasMaritalStatus4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeSchemasMaritalStatus4' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasMaritalStatusSourceValue$inboundSchema: z.ZodType<
  EmployeeSchemasMaritalStatusSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => EmployeeSchemasMaritalStatus4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type EmployeeSchemasMaritalStatusSourceValue$Outbound =
  | EmployeeSchemasMaritalStatus4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const EmployeeSchemasMaritalStatusSourceValue$outboundSchema: z.ZodType<
  EmployeeSchemasMaritalStatusSourceValue$Outbound,
  z.ZodTypeDef,
  EmployeeSchemasMaritalStatusSourceValue
> = z.union([
  z.lazy(() => EmployeeSchemasMaritalStatus4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasMaritalStatusSourceValue$ {
  /** @deprecated use `EmployeeSchemasMaritalStatusSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    EmployeeSchemasMaritalStatusSourceValue$inboundSchema;
  /** @deprecated use `EmployeeSchemasMaritalStatusSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    EmployeeSchemasMaritalStatusSourceValue$outboundSchema;
  /** @deprecated use `EmployeeSchemasMaritalStatusSourceValue$Outbound` instead. */
  export type Outbound = EmployeeSchemasMaritalStatusSourceValue$Outbound;
}

export function employeeSchemasMaritalStatusSourceValueToJSON(
  employeeSchemasMaritalStatusSourceValue:
    EmployeeSchemasMaritalStatusSourceValue,
): string {
  return JSON.stringify(
    EmployeeSchemasMaritalStatusSourceValue$outboundSchema.parse(
      employeeSchemasMaritalStatusSourceValue,
    ),
  );
}

export function employeeSchemasMaritalStatusSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  EmployeeSchemasMaritalStatusSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EmployeeSchemasMaritalStatusSourceValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EmployeeSchemasMaritalStatusSourceValue' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasMaritalStatusValue$inboundSchema: z.ZodType<
  EmployeeSchemasMaritalStatusValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EmployeeSchemasMaritalStatusValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EmployeeSchemasMaritalStatusValue$outboundSchema: z.ZodType<
  EmployeeSchemasMaritalStatusValueOpen,
  z.ZodTypeDef,
  EmployeeSchemasMaritalStatusValueOpen
> = z.union([
  z.nativeEnum(EmployeeSchemasMaritalStatusValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasMaritalStatusValue$ {
  /** @deprecated use `EmployeeSchemasMaritalStatusValue$inboundSchema` instead. */
  export const inboundSchema = EmployeeSchemasMaritalStatusValue$inboundSchema;
  /** @deprecated use `EmployeeSchemasMaritalStatusValue$outboundSchema` instead. */
  export const outboundSchema =
    EmployeeSchemasMaritalStatusValue$outboundSchema;
}

/** @internal */
export const MaritalStatus$inboundSchema: z.ZodType<
  MaritalStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => EmployeeSchemasMaritalStatus4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmployeeSchemasMaritalStatusValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type MaritalStatus$Outbound = {
  source_value?:
    | EmployeeSchemasMaritalStatus4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const MaritalStatus$outboundSchema: z.ZodType<
  MaritalStatus$Outbound,
  z.ZodTypeDef,
  MaritalStatus
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => EmployeeSchemasMaritalStatus4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmployeeSchemasMaritalStatusValue$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MaritalStatus$ {
  /** @deprecated use `MaritalStatus$inboundSchema` instead. */
  export const inboundSchema = MaritalStatus$inboundSchema;
  /** @deprecated use `MaritalStatus$outboundSchema` instead. */
  export const outboundSchema = MaritalStatus$outboundSchema;
  /** @deprecated use `MaritalStatus$Outbound` instead. */
  export type Outbound = MaritalStatus$Outbound;
}

export function maritalStatusToJSON(maritalStatus: MaritalStatus): string {
  return JSON.stringify(MaritalStatus$outboundSchema.parse(maritalStatus));
}

export function maritalStatusFromJSON(
  jsonString: string,
): SafeParseResult<MaritalStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MaritalStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MaritalStatus' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasNationalIdentityNumber4$inboundSchema: z.ZodType<
  EmployeeSchemasNationalIdentityNumber4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EmployeeSchemasNationalIdentityNumber4$Outbound = {};

/** @internal */
export const EmployeeSchemasNationalIdentityNumber4$outboundSchema: z.ZodType<
  EmployeeSchemasNationalIdentityNumber4$Outbound,
  z.ZodTypeDef,
  EmployeeSchemasNationalIdentityNumber4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasNationalIdentityNumber4$ {
  /** @deprecated use `EmployeeSchemasNationalIdentityNumber4$inboundSchema` instead. */
  export const inboundSchema =
    EmployeeSchemasNationalIdentityNumber4$inboundSchema;
  /** @deprecated use `EmployeeSchemasNationalIdentityNumber4$outboundSchema` instead. */
  export const outboundSchema =
    EmployeeSchemasNationalIdentityNumber4$outboundSchema;
  /** @deprecated use `EmployeeSchemasNationalIdentityNumber4$Outbound` instead. */
  export type Outbound = EmployeeSchemasNationalIdentityNumber4$Outbound;
}

export function employeeSchemasNationalIdentityNumber4ToJSON(
  employeeSchemasNationalIdentityNumber4:
    EmployeeSchemasNationalIdentityNumber4,
): string {
  return JSON.stringify(
    EmployeeSchemasNationalIdentityNumber4$outboundSchema.parse(
      employeeSchemasNationalIdentityNumber4,
    ),
  );
}

export function employeeSchemasNationalIdentityNumber4FromJSON(
  jsonString: string,
): SafeParseResult<EmployeeSchemasNationalIdentityNumber4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EmployeeSchemasNationalIdentityNumber4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeSchemasNationalIdentityNumber4' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasNationalIdentityNumberSourceValue$inboundSchema:
  z.ZodType<
    EmployeeSchemasNationalIdentityNumberSourceValue,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => EmployeeSchemasNationalIdentityNumber4$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/** @internal */
export type EmployeeSchemasNationalIdentityNumberSourceValue$Outbound =
  | EmployeeSchemasNationalIdentityNumber4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const EmployeeSchemasNationalIdentityNumberSourceValue$outboundSchema:
  z.ZodType<
    EmployeeSchemasNationalIdentityNumberSourceValue$Outbound,
    z.ZodTypeDef,
    EmployeeSchemasNationalIdentityNumberSourceValue
  > = z.union([
    z.lazy(() => EmployeeSchemasNationalIdentityNumber4$outboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasNationalIdentityNumberSourceValue$ {
  /** @deprecated use `EmployeeSchemasNationalIdentityNumberSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    EmployeeSchemasNationalIdentityNumberSourceValue$inboundSchema;
  /** @deprecated use `EmployeeSchemasNationalIdentityNumberSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    EmployeeSchemasNationalIdentityNumberSourceValue$outboundSchema;
  /** @deprecated use `EmployeeSchemasNationalIdentityNumberSourceValue$Outbound` instead. */
  export type Outbound =
    EmployeeSchemasNationalIdentityNumberSourceValue$Outbound;
}

export function employeeSchemasNationalIdentityNumberSourceValueToJSON(
  employeeSchemasNationalIdentityNumberSourceValue:
    EmployeeSchemasNationalIdentityNumberSourceValue,
): string {
  return JSON.stringify(
    EmployeeSchemasNationalIdentityNumberSourceValue$outboundSchema.parse(
      employeeSchemasNationalIdentityNumberSourceValue,
    ),
  );
}

export function employeeSchemasNationalIdentityNumberSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  EmployeeSchemasNationalIdentityNumberSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EmployeeSchemasNationalIdentityNumberSourceValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EmployeeSchemasNationalIdentityNumberSourceValue' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasNationalIdentityNumberValue$inboundSchema:
  z.ZodType<
    EmployeeSchemasNationalIdentityNumberValueOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(EmployeeSchemasNationalIdentityNumberValue),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EmployeeSchemasNationalIdentityNumberValue$outboundSchema:
  z.ZodType<
    EmployeeSchemasNationalIdentityNumberValueOpen,
    z.ZodTypeDef,
    EmployeeSchemasNationalIdentityNumberValueOpen
  > = z.union([
    z.nativeEnum(EmployeeSchemasNationalIdentityNumberValue),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasNationalIdentityNumberValue$ {
  /** @deprecated use `EmployeeSchemasNationalIdentityNumberValue$inboundSchema` instead. */
  export const inboundSchema =
    EmployeeSchemasNationalIdentityNumberValue$inboundSchema;
  /** @deprecated use `EmployeeSchemasNationalIdentityNumberValue$outboundSchema` instead. */
  export const outboundSchema =
    EmployeeSchemasNationalIdentityNumberValue$outboundSchema;
}

/** @internal */
export const EmployeeSchemasCountry$inboundSchema: z.ZodType<
  EmployeeSchemasCountry,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => EmployeeSchemasNationalIdentityNumber4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmployeeSchemasNationalIdentityNumberValue$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type EmployeeSchemasCountry$Outbound = {
  source_value?:
    | EmployeeSchemasNationalIdentityNumber4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const EmployeeSchemasCountry$outboundSchema: z.ZodType<
  EmployeeSchemasCountry$Outbound,
  z.ZodTypeDef,
  EmployeeSchemasCountry
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => EmployeeSchemasNationalIdentityNumber4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmployeeSchemasNationalIdentityNumberValue$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasCountry$ {
  /** @deprecated use `EmployeeSchemasCountry$inboundSchema` instead. */
  export const inboundSchema = EmployeeSchemasCountry$inboundSchema;
  /** @deprecated use `EmployeeSchemasCountry$outboundSchema` instead. */
  export const outboundSchema = EmployeeSchemasCountry$outboundSchema;
  /** @deprecated use `EmployeeSchemasCountry$Outbound` instead. */
  export type Outbound = EmployeeSchemasCountry$Outbound;
}

export function employeeSchemasCountryToJSON(
  employeeSchemasCountry: EmployeeSchemasCountry,
): string {
  return JSON.stringify(
    EmployeeSchemasCountry$outboundSchema.parse(employeeSchemasCountry),
  );
}

export function employeeSchemasCountryFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeSchemasCountry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeSchemasCountry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeSchemasCountry' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasNationalIdentityNumberType4$inboundSchema:
  z.ZodType<EmployeeSchemasNationalIdentityNumberType4, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type EmployeeSchemasNationalIdentityNumberType4$Outbound = {};

/** @internal */
export const EmployeeSchemasNationalIdentityNumberType4$outboundSchema:
  z.ZodType<
    EmployeeSchemasNationalIdentityNumberType4$Outbound,
    z.ZodTypeDef,
    EmployeeSchemasNationalIdentityNumberType4
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasNationalIdentityNumberType4$ {
  /** @deprecated use `EmployeeSchemasNationalIdentityNumberType4$inboundSchema` instead. */
  export const inboundSchema =
    EmployeeSchemasNationalIdentityNumberType4$inboundSchema;
  /** @deprecated use `EmployeeSchemasNationalIdentityNumberType4$outboundSchema` instead. */
  export const outboundSchema =
    EmployeeSchemasNationalIdentityNumberType4$outboundSchema;
  /** @deprecated use `EmployeeSchemasNationalIdentityNumberType4$Outbound` instead. */
  export type Outbound = EmployeeSchemasNationalIdentityNumberType4$Outbound;
}

export function employeeSchemasNationalIdentityNumberType4ToJSON(
  employeeSchemasNationalIdentityNumberType4:
    EmployeeSchemasNationalIdentityNumberType4,
): string {
  return JSON.stringify(
    EmployeeSchemasNationalIdentityNumberType4$outboundSchema.parse(
      employeeSchemasNationalIdentityNumberType4,
    ),
  );
}

export function employeeSchemasNationalIdentityNumberType4FromJSON(
  jsonString: string,
): SafeParseResult<
  EmployeeSchemasNationalIdentityNumberType4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EmployeeSchemasNationalIdentityNumberType4$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EmployeeSchemasNationalIdentityNumberType4' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasNationalIdentityNumberTypeSourceValue$inboundSchema:
  z.ZodType<
    EmployeeSchemasNationalIdentityNumberTypeSourceValue,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => EmployeeSchemasNationalIdentityNumberType4$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/** @internal */
export type EmployeeSchemasNationalIdentityNumberTypeSourceValue$Outbound =
  | EmployeeSchemasNationalIdentityNumberType4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const EmployeeSchemasNationalIdentityNumberTypeSourceValue$outboundSchema:
  z.ZodType<
    EmployeeSchemasNationalIdentityNumberTypeSourceValue$Outbound,
    z.ZodTypeDef,
    EmployeeSchemasNationalIdentityNumberTypeSourceValue
  > = z.union([
    z.lazy(() => EmployeeSchemasNationalIdentityNumberType4$outboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasNationalIdentityNumberTypeSourceValue$ {
  /** @deprecated use `EmployeeSchemasNationalIdentityNumberTypeSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    EmployeeSchemasNationalIdentityNumberTypeSourceValue$inboundSchema;
  /** @deprecated use `EmployeeSchemasNationalIdentityNumberTypeSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    EmployeeSchemasNationalIdentityNumberTypeSourceValue$outboundSchema;
  /** @deprecated use `EmployeeSchemasNationalIdentityNumberTypeSourceValue$Outbound` instead. */
  export type Outbound =
    EmployeeSchemasNationalIdentityNumberTypeSourceValue$Outbound;
}

export function employeeSchemasNationalIdentityNumberTypeSourceValueToJSON(
  employeeSchemasNationalIdentityNumberTypeSourceValue:
    EmployeeSchemasNationalIdentityNumberTypeSourceValue,
): string {
  return JSON.stringify(
    EmployeeSchemasNationalIdentityNumberTypeSourceValue$outboundSchema.parse(
      employeeSchemasNationalIdentityNumberTypeSourceValue,
    ),
  );
}

export function employeeSchemasNationalIdentityNumberTypeSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  EmployeeSchemasNationalIdentityNumberTypeSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EmployeeSchemasNationalIdentityNumberTypeSourceValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EmployeeSchemasNationalIdentityNumberTypeSourceValue' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasNationalIdentityNumberTypeValue$inboundSchema:
  z.ZodType<
    EmployeeSchemasNationalIdentityNumberTypeValueOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(EmployeeSchemasNationalIdentityNumberTypeValue),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EmployeeSchemasNationalIdentityNumberTypeValue$outboundSchema:
  z.ZodType<
    EmployeeSchemasNationalIdentityNumberTypeValueOpen,
    z.ZodTypeDef,
    EmployeeSchemasNationalIdentityNumberTypeValueOpen
  > = z.union([
    z.nativeEnum(EmployeeSchemasNationalIdentityNumberTypeValue),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasNationalIdentityNumberTypeValue$ {
  /** @deprecated use `EmployeeSchemasNationalIdentityNumberTypeValue$inboundSchema` instead. */
  export const inboundSchema =
    EmployeeSchemasNationalIdentityNumberTypeValue$inboundSchema;
  /** @deprecated use `EmployeeSchemasNationalIdentityNumberTypeValue$outboundSchema` instead. */
  export const outboundSchema =
    EmployeeSchemasNationalIdentityNumberTypeValue$outboundSchema;
}

/** @internal */
export const EmployeeType$inboundSchema: z.ZodType<
  EmployeeType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => EmployeeSchemasNationalIdentityNumberType4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(
    EmployeeSchemasNationalIdentityNumberTypeValue$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type EmployeeType$Outbound = {
  source_value?:
    | EmployeeSchemasNationalIdentityNumberType4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const EmployeeType$outboundSchema: z.ZodType<
  EmployeeType$Outbound,
  z.ZodTypeDef,
  EmployeeType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => EmployeeSchemasNationalIdentityNumberType4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(
    EmployeeSchemasNationalIdentityNumberTypeValue$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeType$ {
  /** @deprecated use `EmployeeType$inboundSchema` instead. */
  export const inboundSchema = EmployeeType$inboundSchema;
  /** @deprecated use `EmployeeType$outboundSchema` instead. */
  export const outboundSchema = EmployeeType$outboundSchema;
  /** @deprecated use `EmployeeType$Outbound` instead. */
  export type Outbound = EmployeeType$Outbound;
}

export function employeeTypeToJSON(employeeType: EmployeeType): string {
  return JSON.stringify(EmployeeType$outboundSchema.parse(employeeType));
}

export function employeeTypeFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeType' from JSON`,
  );
}

/** @internal */
export const NationalIdentityNumber$inboundSchema: z.ZodType<
  NationalIdentityNumber,
  z.ZodTypeDef,
  unknown
> = z.object({
  country: z.nullable(z.lazy(() => EmployeeSchemasCountry$inboundSchema))
    .optional(),
  type: z.nullable(z.lazy(() => EmployeeType$inboundSchema)).optional(),
  value: z.nullable(z.string()).optional(),
});

/** @internal */
export type NationalIdentityNumber$Outbound = {
  country?: EmployeeSchemasCountry$Outbound | null | undefined;
  type?: EmployeeType$Outbound | null | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const NationalIdentityNumber$outboundSchema: z.ZodType<
  NationalIdentityNumber$Outbound,
  z.ZodTypeDef,
  NationalIdentityNumber
> = z.object({
  country: z.nullable(z.lazy(() => EmployeeSchemasCountry$outboundSchema))
    .optional(),
  type: z.nullable(z.lazy(() => EmployeeType$outboundSchema)).optional(),
  value: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NationalIdentityNumber$ {
  /** @deprecated use `NationalIdentityNumber$inboundSchema` instead. */
  export const inboundSchema = NationalIdentityNumber$inboundSchema;
  /** @deprecated use `NationalIdentityNumber$outboundSchema` instead. */
  export const outboundSchema = NationalIdentityNumber$outboundSchema;
  /** @deprecated use `NationalIdentityNumber$Outbound` instead. */
  export type Outbound = NationalIdentityNumber$Outbound;
}

export function nationalIdentityNumberToJSON(
  nationalIdentityNumber: NationalIdentityNumber,
): string {
  return JSON.stringify(
    NationalIdentityNumber$outboundSchema.parse(nationalIdentityNumber),
  );
}

export function nationalIdentityNumberFromJSON(
  jsonString: string,
): SafeParseResult<NationalIdentityNumber, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NationalIdentityNumber$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NationalIdentityNumber' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasPreferredLanguage4$inboundSchema: z.ZodType<
  EmployeeSchemasPreferredLanguage4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EmployeeSchemasPreferredLanguage4$Outbound = {};

/** @internal */
export const EmployeeSchemasPreferredLanguage4$outboundSchema: z.ZodType<
  EmployeeSchemasPreferredLanguage4$Outbound,
  z.ZodTypeDef,
  EmployeeSchemasPreferredLanguage4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasPreferredLanguage4$ {
  /** @deprecated use `EmployeeSchemasPreferredLanguage4$inboundSchema` instead. */
  export const inboundSchema = EmployeeSchemasPreferredLanguage4$inboundSchema;
  /** @deprecated use `EmployeeSchemasPreferredLanguage4$outboundSchema` instead. */
  export const outboundSchema =
    EmployeeSchemasPreferredLanguage4$outboundSchema;
  /** @deprecated use `EmployeeSchemasPreferredLanguage4$Outbound` instead. */
  export type Outbound = EmployeeSchemasPreferredLanguage4$Outbound;
}

export function employeeSchemasPreferredLanguage4ToJSON(
  employeeSchemasPreferredLanguage4: EmployeeSchemasPreferredLanguage4,
): string {
  return JSON.stringify(
    EmployeeSchemasPreferredLanguage4$outboundSchema.parse(
      employeeSchemasPreferredLanguage4,
    ),
  );
}

export function employeeSchemasPreferredLanguage4FromJSON(
  jsonString: string,
): SafeParseResult<EmployeeSchemasPreferredLanguage4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeSchemasPreferredLanguage4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeSchemasPreferredLanguage4' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasPreferredLanguageSourceValue$inboundSchema:
  z.ZodType<
    EmployeeSchemasPreferredLanguageSourceValue,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => EmployeeSchemasPreferredLanguage4$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/** @internal */
export type EmployeeSchemasPreferredLanguageSourceValue$Outbound =
  | EmployeeSchemasPreferredLanguage4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const EmployeeSchemasPreferredLanguageSourceValue$outboundSchema:
  z.ZodType<
    EmployeeSchemasPreferredLanguageSourceValue$Outbound,
    z.ZodTypeDef,
    EmployeeSchemasPreferredLanguageSourceValue
  > = z.union([
    z.lazy(() => EmployeeSchemasPreferredLanguage4$outboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasPreferredLanguageSourceValue$ {
  /** @deprecated use `EmployeeSchemasPreferredLanguageSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    EmployeeSchemasPreferredLanguageSourceValue$inboundSchema;
  /** @deprecated use `EmployeeSchemasPreferredLanguageSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    EmployeeSchemasPreferredLanguageSourceValue$outboundSchema;
  /** @deprecated use `EmployeeSchemasPreferredLanguageSourceValue$Outbound` instead. */
  export type Outbound = EmployeeSchemasPreferredLanguageSourceValue$Outbound;
}

export function employeeSchemasPreferredLanguageSourceValueToJSON(
  employeeSchemasPreferredLanguageSourceValue:
    EmployeeSchemasPreferredLanguageSourceValue,
): string {
  return JSON.stringify(
    EmployeeSchemasPreferredLanguageSourceValue$outboundSchema.parse(
      employeeSchemasPreferredLanguageSourceValue,
    ),
  );
}

export function employeeSchemasPreferredLanguageSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  EmployeeSchemasPreferredLanguageSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EmployeeSchemasPreferredLanguageSourceValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EmployeeSchemasPreferredLanguageSourceValue' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasPreferredLanguageValue$inboundSchema: z.ZodType<
  EmployeeSchemasPreferredLanguageValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EmployeeSchemasPreferredLanguageValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EmployeeSchemasPreferredLanguageValue$outboundSchema: z.ZodType<
  EmployeeSchemasPreferredLanguageValueOpen,
  z.ZodTypeDef,
  EmployeeSchemasPreferredLanguageValueOpen
> = z.union([
  z.nativeEnum(EmployeeSchemasPreferredLanguageValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasPreferredLanguageValue$ {
  /** @deprecated use `EmployeeSchemasPreferredLanguageValue$inboundSchema` instead. */
  export const inboundSchema =
    EmployeeSchemasPreferredLanguageValue$inboundSchema;
  /** @deprecated use `EmployeeSchemasPreferredLanguageValue$outboundSchema` instead. */
  export const outboundSchema =
    EmployeeSchemasPreferredLanguageValue$outboundSchema;
}

/** @internal */
export const PreferredLanguage$inboundSchema: z.ZodType<
  PreferredLanguage,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => EmployeeSchemasPreferredLanguage4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmployeeSchemasPreferredLanguageValue$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type PreferredLanguage$Outbound = {
  source_value?:
    | EmployeeSchemasPreferredLanguage4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const PreferredLanguage$outboundSchema: z.ZodType<
  PreferredLanguage$Outbound,
  z.ZodTypeDef,
  PreferredLanguage
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => EmployeeSchemasPreferredLanguage4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmployeeSchemasPreferredLanguageValue$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreferredLanguage$ {
  /** @deprecated use `PreferredLanguage$inboundSchema` instead. */
  export const inboundSchema = PreferredLanguage$inboundSchema;
  /** @deprecated use `PreferredLanguage$outboundSchema` instead. */
  export const outboundSchema = PreferredLanguage$outboundSchema;
  /** @deprecated use `PreferredLanguage$Outbound` instead. */
  export type Outbound = PreferredLanguage$Outbound;
}

export function preferredLanguageToJSON(
  preferredLanguage: PreferredLanguage,
): string {
  return JSON.stringify(
    PreferredLanguage$outboundSchema.parse(preferredLanguage),
  );
}

export function preferredLanguageFromJSON(
  jsonString: string,
): SafeParseResult<PreferredLanguage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreferredLanguage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreferredLanguage' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasWorkLocation4$inboundSchema: z.ZodType<
  EmployeeSchemasWorkLocation4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EmployeeSchemasWorkLocation4$Outbound = {};

/** @internal */
export const EmployeeSchemasWorkLocation4$outboundSchema: z.ZodType<
  EmployeeSchemasWorkLocation4$Outbound,
  z.ZodTypeDef,
  EmployeeSchemasWorkLocation4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasWorkLocation4$ {
  /** @deprecated use `EmployeeSchemasWorkLocation4$inboundSchema` instead. */
  export const inboundSchema = EmployeeSchemasWorkLocation4$inboundSchema;
  /** @deprecated use `EmployeeSchemasWorkLocation4$outboundSchema` instead. */
  export const outboundSchema = EmployeeSchemasWorkLocation4$outboundSchema;
  /** @deprecated use `EmployeeSchemasWorkLocation4$Outbound` instead. */
  export type Outbound = EmployeeSchemasWorkLocation4$Outbound;
}

export function employeeSchemasWorkLocation4ToJSON(
  employeeSchemasWorkLocation4: EmployeeSchemasWorkLocation4,
): string {
  return JSON.stringify(
    EmployeeSchemasWorkLocation4$outboundSchema.parse(
      employeeSchemasWorkLocation4,
    ),
  );
}

export function employeeSchemasWorkLocation4FromJSON(
  jsonString: string,
): SafeParseResult<EmployeeSchemasWorkLocation4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeSchemasWorkLocation4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeSchemasWorkLocation4' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasWorkLocationSourceValue$inboundSchema: z.ZodType<
  EmployeeSchemasWorkLocationSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => EmployeeSchemasWorkLocation4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type EmployeeSchemasWorkLocationSourceValue$Outbound =
  | EmployeeSchemasWorkLocation4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const EmployeeSchemasWorkLocationSourceValue$outboundSchema: z.ZodType<
  EmployeeSchemasWorkLocationSourceValue$Outbound,
  z.ZodTypeDef,
  EmployeeSchemasWorkLocationSourceValue
> = z.union([
  z.lazy(() => EmployeeSchemasWorkLocation4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasWorkLocationSourceValue$ {
  /** @deprecated use `EmployeeSchemasWorkLocationSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    EmployeeSchemasWorkLocationSourceValue$inboundSchema;
  /** @deprecated use `EmployeeSchemasWorkLocationSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    EmployeeSchemasWorkLocationSourceValue$outboundSchema;
  /** @deprecated use `EmployeeSchemasWorkLocationSourceValue$Outbound` instead. */
  export type Outbound = EmployeeSchemasWorkLocationSourceValue$Outbound;
}

export function employeeSchemasWorkLocationSourceValueToJSON(
  employeeSchemasWorkLocationSourceValue:
    EmployeeSchemasWorkLocationSourceValue,
): string {
  return JSON.stringify(
    EmployeeSchemasWorkLocationSourceValue$outboundSchema.parse(
      employeeSchemasWorkLocationSourceValue,
    ),
  );
}

export function employeeSchemasWorkLocationSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeSchemasWorkLocationSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EmployeeSchemasWorkLocationSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeSchemasWorkLocationSourceValue' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasWorkLocationValue$inboundSchema: z.ZodType<
  EmployeeSchemasWorkLocationValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EmployeeSchemasWorkLocationValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EmployeeSchemasWorkLocationValue$outboundSchema: z.ZodType<
  EmployeeSchemasWorkLocationValueOpen,
  z.ZodTypeDef,
  EmployeeSchemasWorkLocationValueOpen
> = z.union([
  z.nativeEnum(EmployeeSchemasWorkLocationValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasWorkLocationValue$ {
  /** @deprecated use `EmployeeSchemasWorkLocationValue$inboundSchema` instead. */
  export const inboundSchema = EmployeeSchemasWorkLocationValue$inboundSchema;
  /** @deprecated use `EmployeeSchemasWorkLocationValue$outboundSchema` instead. */
  export const outboundSchema = EmployeeSchemasWorkLocationValue$outboundSchema;
}

/** @internal */
export const EmployeeSchemasWorkLocationCountry$inboundSchema: z.ZodType<
  EmployeeSchemasWorkLocationCountry,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => EmployeeSchemasWorkLocation4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmployeeSchemasWorkLocationValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type EmployeeSchemasWorkLocationCountry$Outbound = {
  source_value?:
    | EmployeeSchemasWorkLocation4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const EmployeeSchemasWorkLocationCountry$outboundSchema: z.ZodType<
  EmployeeSchemasWorkLocationCountry$Outbound,
  z.ZodTypeDef,
  EmployeeSchemasWorkLocationCountry
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => EmployeeSchemasWorkLocation4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmployeeSchemasWorkLocationValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasWorkLocationCountry$ {
  /** @deprecated use `EmployeeSchemasWorkLocationCountry$inboundSchema` instead. */
  export const inboundSchema = EmployeeSchemasWorkLocationCountry$inboundSchema;
  /** @deprecated use `EmployeeSchemasWorkLocationCountry$outboundSchema` instead. */
  export const outboundSchema =
    EmployeeSchemasWorkLocationCountry$outboundSchema;
  /** @deprecated use `EmployeeSchemasWorkLocationCountry$Outbound` instead. */
  export type Outbound = EmployeeSchemasWorkLocationCountry$Outbound;
}

export function employeeSchemasWorkLocationCountryToJSON(
  employeeSchemasWorkLocationCountry: EmployeeSchemasWorkLocationCountry,
): string {
  return JSON.stringify(
    EmployeeSchemasWorkLocationCountry$outboundSchema.parse(
      employeeSchemasWorkLocationCountry,
    ),
  );
}

export function employeeSchemasWorkLocationCountryFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeSchemasWorkLocationCountry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EmployeeSchemasWorkLocationCountry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeSchemasWorkLocationCountry' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasWorkLocationLocationType4$inboundSchema: z.ZodType<
  EmployeeSchemasWorkLocationLocationType4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EmployeeSchemasWorkLocationLocationType4$Outbound = {};

/** @internal */
export const EmployeeSchemasWorkLocationLocationType4$outboundSchema: z.ZodType<
  EmployeeSchemasWorkLocationLocationType4$Outbound,
  z.ZodTypeDef,
  EmployeeSchemasWorkLocationLocationType4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasWorkLocationLocationType4$ {
  /** @deprecated use `EmployeeSchemasWorkLocationLocationType4$inboundSchema` instead. */
  export const inboundSchema =
    EmployeeSchemasWorkLocationLocationType4$inboundSchema;
  /** @deprecated use `EmployeeSchemasWorkLocationLocationType4$outboundSchema` instead. */
  export const outboundSchema =
    EmployeeSchemasWorkLocationLocationType4$outboundSchema;
  /** @deprecated use `EmployeeSchemasWorkLocationLocationType4$Outbound` instead. */
  export type Outbound = EmployeeSchemasWorkLocationLocationType4$Outbound;
}

export function employeeSchemasWorkLocationLocationType4ToJSON(
  employeeSchemasWorkLocationLocationType4:
    EmployeeSchemasWorkLocationLocationType4,
): string {
  return JSON.stringify(
    EmployeeSchemasWorkLocationLocationType4$outboundSchema.parse(
      employeeSchemasWorkLocationLocationType4,
    ),
  );
}

export function employeeSchemasWorkLocationLocationType4FromJSON(
  jsonString: string,
): SafeParseResult<
  EmployeeSchemasWorkLocationLocationType4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EmployeeSchemasWorkLocationLocationType4$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EmployeeSchemasWorkLocationLocationType4' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasWorkLocationLocationTypeSourceValue$inboundSchema:
  z.ZodType<
    EmployeeSchemasWorkLocationLocationTypeSourceValue,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => EmployeeSchemasWorkLocationLocationType4$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/** @internal */
export type EmployeeSchemasWorkLocationLocationTypeSourceValue$Outbound =
  | EmployeeSchemasWorkLocationLocationType4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const EmployeeSchemasWorkLocationLocationTypeSourceValue$outboundSchema:
  z.ZodType<
    EmployeeSchemasWorkLocationLocationTypeSourceValue$Outbound,
    z.ZodTypeDef,
    EmployeeSchemasWorkLocationLocationTypeSourceValue
  > = z.union([
    z.lazy(() => EmployeeSchemasWorkLocationLocationType4$outboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasWorkLocationLocationTypeSourceValue$ {
  /** @deprecated use `EmployeeSchemasWorkLocationLocationTypeSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    EmployeeSchemasWorkLocationLocationTypeSourceValue$inboundSchema;
  /** @deprecated use `EmployeeSchemasWorkLocationLocationTypeSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    EmployeeSchemasWorkLocationLocationTypeSourceValue$outboundSchema;
  /** @deprecated use `EmployeeSchemasWorkLocationLocationTypeSourceValue$Outbound` instead. */
  export type Outbound =
    EmployeeSchemasWorkLocationLocationTypeSourceValue$Outbound;
}

export function employeeSchemasWorkLocationLocationTypeSourceValueToJSON(
  employeeSchemasWorkLocationLocationTypeSourceValue:
    EmployeeSchemasWorkLocationLocationTypeSourceValue,
): string {
  return JSON.stringify(
    EmployeeSchemasWorkLocationLocationTypeSourceValue$outboundSchema.parse(
      employeeSchemasWorkLocationLocationTypeSourceValue,
    ),
  );
}

export function employeeSchemasWorkLocationLocationTypeSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  EmployeeSchemasWorkLocationLocationTypeSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EmployeeSchemasWorkLocationLocationTypeSourceValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EmployeeSchemasWorkLocationLocationTypeSourceValue' from JSON`,
  );
}

/** @internal */
export const EmployeeSchemasWorkLocationLocationTypeValue$inboundSchema:
  z.ZodType<
    EmployeeSchemasWorkLocationLocationTypeValueOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(EmployeeSchemasWorkLocationLocationTypeValue),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EmployeeSchemasWorkLocationLocationTypeValue$outboundSchema:
  z.ZodType<
    EmployeeSchemasWorkLocationLocationTypeValueOpen,
    z.ZodTypeDef,
    EmployeeSchemasWorkLocationLocationTypeValueOpen
  > = z.union([
    z.nativeEnum(EmployeeSchemasWorkLocationLocationTypeValue),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasWorkLocationLocationTypeValue$ {
  /** @deprecated use `EmployeeSchemasWorkLocationLocationTypeValue$inboundSchema` instead. */
  export const inboundSchema =
    EmployeeSchemasWorkLocationLocationTypeValue$inboundSchema;
  /** @deprecated use `EmployeeSchemasWorkLocationLocationTypeValue$outboundSchema` instead. */
  export const outboundSchema =
    EmployeeSchemasWorkLocationLocationTypeValue$outboundSchema;
}

/** @internal */
export const EmployeeSchemasLocationType$inboundSchema: z.ZodType<
  EmployeeSchemasLocationType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => EmployeeSchemasWorkLocationLocationType4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmployeeSchemasWorkLocationLocationTypeValue$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type EmployeeSchemasLocationType$Outbound = {
  source_value?:
    | EmployeeSchemasWorkLocationLocationType4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const EmployeeSchemasLocationType$outboundSchema: z.ZodType<
  EmployeeSchemasLocationType$Outbound,
  z.ZodTypeDef,
  EmployeeSchemasLocationType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => EmployeeSchemasWorkLocationLocationType4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmployeeSchemasWorkLocationLocationTypeValue$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchemasLocationType$ {
  /** @deprecated use `EmployeeSchemasLocationType$inboundSchema` instead. */
  export const inboundSchema = EmployeeSchemasLocationType$inboundSchema;
  /** @deprecated use `EmployeeSchemasLocationType$outboundSchema` instead. */
  export const outboundSchema = EmployeeSchemasLocationType$outboundSchema;
  /** @deprecated use `EmployeeSchemasLocationType$Outbound` instead. */
  export type Outbound = EmployeeSchemasLocationType$Outbound;
}

export function employeeSchemasLocationTypeToJSON(
  employeeSchemasLocationType: EmployeeSchemasLocationType,
): string {
  return JSON.stringify(
    EmployeeSchemasLocationType$outboundSchema.parse(
      employeeSchemasLocationType,
    ),
  );
}

export function employeeSchemasLocationTypeFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeSchemasLocationType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeSchemasLocationType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeSchemasLocationType' from JSON`,
  );
}

/** @internal */
export const WorkLocation$inboundSchema: z.ZodType<
  WorkLocation,
  z.ZodTypeDef,
  unknown
> = z.object({
  city: z.nullable(z.string()).optional(),
  country: z.nullable(
    z.lazy(() => EmployeeSchemasWorkLocationCountry$inboundSchema),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  employee_id: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  location_type: z.nullable(
    z.lazy(() => EmployeeSchemasLocationType$inboundSchema),
  ).optional(),
  name: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  remote_employee_id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  street_1: z.nullable(z.string()).optional(),
  street_2: z.nullable(z.string()).optional(),
  unified_custom_fields: z.nullable(z.record(z.any())).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  zip_code: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "employee_id": "employeeId",
    "location_type": "locationType",
    "phone_number": "phoneNumber",
    "remote_employee_id": "remoteEmployeeId",
    "remote_id": "remoteId",
    "street_1": "street1",
    "street_2": "street2",
    "unified_custom_fields": "unifiedCustomFields",
    "updated_at": "updatedAt",
    "zip_code": "zipCode",
  });
});

/** @internal */
export type WorkLocation$Outbound = {
  city?: string | null | undefined;
  country?: EmployeeSchemasWorkLocationCountry$Outbound | null | undefined;
  created_at?: string | null | undefined;
  employee_id?: string | null | undefined;
  id?: string | null | undefined;
  location_type?: EmployeeSchemasLocationType$Outbound | null | undefined;
  name?: string | null | undefined;
  phone_number?: string | null | undefined;
  remote_employee_id?: string | null | undefined;
  remote_id?: string | null | undefined;
  state?: string | null | undefined;
  street_1?: string | null | undefined;
  street_2?: string | null | undefined;
  unified_custom_fields?: { [k: string]: any } | null | undefined;
  updated_at?: string | null | undefined;
  zip_code?: string | null | undefined;
};

/** @internal */
export const WorkLocation$outboundSchema: z.ZodType<
  WorkLocation$Outbound,
  z.ZodTypeDef,
  WorkLocation
> = z.object({
  city: z.nullable(z.string()).optional(),
  country: z.nullable(
    z.lazy(() => EmployeeSchemasWorkLocationCountry$outboundSchema),
  ).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  employeeId: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  locationType: z.nullable(
    z.lazy(() => EmployeeSchemasLocationType$outboundSchema),
  ).optional(),
  name: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  remoteEmployeeId: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  street1: z.nullable(z.string()).optional(),
  street2: z.nullable(z.string()).optional(),
  unifiedCustomFields: z.nullable(z.record(z.any())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  zipCode: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    employeeId: "employee_id",
    locationType: "location_type",
    phoneNumber: "phone_number",
    remoteEmployeeId: "remote_employee_id",
    remoteId: "remote_id",
    street1: "street_1",
    street2: "street_2",
    unifiedCustomFields: "unified_custom_fields",
    updatedAt: "updated_at",
    zipCode: "zip_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkLocation$ {
  /** @deprecated use `WorkLocation$inboundSchema` instead. */
  export const inboundSchema = WorkLocation$inboundSchema;
  /** @deprecated use `WorkLocation$outboundSchema` instead. */
  export const outboundSchema = WorkLocation$outboundSchema;
  /** @deprecated use `WorkLocation$Outbound` instead. */
  export type Outbound = WorkLocation$Outbound;
}

export function workLocationToJSON(workLocation: WorkLocation): string {
  return JSON.stringify(WorkLocation$outboundSchema.parse(workLocation));
}

export function workLocationFromJSON(
  jsonString: string,
): SafeParseResult<WorkLocation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkLocation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkLocation' from JSON`,
  );
}

/** @internal */
export const Employee$inboundSchema: z.ZodType<
  Employee,
  z.ZodTypeDef,
  unknown
> = z.object({
  avatar: z.nullable(z.lazy(() => Avatar$inboundSchema)).optional(),
  avatar_url: z.nullable(z.string()).optional(),
  benefits: z.nullable(z.array(HRISBenefit$inboundSchema)).optional(),
  birthday: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  citizenships: z.nullable(z.array(CountryCodeEnum$inboundSchema)).optional(),
  company: z.nullable(z.lazy(() => EmployeeCompany$inboundSchema)).optional(),
  company_id: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  cost_centers: z.nullable(z.array(CostCenters$inboundSchema)).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  custom_fields: z.nullable(z.array(CustomFields$inboundSchema)).optional(),
  date_of_birth: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  department: z.nullable(z.string()).optional(),
  department_id: z.nullable(z.string()).optional(),
  display_name: z.nullable(z.string()).optional(),
  employee_number: z.nullable(z.string()).optional(),
  employment_contract_type: z.nullable(
    z.lazy(() => EmployeeEmploymentContractType$inboundSchema),
  ).optional(),
  employment_status: z.nullable(z.lazy(() => EmploymentStatus$inboundSchema))
    .optional(),
  employment_type: z.nullable(
    z.lazy(() => EmployeeEmploymentType$inboundSchema),
  ).optional(),
  employments: z.nullable(z.array(Employment$inboundSchema)).optional(),
  ethnicity: z.nullable(z.lazy(() => Ethnicity$inboundSchema)).optional(),
  first_name: z.nullable(z.string()).optional(),
  gender: z.nullable(z.lazy(() => Gender$inboundSchema)).optional(),
  groups: z.nullable(z.array(HRISGroup$inboundSchema)).optional(),
  hire_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  home_location: z.nullable(z.lazy(() => HomeLocation$inboundSchema))
    .optional(),
  id: z.nullable(z.string()).optional(),
  job_description: z.nullable(z.lazy(() => JobDescription$inboundSchema))
    .optional(),
  job_id: z.nullable(z.string()).optional(),
  job_title: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  manager_id: z.nullable(z.string()).optional(),
  marital_status: z.nullable(z.lazy(() => MaritalStatus$inboundSchema))
    .optional(),
  name: z.nullable(z.string()).optional(),
  national_identity_number: z.nullable(
    z.lazy(() => NationalIdentityNumber$inboundSchema),
  ).optional(),
  national_identity_numbers: z.nullable(
    z.array(NationalIdentityNumberApiModel$inboundSchema),
  ).optional(),
  personal_email: z.nullable(z.string()).optional(),
  personal_phone_number: z.nullable(z.string()).optional(),
  preferred_language: z.nullable(z.lazy(() => PreferredLanguage$inboundSchema))
    .optional(),
  remote_id: z.nullable(z.string()).optional(),
  remote_manager_id: z.nullable(z.string()).optional(),
  start_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  tenure: z.nullable(z.number()).optional(),
  termination_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  unified_custom_fields: z.nullable(z.record(z.any())).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  work_anniversary: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  work_email: z.nullable(z.string()).optional(),
  work_location: z.nullable(z.lazy(() => WorkLocation$inboundSchema))
    .optional(),
  work_phone_number: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "avatar_url": "avatarUrl",
    "company_id": "companyId",
    "company_name": "companyName",
    "cost_centers": "costCenters",
    "created_at": "createdAt",
    "custom_fields": "customFields",
    "date_of_birth": "dateOfBirth",
    "department_id": "departmentId",
    "display_name": "displayName",
    "employee_number": "employeeNumber",
    "employment_contract_type": "employmentContractType",
    "employment_status": "employmentStatus",
    "employment_type": "employmentType",
    "first_name": "firstName",
    "hire_date": "hireDate",
    "home_location": "homeLocation",
    "job_description": "jobDescription",
    "job_id": "jobId",
    "job_title": "jobTitle",
    "last_name": "lastName",
    "manager_id": "managerId",
    "marital_status": "maritalStatus",
    "national_identity_number": "nationalIdentityNumber",
    "national_identity_numbers": "nationalIdentityNumbers",
    "personal_email": "personalEmail",
    "personal_phone_number": "personalPhoneNumber",
    "preferred_language": "preferredLanguage",
    "remote_id": "remoteId",
    "remote_manager_id": "remoteManagerId",
    "start_date": "startDate",
    "termination_date": "terminationDate",
    "unified_custom_fields": "unifiedCustomFields",
    "updated_at": "updatedAt",
    "work_anniversary": "workAnniversary",
    "work_email": "workEmail",
    "work_location": "workLocation",
    "work_phone_number": "workPhoneNumber",
  });
});

/** @internal */
export type Employee$Outbound = {
  avatar?: Avatar$Outbound | null | undefined;
  avatar_url?: string | null | undefined;
  benefits?: Array<HRISBenefit$Outbound> | null | undefined;
  birthday?: string | null | undefined;
  citizenships?: Array<CountryCodeEnum$Outbound> | null | undefined;
  company?: EmployeeCompany$Outbound | null | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  cost_centers?: Array<CostCenters$Outbound> | null | undefined;
  created_at?: string | null | undefined;
  custom_fields?: Array<CustomFields$Outbound> | null | undefined;
  date_of_birth?: string | null | undefined;
  department?: string | null | undefined;
  department_id?: string | null | undefined;
  display_name?: string | null | undefined;
  employee_number?: string | null | undefined;
  employment_contract_type?:
    | EmployeeEmploymentContractType$Outbound
    | null
    | undefined;
  employment_status?: EmploymentStatus$Outbound | null | undefined;
  employment_type?: EmployeeEmploymentType$Outbound | null | undefined;
  employments?: Array<Employment$Outbound> | null | undefined;
  ethnicity?: Ethnicity$Outbound | null | undefined;
  first_name?: string | null | undefined;
  gender?: Gender$Outbound | null | undefined;
  groups?: Array<HRISGroup$Outbound> | null | undefined;
  hire_date?: string | null | undefined;
  home_location?: HomeLocation$Outbound | null | undefined;
  id?: string | null | undefined;
  job_description?: JobDescription$Outbound | null | undefined;
  job_id?: string | null | undefined;
  job_title?: string | null | undefined;
  last_name?: string | null | undefined;
  manager_id?: string | null | undefined;
  marital_status?: MaritalStatus$Outbound | null | undefined;
  name?: string | null | undefined;
  national_identity_number?: NationalIdentityNumber$Outbound | null | undefined;
  national_identity_numbers?:
    | Array<NationalIdentityNumberApiModel$Outbound>
    | null
    | undefined;
  personal_email?: string | null | undefined;
  personal_phone_number?: string | null | undefined;
  preferred_language?: PreferredLanguage$Outbound | null | undefined;
  remote_id?: string | null | undefined;
  remote_manager_id?: string | null | undefined;
  start_date?: string | null | undefined;
  tenure?: number | null | undefined;
  termination_date?: string | null | undefined;
  unified_custom_fields?: { [k: string]: any } | null | undefined;
  updated_at?: string | null | undefined;
  work_anniversary?: string | null | undefined;
  work_email?: string | null | undefined;
  work_location?: WorkLocation$Outbound | null | undefined;
  work_phone_number?: string | null | undefined;
};

/** @internal */
export const Employee$outboundSchema: z.ZodType<
  Employee$Outbound,
  z.ZodTypeDef,
  Employee
> = z.object({
  avatar: z.nullable(z.lazy(() => Avatar$outboundSchema)).optional(),
  avatarUrl: z.nullable(z.string()).optional(),
  benefits: z.nullable(z.array(HRISBenefit$outboundSchema)).optional(),
  birthday: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  citizenships: z.nullable(z.array(CountryCodeEnum$outboundSchema)).optional(),
  company: z.nullable(z.lazy(() => EmployeeCompany$outboundSchema)).optional(),
  companyId: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  costCenters: z.nullable(z.array(CostCenters$outboundSchema)).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  customFields: z.nullable(z.array(CustomFields$outboundSchema)).optional(),
  dateOfBirth: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  department: z.nullable(z.string()).optional(),
  departmentId: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  employeeNumber: z.nullable(z.string()).optional(),
  employmentContractType: z.nullable(
    z.lazy(() => EmployeeEmploymentContractType$outboundSchema),
  ).optional(),
  employmentStatus: z.nullable(z.lazy(() => EmploymentStatus$outboundSchema))
    .optional(),
  employmentType: z.nullable(
    z.lazy(() => EmployeeEmploymentType$outboundSchema),
  ).optional(),
  employments: z.nullable(z.array(Employment$outboundSchema)).optional(),
  ethnicity: z.nullable(z.lazy(() => Ethnicity$outboundSchema)).optional(),
  firstName: z.nullable(z.string()).optional(),
  gender: z.nullable(z.lazy(() => Gender$outboundSchema)).optional(),
  groups: z.nullable(z.array(HRISGroup$outboundSchema)).optional(),
  hireDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  homeLocation: z.nullable(z.lazy(() => HomeLocation$outboundSchema))
    .optional(),
  id: z.nullable(z.string()).optional(),
  jobDescription: z.nullable(z.lazy(() => JobDescription$outboundSchema))
    .optional(),
  jobId: z.nullable(z.string()).optional(),
  jobTitle: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  managerId: z.nullable(z.string()).optional(),
  maritalStatus: z.nullable(z.lazy(() => MaritalStatus$outboundSchema))
    .optional(),
  name: z.nullable(z.string()).optional(),
  nationalIdentityNumber: z.nullable(
    z.lazy(() => NationalIdentityNumber$outboundSchema),
  ).optional(),
  nationalIdentityNumbers: z.nullable(
    z.array(NationalIdentityNumberApiModel$outboundSchema),
  ).optional(),
  personalEmail: z.nullable(z.string()).optional(),
  personalPhoneNumber: z.nullable(z.string()).optional(),
  preferredLanguage: z.nullable(z.lazy(() => PreferredLanguage$outboundSchema))
    .optional(),
  remoteId: z.nullable(z.string()).optional(),
  remoteManagerId: z.nullable(z.string()).optional(),
  startDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  tenure: z.nullable(z.number()).optional(),
  terminationDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  unifiedCustomFields: z.nullable(z.record(z.any())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  workAnniversary: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  workEmail: z.nullable(z.string()).optional(),
  workLocation: z.nullable(z.lazy(() => WorkLocation$outboundSchema))
    .optional(),
  workPhoneNumber: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    avatarUrl: "avatar_url",
    companyId: "company_id",
    companyName: "company_name",
    costCenters: "cost_centers",
    createdAt: "created_at",
    customFields: "custom_fields",
    dateOfBirth: "date_of_birth",
    departmentId: "department_id",
    displayName: "display_name",
    employeeNumber: "employee_number",
    employmentContractType: "employment_contract_type",
    employmentStatus: "employment_status",
    employmentType: "employment_type",
    firstName: "first_name",
    hireDate: "hire_date",
    homeLocation: "home_location",
    jobDescription: "job_description",
    jobId: "job_id",
    jobTitle: "job_title",
    lastName: "last_name",
    managerId: "manager_id",
    maritalStatus: "marital_status",
    nationalIdentityNumber: "national_identity_number",
    nationalIdentityNumbers: "national_identity_numbers",
    personalEmail: "personal_email",
    personalPhoneNumber: "personal_phone_number",
    preferredLanguage: "preferred_language",
    remoteId: "remote_id",
    remoteManagerId: "remote_manager_id",
    startDate: "start_date",
    terminationDate: "termination_date",
    unifiedCustomFields: "unified_custom_fields",
    updatedAt: "updated_at",
    workAnniversary: "work_anniversary",
    workEmail: "work_email",
    workLocation: "work_location",
    workPhoneNumber: "work_phone_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Employee$ {
  /** @deprecated use `Employee$inboundSchema` instead. */
  export const inboundSchema = Employee$inboundSchema;
  /** @deprecated use `Employee$outboundSchema` instead. */
  export const outboundSchema = Employee$outboundSchema;
  /** @deprecated use `Employee$Outbound` instead. */
  export type Outbound = Employee$Outbound;
}

export function employeeToJSON(employee: Employee): string {
  return JSON.stringify(Employee$outboundSchema.parse(employee));
}

export function employeeFromJSON(
  jsonString: string,
): SafeParseResult<Employee, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Employee$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Employee' from JSON`,
  );
}
