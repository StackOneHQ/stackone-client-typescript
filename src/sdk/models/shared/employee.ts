/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CostCenters, CostCenters$ } from "./costcenters";
import { CountryCodeEnum, CountryCodeEnum$ } from "./countrycodeenum";
import { EmployeeCustomFields, EmployeeCustomFields$ } from "./employeecustomfields";
import { Employment, Employment$ } from "./employment";
import { WorkEligibility, WorkEligibility$ } from "./workeligibility";
import { z } from "zod";

/**
 * The employee avatar
 */
export type Avatar = {
    base64?: string | null | undefined;
    url?: string | null | undefined;
};

export type Employee4 = {};

export type EmployeeSourceValue = Employee4 | string | number | boolean;

export enum EmployeeValue {
    FullTime = "full_time",
    Shifts = "shifts",
    PartTime = "part_time",
    UnmappedValue = "unmapped_value",
}

/**
 * The employment work schedule type (e.g., full-time, part-time)
 */
export type EmploymentContractType = {
    sourceValue?: Employee4 | string | number | boolean | null | undefined;
    value?: EmployeeValue | null | undefined;
};

export type EmployeeSchemas4 = {};

export type EmployeeSchemasSourceValue = EmployeeSchemas4 | string | number | boolean;

export enum EmployeeSchemasValue {
    Active = "active",
    Pending = "pending",
    Terminated = "terminated",
    Leave = "leave",
    Inactive = "inactive",
    Unknown = "unknown",
    UnmappedValue = "unmapped_value",
}

/**
 * The employee employment status
 */
export type EmploymentStatus = {
    sourceValue?: EmployeeSchemas4 | string | number | boolean | null | undefined;
    value?: EmployeeSchemasValue | null | undefined;
};

export type EmployeeSchemasEmploymentType4 = {};

/**
 * The source value of the employment type.
 */
export type EmployeeSchemasEmploymentTypeSourceValue =
    | EmployeeSchemasEmploymentType4
    | string
    | number
    | boolean;

/**
 * The type of the employment.
 */
export enum EmployeeSchemasEmploymentTypeValue {
    FullTime = "full_time",
    PartTime = "part_time",
    Contractor = "contractor",
    Intern = "intern",
    Permanent = "permanent",
    Apprentice = "apprentice",
    Freelance = "freelance",
    Terminated = "terminated",
    Temporary = "temporary",
    Seasonal = "seasonal",
    Volunteer = "volunteer",
    Probation = "probation",
    Internal = "internal",
    External = "external",
    Expatriate = "expatriate",
    EmployerOfRecord = "employer_of_record",
    Casual = "casual",
    UnmappedValue = "unmapped_value",
}

/**
 * The employee employment type
 */
export type EmploymentType = {
    /**
     * The source value of the employment type.
     */
    sourceValue?: EmployeeSchemasEmploymentType4 | string | number | boolean | null | undefined;
    /**
     * The type of the employment.
     */
    value?: EmployeeSchemasEmploymentTypeValue | null | undefined;
};

export type EmployeeSchemasEthnicity4 = {};

export type EmployeeSchemasEthnicitySourceValue =
    | EmployeeSchemasEthnicity4
    | string
    | number
    | boolean;

export enum EmployeeSchemasEthnicityValue {
    White = "white",
    BlackOrAfricanAmerican = "black_or_african_american",
    Asian = "asian",
    HispanicOrLatino = "hispanic_or_latino",
    AmericanIndianOrAlaskaNative = "american_indian_or_alaska_native",
    NativeHawaiianOrPacificIslander = "native_hawaiian_or_pacific_islander",
    TwoOrMoreRaces = "two_or_more_races",
    NotDisclosed = "not_disclosed",
    Other = "other",
    UnmappedValue = "unmapped_value",
}

/**
 * The employee ethnicity
 */
export type Ethnicity = {
    sourceValue?: EmployeeSchemasEthnicity4 | string | number | boolean | null | undefined;
    value?: EmployeeSchemasEthnicityValue | null | undefined;
};

export type EmployeeSchemasGender4 = {};

export type EmployeeSchemasGenderSourceValue = EmployeeSchemasGender4 | string | number | boolean;

export enum EmployeeSchemasGenderValue {
    Male = "male",
    Female = "female",
    NonBinary = "non_binary",
    Other = "other",
    NotDisclosed = "not_disclosed",
    Diverse = "diverse",
    UnmappedValue = "unmapped_value",
}

/**
 * The employee gender
 */
export type Gender = {
    sourceValue?: EmployeeSchemasGender4 | string | number | boolean | null | undefined;
    value?: EmployeeSchemasGenderValue | null | undefined;
};

export type EmployeeSchemasHomeLocation4 = {};

export type EmployeeSchemasHomeLocationSourceValue =
    | EmployeeSchemasHomeLocation4
    | string
    | number
    | boolean;

/**
 * The ISO3166-1 Alpha2 Code of the Country
 */
export enum EmployeeSchemasHomeLocationValue {
    Af = "AF",
    Al = "AL",
    Dz = "DZ",
    As = "AS",
    Ad = "AD",
    Ao = "AO",
    Ai = "AI",
    Aq = "AQ",
    Ag = "AG",
    Ar = "AR",
    Am = "AM",
    Aw = "AW",
    Au = "AU",
    At = "AT",
    Az = "AZ",
    Bs = "BS",
    Bh = "BH",
    Bd = "BD",
    Bb = "BB",
    By = "BY",
    Be = "BE",
    Bz = "BZ",
    Bj = "BJ",
    Bm = "BM",
    Bt = "BT",
    Bo = "BO",
    Bq = "BQ",
    Ba = "BA",
    Bw = "BW",
    Bv = "BV",
    Br = "BR",
    Io = "IO",
    Bn = "BN",
    Bg = "BG",
    Bf = "BF",
    Bi = "BI",
    Kh = "KH",
    Cm = "CM",
    Ca = "CA",
    Cv = "CV",
    Ky = "KY",
    Cf = "CF",
    Td = "TD",
    Cl = "CL",
    Cn = "CN",
    Cx = "CX",
    Cc = "CC",
    Co = "CO",
    Km = "KM",
    Cg = "CG",
    Cd = "CD",
    Ck = "CK",
    Cr = "CR",
    Hr = "HR",
    Cu = "CU",
    Cw = "CW",
    Cy = "CY",
    Cz = "CZ",
    Ci = "CI",
    Dk = "DK",
    Dj = "DJ",
    Dm = "DM",
    Do = "DO",
    Ec = "EC",
    Eg = "EG",
    Sv = "SV",
    Gq = "GQ",
    Er = "ER",
    Ee = "EE",
    Et = "ET",
    Fk = "FK",
    Fo = "FO",
    Fj = "FJ",
    Fi = "FI",
    Fr = "FR",
    Gf = "GF",
    Pf = "PF",
    Tf = "TF",
    Ga = "GA",
    Gm = "GM",
    Ge = "GE",
    De = "DE",
    Gh = "GH",
    Gi = "GI",
    Gr = "GR",
    Gl = "GL",
    Gd = "GD",
    Gp = "GP",
    Gu = "GU",
    Gt = "GT",
    Gg = "GG",
    Gn = "GN",
    Gw = "GW",
    Gy = "GY",
    Ht = "HT",
    Hm = "HM",
    Va = "VA",
    Hn = "HN",
    Hk = "HK",
    Hu = "HU",
    Is = "IS",
    In = "IN",
    Id = "ID",
    Ir = "IR",
    Iq = "IQ",
    Ie = "IE",
    Im = "IM",
    Il = "IL",
    It = "IT",
    Jm = "JM",
    Jp = "JP",
    Je = "JE",
    Jo = "JO",
    Kz = "KZ",
    Ke = "KE",
    Ki = "KI",
    Kp = "KP",
    Kr = "KR",
    Kw = "KW",
    Kg = "KG",
    La = "LA",
    Lv = "LV",
    Lb = "LB",
    Ls = "LS",
    Lr = "LR",
    Ly = "LY",
    Li = "LI",
    Lt = "LT",
    Lu = "LU",
    Mo = "MO",
    Mk = "MK",
    Mg = "MG",
    Mw = "MW",
    My = "MY",
    Mv = "MV",
    Ml = "ML",
    Mt = "MT",
    Mh = "MH",
    Mq = "MQ",
    Mr = "MR",
    Mu = "MU",
    Yt = "YT",
    Mx = "MX",
    Fm = "FM",
    Md = "MD",
    Mc = "MC",
    Mn = "MN",
    Me = "ME",
    Ms = "MS",
    Ma = "MA",
    Mz = "MZ",
    Mm = "MM",
    Na = "NA",
    Nr = "NR",
    Np = "NP",
    Nl = "NL",
    Nc = "NC",
    Nz = "NZ",
    Ni = "NI",
    Ne = "NE",
    Ng = "NG",
    Nu = "NU",
    Nf = "NF",
    Mp = "MP",
    No = "NO",
    Om = "OM",
    Pk = "PK",
    Pw = "PW",
    Ps = "PS",
    Pa = "PA",
    Pg = "PG",
    Py = "PY",
    Pe = "PE",
    Ph = "PH",
    Pn = "PN",
    Pl = "PL",
    Pt = "PT",
    Pr = "PR",
    Qa = "QA",
    Ro = "RO",
    Ru = "RU",
    Rw = "RW",
    Re = "RE",
    Bl = "BL",
    Sh = "SH",
    Kn = "KN",
    Lc = "LC",
    Mf = "MF",
    Pm = "PM",
    Vc = "VC",
    Ws = "WS",
    Sm = "SM",
    St = "ST",
    Sa = "SA",
    Sn = "SN",
    Rs = "RS",
    Sc = "SC",
    Sl = "SL",
    Sg = "SG",
    Sx = "SX",
    Sk = "SK",
    Si = "SI",
    Sb = "SB",
    So = "SO",
    Za = "ZA",
    Gs = "GS",
    Ss = "SS",
    Es = "ES",
    Lk = "LK",
    Sd = "SD",
    Sr = "SR",
    Sj = "SJ",
    Sz = "SZ",
    Se = "SE",
    Ch = "CH",
    Sy = "SY",
    Tw = "TW",
    Tj = "TJ",
    Tz = "TZ",
    Th = "TH",
    Tl = "TL",
    Tg = "TG",
    Tk = "TK",
    To = "TO",
    Tt = "TT",
    Tn = "TN",
    Tr = "TR",
    Tm = "TM",
    Tc = "TC",
    Tv = "TV",
    Ug = "UG",
    Ua = "UA",
    Ae = "AE",
    Gb = "GB",
    Us = "US",
    Um = "UM",
    Uy = "UY",
    Uz = "UZ",
    Vu = "VU",
    Ve = "VE",
    Vn = "VN",
    Vg = "VG",
    Vi = "VI",
    Wf = "WF",
    Eh = "EH",
    Ye = "YE",
    Zm = "ZM",
    Zw = "ZW",
    UnmappedValue = "unmapped_value",
}

/**
 * The country code
 */
export type EmployeeCountry = {
    sourceValue?: EmployeeSchemasHomeLocation4 | string | number | boolean | null | undefined;
    /**
     * The ISO3166-1 Alpha2 Code of the Country
     */
    value?: EmployeeSchemasHomeLocationValue | null | undefined;
};

export type EmployeeSchemasHomeLocationLocationType4 = {};

/**
 * The source value of the location type.
 */
export type EmployeeSchemasHomeLocationLocationTypeSourceValue =
    | EmployeeSchemasHomeLocationLocationType4
    | string
    | number
    | boolean;

/**
 * The type of the location.
 */
export enum EmployeeSchemasHomeLocationLocationTypeValue {
    Home = "home",
    Work = "work",
    UnmappedValue = "unmapped_value",
}

/**
 * The location type
 */
export type EmployeeLocationType = {
    /**
     * The source value of the location type.
     */
    sourceValue?:
        | EmployeeSchemasHomeLocationLocationType4
        | string
        | number
        | boolean
        | null
        | undefined;
    /**
     * The type of the location.
     */
    value?: EmployeeSchemasHomeLocationLocationTypeValue | null | undefined;
};

/**
 * The employee home location
 */
export type HomeLocation = {
    /**
     * The city where the location is situated
     */
    city?: string | null | undefined;
    /**
     * The country code
     */
    country?: EmployeeCountry | null | undefined;
    /**
     * The created_at date
     */
    createdAt?: Date | null | undefined;
    /**
     * The employee ID
     */
    employeeId?: string | null | undefined;
    /**
     * The unique ID of the location
     */
    id?: string | null | undefined;
    /**
     * The location type
     */
    locationType?: EmployeeLocationType | null | undefined;
    /**
     * The name of the location
     */
    name?: string | null | undefined;
    /**
     * The phone number of the location
     */
    phoneNumber?: string | null | undefined;
    /**
     * The state where the location is situated
     */
    state?: string | null | undefined;
    /**
     * The first line of the address
     */
    street1?: string | null | undefined;
    /**
     * The second line of the address
     */
    street2?: string | null | undefined;
    /**
     * The updated_at date
     */
    updatedAt?: Date | null | undefined;
    /**
     * The ZIP code/Postal code of the location
     */
    zipCode?: string | null | undefined;
};

/**
 * The employee job description
 */
export type JobDescription = {
    text?: string | null | undefined;
};

export type EmployeeSchemasMaritalStatus4 = {};

export type EmployeeSchemasMaritalStatusSourceValue =
    | EmployeeSchemasMaritalStatus4
    | string
    | number
    | boolean;

export enum EmployeeSchemasMaritalStatusValue {
    Single = "single",
    Married = "married",
    CommonLaw = "common_law",
    Divorced = "divorced",
    Widowed = "widowed",
    DomesticPartnership = "domestic_partnership",
    Separated = "separated",
    Other = "other",
    NotDisclosed = "not_disclosed",
    UnmappedValue = "unmapped_value",
}

/**
 * The employee marital status
 */
export type MaritalStatus = {
    sourceValue?: EmployeeSchemasMaritalStatus4 | string | number | boolean | null | undefined;
    value?: EmployeeSchemasMaritalStatusValue | null | undefined;
};

export type EmployeeSchemasWorkLocation4 = {};

export type EmployeeSchemasWorkLocationSourceValue =
    | EmployeeSchemasWorkLocation4
    | string
    | number
    | boolean;

/**
 * The ISO3166-1 Alpha2 Code of the Country
 */
export enum EmployeeSchemasWorkLocationValue {
    Af = "AF",
    Al = "AL",
    Dz = "DZ",
    As = "AS",
    Ad = "AD",
    Ao = "AO",
    Ai = "AI",
    Aq = "AQ",
    Ag = "AG",
    Ar = "AR",
    Am = "AM",
    Aw = "AW",
    Au = "AU",
    At = "AT",
    Az = "AZ",
    Bs = "BS",
    Bh = "BH",
    Bd = "BD",
    Bb = "BB",
    By = "BY",
    Be = "BE",
    Bz = "BZ",
    Bj = "BJ",
    Bm = "BM",
    Bt = "BT",
    Bo = "BO",
    Bq = "BQ",
    Ba = "BA",
    Bw = "BW",
    Bv = "BV",
    Br = "BR",
    Io = "IO",
    Bn = "BN",
    Bg = "BG",
    Bf = "BF",
    Bi = "BI",
    Kh = "KH",
    Cm = "CM",
    Ca = "CA",
    Cv = "CV",
    Ky = "KY",
    Cf = "CF",
    Td = "TD",
    Cl = "CL",
    Cn = "CN",
    Cx = "CX",
    Cc = "CC",
    Co = "CO",
    Km = "KM",
    Cg = "CG",
    Cd = "CD",
    Ck = "CK",
    Cr = "CR",
    Hr = "HR",
    Cu = "CU",
    Cw = "CW",
    Cy = "CY",
    Cz = "CZ",
    Ci = "CI",
    Dk = "DK",
    Dj = "DJ",
    Dm = "DM",
    Do = "DO",
    Ec = "EC",
    Eg = "EG",
    Sv = "SV",
    Gq = "GQ",
    Er = "ER",
    Ee = "EE",
    Et = "ET",
    Fk = "FK",
    Fo = "FO",
    Fj = "FJ",
    Fi = "FI",
    Fr = "FR",
    Gf = "GF",
    Pf = "PF",
    Tf = "TF",
    Ga = "GA",
    Gm = "GM",
    Ge = "GE",
    De = "DE",
    Gh = "GH",
    Gi = "GI",
    Gr = "GR",
    Gl = "GL",
    Gd = "GD",
    Gp = "GP",
    Gu = "GU",
    Gt = "GT",
    Gg = "GG",
    Gn = "GN",
    Gw = "GW",
    Gy = "GY",
    Ht = "HT",
    Hm = "HM",
    Va = "VA",
    Hn = "HN",
    Hk = "HK",
    Hu = "HU",
    Is = "IS",
    In = "IN",
    Id = "ID",
    Ir = "IR",
    Iq = "IQ",
    Ie = "IE",
    Im = "IM",
    Il = "IL",
    It = "IT",
    Jm = "JM",
    Jp = "JP",
    Je = "JE",
    Jo = "JO",
    Kz = "KZ",
    Ke = "KE",
    Ki = "KI",
    Kp = "KP",
    Kr = "KR",
    Kw = "KW",
    Kg = "KG",
    La = "LA",
    Lv = "LV",
    Lb = "LB",
    Ls = "LS",
    Lr = "LR",
    Ly = "LY",
    Li = "LI",
    Lt = "LT",
    Lu = "LU",
    Mo = "MO",
    Mk = "MK",
    Mg = "MG",
    Mw = "MW",
    My = "MY",
    Mv = "MV",
    Ml = "ML",
    Mt = "MT",
    Mh = "MH",
    Mq = "MQ",
    Mr = "MR",
    Mu = "MU",
    Yt = "YT",
    Mx = "MX",
    Fm = "FM",
    Md = "MD",
    Mc = "MC",
    Mn = "MN",
    Me = "ME",
    Ms = "MS",
    Ma = "MA",
    Mz = "MZ",
    Mm = "MM",
    Na = "NA",
    Nr = "NR",
    Np = "NP",
    Nl = "NL",
    Nc = "NC",
    Nz = "NZ",
    Ni = "NI",
    Ne = "NE",
    Ng = "NG",
    Nu = "NU",
    Nf = "NF",
    Mp = "MP",
    No = "NO",
    Om = "OM",
    Pk = "PK",
    Pw = "PW",
    Ps = "PS",
    Pa = "PA",
    Pg = "PG",
    Py = "PY",
    Pe = "PE",
    Ph = "PH",
    Pn = "PN",
    Pl = "PL",
    Pt = "PT",
    Pr = "PR",
    Qa = "QA",
    Ro = "RO",
    Ru = "RU",
    Rw = "RW",
    Re = "RE",
    Bl = "BL",
    Sh = "SH",
    Kn = "KN",
    Lc = "LC",
    Mf = "MF",
    Pm = "PM",
    Vc = "VC",
    Ws = "WS",
    Sm = "SM",
    St = "ST",
    Sa = "SA",
    Sn = "SN",
    Rs = "RS",
    Sc = "SC",
    Sl = "SL",
    Sg = "SG",
    Sx = "SX",
    Sk = "SK",
    Si = "SI",
    Sb = "SB",
    So = "SO",
    Za = "ZA",
    Gs = "GS",
    Ss = "SS",
    Es = "ES",
    Lk = "LK",
    Sd = "SD",
    Sr = "SR",
    Sj = "SJ",
    Sz = "SZ",
    Se = "SE",
    Ch = "CH",
    Sy = "SY",
    Tw = "TW",
    Tj = "TJ",
    Tz = "TZ",
    Th = "TH",
    Tl = "TL",
    Tg = "TG",
    Tk = "TK",
    To = "TO",
    Tt = "TT",
    Tn = "TN",
    Tr = "TR",
    Tm = "TM",
    Tc = "TC",
    Tv = "TV",
    Ug = "UG",
    Ua = "UA",
    Ae = "AE",
    Gb = "GB",
    Us = "US",
    Um = "UM",
    Uy = "UY",
    Uz = "UZ",
    Vu = "VU",
    Ve = "VE",
    Vn = "VN",
    Vg = "VG",
    Vi = "VI",
    Wf = "WF",
    Eh = "EH",
    Ye = "YE",
    Zm = "ZM",
    Zw = "ZW",
    UnmappedValue = "unmapped_value",
}

/**
 * The country code
 */
export type EmployeeSchemasCountry = {
    sourceValue?: EmployeeSchemasWorkLocation4 | string | number | boolean | null | undefined;
    /**
     * The ISO3166-1 Alpha2 Code of the Country
     */
    value?: EmployeeSchemasWorkLocationValue | null | undefined;
};

export type EmployeeSchemasWorkLocationLocationType4 = {};

/**
 * The source value of the location type.
 */
export type EmployeeSchemasWorkLocationLocationTypeSourceValue =
    | EmployeeSchemasWorkLocationLocationType4
    | string
    | number
    | boolean;

/**
 * The type of the location.
 */
export enum EmployeeSchemasWorkLocationLocationTypeValue {
    Home = "home",
    Work = "work",
    UnmappedValue = "unmapped_value",
}

/**
 * The location type
 */
export type EmployeeSchemasLocationType = {
    /**
     * The source value of the location type.
     */
    sourceValue?:
        | EmployeeSchemasWorkLocationLocationType4
        | string
        | number
        | boolean
        | null
        | undefined;
    /**
     * The type of the location.
     */
    value?: EmployeeSchemasWorkLocationLocationTypeValue | null | undefined;
};

/**
 * The employee work location
 */
export type WorkLocation = {
    /**
     * The city where the location is situated
     */
    city?: string | null | undefined;
    /**
     * The country code
     */
    country?: EmployeeSchemasCountry | null | undefined;
    /**
     * The created_at date
     */
    createdAt?: Date | null | undefined;
    /**
     * The employee ID
     */
    employeeId?: string | null | undefined;
    /**
     * The unique ID of the location
     */
    id?: string | null | undefined;
    /**
     * The location type
     */
    locationType?: EmployeeSchemasLocationType | null | undefined;
    /**
     * The name of the location
     */
    name?: string | null | undefined;
    /**
     * The phone number of the location
     */
    phoneNumber?: string | null | undefined;
    /**
     * The state where the location is situated
     */
    state?: string | null | undefined;
    /**
     * The first line of the address
     */
    street1?: string | null | undefined;
    /**
     * The second line of the address
     */
    street2?: string | null | undefined;
    /**
     * The updated_at date
     */
    updatedAt?: Date | null | undefined;
    /**
     * The ZIP code/Postal code of the location
     */
    zipCode?: string | null | undefined;
};

export type Employee = {
    /**
     * The employee avatar
     */
    avatar?: Avatar | null | undefined;
    /**
     * The employee avatar Url
     */
    avatarUrl?: string | null | undefined;
    /**
     * The employee birthday
     */
    birthday?: Date | null | undefined;
    /**
     * The citizenships of the Employee
     */
    citizenships?: Array<CountryCodeEnum> | null | undefined;
    /**
     * The employee company name
     */
    companyName?: string | null | undefined;
    /**
     * The employee cost centers
     */
    costCenters?: Array<CostCenters> | null | undefined;
    /**
     * The created_at date
     */
    createdAt?: Date | null | undefined;
    /**
     * The employee custom fields
     */
    customFields?: Array<EmployeeCustomFields> | null | undefined;
    /**
     * The employee date_of_birth
     */
    dateOfBirth?: Date | null | undefined;
    /**
     * The employee department
     */
    department?: string | null | undefined;
    /**
     * The employee display name
     */
    displayName?: string | null | undefined;
    /**
     * The employment work schedule type (e.g., full-time, part-time)
     */
    employmentContractType?: EmploymentContractType | null | undefined;
    /**
     * The employee employment status
     */
    employmentStatus?: EmploymentStatus | null | undefined;
    /**
     * The employee employment type
     */
    employmentType?: EmploymentType | null | undefined;
    /**
     * The employee employments
     */
    employments?: Array<Employment> | null | undefined;
    /**
     * The employee ethnicity
     */
    ethnicity?: Ethnicity | null | undefined;
    /**
     * The employee first name
     */
    firstName?: string | null | undefined;
    /**
     * The employee gender
     */
    gender?: Gender | null | undefined;
    /**
     * The employee hire date
     */
    hireDate?: Date | null | undefined;
    /**
     * The employee home location
     */
    homeLocation?: HomeLocation | null | undefined;
    /**
     * The employee ID
     */
    id?: string | null | undefined;
    /**
     * The employee job description
     */
    jobDescription?: JobDescription | null | undefined;
    /**
     * The employee job title
     */
    jobTitle?: string | null | undefined;
    /**
     * The employee last name
     */
    lastName?: string | null | undefined;
    /**
     * The employee manager ID
     */
    managerId?: string | null | undefined;
    /**
     * The employee marital status
     */
    maritalStatus?: MaritalStatus | null | undefined;
    /**
     * The employee name
     */
    name?: string | null | undefined;
    /**
     * The employee personal email
     */
    personalEmail?: string | null | undefined;
    /**
     * The employee personal phone number
     */
    personalPhoneNumber?: string | null | undefined;
    /**
     * The employee start date
     */
    startDate?: Date | null | undefined;
    /**
     * The employee tenure
     */
    tenure?: number | null | undefined;
    /**
     * The employee termination date
     */
    terminationDate?: Date | null | undefined;
    /**
     * The updated_at date
     */
    updatedAt?: Date | null | undefined;
    /**
     * The employee work anniversary
     */
    workAnniversary?: Date | null | undefined;
    /**
     * The employee work eligibility
     */
    workEligibility?: Array<WorkEligibility> | null | undefined;
    /**
     * The employee work email
     */
    workEmail?: string | null | undefined;
    /**
     * The employee work location
     */
    workLocation?: WorkLocation | null | undefined;
    /**
     * The employee work phone number
     */
    workPhoneNumber?: string | null | undefined;
};

/** @internal */
export namespace Avatar$ {
    export type Inbound = {
        base64?: string | null | undefined;
        url?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<Avatar, z.ZodTypeDef, Inbound> = z
        .object({
            base64: z.nullable(z.string()).optional(),
            url: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.base64 === undefined ? null : { base64: v.base64 }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        base64?: string | null | undefined;
        url?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Avatar> = z
        .object({
            base64: z.nullable(z.string()).optional(),
            url: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.base64 === undefined ? null : { base64: v.base64 }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export namespace Employee4$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Employee4, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Employee4> = z.object({});
}

/** @internal */
export namespace EmployeeSourceValue$ {
    export type Inbound = Employee4$.Inbound | string | number | boolean;

    export type Outbound = Employee4$.Outbound | string | number | boolean;

    export const inboundSchema: z.ZodType<EmployeeSourceValue, z.ZodTypeDef, Inbound> = z.union([
        z.lazy(() => Employee4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeSourceValue> = z.union([
        z.lazy(() => Employee4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export const EmployeeValue$ = z.nativeEnum(EmployeeValue);

/** @internal */
export namespace EmploymentContractType$ {
    export type Inbound = {
        source_value?: Employee4$.Inbound | string | number | boolean | null | undefined;
        value?: EmployeeValue | null | undefined;
    };

    export const inboundSchema: z.ZodType<EmploymentContractType, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => Employee4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?: Employee4$.Outbound | string | number | boolean | null | undefined;
        value?: EmployeeValue | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmploymentContractType> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => Employee4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace EmployeeSchemas4$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<EmployeeSchemas4, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeSchemas4> = z.object({});
}

/** @internal */
export namespace EmployeeSchemasSourceValue$ {
    export type Inbound = EmployeeSchemas4$.Inbound | string | number | boolean;

    export type Outbound = EmployeeSchemas4$.Outbound | string | number | boolean;

    export const inboundSchema: z.ZodType<EmployeeSchemasSourceValue, z.ZodTypeDef, Inbound> =
        z.union([
            z.lazy(() => EmployeeSchemas4$.inboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeSchemasSourceValue> =
        z.union([
            z.lazy(() => EmployeeSchemas4$.outboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);
}

/** @internal */
export const EmployeeSchemasValue$ = z.nativeEnum(EmployeeSchemasValue);

/** @internal */
export namespace EmploymentStatus$ {
    export type Inbound = {
        source_value?: EmployeeSchemas4$.Inbound | string | number | boolean | null | undefined;
        value?: EmployeeSchemasValue | null | undefined;
    };

    export const inboundSchema: z.ZodType<EmploymentStatus, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemas4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?: EmployeeSchemas4$.Outbound | string | number | boolean | null | undefined;
        value?: EmployeeSchemasValue | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmploymentStatus> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemas4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace EmployeeSchemasEmploymentType4$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<EmployeeSchemasEmploymentType4, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeSchemasEmploymentType4> =
        z.object({});
}

/** @internal */
export namespace EmployeeSchemasEmploymentTypeSourceValue$ {
    export type Inbound = EmployeeSchemasEmploymentType4$.Inbound | string | number | boolean;

    export type Outbound = EmployeeSchemasEmploymentType4$.Outbound | string | number | boolean;

    export const inboundSchema: z.ZodType<
        EmployeeSchemasEmploymentTypeSourceValue,
        z.ZodTypeDef,
        Inbound
    > = z.union([
        z.lazy(() => EmployeeSchemasEmploymentType4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EmployeeSchemasEmploymentTypeSourceValue
    > = z.union([
        z.lazy(() => EmployeeSchemasEmploymentType4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export const EmployeeSchemasEmploymentTypeValue$ = z.nativeEnum(EmployeeSchemasEmploymentTypeValue);

/** @internal */
export namespace EmploymentType$ {
    export type Inbound = {
        source_value?:
            | EmployeeSchemasEmploymentType4$.Inbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: EmployeeSchemasEmploymentTypeValue | null | undefined;
    };

    export const inboundSchema: z.ZodType<EmploymentType, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasEmploymentType4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasEmploymentTypeValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?:
            | EmployeeSchemasEmploymentType4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: EmployeeSchemasEmploymentTypeValue | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmploymentType> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasEmploymentType4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasEmploymentTypeValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace EmployeeSchemasEthnicity4$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<EmployeeSchemasEthnicity4, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeSchemasEthnicity4> =
        z.object({});
}

/** @internal */
export namespace EmployeeSchemasEthnicitySourceValue$ {
    export type Inbound = EmployeeSchemasEthnicity4$.Inbound | string | number | boolean;

    export type Outbound = EmployeeSchemasEthnicity4$.Outbound | string | number | boolean;

    export const inboundSchema: z.ZodType<
        EmployeeSchemasEthnicitySourceValue,
        z.ZodTypeDef,
        Inbound
    > = z.union([
        z.lazy(() => EmployeeSchemasEthnicity4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EmployeeSchemasEthnicitySourceValue
    > = z.union([
        z.lazy(() => EmployeeSchemasEthnicity4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export const EmployeeSchemasEthnicityValue$ = z.nativeEnum(EmployeeSchemasEthnicityValue);

/** @internal */
export namespace Ethnicity$ {
    export type Inbound = {
        source_value?:
            | EmployeeSchemasEthnicity4$.Inbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: EmployeeSchemasEthnicityValue | null | undefined;
    };

    export const inboundSchema: z.ZodType<Ethnicity, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasEthnicity4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasEthnicityValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?:
            | EmployeeSchemasEthnicity4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: EmployeeSchemasEthnicityValue | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Ethnicity> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasEthnicity4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasEthnicityValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace EmployeeSchemasGender4$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<EmployeeSchemasGender4, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeSchemasGender4> =
        z.object({});
}

/** @internal */
export namespace EmployeeSchemasGenderSourceValue$ {
    export type Inbound = EmployeeSchemasGender4$.Inbound | string | number | boolean;

    export type Outbound = EmployeeSchemasGender4$.Outbound | string | number | boolean;

    export const inboundSchema: z.ZodType<EmployeeSchemasGenderSourceValue, z.ZodTypeDef, Inbound> =
        z.union([
            z.lazy(() => EmployeeSchemasGender4$.inboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EmployeeSchemasGenderSourceValue
    > = z.union([
        z.lazy(() => EmployeeSchemasGender4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export const EmployeeSchemasGenderValue$ = z.nativeEnum(EmployeeSchemasGenderValue);

/** @internal */
export namespace Gender$ {
    export type Inbound = {
        source_value?:
            | EmployeeSchemasGender4$.Inbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: EmployeeSchemasGenderValue | null | undefined;
    };

    export const inboundSchema: z.ZodType<Gender, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasGender4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasGenderValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?:
            | EmployeeSchemasGender4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: EmployeeSchemasGenderValue | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Gender> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasGender4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasGenderValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace EmployeeSchemasHomeLocation4$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<EmployeeSchemasHomeLocation4, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeSchemasHomeLocation4> =
        z.object({});
}

/** @internal */
export namespace EmployeeSchemasHomeLocationSourceValue$ {
    export type Inbound = EmployeeSchemasHomeLocation4$.Inbound | string | number | boolean;

    export type Outbound = EmployeeSchemasHomeLocation4$.Outbound | string | number | boolean;

    export const inboundSchema: z.ZodType<
        EmployeeSchemasHomeLocationSourceValue,
        z.ZodTypeDef,
        Inbound
    > = z.union([
        z.lazy(() => EmployeeSchemasHomeLocation4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EmployeeSchemasHomeLocationSourceValue
    > = z.union([
        z.lazy(() => EmployeeSchemasHomeLocation4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export const EmployeeSchemasHomeLocationValue$ = z.nativeEnum(EmployeeSchemasHomeLocationValue);

/** @internal */
export namespace EmployeeCountry$ {
    export type Inbound = {
        source_value?:
            | EmployeeSchemasHomeLocation4$.Inbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: EmployeeSchemasHomeLocationValue | null | undefined;
    };

    export const inboundSchema: z.ZodType<EmployeeCountry, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasHomeLocation4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasHomeLocationValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?:
            | EmployeeSchemasHomeLocation4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: EmployeeSchemasHomeLocationValue | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeCountry> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasHomeLocation4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasHomeLocationValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace EmployeeSchemasHomeLocationLocationType4$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        EmployeeSchemasHomeLocationLocationType4,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EmployeeSchemasHomeLocationLocationType4
    > = z.object({});
}

/** @internal */
export namespace EmployeeSchemasHomeLocationLocationTypeSourceValue$ {
    export type Inbound =
        | EmployeeSchemasHomeLocationLocationType4$.Inbound
        | string
        | number
        | boolean;

    export type Outbound =
        | EmployeeSchemasHomeLocationLocationType4$.Outbound
        | string
        | number
        | boolean;

    export const inboundSchema: z.ZodType<
        EmployeeSchemasHomeLocationLocationTypeSourceValue,
        z.ZodTypeDef,
        Inbound
    > = z.union([
        z.lazy(() => EmployeeSchemasHomeLocationLocationType4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EmployeeSchemasHomeLocationLocationTypeSourceValue
    > = z.union([
        z.lazy(() => EmployeeSchemasHomeLocationLocationType4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export const EmployeeSchemasHomeLocationLocationTypeValue$ = z.nativeEnum(
    EmployeeSchemasHomeLocationLocationTypeValue
);

/** @internal */
export namespace EmployeeLocationType$ {
    export type Inbound = {
        source_value?:
            | EmployeeSchemasHomeLocationLocationType4$.Inbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: EmployeeSchemasHomeLocationLocationTypeValue | null | undefined;
    };

    export const inboundSchema: z.ZodType<EmployeeLocationType, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasHomeLocationLocationType4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasHomeLocationLocationTypeValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?:
            | EmployeeSchemasHomeLocationLocationType4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: EmployeeSchemasHomeLocationLocationTypeValue | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeLocationType> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasHomeLocationLocationType4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasHomeLocationLocationTypeValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace HomeLocation$ {
    export type Inbound = {
        city?: string | null | undefined;
        country?: EmployeeCountry$.Inbound | null | undefined;
        created_at?: string | null | undefined;
        employee_id?: string | null | undefined;
        id?: string | null | undefined;
        location_type?: EmployeeLocationType$.Inbound | null | undefined;
        name?: string | null | undefined;
        phone_number?: string | null | undefined;
        state?: string | null | undefined;
        street_1?: string | null | undefined;
        street_2?: string | null | undefined;
        updated_at?: string | null | undefined;
        zip_code?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<HomeLocation, z.ZodTypeDef, Inbound> = z
        .object({
            city: z.nullable(z.string()).optional(),
            country: z.nullable(z.lazy(() => EmployeeCountry$.inboundSchema)).optional(),
            created_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            employee_id: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            location_type: z.nullable(z.lazy(() => EmployeeLocationType$.inboundSchema)).optional(),
            name: z.nullable(z.string()).optional(),
            phone_number: z.nullable(z.string()).optional(),
            state: z.nullable(z.string()).optional(),
            street_1: z.nullable(z.string()).optional(),
            street_2: z.nullable(z.string()).optional(),
            updated_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            zip_code: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.employee_id === undefined ? null : { employeeId: v.employee_id }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.location_type === undefined ? null : { locationType: v.location_type }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.phone_number === undefined ? null : { phoneNumber: v.phone_number }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.street_1 === undefined ? null : { street1: v.street_1 }),
                ...(v.street_2 === undefined ? null : { street2: v.street_2 }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
                ...(v.zip_code === undefined ? null : { zipCode: v.zip_code }),
            };
        });

    export type Outbound = {
        city?: string | null | undefined;
        country?: EmployeeCountry$.Outbound | null | undefined;
        created_at?: string | null | undefined;
        employee_id?: string | null | undefined;
        id?: string | null | undefined;
        location_type?: EmployeeLocationType$.Outbound | null | undefined;
        name?: string | null | undefined;
        phone_number?: string | null | undefined;
        state?: string | null | undefined;
        street_1?: string | null | undefined;
        street_2?: string | null | undefined;
        updated_at?: string | null | undefined;
        zip_code?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HomeLocation> = z
        .object({
            city: z.nullable(z.string()).optional(),
            country: z.nullable(z.lazy(() => EmployeeCountry$.outboundSchema)).optional(),
            createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            employeeId: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            locationType: z.nullable(z.lazy(() => EmployeeLocationType$.outboundSchema)).optional(),
            name: z.nullable(z.string()).optional(),
            phoneNumber: z.nullable(z.string()).optional(),
            state: z.nullable(z.string()).optional(),
            street1: z.nullable(z.string()).optional(),
            street2: z.nullable(z.string()).optional(),
            updatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            zipCode: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.employeeId === undefined ? null : { employee_id: v.employeeId }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.locationType === undefined ? null : { location_type: v.locationType }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.phoneNumber === undefined ? null : { phone_number: v.phoneNumber }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.street1 === undefined ? null : { street_1: v.street1 }),
                ...(v.street2 === undefined ? null : { street_2: v.street2 }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
                ...(v.zipCode === undefined ? null : { zip_code: v.zipCode }),
            };
        });
}

/** @internal */
export namespace JobDescription$ {
    export type Inbound = {
        text?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<JobDescription, z.ZodTypeDef, Inbound> = z
        .object({
            text: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.text === undefined ? null : { text: v.text }),
            };
        });

    export type Outbound = {
        text?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobDescription> = z
        .object({
            text: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.text === undefined ? null : { text: v.text }),
            };
        });
}

/** @internal */
export namespace EmployeeSchemasMaritalStatus4$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<EmployeeSchemasMaritalStatus4, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeSchemasMaritalStatus4> =
        z.object({});
}

/** @internal */
export namespace EmployeeSchemasMaritalStatusSourceValue$ {
    export type Inbound = EmployeeSchemasMaritalStatus4$.Inbound | string | number | boolean;

    export type Outbound = EmployeeSchemasMaritalStatus4$.Outbound | string | number | boolean;

    export const inboundSchema: z.ZodType<
        EmployeeSchemasMaritalStatusSourceValue,
        z.ZodTypeDef,
        Inbound
    > = z.union([
        z.lazy(() => EmployeeSchemasMaritalStatus4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EmployeeSchemasMaritalStatusSourceValue
    > = z.union([
        z.lazy(() => EmployeeSchemasMaritalStatus4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export const EmployeeSchemasMaritalStatusValue$ = z.nativeEnum(EmployeeSchemasMaritalStatusValue);

/** @internal */
export namespace MaritalStatus$ {
    export type Inbound = {
        source_value?:
            | EmployeeSchemasMaritalStatus4$.Inbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: EmployeeSchemasMaritalStatusValue | null | undefined;
    };

    export const inboundSchema: z.ZodType<MaritalStatus, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasMaritalStatus4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasMaritalStatusValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?:
            | EmployeeSchemasMaritalStatus4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: EmployeeSchemasMaritalStatusValue | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MaritalStatus> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasMaritalStatus4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasMaritalStatusValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace EmployeeSchemasWorkLocation4$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<EmployeeSchemasWorkLocation4, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeSchemasWorkLocation4> =
        z.object({});
}

/** @internal */
export namespace EmployeeSchemasWorkLocationSourceValue$ {
    export type Inbound = EmployeeSchemasWorkLocation4$.Inbound | string | number | boolean;

    export type Outbound = EmployeeSchemasWorkLocation4$.Outbound | string | number | boolean;

    export const inboundSchema: z.ZodType<
        EmployeeSchemasWorkLocationSourceValue,
        z.ZodTypeDef,
        Inbound
    > = z.union([
        z.lazy(() => EmployeeSchemasWorkLocation4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EmployeeSchemasWorkLocationSourceValue
    > = z.union([
        z.lazy(() => EmployeeSchemasWorkLocation4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export const EmployeeSchemasWorkLocationValue$ = z.nativeEnum(EmployeeSchemasWorkLocationValue);

/** @internal */
export namespace EmployeeSchemasCountry$ {
    export type Inbound = {
        source_value?:
            | EmployeeSchemasWorkLocation4$.Inbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: EmployeeSchemasWorkLocationValue | null | undefined;
    };

    export const inboundSchema: z.ZodType<EmployeeSchemasCountry, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasWorkLocation4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasWorkLocationValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?:
            | EmployeeSchemasWorkLocation4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: EmployeeSchemasWorkLocationValue | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeSchemasCountry> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasWorkLocation4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasWorkLocationValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace EmployeeSchemasWorkLocationLocationType4$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        EmployeeSchemasWorkLocationLocationType4,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EmployeeSchemasWorkLocationLocationType4
    > = z.object({});
}

/** @internal */
export namespace EmployeeSchemasWorkLocationLocationTypeSourceValue$ {
    export type Inbound =
        | EmployeeSchemasWorkLocationLocationType4$.Inbound
        | string
        | number
        | boolean;

    export type Outbound =
        | EmployeeSchemasWorkLocationLocationType4$.Outbound
        | string
        | number
        | boolean;

    export const inboundSchema: z.ZodType<
        EmployeeSchemasWorkLocationLocationTypeSourceValue,
        z.ZodTypeDef,
        Inbound
    > = z.union([
        z.lazy(() => EmployeeSchemasWorkLocationLocationType4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EmployeeSchemasWorkLocationLocationTypeSourceValue
    > = z.union([
        z.lazy(() => EmployeeSchemasWorkLocationLocationType4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export const EmployeeSchemasWorkLocationLocationTypeValue$ = z.nativeEnum(
    EmployeeSchemasWorkLocationLocationTypeValue
);

/** @internal */
export namespace EmployeeSchemasLocationType$ {
    export type Inbound = {
        source_value?:
            | EmployeeSchemasWorkLocationLocationType4$.Inbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: EmployeeSchemasWorkLocationLocationTypeValue | null | undefined;
    };

    export const inboundSchema: z.ZodType<EmployeeSchemasLocationType, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasWorkLocationLocationType4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasWorkLocationLocationTypeValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?:
            | EmployeeSchemasWorkLocationLocationType4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: EmployeeSchemasWorkLocationLocationTypeValue | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeSchemasLocationType> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasWorkLocationLocationType4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasWorkLocationLocationTypeValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace WorkLocation$ {
    export type Inbound = {
        city?: string | null | undefined;
        country?: EmployeeSchemasCountry$.Inbound | null | undefined;
        created_at?: string | null | undefined;
        employee_id?: string | null | undefined;
        id?: string | null | undefined;
        location_type?: EmployeeSchemasLocationType$.Inbound | null | undefined;
        name?: string | null | undefined;
        phone_number?: string | null | undefined;
        state?: string | null | undefined;
        street_1?: string | null | undefined;
        street_2?: string | null | undefined;
        updated_at?: string | null | undefined;
        zip_code?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<WorkLocation, z.ZodTypeDef, Inbound> = z
        .object({
            city: z.nullable(z.string()).optional(),
            country: z.nullable(z.lazy(() => EmployeeSchemasCountry$.inboundSchema)).optional(),
            created_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            employee_id: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            location_type: z
                .nullable(z.lazy(() => EmployeeSchemasLocationType$.inboundSchema))
                .optional(),
            name: z.nullable(z.string()).optional(),
            phone_number: z.nullable(z.string()).optional(),
            state: z.nullable(z.string()).optional(),
            street_1: z.nullable(z.string()).optional(),
            street_2: z.nullable(z.string()).optional(),
            updated_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            zip_code: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.employee_id === undefined ? null : { employeeId: v.employee_id }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.location_type === undefined ? null : { locationType: v.location_type }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.phone_number === undefined ? null : { phoneNumber: v.phone_number }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.street_1 === undefined ? null : { street1: v.street_1 }),
                ...(v.street_2 === undefined ? null : { street2: v.street_2 }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
                ...(v.zip_code === undefined ? null : { zipCode: v.zip_code }),
            };
        });

    export type Outbound = {
        city?: string | null | undefined;
        country?: EmployeeSchemasCountry$.Outbound | null | undefined;
        created_at?: string | null | undefined;
        employee_id?: string | null | undefined;
        id?: string | null | undefined;
        location_type?: EmployeeSchemasLocationType$.Outbound | null | undefined;
        name?: string | null | undefined;
        phone_number?: string | null | undefined;
        state?: string | null | undefined;
        street_1?: string | null | undefined;
        street_2?: string | null | undefined;
        updated_at?: string | null | undefined;
        zip_code?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WorkLocation> = z
        .object({
            city: z.nullable(z.string()).optional(),
            country: z.nullable(z.lazy(() => EmployeeSchemasCountry$.outboundSchema)).optional(),
            createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            employeeId: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            locationType: z
                .nullable(z.lazy(() => EmployeeSchemasLocationType$.outboundSchema))
                .optional(),
            name: z.nullable(z.string()).optional(),
            phoneNumber: z.nullable(z.string()).optional(),
            state: z.nullable(z.string()).optional(),
            street1: z.nullable(z.string()).optional(),
            street2: z.nullable(z.string()).optional(),
            updatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            zipCode: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.employeeId === undefined ? null : { employee_id: v.employeeId }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.locationType === undefined ? null : { location_type: v.locationType }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.phoneNumber === undefined ? null : { phone_number: v.phoneNumber }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.street1 === undefined ? null : { street_1: v.street1 }),
                ...(v.street2 === undefined ? null : { street_2: v.street2 }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
                ...(v.zipCode === undefined ? null : { zip_code: v.zipCode }),
            };
        });
}

/** @internal */
export namespace Employee$ {
    export type Inbound = {
        avatar?: Avatar$.Inbound | null | undefined;
        avatar_url?: string | null | undefined;
        birthday?: string | null | undefined;
        citizenships?: Array<CountryCodeEnum$.Inbound> | null | undefined;
        company_name?: string | null | undefined;
        cost_centers?: Array<CostCenters$.Inbound> | null | undefined;
        created_at?: string | null | undefined;
        custom_fields?: Array<EmployeeCustomFields$.Inbound> | null | undefined;
        date_of_birth?: string | null | undefined;
        department?: string | null | undefined;
        display_name?: string | null | undefined;
        employment_contract_type?: EmploymentContractType$.Inbound | null | undefined;
        employment_status?: EmploymentStatus$.Inbound | null | undefined;
        employment_type?: EmploymentType$.Inbound | null | undefined;
        employments?: Array<Employment$.Inbound> | null | undefined;
        ethnicity?: Ethnicity$.Inbound | null | undefined;
        first_name?: string | null | undefined;
        gender?: Gender$.Inbound | null | undefined;
        hire_date?: string | null | undefined;
        home_location?: HomeLocation$.Inbound | null | undefined;
        id?: string | null | undefined;
        job_description?: JobDescription$.Inbound | null | undefined;
        job_title?: string | null | undefined;
        last_name?: string | null | undefined;
        manager_id?: string | null | undefined;
        marital_status?: MaritalStatus$.Inbound | null | undefined;
        name?: string | null | undefined;
        personal_email?: string | null | undefined;
        personal_phone_number?: string | null | undefined;
        start_date?: string | null | undefined;
        tenure?: number | null | undefined;
        termination_date?: string | null | undefined;
        updated_at?: string | null | undefined;
        work_anniversary?: string | null | undefined;
        work_eligibility?: Array<WorkEligibility$.Inbound> | null | undefined;
        work_email?: string | null | undefined;
        work_location?: WorkLocation$.Inbound | null | undefined;
        work_phone_number?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<Employee, z.ZodTypeDef, Inbound> = z
        .object({
            avatar: z.nullable(z.lazy(() => Avatar$.inboundSchema)).optional(),
            avatar_url: z.nullable(z.string()).optional(),
            birthday: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            citizenships: z.nullable(z.array(CountryCodeEnum$.inboundSchema)).optional(),
            company_name: z.nullable(z.string()).optional(),
            cost_centers: z.nullable(z.array(CostCenters$.inboundSchema)).optional(),
            created_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            custom_fields: z.nullable(z.array(EmployeeCustomFields$.inboundSchema)).optional(),
            date_of_birth: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            department: z.nullable(z.string()).optional(),
            display_name: z.nullable(z.string()).optional(),
            employment_contract_type: z
                .nullable(z.lazy(() => EmploymentContractType$.inboundSchema))
                .optional(),
            employment_status: z.nullable(z.lazy(() => EmploymentStatus$.inboundSchema)).optional(),
            employment_type: z.nullable(z.lazy(() => EmploymentType$.inboundSchema)).optional(),
            employments: z.nullable(z.array(Employment$.inboundSchema)).optional(),
            ethnicity: z.nullable(z.lazy(() => Ethnicity$.inboundSchema)).optional(),
            first_name: z.nullable(z.string()).optional(),
            gender: z.nullable(z.lazy(() => Gender$.inboundSchema)).optional(),
            hire_date: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            home_location: z.nullable(z.lazy(() => HomeLocation$.inboundSchema)).optional(),
            id: z.nullable(z.string()).optional(),
            job_description: z.nullable(z.lazy(() => JobDescription$.inboundSchema)).optional(),
            job_title: z.nullable(z.string()).optional(),
            last_name: z.nullable(z.string()).optional(),
            manager_id: z.nullable(z.string()).optional(),
            marital_status: z.nullable(z.lazy(() => MaritalStatus$.inboundSchema)).optional(),
            name: z.nullable(z.string()).optional(),
            personal_email: z.nullable(z.string()).optional(),
            personal_phone_number: z.nullable(z.string()).optional(),
            start_date: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            tenure: z.nullable(z.number()).optional(),
            termination_date: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            updated_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            work_anniversary: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            work_eligibility: z.nullable(z.array(WorkEligibility$.inboundSchema)).optional(),
            work_email: z.nullable(z.string()).optional(),
            work_location: z.nullable(z.lazy(() => WorkLocation$.inboundSchema)).optional(),
            work_phone_number: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.avatar === undefined ? null : { avatar: v.avatar }),
                ...(v.avatar_url === undefined ? null : { avatarUrl: v.avatar_url }),
                ...(v.birthday === undefined ? null : { birthday: v.birthday }),
                ...(v.citizenships === undefined ? null : { citizenships: v.citizenships }),
                ...(v.company_name === undefined ? null : { companyName: v.company_name }),
                ...(v.cost_centers === undefined ? null : { costCenters: v.cost_centers }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.custom_fields === undefined ? null : { customFields: v.custom_fields }),
                ...(v.date_of_birth === undefined ? null : { dateOfBirth: v.date_of_birth }),
                ...(v.department === undefined ? null : { department: v.department }),
                ...(v.display_name === undefined ? null : { displayName: v.display_name }),
                ...(v.employment_contract_type === undefined
                    ? null
                    : { employmentContractType: v.employment_contract_type }),
                ...(v.employment_status === undefined
                    ? null
                    : { employmentStatus: v.employment_status }),
                ...(v.employment_type === undefined ? null : { employmentType: v.employment_type }),
                ...(v.employments === undefined ? null : { employments: v.employments }),
                ...(v.ethnicity === undefined ? null : { ethnicity: v.ethnicity }),
                ...(v.first_name === undefined ? null : { firstName: v.first_name }),
                ...(v.gender === undefined ? null : { gender: v.gender }),
                ...(v.hire_date === undefined ? null : { hireDate: v.hire_date }),
                ...(v.home_location === undefined ? null : { homeLocation: v.home_location }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.job_description === undefined ? null : { jobDescription: v.job_description }),
                ...(v.job_title === undefined ? null : { jobTitle: v.job_title }),
                ...(v.last_name === undefined ? null : { lastName: v.last_name }),
                ...(v.manager_id === undefined ? null : { managerId: v.manager_id }),
                ...(v.marital_status === undefined ? null : { maritalStatus: v.marital_status }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.personal_email === undefined ? null : { personalEmail: v.personal_email }),
                ...(v.personal_phone_number === undefined
                    ? null
                    : { personalPhoneNumber: v.personal_phone_number }),
                ...(v.start_date === undefined ? null : { startDate: v.start_date }),
                ...(v.tenure === undefined ? null : { tenure: v.tenure }),
                ...(v.termination_date === undefined
                    ? null
                    : { terminationDate: v.termination_date }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
                ...(v.work_anniversary === undefined
                    ? null
                    : { workAnniversary: v.work_anniversary }),
                ...(v.work_eligibility === undefined
                    ? null
                    : { workEligibility: v.work_eligibility }),
                ...(v.work_email === undefined ? null : { workEmail: v.work_email }),
                ...(v.work_location === undefined ? null : { workLocation: v.work_location }),
                ...(v.work_phone_number === undefined
                    ? null
                    : { workPhoneNumber: v.work_phone_number }),
            };
        });

    export type Outbound = {
        avatar?: Avatar$.Outbound | null | undefined;
        avatar_url?: string | null | undefined;
        birthday?: string | null | undefined;
        citizenships?: Array<CountryCodeEnum$.Outbound> | null | undefined;
        company_name?: string | null | undefined;
        cost_centers?: Array<CostCenters$.Outbound> | null | undefined;
        created_at?: string | null | undefined;
        custom_fields?: Array<EmployeeCustomFields$.Outbound> | null | undefined;
        date_of_birth?: string | null | undefined;
        department?: string | null | undefined;
        display_name?: string | null | undefined;
        employment_contract_type?: EmploymentContractType$.Outbound | null | undefined;
        employment_status?: EmploymentStatus$.Outbound | null | undefined;
        employment_type?: EmploymentType$.Outbound | null | undefined;
        employments?: Array<Employment$.Outbound> | null | undefined;
        ethnicity?: Ethnicity$.Outbound | null | undefined;
        first_name?: string | null | undefined;
        gender?: Gender$.Outbound | null | undefined;
        hire_date?: string | null | undefined;
        home_location?: HomeLocation$.Outbound | null | undefined;
        id?: string | null | undefined;
        job_description?: JobDescription$.Outbound | null | undefined;
        job_title?: string | null | undefined;
        last_name?: string | null | undefined;
        manager_id?: string | null | undefined;
        marital_status?: MaritalStatus$.Outbound | null | undefined;
        name?: string | null | undefined;
        personal_email?: string | null | undefined;
        personal_phone_number?: string | null | undefined;
        start_date?: string | null | undefined;
        tenure?: number | null | undefined;
        termination_date?: string | null | undefined;
        updated_at?: string | null | undefined;
        work_anniversary?: string | null | undefined;
        work_eligibility?: Array<WorkEligibility$.Outbound> | null | undefined;
        work_email?: string | null | undefined;
        work_location?: WorkLocation$.Outbound | null | undefined;
        work_phone_number?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Employee> = z
        .object({
            avatar: z.nullable(z.lazy(() => Avatar$.outboundSchema)).optional(),
            avatarUrl: z.nullable(z.string()).optional(),
            birthday: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            citizenships: z.nullable(z.array(CountryCodeEnum$.outboundSchema)).optional(),
            companyName: z.nullable(z.string()).optional(),
            costCenters: z.nullable(z.array(CostCenters$.outboundSchema)).optional(),
            createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            customFields: z.nullable(z.array(EmployeeCustomFields$.outboundSchema)).optional(),
            dateOfBirth: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            department: z.nullable(z.string()).optional(),
            displayName: z.nullable(z.string()).optional(),
            employmentContractType: z
                .nullable(z.lazy(() => EmploymentContractType$.outboundSchema))
                .optional(),
            employmentStatus: z.nullable(z.lazy(() => EmploymentStatus$.outboundSchema)).optional(),
            employmentType: z.nullable(z.lazy(() => EmploymentType$.outboundSchema)).optional(),
            employments: z.nullable(z.array(Employment$.outboundSchema)).optional(),
            ethnicity: z.nullable(z.lazy(() => Ethnicity$.outboundSchema)).optional(),
            firstName: z.nullable(z.string()).optional(),
            gender: z.nullable(z.lazy(() => Gender$.outboundSchema)).optional(),
            hireDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            homeLocation: z.nullable(z.lazy(() => HomeLocation$.outboundSchema)).optional(),
            id: z.nullable(z.string()).optional(),
            jobDescription: z.nullable(z.lazy(() => JobDescription$.outboundSchema)).optional(),
            jobTitle: z.nullable(z.string()).optional(),
            lastName: z.nullable(z.string()).optional(),
            managerId: z.nullable(z.string()).optional(),
            maritalStatus: z.nullable(z.lazy(() => MaritalStatus$.outboundSchema)).optional(),
            name: z.nullable(z.string()).optional(),
            personalEmail: z.nullable(z.string()).optional(),
            personalPhoneNumber: z.nullable(z.string()).optional(),
            startDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            tenure: z.nullable(z.number()).optional(),
            terminationDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            updatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            workAnniversary: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            workEligibility: z.nullable(z.array(WorkEligibility$.outboundSchema)).optional(),
            workEmail: z.nullable(z.string()).optional(),
            workLocation: z.nullable(z.lazy(() => WorkLocation$.outboundSchema)).optional(),
            workPhoneNumber: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.avatar === undefined ? null : { avatar: v.avatar }),
                ...(v.avatarUrl === undefined ? null : { avatar_url: v.avatarUrl }),
                ...(v.birthday === undefined ? null : { birthday: v.birthday }),
                ...(v.citizenships === undefined ? null : { citizenships: v.citizenships }),
                ...(v.companyName === undefined ? null : { company_name: v.companyName }),
                ...(v.costCenters === undefined ? null : { cost_centers: v.costCenters }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.customFields === undefined ? null : { custom_fields: v.customFields }),
                ...(v.dateOfBirth === undefined ? null : { date_of_birth: v.dateOfBirth }),
                ...(v.department === undefined ? null : { department: v.department }),
                ...(v.displayName === undefined ? null : { display_name: v.displayName }),
                ...(v.employmentContractType === undefined
                    ? null
                    : { employment_contract_type: v.employmentContractType }),
                ...(v.employmentStatus === undefined
                    ? null
                    : { employment_status: v.employmentStatus }),
                ...(v.employmentType === undefined ? null : { employment_type: v.employmentType }),
                ...(v.employments === undefined ? null : { employments: v.employments }),
                ...(v.ethnicity === undefined ? null : { ethnicity: v.ethnicity }),
                ...(v.firstName === undefined ? null : { first_name: v.firstName }),
                ...(v.gender === undefined ? null : { gender: v.gender }),
                ...(v.hireDate === undefined ? null : { hire_date: v.hireDate }),
                ...(v.homeLocation === undefined ? null : { home_location: v.homeLocation }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.jobDescription === undefined ? null : { job_description: v.jobDescription }),
                ...(v.jobTitle === undefined ? null : { job_title: v.jobTitle }),
                ...(v.lastName === undefined ? null : { last_name: v.lastName }),
                ...(v.managerId === undefined ? null : { manager_id: v.managerId }),
                ...(v.maritalStatus === undefined ? null : { marital_status: v.maritalStatus }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.personalEmail === undefined ? null : { personal_email: v.personalEmail }),
                ...(v.personalPhoneNumber === undefined
                    ? null
                    : { personal_phone_number: v.personalPhoneNumber }),
                ...(v.startDate === undefined ? null : { start_date: v.startDate }),
                ...(v.tenure === undefined ? null : { tenure: v.tenure }),
                ...(v.terminationDate === undefined
                    ? null
                    : { termination_date: v.terminationDate }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
                ...(v.workAnniversary === undefined
                    ? null
                    : { work_anniversary: v.workAnniversary }),
                ...(v.workEligibility === undefined
                    ? null
                    : { work_eligibility: v.workEligibility }),
                ...(v.workEmail === undefined ? null : { work_email: v.workEmail }),
                ...(v.workLocation === undefined ? null : { work_location: v.workLocation }),
                ...(v.workPhoneNumber === undefined
                    ? null
                    : { work_phone_number: v.workPhoneNumber }),
            };
        });
}
