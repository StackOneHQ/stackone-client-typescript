/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types";
import { CostCenters, CostCenters$ } from "./costcenters";
import { CountryCodeEnum, CountryCodeEnum$ } from "./countrycodeenum";
import { EmployeeCustomFields, EmployeeCustomFields$ } from "./employeecustomfields";
import { Employment, Employment$ } from "./employment";
import { HRISBenefit, HRISBenefit$ } from "./hrisbenefit";
import * as z from "zod";

/**
 * The employee avatar
 */
export type Avatar = {
    base64?: string | null | undefined;
    url?: string | null | undefined;
};

/**
 * The employee company
 */
export type EmployeeCompany = {
    /**
     * The created_at date
     */
    createdAt?: Date | null | undefined;
    /**
     * The display name of the company
     */
    displayName?: string | null | undefined;
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    /**
     * The name of the company
     */
    name?: string | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    /**
     * The updated_at date
     */
    updatedAt?: Date | null | undefined;
};

export type Employee4 = {};

export type EmployeeSourceValue = Employee4 | string | number | boolean;

export enum EmployeeValue {
    FullTime = "full_time",
    Shifts = "shifts",
    PartTime = "part_time",
    UnmappedValue = "unmapped_value",
}
export type EmployeeValueOpen = OpenEnum<typeof EmployeeValue>;

/**
 * The employment work schedule type (e.g., full-time, part-time)
 */
export type EmploymentContractType = {
    sourceValue?: Employee4 | string | number | boolean | null | undefined;
    value?: EmployeeValueOpen | null | undefined;
};

export type EmployeeSchemas4 = {};

export type EmployeeSchemasSourceValue = EmployeeSchemas4 | string | number | boolean;

export enum EmployeeSchemasValue {
    Active = "active",
    Pending = "pending",
    Terminated = "terminated",
    Leave = "leave",
    Inactive = "inactive",
    Unknown = "unknown",
    UnmappedValue = "unmapped_value",
}
export type EmployeeSchemasValueOpen = OpenEnum<typeof EmployeeSchemasValue>;

/**
 * The employee employment status
 */
export type EmploymentStatus = {
    sourceValue?: EmployeeSchemas4 | string | number | boolean | null | undefined;
    value?: EmployeeSchemasValueOpen | null | undefined;
};

export type EmployeeSchemasEmploymentType4 = {};

/**
 * The source value of the employment type.
 */
export type EmployeeSchemasEmploymentTypeSourceValue =
    | EmployeeSchemasEmploymentType4
    | string
    | number
    | boolean;

/**
 * The type of the employment.
 */
export enum EmployeeSchemasEmploymentTypeValue {
    Contractor = "contractor",
    Intern = "intern",
    Permanent = "permanent",
    Apprentice = "apprentice",
    Freelance = "freelance",
    Terminated = "terminated",
    Temporary = "temporary",
    Seasonal = "seasonal",
    Volunteer = "volunteer",
    Probation = "probation",
    Internal = "internal",
    External = "external",
    Expatriate = "expatriate",
    EmployerOfRecord = "employer_of_record",
    Casual = "casual",
    UnmappedValue = "unmapped_value",
}
/**
 * The type of the employment.
 */
export type EmployeeSchemasEmploymentTypeValueOpen = OpenEnum<
    typeof EmployeeSchemasEmploymentTypeValue
>;

/**
 * The employee employment type
 */
export type EmploymentType = {
    /**
     * The source value of the employment type.
     */
    sourceValue?: EmployeeSchemasEmploymentType4 | string | number | boolean | null | undefined;
    /**
     * The type of the employment.
     */
    value?: EmployeeSchemasEmploymentTypeValueOpen | null | undefined;
};

export type EmployeeSchemasEthnicity4 = {};

export type EmployeeSchemasEthnicitySourceValue =
    | EmployeeSchemasEthnicity4
    | string
    | number
    | boolean;

export enum EmployeeSchemasEthnicityValue {
    White = "white",
    BlackOrAfricanAmerican = "black_or_african_american",
    Asian = "asian",
    HispanicOrLatino = "hispanic_or_latino",
    AmericanIndianOrAlaskaNative = "american_indian_or_alaska_native",
    NativeHawaiianOrPacificIslander = "native_hawaiian_or_pacific_islander",
    TwoOrMoreRaces = "two_or_more_races",
    NotDisclosed = "not_disclosed",
    Other = "other",
    UnmappedValue = "unmapped_value",
}
export type EmployeeSchemasEthnicityValueOpen = OpenEnum<typeof EmployeeSchemasEthnicityValue>;

/**
 * The employee ethnicity
 */
export type Ethnicity = {
    sourceValue?: EmployeeSchemasEthnicity4 | string | number | boolean | null | undefined;
    value?: EmployeeSchemasEthnicityValueOpen | null | undefined;
};

export type EmployeeSchemasGender4 = {};

export type EmployeeSchemasGenderSourceValue = EmployeeSchemasGender4 | string | number | boolean;

export enum EmployeeSchemasGenderValue {
    Male = "male",
    Female = "female",
    NonBinary = "non_binary",
    Other = "other",
    NotDisclosed = "not_disclosed",
    Diverse = "diverse",
    UnmappedValue = "unmapped_value",
}
export type EmployeeSchemasGenderValueOpen = OpenEnum<typeof EmployeeSchemasGenderValue>;

/**
 * The employee gender
 */
export type Gender = {
    sourceValue?: EmployeeSchemasGender4 | string | number | boolean | null | undefined;
    value?: EmployeeSchemasGenderValueOpen | null | undefined;
};

export type EmployeeSchemasGroups4 = {};

export type EmployeeSchemasGroupsSourceValue = EmployeeSchemasGroups4 | string | number | boolean;

export enum EmployeeSchemasGroupsValue {
    Workspace = "workspace",
    Team = "team",
    Department = "department",
    Group = "group",
    UnmappedValue = "unmapped_value",
}
export type EmployeeSchemasGroupsValueOpen = OpenEnum<typeof EmployeeSchemasGroupsValue>;

/**
 * The type of the group
 */
export type EmployeeType = {
    sourceValue?: EmployeeSchemasGroups4 | string | number | boolean | null | undefined;
    value?: EmployeeSchemasGroupsValueOpen | null | undefined;
};

/**
 * The employee groups
 */
export type Groups = {
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    /**
     * The name of the group
     */
    name?: string | null | undefined;
    /**
     * The list of group owner ids of the given group
     */
    ownerIds?: Array<string> | null | undefined;
    /**
     * The list of parent group ids of the given group
     */
    parentIds?: Array<string> | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    /**
     * Provider's list of parent group ids of the given group
     */
    remoteParentIds?: Array<string> | null | undefined;
    /**
     * The type of the group
     */
    type?: EmployeeType | null | undefined;
};

export type EmployeeSchemasHomeLocation4 = {};

export type EmployeeSchemasHomeLocationSourceValue =
    | EmployeeSchemasHomeLocation4
    | string
    | number
    | boolean;

/**
 * The ISO3166-1 Alpha2 Code of the Country
 */
export enum EmployeeSchemasHomeLocationValue {
    Af = "AF",
    Al = "AL",
    Dz = "DZ",
    As = "AS",
    Ad = "AD",
    Ao = "AO",
    Ai = "AI",
    Aq = "AQ",
    Ag = "AG",
    Ar = "AR",
    Am = "AM",
    Aw = "AW",
    Au = "AU",
    At = "AT",
    Az = "AZ",
    Bs = "BS",
    Bh = "BH",
    Bd = "BD",
    Bb = "BB",
    By = "BY",
    Be = "BE",
    Bz = "BZ",
    Bj = "BJ",
    Bm = "BM",
    Bt = "BT",
    Bo = "BO",
    Bq = "BQ",
    Ba = "BA",
    Bw = "BW",
    Bv = "BV",
    Br = "BR",
    Io = "IO",
    Bn = "BN",
    Bg = "BG",
    Bf = "BF",
    Bi = "BI",
    Kh = "KH",
    Cm = "CM",
    Ca = "CA",
    Cv = "CV",
    Ky = "KY",
    Cf = "CF",
    Td = "TD",
    Cl = "CL",
    Cn = "CN",
    Cx = "CX",
    Cc = "CC",
    Co = "CO",
    Km = "KM",
    Cg = "CG",
    Cd = "CD",
    Ck = "CK",
    Cr = "CR",
    Hr = "HR",
    Cu = "CU",
    Cw = "CW",
    Cy = "CY",
    Cz = "CZ",
    Ci = "CI",
    Dk = "DK",
    Dj = "DJ",
    Dm = "DM",
    Do = "DO",
    Ec = "EC",
    Eg = "EG",
    Sv = "SV",
    Gq = "GQ",
    Er = "ER",
    Ee = "EE",
    Et = "ET",
    Fk = "FK",
    Fo = "FO",
    Fj = "FJ",
    Fi = "FI",
    Fr = "FR",
    Gf = "GF",
    Pf = "PF",
    Tf = "TF",
    Ga = "GA",
    Gm = "GM",
    Ge = "GE",
    De = "DE",
    Gh = "GH",
    Gi = "GI",
    Gr = "GR",
    Gl = "GL",
    Gd = "GD",
    Gp = "GP",
    Gu = "GU",
    Gt = "GT",
    Gg = "GG",
    Gn = "GN",
    Gw = "GW",
    Gy = "GY",
    Ht = "HT",
    Hm = "HM",
    Va = "VA",
    Hn = "HN",
    Hk = "HK",
    Hu = "HU",
    Is = "IS",
    In = "IN",
    Id = "ID",
    Ir = "IR",
    Iq = "IQ",
    Ie = "IE",
    Im = "IM",
    Il = "IL",
    It = "IT",
    Jm = "JM",
    Jp = "JP",
    Je = "JE",
    Jo = "JO",
    Kz = "KZ",
    Ke = "KE",
    Ki = "KI",
    Kp = "KP",
    Kr = "KR",
    Kw = "KW",
    Kg = "KG",
    La = "LA",
    Lv = "LV",
    Lb = "LB",
    Ls = "LS",
    Lr = "LR",
    Ly = "LY",
    Li = "LI",
    Lt = "LT",
    Lu = "LU",
    Mo = "MO",
    Mk = "MK",
    Mg = "MG",
    Mw = "MW",
    My = "MY",
    Mv = "MV",
    Ml = "ML",
    Mt = "MT",
    Mh = "MH",
    Mq = "MQ",
    Mr = "MR",
    Mu = "MU",
    Yt = "YT",
    Mx = "MX",
    Fm = "FM",
    Md = "MD",
    Mc = "MC",
    Mn = "MN",
    Me = "ME",
    Ms = "MS",
    Ma = "MA",
    Mz = "MZ",
    Mm = "MM",
    Na = "NA",
    Nr = "NR",
    Np = "NP",
    Nl = "NL",
    Nc = "NC",
    Nz = "NZ",
    Ni = "NI",
    Ne = "NE",
    Ng = "NG",
    Nu = "NU",
    Nf = "NF",
    Mp = "MP",
    No = "NO",
    Om = "OM",
    Pk = "PK",
    Pw = "PW",
    Ps = "PS",
    Pa = "PA",
    Pg = "PG",
    Py = "PY",
    Pe = "PE",
    Ph = "PH",
    Pn = "PN",
    Pl = "PL",
    Pt = "PT",
    Pr = "PR",
    Qa = "QA",
    Ro = "RO",
    Ru = "RU",
    Rw = "RW",
    Re = "RE",
    Bl = "BL",
    Sh = "SH",
    Kn = "KN",
    Lc = "LC",
    Mf = "MF",
    Pm = "PM",
    Vc = "VC",
    Ws = "WS",
    Sm = "SM",
    St = "ST",
    Sa = "SA",
    Sn = "SN",
    Rs = "RS",
    Sc = "SC",
    Sl = "SL",
    Sg = "SG",
    Sx = "SX",
    Sk = "SK",
    Si = "SI",
    Sb = "SB",
    So = "SO",
    Za = "ZA",
    Gs = "GS",
    Ss = "SS",
    Es = "ES",
    Lk = "LK",
    Sd = "SD",
    Sr = "SR",
    Sj = "SJ",
    Sz = "SZ",
    Se = "SE",
    Ch = "CH",
    Sy = "SY",
    Tw = "TW",
    Tj = "TJ",
    Tz = "TZ",
    Th = "TH",
    Tl = "TL",
    Tg = "TG",
    Tk = "TK",
    To = "TO",
    Tt = "TT",
    Tn = "TN",
    Tr = "TR",
    Tm = "TM",
    Tc = "TC",
    Tv = "TV",
    Ug = "UG",
    Ua = "UA",
    Ae = "AE",
    Gb = "GB",
    Us = "US",
    Um = "UM",
    Uy = "UY",
    Uz = "UZ",
    Vu = "VU",
    Ve = "VE",
    Vn = "VN",
    Vg = "VG",
    Vi = "VI",
    Wf = "WF",
    Eh = "EH",
    Ye = "YE",
    Zm = "ZM",
    Zw = "ZW",
    UnmappedValue = "unmapped_value",
}
/**
 * The ISO3166-1 Alpha2 Code of the Country
 */
export type EmployeeSchemasHomeLocationValueOpen = OpenEnum<
    typeof EmployeeSchemasHomeLocationValue
>;

/**
 * The country code
 */
export type EmployeeCountry = {
    sourceValue?: EmployeeSchemasHomeLocation4 | string | number | boolean | null | undefined;
    /**
     * The ISO3166-1 Alpha2 Code of the Country
     */
    value?: EmployeeSchemasHomeLocationValueOpen | null | undefined;
};

export type EmployeeSchemasHomeLocationLocationType4 = {};

/**
 * The source value of the location type.
 */
export type EmployeeSchemasHomeLocationLocationTypeSourceValue =
    | EmployeeSchemasHomeLocationLocationType4
    | string
    | number
    | boolean;

/**
 * The type of the location.
 */
export enum EmployeeSchemasHomeLocationLocationTypeValue {
    Home = "home",
    Work = "work",
    UnmappedValue = "unmapped_value",
}
/**
 * The type of the location.
 */
export type EmployeeSchemasHomeLocationLocationTypeValueOpen = OpenEnum<
    typeof EmployeeSchemasHomeLocationLocationTypeValue
>;

/**
 * The location type
 */
export type EmployeeLocationType = {
    /**
     * The source value of the location type.
     */
    sourceValue?:
        | EmployeeSchemasHomeLocationLocationType4
        | string
        | number
        | boolean
        | null
        | undefined;
    /**
     * The type of the location.
     */
    value?: EmployeeSchemasHomeLocationLocationTypeValueOpen | null | undefined;
};

/**
 * The employee home location
 */
export type HomeLocation = {
    /**
     * The city where the location is situated
     */
    city?: string | null | undefined;
    /**
     * The country code
     */
    country?: EmployeeCountry | null | undefined;
    /**
     * The created_at date
     */
    createdAt?: Date | null | undefined;
    /**
     * The employee ID
     */
    employeeId?: string | null | undefined;
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    /**
     * The location type
     */
    locationType?: EmployeeLocationType | null | undefined;
    /**
     * The name of the location
     */
    name?: string | null | undefined;
    /**
     * The phone number of the location
     */
    phoneNumber?: string | null | undefined;
    /**
     * Provider's unique identifier of the employee
     */
    remoteEmployeeId?: string | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    /**
     * The state where the location is situated
     */
    state?: string | null | undefined;
    /**
     * The first line of the address
     */
    street1?: string | null | undefined;
    /**
     * The second line of the address
     */
    street2?: string | null | undefined;
    /**
     * The updated_at date
     */
    updatedAt?: Date | null | undefined;
    /**
     * The ZIP code/Postal code of the location
     */
    zipCode?: string | null | undefined;
};

/**
 * The employee job description
 */
export type JobDescription = {
    text?: string | null | undefined;
};

export type EmployeeSchemasMaritalStatus4 = {};

export type EmployeeSchemasMaritalStatusSourceValue =
    | EmployeeSchemasMaritalStatus4
    | string
    | number
    | boolean;

export enum EmployeeSchemasMaritalStatusValue {
    Single = "single",
    Married = "married",
    CommonLaw = "common_law",
    Divorced = "divorced",
    Widowed = "widowed",
    DomesticPartnership = "domestic_partnership",
    Separated = "separated",
    Other = "other",
    NotDisclosed = "not_disclosed",
    UnmappedValue = "unmapped_value",
}
export type EmployeeSchemasMaritalStatusValueOpen = OpenEnum<
    typeof EmployeeSchemasMaritalStatusValue
>;

/**
 * The employee marital status
 */
export type MaritalStatus = {
    sourceValue?: EmployeeSchemasMaritalStatus4 | string | number | boolean | null | undefined;
    value?: EmployeeSchemasMaritalStatusValueOpen | null | undefined;
};

export type EmployeeSchemasPreferredLanguage4 = {};

export type EmployeeSchemasPreferredLanguageSourceValue =
    | EmployeeSchemasPreferredLanguage4
    | string
    | number
    | boolean;

/**
 * The ISO639-2 Code of the language
 */
export enum EmployeeSchemasPreferredLanguageValue {
    Aar = "aar",
    Afr = "afr",
    Amh = "amh",
    Ara = "ara",
    Aym = "aym",
    Aze = "aze",
    Bel = "bel",
    Bul = "bul",
    Bis = "bis",
    Ben = "ben",
    Bos = "bos",
    Byn = "byn",
    Cat = "cat",
    Cha = "cha",
    Ces = "ces",
    Deu = "deu",
    Div = "div",
    Dzo = "dzo",
    Ell = "ell",
    Eng = "eng",
    Spa = "spa",
    Est = "est",
    Fas = "fas",
    Fan = "fan",
    Ful = "ful",
    Fin = "fin",
    Fij = "fij",
    Fao = "fao",
    Fra = "fra",
    Gle = "gle",
    Grn = "grn",
    Glv = "glv",
    Heb = "heb",
    Hin = "hin",
    Hrv = "hrv",
    Hat = "hat",
    Hun = "hun",
    Hye = "hye",
    Ind = "ind",
    Isl = "isl",
    Ita = "ita",
    Jpn = "jpn",
    Kat = "kat",
    Kon = "kon",
    Kaz = "kaz",
    Kal = "kal",
    Khm = "khm",
    Kor = "kor",
    Kur = "kur",
    Kir = "kir",
    Lat = "lat",
    Ltz = "ltz",
    Lin = "lin",
    Lao = "lao",
    Lit = "lit",
    Lub = "lub",
    Lav = "lav",
    Mlg = "mlg",
    Mah = "mah",
    Mri = "mri",
    Mkd = "mkd",
    Msa = "msa",
    Mlt = "mlt",
    Mya = "mya",
    Nob = "nob",
    Nep = "nep",
    Nld = "nld",
    Nno = "nno",
    Nor = "nor",
    Nbl = "nbl",
    Nya = "nya",
    Pan = "pan",
    Pol = "pol",
    Pus = "pus",
    Por = "por",
    Rar = "rar",
    Roh = "roh",
    Rup = "rup",
    Ron = "ron",
    Rus = "rus",
    Kin = "kin",
    Sag = "sag",
    Sin = "sin",
    Slk = "slk",
    Smo = "smo",
    Sna = "sna",
    Som = "som",
    Sqi = "sqi",
    Srp = "srp",
    Ssw = "ssw",
    Swe = "swe",
    Swa = "swa",
    Tam = "tam",
    Tgk = "tgk",
    Tha = "tha",
    Tir = "tir",
    Tig = "tig",
    UnmappedValue = "unmapped_value",
}
/**
 * The ISO639-2 Code of the language
 */
export type EmployeeSchemasPreferredLanguageValueOpen = OpenEnum<
    typeof EmployeeSchemasPreferredLanguageValue
>;

/**
 * The employee preferred language
 */
export type PreferredLanguage = {
    sourceValue?: EmployeeSchemasPreferredLanguage4 | string | number | boolean | null | undefined;
    /**
     * The ISO639-2 Code of the language
     */
    value?: EmployeeSchemasPreferredLanguageValueOpen | null | undefined;
};

export type EmployeeSchemasWorkLocation4 = {};

export type EmployeeSchemasWorkLocationSourceValue =
    | EmployeeSchemasWorkLocation4
    | string
    | number
    | boolean;

/**
 * The ISO3166-1 Alpha2 Code of the Country
 */
export enum EmployeeSchemasWorkLocationValue {
    Af = "AF",
    Al = "AL",
    Dz = "DZ",
    As = "AS",
    Ad = "AD",
    Ao = "AO",
    Ai = "AI",
    Aq = "AQ",
    Ag = "AG",
    Ar = "AR",
    Am = "AM",
    Aw = "AW",
    Au = "AU",
    At = "AT",
    Az = "AZ",
    Bs = "BS",
    Bh = "BH",
    Bd = "BD",
    Bb = "BB",
    By = "BY",
    Be = "BE",
    Bz = "BZ",
    Bj = "BJ",
    Bm = "BM",
    Bt = "BT",
    Bo = "BO",
    Bq = "BQ",
    Ba = "BA",
    Bw = "BW",
    Bv = "BV",
    Br = "BR",
    Io = "IO",
    Bn = "BN",
    Bg = "BG",
    Bf = "BF",
    Bi = "BI",
    Kh = "KH",
    Cm = "CM",
    Ca = "CA",
    Cv = "CV",
    Ky = "KY",
    Cf = "CF",
    Td = "TD",
    Cl = "CL",
    Cn = "CN",
    Cx = "CX",
    Cc = "CC",
    Co = "CO",
    Km = "KM",
    Cg = "CG",
    Cd = "CD",
    Ck = "CK",
    Cr = "CR",
    Hr = "HR",
    Cu = "CU",
    Cw = "CW",
    Cy = "CY",
    Cz = "CZ",
    Ci = "CI",
    Dk = "DK",
    Dj = "DJ",
    Dm = "DM",
    Do = "DO",
    Ec = "EC",
    Eg = "EG",
    Sv = "SV",
    Gq = "GQ",
    Er = "ER",
    Ee = "EE",
    Et = "ET",
    Fk = "FK",
    Fo = "FO",
    Fj = "FJ",
    Fi = "FI",
    Fr = "FR",
    Gf = "GF",
    Pf = "PF",
    Tf = "TF",
    Ga = "GA",
    Gm = "GM",
    Ge = "GE",
    De = "DE",
    Gh = "GH",
    Gi = "GI",
    Gr = "GR",
    Gl = "GL",
    Gd = "GD",
    Gp = "GP",
    Gu = "GU",
    Gt = "GT",
    Gg = "GG",
    Gn = "GN",
    Gw = "GW",
    Gy = "GY",
    Ht = "HT",
    Hm = "HM",
    Va = "VA",
    Hn = "HN",
    Hk = "HK",
    Hu = "HU",
    Is = "IS",
    In = "IN",
    Id = "ID",
    Ir = "IR",
    Iq = "IQ",
    Ie = "IE",
    Im = "IM",
    Il = "IL",
    It = "IT",
    Jm = "JM",
    Jp = "JP",
    Je = "JE",
    Jo = "JO",
    Kz = "KZ",
    Ke = "KE",
    Ki = "KI",
    Kp = "KP",
    Kr = "KR",
    Kw = "KW",
    Kg = "KG",
    La = "LA",
    Lv = "LV",
    Lb = "LB",
    Ls = "LS",
    Lr = "LR",
    Ly = "LY",
    Li = "LI",
    Lt = "LT",
    Lu = "LU",
    Mo = "MO",
    Mk = "MK",
    Mg = "MG",
    Mw = "MW",
    My = "MY",
    Mv = "MV",
    Ml = "ML",
    Mt = "MT",
    Mh = "MH",
    Mq = "MQ",
    Mr = "MR",
    Mu = "MU",
    Yt = "YT",
    Mx = "MX",
    Fm = "FM",
    Md = "MD",
    Mc = "MC",
    Mn = "MN",
    Me = "ME",
    Ms = "MS",
    Ma = "MA",
    Mz = "MZ",
    Mm = "MM",
    Na = "NA",
    Nr = "NR",
    Np = "NP",
    Nl = "NL",
    Nc = "NC",
    Nz = "NZ",
    Ni = "NI",
    Ne = "NE",
    Ng = "NG",
    Nu = "NU",
    Nf = "NF",
    Mp = "MP",
    No = "NO",
    Om = "OM",
    Pk = "PK",
    Pw = "PW",
    Ps = "PS",
    Pa = "PA",
    Pg = "PG",
    Py = "PY",
    Pe = "PE",
    Ph = "PH",
    Pn = "PN",
    Pl = "PL",
    Pt = "PT",
    Pr = "PR",
    Qa = "QA",
    Ro = "RO",
    Ru = "RU",
    Rw = "RW",
    Re = "RE",
    Bl = "BL",
    Sh = "SH",
    Kn = "KN",
    Lc = "LC",
    Mf = "MF",
    Pm = "PM",
    Vc = "VC",
    Ws = "WS",
    Sm = "SM",
    St = "ST",
    Sa = "SA",
    Sn = "SN",
    Rs = "RS",
    Sc = "SC",
    Sl = "SL",
    Sg = "SG",
    Sx = "SX",
    Sk = "SK",
    Si = "SI",
    Sb = "SB",
    So = "SO",
    Za = "ZA",
    Gs = "GS",
    Ss = "SS",
    Es = "ES",
    Lk = "LK",
    Sd = "SD",
    Sr = "SR",
    Sj = "SJ",
    Sz = "SZ",
    Se = "SE",
    Ch = "CH",
    Sy = "SY",
    Tw = "TW",
    Tj = "TJ",
    Tz = "TZ",
    Th = "TH",
    Tl = "TL",
    Tg = "TG",
    Tk = "TK",
    To = "TO",
    Tt = "TT",
    Tn = "TN",
    Tr = "TR",
    Tm = "TM",
    Tc = "TC",
    Tv = "TV",
    Ug = "UG",
    Ua = "UA",
    Ae = "AE",
    Gb = "GB",
    Us = "US",
    Um = "UM",
    Uy = "UY",
    Uz = "UZ",
    Vu = "VU",
    Ve = "VE",
    Vn = "VN",
    Vg = "VG",
    Vi = "VI",
    Wf = "WF",
    Eh = "EH",
    Ye = "YE",
    Zm = "ZM",
    Zw = "ZW",
    UnmappedValue = "unmapped_value",
}
/**
 * The ISO3166-1 Alpha2 Code of the Country
 */
export type EmployeeSchemasWorkLocationValueOpen = OpenEnum<
    typeof EmployeeSchemasWorkLocationValue
>;

/**
 * The country code
 */
export type EmployeeSchemasCountry = {
    sourceValue?: EmployeeSchemasWorkLocation4 | string | number | boolean | null | undefined;
    /**
     * The ISO3166-1 Alpha2 Code of the Country
     */
    value?: EmployeeSchemasWorkLocationValueOpen | null | undefined;
};

export type EmployeeSchemasWorkLocationLocationType4 = {};

/**
 * The source value of the location type.
 */
export type EmployeeSchemasWorkLocationLocationTypeSourceValue =
    | EmployeeSchemasWorkLocationLocationType4
    | string
    | number
    | boolean;

/**
 * The type of the location.
 */
export enum EmployeeSchemasWorkLocationLocationTypeValue {
    Home = "home",
    Work = "work",
    UnmappedValue = "unmapped_value",
}
/**
 * The type of the location.
 */
export type EmployeeSchemasWorkLocationLocationTypeValueOpen = OpenEnum<
    typeof EmployeeSchemasWorkLocationLocationTypeValue
>;

/**
 * The location type
 */
export type EmployeeSchemasLocationType = {
    /**
     * The source value of the location type.
     */
    sourceValue?:
        | EmployeeSchemasWorkLocationLocationType4
        | string
        | number
        | boolean
        | null
        | undefined;
    /**
     * The type of the location.
     */
    value?: EmployeeSchemasWorkLocationLocationTypeValueOpen | null | undefined;
};

/**
 * The employee work location
 */
export type WorkLocation = {
    /**
     * The city where the location is situated
     */
    city?: string | null | undefined;
    /**
     * The country code
     */
    country?: EmployeeSchemasCountry | null | undefined;
    /**
     * The created_at date
     */
    createdAt?: Date | null | undefined;
    /**
     * The employee ID
     */
    employeeId?: string | null | undefined;
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    /**
     * The location type
     */
    locationType?: EmployeeSchemasLocationType | null | undefined;
    /**
     * The name of the location
     */
    name?: string | null | undefined;
    /**
     * The phone number of the location
     */
    phoneNumber?: string | null | undefined;
    /**
     * Provider's unique identifier of the employee
     */
    remoteEmployeeId?: string | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    /**
     * The state where the location is situated
     */
    state?: string | null | undefined;
    /**
     * The first line of the address
     */
    street1?: string | null | undefined;
    /**
     * The second line of the address
     */
    street2?: string | null | undefined;
    /**
     * The updated_at date
     */
    updatedAt?: Date | null | undefined;
    /**
     * The ZIP code/Postal code of the location
     */
    zipCode?: string | null | undefined;
};

export type Employee = {
    /**
     * The employee avatar
     */
    avatar?: Avatar | null | undefined;
    /**
     * The employee avatar Url
     */
    avatarUrl?: string | null | undefined;
    /**
     * Current benefits of the employee
     */
    benefits?: Array<HRISBenefit> | null | undefined;
    /**
     * The employee birthday
     */
    birthday?: Date | null | undefined;
    /**
     * The citizenships of the Employee
     */
    citizenships?: Array<CountryCodeEnum> | null | undefined;
    /**
     * The employee company
     */
    company?: EmployeeCompany | null | undefined;
    /**
     * The employee company name
     */
    companyName?: string | null | undefined;
    /**
     * The employee cost centers
     */
    costCenters?: Array<CostCenters> | null | undefined;
    /**
     * The created_at date
     */
    createdAt?: Date | null | undefined;
    /**
     * The employee custom fields
     */
    customFields?: Array<EmployeeCustomFields> | null | undefined;
    /**
     * The employee date_of_birth
     */
    dateOfBirth?: Date | null | undefined;
    /**
     * The employee department
     */
    department?: string | null | undefined;
    /**
     * The employee display name
     */
    displayName?: string | null | undefined;
    /**
     * The assigned employee number
     */
    employeeNumber?: string | null | undefined;
    /**
     * The employment work schedule type (e.g., full-time, part-time)
     */
    employmentContractType?: EmploymentContractType | null | undefined;
    /**
     * The employee employment status
     */
    employmentStatus?: EmploymentStatus | null | undefined;
    /**
     * The employee employment type
     */
    employmentType?: EmploymentType | null | undefined;
    /**
     * The employee employments
     */
    employments?: Array<Employment> | null | undefined;
    /**
     * The employee ethnicity
     */
    ethnicity?: Ethnicity | null | undefined;
    /**
     * The employee first name
     */
    firstName?: string | null | undefined;
    /**
     * The employee gender
     */
    gender?: Gender | null | undefined;
    /**
     * The employee groups
     */
    groups?: Groups | null | undefined;
    /**
     * The employee hire date
     */
    hireDate?: Date | null | undefined;
    /**
     * The employee home location
     */
    homeLocation?: HomeLocation | null | undefined;
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    /**
     * The employee job description
     */
    jobDescription?: JobDescription | null | undefined;
    /**
     * The employee job title
     */
    jobTitle?: string | null | undefined;
    /**
     * The employee last name
     */
    lastName?: string | null | undefined;
    /**
     * The employee manager ID
     */
    managerId?: string | null | undefined;
    /**
     * The employee marital status
     */
    maritalStatus?: MaritalStatus | null | undefined;
    /**
     * The employee name
     */
    name?: string | null | undefined;
    /**
     * The employee personal email
     */
    personalEmail?: string | null | undefined;
    /**
     * The employee personal phone number
     */
    personalPhoneNumber?: string | null | undefined;
    /**
     * The employee preferred language
     */
    preferredLanguage?: PreferredLanguage | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    /**
     * Provider's unique identifier of the manager
     */
    remoteManagerId?: string | null | undefined;
    /**
     * The employee start date
     */
    startDate?: Date | null | undefined;
    /**
     * The employee tenure
     */
    tenure?: number | null | undefined;
    /**
     * The employee termination date
     */
    terminationDate?: Date | null | undefined;
    /**
     * The updated_at date
     */
    updatedAt?: Date | null | undefined;
    /**
     * The employee work anniversary
     */
    workAnniversary?: Date | null | undefined;
    /**
     * The employee work email
     */
    workEmail?: string | null | undefined;
    /**
     * The employee work location
     */
    workLocation?: WorkLocation | null | undefined;
    /**
     * The employee work phone number
     */
    workPhoneNumber?: string | null | undefined;
};

/** @internal */
export namespace Avatar$ {
    export const inboundSchema: z.ZodType<Avatar, z.ZodTypeDef, unknown> = z.object({
        base64: z.nullable(z.string()).optional(),
        url: z.nullable(z.string()).optional(),
    });

    export type Outbound = {
        base64?: string | null | undefined;
        url?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Avatar> = z.object({
        base64: z.nullable(z.string()).optional(),
        url: z.nullable(z.string()).optional(),
    });
}

/** @internal */
export namespace EmployeeCompany$ {
    export const inboundSchema: z.ZodType<EmployeeCompany, z.ZodTypeDef, unknown> = z
        .object({
            created_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            display_name: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            remote_id: z.nullable(z.string()).optional(),
            updated_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                created_at: "createdAt",
                display_name: "displayName",
                remote_id: "remoteId",
                updated_at: "updatedAt",
            });
        });

    export type Outbound = {
        created_at?: string | null | undefined;
        display_name?: string | null | undefined;
        id?: string | null | undefined;
        name?: string | null | undefined;
        remote_id?: string | null | undefined;
        updated_at?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeCompany> = z
        .object({
            createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            displayName: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            remoteId: z.nullable(z.string()).optional(),
            updatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                createdAt: "created_at",
                displayName: "display_name",
                remoteId: "remote_id",
                updatedAt: "updated_at",
            });
        });
}

/** @internal */
export namespace Employee4$ {
    export const inboundSchema: z.ZodType<Employee4, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Employee4> = z.object({});
}

/** @internal */
export namespace EmployeeSourceValue$ {
    export const inboundSchema: z.ZodType<EmployeeSourceValue, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => Employee4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export type Outbound = Employee4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeSourceValue> = z.union([
        z.lazy(() => Employee4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace EmployeeValue$ {
    export const inboundSchema: z.ZodType<EmployeeValueOpen, z.ZodTypeDef, unknown> = z.union([
        z.nativeEnum(EmployeeValue),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema = z.union([
        z.nativeEnum(EmployeeValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace EmploymentContractType$ {
    export const inboundSchema: z.ZodType<EmploymentContractType, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => Employee4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?: Employee4$.Outbound | string | number | boolean | null | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmploymentContractType> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => Employee4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}

/** @internal */
export namespace EmployeeSchemas4$ {
    export const inboundSchema: z.ZodType<EmployeeSchemas4, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeSchemas4> = z.object({});
}

/** @internal */
export namespace EmployeeSchemasSourceValue$ {
    export const inboundSchema: z.ZodType<EmployeeSchemasSourceValue, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => EmployeeSchemas4$.inboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);

    export type Outbound = EmployeeSchemas4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeSchemasSourceValue> =
        z.union([
            z.lazy(() => EmployeeSchemas4$.outboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);
}

/** @internal */
export namespace EmployeeSchemasValue$ {
    export const inboundSchema: z.ZodType<EmployeeSchemasValueOpen, z.ZodTypeDef, unknown> =
        z.union([z.nativeEnum(EmployeeSchemasValue), z.string().transform(catchUnrecognizedEnum)]);

    export const outboundSchema = z.union([
        z.nativeEnum(EmployeeSchemasValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace EmploymentStatus$ {
    export const inboundSchema: z.ZodType<EmploymentStatus, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemas4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?: EmployeeSchemas4$.Outbound | string | number | boolean | null | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmploymentStatus> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemas4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}

/** @internal */
export namespace EmployeeSchemasEmploymentType4$ {
    export const inboundSchema: z.ZodType<EmployeeSchemasEmploymentType4, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeSchemasEmploymentType4> =
        z.object({});
}

/** @internal */
export namespace EmployeeSchemasEmploymentTypeSourceValue$ {
    export const inboundSchema: z.ZodType<
        EmployeeSchemasEmploymentTypeSourceValue,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.lazy(() => EmployeeSchemasEmploymentType4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export type Outbound = EmployeeSchemasEmploymentType4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EmployeeSchemasEmploymentTypeSourceValue
    > = z.union([
        z.lazy(() => EmployeeSchemasEmploymentType4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace EmployeeSchemasEmploymentTypeValue$ {
    export const inboundSchema: z.ZodType<
        EmployeeSchemasEmploymentTypeValueOpen,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.nativeEnum(EmployeeSchemasEmploymentTypeValue),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema = z.union([
        z.nativeEnum(EmployeeSchemasEmploymentTypeValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace EmploymentType$ {
    export const inboundSchema: z.ZodType<EmploymentType, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasEmploymentType4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasEmploymentTypeValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?:
            | EmployeeSchemasEmploymentType4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmploymentType> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasEmploymentType4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasEmploymentTypeValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}

/** @internal */
export namespace EmployeeSchemasEthnicity4$ {
    export const inboundSchema: z.ZodType<EmployeeSchemasEthnicity4, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeSchemasEthnicity4> =
        z.object({});
}

/** @internal */
export namespace EmployeeSchemasEthnicitySourceValue$ {
    export const inboundSchema: z.ZodType<
        EmployeeSchemasEthnicitySourceValue,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.lazy(() => EmployeeSchemasEthnicity4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export type Outbound = EmployeeSchemasEthnicity4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EmployeeSchemasEthnicitySourceValue
    > = z.union([
        z.lazy(() => EmployeeSchemasEthnicity4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace EmployeeSchemasEthnicityValue$ {
    export const inboundSchema: z.ZodType<
        EmployeeSchemasEthnicityValueOpen,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.nativeEnum(EmployeeSchemasEthnicityValue),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema = z.union([
        z.nativeEnum(EmployeeSchemasEthnicityValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace Ethnicity$ {
    export const inboundSchema: z.ZodType<Ethnicity, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasEthnicity4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasEthnicityValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?:
            | EmployeeSchemasEthnicity4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Ethnicity> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasEthnicity4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasEthnicityValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}

/** @internal */
export namespace EmployeeSchemasGender4$ {
    export const inboundSchema: z.ZodType<EmployeeSchemasGender4, z.ZodTypeDef, unknown> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeSchemasGender4> =
        z.object({});
}

/** @internal */
export namespace EmployeeSchemasGenderSourceValue$ {
    export const inboundSchema: z.ZodType<EmployeeSchemasGenderSourceValue, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => EmployeeSchemasGender4$.inboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);

    export type Outbound = EmployeeSchemasGender4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EmployeeSchemasGenderSourceValue
    > = z.union([
        z.lazy(() => EmployeeSchemasGender4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace EmployeeSchemasGenderValue$ {
    export const inboundSchema: z.ZodType<EmployeeSchemasGenderValueOpen, z.ZodTypeDef, unknown> =
        z.union([
            z.nativeEnum(EmployeeSchemasGenderValue),
            z.string().transform(catchUnrecognizedEnum),
        ]);

    export const outboundSchema = z.union([
        z.nativeEnum(EmployeeSchemasGenderValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace Gender$ {
    export const inboundSchema: z.ZodType<Gender, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasGender4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasGenderValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?:
            | EmployeeSchemasGender4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Gender> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasGender4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasGenderValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}

/** @internal */
export namespace EmployeeSchemasGroups4$ {
    export const inboundSchema: z.ZodType<EmployeeSchemasGroups4, z.ZodTypeDef, unknown> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeSchemasGroups4> =
        z.object({});
}

/** @internal */
export namespace EmployeeSchemasGroupsSourceValue$ {
    export const inboundSchema: z.ZodType<EmployeeSchemasGroupsSourceValue, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => EmployeeSchemasGroups4$.inboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);

    export type Outbound = EmployeeSchemasGroups4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EmployeeSchemasGroupsSourceValue
    > = z.union([
        z.lazy(() => EmployeeSchemasGroups4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace EmployeeSchemasGroupsValue$ {
    export const inboundSchema: z.ZodType<EmployeeSchemasGroupsValueOpen, z.ZodTypeDef, unknown> =
        z.union([
            z.nativeEnum(EmployeeSchemasGroupsValue),
            z.string().transform(catchUnrecognizedEnum),
        ]);

    export const outboundSchema = z.union([
        z.nativeEnum(EmployeeSchemasGroupsValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace EmployeeType$ {
    export const inboundSchema: z.ZodType<EmployeeType, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasGroups4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasGroupsValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?:
            | EmployeeSchemasGroups4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeType> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasGroups4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasGroupsValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}

/** @internal */
export namespace Groups$ {
    export const inboundSchema: z.ZodType<Groups, z.ZodTypeDef, unknown> = z
        .object({
            id: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            owner_ids: z.nullable(z.array(z.string())).optional(),
            parent_ids: z.nullable(z.array(z.string())).optional(),
            remote_id: z.nullable(z.string()).optional(),
            remote_parent_ids: z.nullable(z.array(z.string())).optional(),
            type: z.nullable(z.lazy(() => EmployeeType$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                owner_ids: "ownerIds",
                parent_ids: "parentIds",
                remote_id: "remoteId",
                remote_parent_ids: "remoteParentIds",
            });
        });

    export type Outbound = {
        id?: string | null | undefined;
        name?: string | null | undefined;
        owner_ids?: Array<string> | null | undefined;
        parent_ids?: Array<string> | null | undefined;
        remote_id?: string | null | undefined;
        remote_parent_ids?: Array<string> | null | undefined;
        type?: EmployeeType$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Groups> = z
        .object({
            id: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            ownerIds: z.nullable(z.array(z.string())).optional(),
            parentIds: z.nullable(z.array(z.string())).optional(),
            remoteId: z.nullable(z.string()).optional(),
            remoteParentIds: z.nullable(z.array(z.string())).optional(),
            type: z.nullable(z.lazy(() => EmployeeType$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ownerIds: "owner_ids",
                parentIds: "parent_ids",
                remoteId: "remote_id",
                remoteParentIds: "remote_parent_ids",
            });
        });
}

/** @internal */
export namespace EmployeeSchemasHomeLocation4$ {
    export const inboundSchema: z.ZodType<EmployeeSchemasHomeLocation4, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeSchemasHomeLocation4> =
        z.object({});
}

/** @internal */
export namespace EmployeeSchemasHomeLocationSourceValue$ {
    export const inboundSchema: z.ZodType<
        EmployeeSchemasHomeLocationSourceValue,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.lazy(() => EmployeeSchemasHomeLocation4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export type Outbound = EmployeeSchemasHomeLocation4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EmployeeSchemasHomeLocationSourceValue
    > = z.union([
        z.lazy(() => EmployeeSchemasHomeLocation4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace EmployeeSchemasHomeLocationValue$ {
    export const inboundSchema: z.ZodType<
        EmployeeSchemasHomeLocationValueOpen,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.nativeEnum(EmployeeSchemasHomeLocationValue),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema = z.union([
        z.nativeEnum(EmployeeSchemasHomeLocationValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace EmployeeCountry$ {
    export const inboundSchema: z.ZodType<EmployeeCountry, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasHomeLocation4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasHomeLocationValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?:
            | EmployeeSchemasHomeLocation4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeCountry> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasHomeLocation4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasHomeLocationValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}

/** @internal */
export namespace EmployeeSchemasHomeLocationLocationType4$ {
    export const inboundSchema: z.ZodType<
        EmployeeSchemasHomeLocationLocationType4,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EmployeeSchemasHomeLocationLocationType4
    > = z.object({});
}

/** @internal */
export namespace EmployeeSchemasHomeLocationLocationTypeSourceValue$ {
    export const inboundSchema: z.ZodType<
        EmployeeSchemasHomeLocationLocationTypeSourceValue,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.lazy(() => EmployeeSchemasHomeLocationLocationType4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export type Outbound =
        | EmployeeSchemasHomeLocationLocationType4$.Outbound
        | string
        | number
        | boolean;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EmployeeSchemasHomeLocationLocationTypeSourceValue
    > = z.union([
        z.lazy(() => EmployeeSchemasHomeLocationLocationType4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace EmployeeSchemasHomeLocationLocationTypeValue$ {
    export const inboundSchema: z.ZodType<
        EmployeeSchemasHomeLocationLocationTypeValueOpen,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.nativeEnum(EmployeeSchemasHomeLocationLocationTypeValue),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema = z.union([
        z.nativeEnum(EmployeeSchemasHomeLocationLocationTypeValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace EmployeeLocationType$ {
    export const inboundSchema: z.ZodType<EmployeeLocationType, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasHomeLocationLocationType4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z
                .nullable(EmployeeSchemasHomeLocationLocationTypeValue$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?:
            | EmployeeSchemasHomeLocationLocationType4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeLocationType> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasHomeLocationLocationType4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z
                .nullable(EmployeeSchemasHomeLocationLocationTypeValue$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}

/** @internal */
export namespace HomeLocation$ {
    export const inboundSchema: z.ZodType<HomeLocation, z.ZodTypeDef, unknown> = z
        .object({
            city: z.nullable(z.string()).optional(),
            country: z.nullable(z.lazy(() => EmployeeCountry$.inboundSchema)).optional(),
            created_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            employee_id: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            location_type: z.nullable(z.lazy(() => EmployeeLocationType$.inboundSchema)).optional(),
            name: z.nullable(z.string()).optional(),
            phone_number: z.nullable(z.string()).optional(),
            remote_employee_id: z.nullable(z.string()).optional(),
            remote_id: z.nullable(z.string()).optional(),
            state: z.nullable(z.string()).optional(),
            street_1: z.nullable(z.string()).optional(),
            street_2: z.nullable(z.string()).optional(),
            updated_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            zip_code: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                created_at: "createdAt",
                employee_id: "employeeId",
                location_type: "locationType",
                phone_number: "phoneNumber",
                remote_employee_id: "remoteEmployeeId",
                remote_id: "remoteId",
                street_1: "street1",
                street_2: "street2",
                updated_at: "updatedAt",
                zip_code: "zipCode",
            });
        });

    export type Outbound = {
        city?: string | null | undefined;
        country?: EmployeeCountry$.Outbound | null | undefined;
        created_at?: string | null | undefined;
        employee_id?: string | null | undefined;
        id?: string | null | undefined;
        location_type?: EmployeeLocationType$.Outbound | null | undefined;
        name?: string | null | undefined;
        phone_number?: string | null | undefined;
        remote_employee_id?: string | null | undefined;
        remote_id?: string | null | undefined;
        state?: string | null | undefined;
        street_1?: string | null | undefined;
        street_2?: string | null | undefined;
        updated_at?: string | null | undefined;
        zip_code?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HomeLocation> = z
        .object({
            city: z.nullable(z.string()).optional(),
            country: z.nullable(z.lazy(() => EmployeeCountry$.outboundSchema)).optional(),
            createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            employeeId: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            locationType: z.nullable(z.lazy(() => EmployeeLocationType$.outboundSchema)).optional(),
            name: z.nullable(z.string()).optional(),
            phoneNumber: z.nullable(z.string()).optional(),
            remoteEmployeeId: z.nullable(z.string()).optional(),
            remoteId: z.nullable(z.string()).optional(),
            state: z.nullable(z.string()).optional(),
            street1: z.nullable(z.string()).optional(),
            street2: z.nullable(z.string()).optional(),
            updatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            zipCode: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                createdAt: "created_at",
                employeeId: "employee_id",
                locationType: "location_type",
                phoneNumber: "phone_number",
                remoteEmployeeId: "remote_employee_id",
                remoteId: "remote_id",
                street1: "street_1",
                street2: "street_2",
                updatedAt: "updated_at",
                zipCode: "zip_code",
            });
        });
}

/** @internal */
export namespace JobDescription$ {
    export const inboundSchema: z.ZodType<JobDescription, z.ZodTypeDef, unknown> = z.object({
        text: z.nullable(z.string()).optional(),
    });

    export type Outbound = {
        text?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobDescription> = z.object({
        text: z.nullable(z.string()).optional(),
    });
}

/** @internal */
export namespace EmployeeSchemasMaritalStatus4$ {
    export const inboundSchema: z.ZodType<EmployeeSchemasMaritalStatus4, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeSchemasMaritalStatus4> =
        z.object({});
}

/** @internal */
export namespace EmployeeSchemasMaritalStatusSourceValue$ {
    export const inboundSchema: z.ZodType<
        EmployeeSchemasMaritalStatusSourceValue,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.lazy(() => EmployeeSchemasMaritalStatus4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export type Outbound = EmployeeSchemasMaritalStatus4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EmployeeSchemasMaritalStatusSourceValue
    > = z.union([
        z.lazy(() => EmployeeSchemasMaritalStatus4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace EmployeeSchemasMaritalStatusValue$ {
    export const inboundSchema: z.ZodType<
        EmployeeSchemasMaritalStatusValueOpen,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.nativeEnum(EmployeeSchemasMaritalStatusValue),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema = z.union([
        z.nativeEnum(EmployeeSchemasMaritalStatusValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace MaritalStatus$ {
    export const inboundSchema: z.ZodType<MaritalStatus, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasMaritalStatus4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasMaritalStatusValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?:
            | EmployeeSchemasMaritalStatus4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MaritalStatus> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasMaritalStatus4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasMaritalStatusValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}

/** @internal */
export namespace EmployeeSchemasPreferredLanguage4$ {
    export const inboundSchema: z.ZodType<
        EmployeeSchemasPreferredLanguage4,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EmployeeSchemasPreferredLanguage4
    > = z.object({});
}

/** @internal */
export namespace EmployeeSchemasPreferredLanguageSourceValue$ {
    export const inboundSchema: z.ZodType<
        EmployeeSchemasPreferredLanguageSourceValue,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.lazy(() => EmployeeSchemasPreferredLanguage4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export type Outbound = EmployeeSchemasPreferredLanguage4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EmployeeSchemasPreferredLanguageSourceValue
    > = z.union([
        z.lazy(() => EmployeeSchemasPreferredLanguage4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace EmployeeSchemasPreferredLanguageValue$ {
    export const inboundSchema: z.ZodType<
        EmployeeSchemasPreferredLanguageValueOpen,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.nativeEnum(EmployeeSchemasPreferredLanguageValue),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema = z.union([
        z.nativeEnum(EmployeeSchemasPreferredLanguageValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace PreferredLanguage$ {
    export const inboundSchema: z.ZodType<PreferredLanguage, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasPreferredLanguage4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasPreferredLanguageValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?:
            | EmployeeSchemasPreferredLanguage4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PreferredLanguage> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasPreferredLanguage4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasPreferredLanguageValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}

/** @internal */
export namespace EmployeeSchemasWorkLocation4$ {
    export const inboundSchema: z.ZodType<EmployeeSchemasWorkLocation4, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeSchemasWorkLocation4> =
        z.object({});
}

/** @internal */
export namespace EmployeeSchemasWorkLocationSourceValue$ {
    export const inboundSchema: z.ZodType<
        EmployeeSchemasWorkLocationSourceValue,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.lazy(() => EmployeeSchemasWorkLocation4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export type Outbound = EmployeeSchemasWorkLocation4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EmployeeSchemasWorkLocationSourceValue
    > = z.union([
        z.lazy(() => EmployeeSchemasWorkLocation4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace EmployeeSchemasWorkLocationValue$ {
    export const inboundSchema: z.ZodType<
        EmployeeSchemasWorkLocationValueOpen,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.nativeEnum(EmployeeSchemasWorkLocationValue),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema = z.union([
        z.nativeEnum(EmployeeSchemasWorkLocationValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace EmployeeSchemasCountry$ {
    export const inboundSchema: z.ZodType<EmployeeSchemasCountry, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasWorkLocation4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasWorkLocationValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?:
            | EmployeeSchemasWorkLocation4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeSchemasCountry> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasWorkLocation4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeSchemasWorkLocationValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}

/** @internal */
export namespace EmployeeSchemasWorkLocationLocationType4$ {
    export const inboundSchema: z.ZodType<
        EmployeeSchemasWorkLocationLocationType4,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EmployeeSchemasWorkLocationLocationType4
    > = z.object({});
}

/** @internal */
export namespace EmployeeSchemasWorkLocationLocationTypeSourceValue$ {
    export const inboundSchema: z.ZodType<
        EmployeeSchemasWorkLocationLocationTypeSourceValue,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.lazy(() => EmployeeSchemasWorkLocationLocationType4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export type Outbound =
        | EmployeeSchemasWorkLocationLocationType4$.Outbound
        | string
        | number
        | boolean;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EmployeeSchemasWorkLocationLocationTypeSourceValue
    > = z.union([
        z.lazy(() => EmployeeSchemasWorkLocationLocationType4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace EmployeeSchemasWorkLocationLocationTypeValue$ {
    export const inboundSchema: z.ZodType<
        EmployeeSchemasWorkLocationLocationTypeValueOpen,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.nativeEnum(EmployeeSchemasWorkLocationLocationTypeValue),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema = z.union([
        z.nativeEnum(EmployeeSchemasWorkLocationLocationTypeValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace EmployeeSchemasLocationType$ {
    export const inboundSchema: z.ZodType<EmployeeSchemasLocationType, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasWorkLocationLocationType4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z
                .nullable(EmployeeSchemasWorkLocationLocationTypeValue$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?:
            | EmployeeSchemasWorkLocationLocationType4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeSchemasLocationType> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeSchemasWorkLocationLocationType4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z
                .nullable(EmployeeSchemasWorkLocationLocationTypeValue$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}

/** @internal */
export namespace WorkLocation$ {
    export const inboundSchema: z.ZodType<WorkLocation, z.ZodTypeDef, unknown> = z
        .object({
            city: z.nullable(z.string()).optional(),
            country: z.nullable(z.lazy(() => EmployeeSchemasCountry$.inboundSchema)).optional(),
            created_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            employee_id: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            location_type: z
                .nullable(z.lazy(() => EmployeeSchemasLocationType$.inboundSchema))
                .optional(),
            name: z.nullable(z.string()).optional(),
            phone_number: z.nullable(z.string()).optional(),
            remote_employee_id: z.nullable(z.string()).optional(),
            remote_id: z.nullable(z.string()).optional(),
            state: z.nullable(z.string()).optional(),
            street_1: z.nullable(z.string()).optional(),
            street_2: z.nullable(z.string()).optional(),
            updated_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            zip_code: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                created_at: "createdAt",
                employee_id: "employeeId",
                location_type: "locationType",
                phone_number: "phoneNumber",
                remote_employee_id: "remoteEmployeeId",
                remote_id: "remoteId",
                street_1: "street1",
                street_2: "street2",
                updated_at: "updatedAt",
                zip_code: "zipCode",
            });
        });

    export type Outbound = {
        city?: string | null | undefined;
        country?: EmployeeSchemasCountry$.Outbound | null | undefined;
        created_at?: string | null | undefined;
        employee_id?: string | null | undefined;
        id?: string | null | undefined;
        location_type?: EmployeeSchemasLocationType$.Outbound | null | undefined;
        name?: string | null | undefined;
        phone_number?: string | null | undefined;
        remote_employee_id?: string | null | undefined;
        remote_id?: string | null | undefined;
        state?: string | null | undefined;
        street_1?: string | null | undefined;
        street_2?: string | null | undefined;
        updated_at?: string | null | undefined;
        zip_code?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WorkLocation> = z
        .object({
            city: z.nullable(z.string()).optional(),
            country: z.nullable(z.lazy(() => EmployeeSchemasCountry$.outboundSchema)).optional(),
            createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            employeeId: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            locationType: z
                .nullable(z.lazy(() => EmployeeSchemasLocationType$.outboundSchema))
                .optional(),
            name: z.nullable(z.string()).optional(),
            phoneNumber: z.nullable(z.string()).optional(),
            remoteEmployeeId: z.nullable(z.string()).optional(),
            remoteId: z.nullable(z.string()).optional(),
            state: z.nullable(z.string()).optional(),
            street1: z.nullable(z.string()).optional(),
            street2: z.nullable(z.string()).optional(),
            updatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            zipCode: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                createdAt: "created_at",
                employeeId: "employee_id",
                locationType: "location_type",
                phoneNumber: "phone_number",
                remoteEmployeeId: "remote_employee_id",
                remoteId: "remote_id",
                street1: "street_1",
                street2: "street_2",
                updatedAt: "updated_at",
                zipCode: "zip_code",
            });
        });
}

/** @internal */
export namespace Employee$ {
    export const inboundSchema: z.ZodType<Employee, z.ZodTypeDef, unknown> = z
        .object({
            avatar: z.nullable(z.lazy(() => Avatar$.inboundSchema)).optional(),
            avatar_url: z.nullable(z.string()).optional(),
            benefits: z.nullable(z.array(HRISBenefit$.inboundSchema)).optional(),
            birthday: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            citizenships: z.nullable(z.array(CountryCodeEnum$.inboundSchema)).optional(),
            company: z.nullable(z.lazy(() => EmployeeCompany$.inboundSchema)).optional(),
            company_name: z.nullable(z.string()).optional(),
            cost_centers: z.nullable(z.array(CostCenters$.inboundSchema)).optional(),
            created_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            custom_fields: z.nullable(z.array(EmployeeCustomFields$.inboundSchema)).optional(),
            date_of_birth: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            department: z.nullable(z.string()).optional(),
            display_name: z.nullable(z.string()).optional(),
            employee_number: z.nullable(z.string()).optional(),
            employment_contract_type: z
                .nullable(z.lazy(() => EmploymentContractType$.inboundSchema))
                .optional(),
            employment_status: z.nullable(z.lazy(() => EmploymentStatus$.inboundSchema)).optional(),
            employment_type: z.nullable(z.lazy(() => EmploymentType$.inboundSchema)).optional(),
            employments: z.nullable(z.array(Employment$.inboundSchema)).optional(),
            ethnicity: z.nullable(z.lazy(() => Ethnicity$.inboundSchema)).optional(),
            first_name: z.nullable(z.string()).optional(),
            gender: z.nullable(z.lazy(() => Gender$.inboundSchema)).optional(),
            groups: z.nullable(z.lazy(() => Groups$.inboundSchema)).optional(),
            hire_date: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            home_location: z.nullable(z.lazy(() => HomeLocation$.inboundSchema)).optional(),
            id: z.nullable(z.string()).optional(),
            job_description: z.nullable(z.lazy(() => JobDescription$.inboundSchema)).optional(),
            job_title: z.nullable(z.string()).optional(),
            last_name: z.nullable(z.string()).optional(),
            manager_id: z.nullable(z.string()).optional(),
            marital_status: z.nullable(z.lazy(() => MaritalStatus$.inboundSchema)).optional(),
            name: z.nullable(z.string()).optional(),
            personal_email: z.nullable(z.string()).optional(),
            personal_phone_number: z.nullable(z.string()).optional(),
            preferred_language: z
                .nullable(z.lazy(() => PreferredLanguage$.inboundSchema))
                .optional(),
            remote_id: z.nullable(z.string()).optional(),
            remote_manager_id: z.nullable(z.string()).optional(),
            start_date: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            tenure: z.nullable(z.number()).optional(),
            termination_date: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            updated_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            work_anniversary: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            work_email: z.nullable(z.string()).optional(),
            work_location: z.nullable(z.lazy(() => WorkLocation$.inboundSchema)).optional(),
            work_phone_number: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                avatar_url: "avatarUrl",
                company_name: "companyName",
                cost_centers: "costCenters",
                created_at: "createdAt",
                custom_fields: "customFields",
                date_of_birth: "dateOfBirth",
                display_name: "displayName",
                employee_number: "employeeNumber",
                employment_contract_type: "employmentContractType",
                employment_status: "employmentStatus",
                employment_type: "employmentType",
                first_name: "firstName",
                hire_date: "hireDate",
                home_location: "homeLocation",
                job_description: "jobDescription",
                job_title: "jobTitle",
                last_name: "lastName",
                manager_id: "managerId",
                marital_status: "maritalStatus",
                personal_email: "personalEmail",
                personal_phone_number: "personalPhoneNumber",
                preferred_language: "preferredLanguage",
                remote_id: "remoteId",
                remote_manager_id: "remoteManagerId",
                start_date: "startDate",
                termination_date: "terminationDate",
                updated_at: "updatedAt",
                work_anniversary: "workAnniversary",
                work_email: "workEmail",
                work_location: "workLocation",
                work_phone_number: "workPhoneNumber",
            });
        });

    export type Outbound = {
        avatar?: Avatar$.Outbound | null | undefined;
        avatar_url?: string | null | undefined;
        benefits?: Array<HRISBenefit$.Outbound> | null | undefined;
        birthday?: string | null | undefined;
        citizenships?: Array<CountryCodeEnum$.Outbound> | null | undefined;
        company?: EmployeeCompany$.Outbound | null | undefined;
        company_name?: string | null | undefined;
        cost_centers?: Array<CostCenters$.Outbound> | null | undefined;
        created_at?: string | null | undefined;
        custom_fields?: Array<EmployeeCustomFields$.Outbound> | null | undefined;
        date_of_birth?: string | null | undefined;
        department?: string | null | undefined;
        display_name?: string | null | undefined;
        employee_number?: string | null | undefined;
        employment_contract_type?: EmploymentContractType$.Outbound | null | undefined;
        employment_status?: EmploymentStatus$.Outbound | null | undefined;
        employment_type?: EmploymentType$.Outbound | null | undefined;
        employments?: Array<Employment$.Outbound> | null | undefined;
        ethnicity?: Ethnicity$.Outbound | null | undefined;
        first_name?: string | null | undefined;
        gender?: Gender$.Outbound | null | undefined;
        groups?: Groups$.Outbound | null | undefined;
        hire_date?: string | null | undefined;
        home_location?: HomeLocation$.Outbound | null | undefined;
        id?: string | null | undefined;
        job_description?: JobDescription$.Outbound | null | undefined;
        job_title?: string | null | undefined;
        last_name?: string | null | undefined;
        manager_id?: string | null | undefined;
        marital_status?: MaritalStatus$.Outbound | null | undefined;
        name?: string | null | undefined;
        personal_email?: string | null | undefined;
        personal_phone_number?: string | null | undefined;
        preferred_language?: PreferredLanguage$.Outbound | null | undefined;
        remote_id?: string | null | undefined;
        remote_manager_id?: string | null | undefined;
        start_date?: string | null | undefined;
        tenure?: number | null | undefined;
        termination_date?: string | null | undefined;
        updated_at?: string | null | undefined;
        work_anniversary?: string | null | undefined;
        work_email?: string | null | undefined;
        work_location?: WorkLocation$.Outbound | null | undefined;
        work_phone_number?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Employee> = z
        .object({
            avatar: z.nullable(z.lazy(() => Avatar$.outboundSchema)).optional(),
            avatarUrl: z.nullable(z.string()).optional(),
            benefits: z.nullable(z.array(HRISBenefit$.outboundSchema)).optional(),
            birthday: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            citizenships: z.nullable(z.array(CountryCodeEnum$.outboundSchema)).optional(),
            company: z.nullable(z.lazy(() => EmployeeCompany$.outboundSchema)).optional(),
            companyName: z.nullable(z.string()).optional(),
            costCenters: z.nullable(z.array(CostCenters$.outboundSchema)).optional(),
            createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            customFields: z.nullable(z.array(EmployeeCustomFields$.outboundSchema)).optional(),
            dateOfBirth: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            department: z.nullable(z.string()).optional(),
            displayName: z.nullable(z.string()).optional(),
            employeeNumber: z.nullable(z.string()).optional(),
            employmentContractType: z
                .nullable(z.lazy(() => EmploymentContractType$.outboundSchema))
                .optional(),
            employmentStatus: z.nullable(z.lazy(() => EmploymentStatus$.outboundSchema)).optional(),
            employmentType: z.nullable(z.lazy(() => EmploymentType$.outboundSchema)).optional(),
            employments: z.nullable(z.array(Employment$.outboundSchema)).optional(),
            ethnicity: z.nullable(z.lazy(() => Ethnicity$.outboundSchema)).optional(),
            firstName: z.nullable(z.string()).optional(),
            gender: z.nullable(z.lazy(() => Gender$.outboundSchema)).optional(),
            groups: z.nullable(z.lazy(() => Groups$.outboundSchema)).optional(),
            hireDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            homeLocation: z.nullable(z.lazy(() => HomeLocation$.outboundSchema)).optional(),
            id: z.nullable(z.string()).optional(),
            jobDescription: z.nullable(z.lazy(() => JobDescription$.outboundSchema)).optional(),
            jobTitle: z.nullable(z.string()).optional(),
            lastName: z.nullable(z.string()).optional(),
            managerId: z.nullable(z.string()).optional(),
            maritalStatus: z.nullable(z.lazy(() => MaritalStatus$.outboundSchema)).optional(),
            name: z.nullable(z.string()).optional(),
            personalEmail: z.nullable(z.string()).optional(),
            personalPhoneNumber: z.nullable(z.string()).optional(),
            preferredLanguage: z
                .nullable(z.lazy(() => PreferredLanguage$.outboundSchema))
                .optional(),
            remoteId: z.nullable(z.string()).optional(),
            remoteManagerId: z.nullable(z.string()).optional(),
            startDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            tenure: z.nullable(z.number()).optional(),
            terminationDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            updatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            workAnniversary: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            workEmail: z.nullable(z.string()).optional(),
            workLocation: z.nullable(z.lazy(() => WorkLocation$.outboundSchema)).optional(),
            workPhoneNumber: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                avatarUrl: "avatar_url",
                companyName: "company_name",
                costCenters: "cost_centers",
                createdAt: "created_at",
                customFields: "custom_fields",
                dateOfBirth: "date_of_birth",
                displayName: "display_name",
                employeeNumber: "employee_number",
                employmentContractType: "employment_contract_type",
                employmentStatus: "employment_status",
                employmentType: "employment_type",
                firstName: "first_name",
                hireDate: "hire_date",
                homeLocation: "home_location",
                jobDescription: "job_description",
                jobTitle: "job_title",
                lastName: "last_name",
                managerId: "manager_id",
                maritalStatus: "marital_status",
                personalEmail: "personal_email",
                personalPhoneNumber: "personal_phone_number",
                preferredLanguage: "preferred_language",
                remoteId: "remote_id",
                remoteManagerId: "remote_manager_id",
                startDate: "start_date",
                terminationDate: "termination_date",
                updatedAt: "updated_at",
                workAnniversary: "work_anniversary",
                workEmail: "work_email",
                workLocation: "work_location",
                workPhoneNumber: "work_phone_number",
            });
        });
}
