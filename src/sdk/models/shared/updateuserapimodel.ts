/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export enum UpdateUserApiModel2 {
  True = "true",
  False = "false",
}

/**
 * Indicates if the user is a bot or service user
 */
export type UpdateUserApiModelIsBotUser = boolean | UpdateUserApiModel2;

export type UpdateUserApiModel4 = {};

export type UpdateUserApiModelSourceValue =
  | UpdateUserApiModel4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The status of the user, e.g. whether the user is enabled, has been disabled (eg. by an admin), or is pending (ie: awaiting approval by the user or an admin).
 */
export enum UpdateUserApiModelValue {
  Enabled = "enabled",
  Disabled = "disabled",
  Pending = "pending",
  UnmappedValue = "unmapped_value",
}
/**
 * The status of the user, e.g. whether the user is enabled, has been disabled (eg. by an admin), or is pending (ie: awaiting approval by the user or an admin).
 */
export type UpdateUserApiModelValueOpen = OpenEnum<
  typeof UpdateUserApiModelValue
>;

export type UpdateUserApiModelStatus = {
  sourceValue?:
    | UpdateUserApiModel4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The status of the user, e.g. whether the user is enabled, has been disabled (eg. by an admin), or is pending (ie: awaiting approval by the user or an admin).
   */
  value?: UpdateUserApiModelValueOpen | null | undefined;
};

export type UpdateUserApiModel = {
  firstName?: string | null | undefined;
  /**
   * Indicates if the user is a bot or service user
   */
  isBotUser?: boolean | UpdateUserApiModel2 | null | undefined;
  lastName?: string | null | undefined;
  /**
   * User's name which (can be a full name or display name)
   */
  name?: string | null | undefined;
  /**
   * Value to pass through to the provider
   */
  passthrough?: { [k: string]: any } | null | undefined;
  /**
   * Primary email address of the user. This is generally a work email address.
   */
  primaryEmailAddress?: string | null | undefined;
  status?: UpdateUserApiModelStatus | null | undefined;
  username?: string | null | undefined;
};

/** @internal */
export const UpdateUserApiModel2$inboundSchema: z.ZodNativeEnum<
  typeof UpdateUserApiModel2
> = z.nativeEnum(UpdateUserApiModel2);

/** @internal */
export const UpdateUserApiModel2$outboundSchema: z.ZodNativeEnum<
  typeof UpdateUserApiModel2
> = UpdateUserApiModel2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserApiModel2$ {
  /** @deprecated use `UpdateUserApiModel2$inboundSchema` instead. */
  export const inboundSchema = UpdateUserApiModel2$inboundSchema;
  /** @deprecated use `UpdateUserApiModel2$outboundSchema` instead. */
  export const outboundSchema = UpdateUserApiModel2$outboundSchema;
}

/** @internal */
export const UpdateUserApiModelIsBotUser$inboundSchema: z.ZodType<
  UpdateUserApiModelIsBotUser,
  z.ZodTypeDef,
  unknown
> = z.union([z.boolean(), UpdateUserApiModel2$inboundSchema]);

/** @internal */
export type UpdateUserApiModelIsBotUser$Outbound = boolean | string;

/** @internal */
export const UpdateUserApiModelIsBotUser$outboundSchema: z.ZodType<
  UpdateUserApiModelIsBotUser$Outbound,
  z.ZodTypeDef,
  UpdateUserApiModelIsBotUser
> = z.union([z.boolean(), UpdateUserApiModel2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserApiModelIsBotUser$ {
  /** @deprecated use `UpdateUserApiModelIsBotUser$inboundSchema` instead. */
  export const inboundSchema = UpdateUserApiModelIsBotUser$inboundSchema;
  /** @deprecated use `UpdateUserApiModelIsBotUser$outboundSchema` instead. */
  export const outboundSchema = UpdateUserApiModelIsBotUser$outboundSchema;
  /** @deprecated use `UpdateUserApiModelIsBotUser$Outbound` instead. */
  export type Outbound = UpdateUserApiModelIsBotUser$Outbound;
}

export function updateUserApiModelIsBotUserToJSON(
  updateUserApiModelIsBotUser: UpdateUserApiModelIsBotUser,
): string {
  return JSON.stringify(
    UpdateUserApiModelIsBotUser$outboundSchema.parse(
      updateUserApiModelIsBotUser,
    ),
  );
}

export function updateUserApiModelIsBotUserFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserApiModelIsBotUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserApiModelIsBotUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserApiModelIsBotUser' from JSON`,
  );
}

/** @internal */
export const UpdateUserApiModel4$inboundSchema: z.ZodType<
  UpdateUserApiModel4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateUserApiModel4$Outbound = {};

/** @internal */
export const UpdateUserApiModel4$outboundSchema: z.ZodType<
  UpdateUserApiModel4$Outbound,
  z.ZodTypeDef,
  UpdateUserApiModel4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserApiModel4$ {
  /** @deprecated use `UpdateUserApiModel4$inboundSchema` instead. */
  export const inboundSchema = UpdateUserApiModel4$inboundSchema;
  /** @deprecated use `UpdateUserApiModel4$outboundSchema` instead. */
  export const outboundSchema = UpdateUserApiModel4$outboundSchema;
  /** @deprecated use `UpdateUserApiModel4$Outbound` instead. */
  export type Outbound = UpdateUserApiModel4$Outbound;
}

export function updateUserApiModel4ToJSON(
  updateUserApiModel4: UpdateUserApiModel4,
): string {
  return JSON.stringify(
    UpdateUserApiModel4$outboundSchema.parse(updateUserApiModel4),
  );
}

export function updateUserApiModel4FromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserApiModel4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserApiModel4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserApiModel4' from JSON`,
  );
}

/** @internal */
export const UpdateUserApiModelSourceValue$inboundSchema: z.ZodType<
  UpdateUserApiModelSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateUserApiModel4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type UpdateUserApiModelSourceValue$Outbound =
  | UpdateUserApiModel4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const UpdateUserApiModelSourceValue$outboundSchema: z.ZodType<
  UpdateUserApiModelSourceValue$Outbound,
  z.ZodTypeDef,
  UpdateUserApiModelSourceValue
> = z.union([
  z.lazy(() => UpdateUserApiModel4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserApiModelSourceValue$ {
  /** @deprecated use `UpdateUserApiModelSourceValue$inboundSchema` instead. */
  export const inboundSchema = UpdateUserApiModelSourceValue$inboundSchema;
  /** @deprecated use `UpdateUserApiModelSourceValue$outboundSchema` instead. */
  export const outboundSchema = UpdateUserApiModelSourceValue$outboundSchema;
  /** @deprecated use `UpdateUserApiModelSourceValue$Outbound` instead. */
  export type Outbound = UpdateUserApiModelSourceValue$Outbound;
}

export function updateUserApiModelSourceValueToJSON(
  updateUserApiModelSourceValue: UpdateUserApiModelSourceValue,
): string {
  return JSON.stringify(
    UpdateUserApiModelSourceValue$outboundSchema.parse(
      updateUserApiModelSourceValue,
    ),
  );
}

export function updateUserApiModelSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserApiModelSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserApiModelSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserApiModelSourceValue' from JSON`,
  );
}

/** @internal */
export const UpdateUserApiModelValue$inboundSchema: z.ZodType<
  UpdateUserApiModelValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(UpdateUserApiModelValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const UpdateUserApiModelValue$outboundSchema: z.ZodType<
  UpdateUserApiModelValueOpen,
  z.ZodTypeDef,
  UpdateUserApiModelValueOpen
> = z.union([
  z.nativeEnum(UpdateUserApiModelValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserApiModelValue$ {
  /** @deprecated use `UpdateUserApiModelValue$inboundSchema` instead. */
  export const inboundSchema = UpdateUserApiModelValue$inboundSchema;
  /** @deprecated use `UpdateUserApiModelValue$outboundSchema` instead. */
  export const outboundSchema = UpdateUserApiModelValue$outboundSchema;
}

/** @internal */
export const UpdateUserApiModelStatus$inboundSchema: z.ZodType<
  UpdateUserApiModelStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => UpdateUserApiModel4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(UpdateUserApiModelValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type UpdateUserApiModelStatus$Outbound = {
  source_value?:
    | UpdateUserApiModel4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const UpdateUserApiModelStatus$outboundSchema: z.ZodType<
  UpdateUserApiModelStatus$Outbound,
  z.ZodTypeDef,
  UpdateUserApiModelStatus
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => UpdateUserApiModel4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(UpdateUserApiModelValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserApiModelStatus$ {
  /** @deprecated use `UpdateUserApiModelStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateUserApiModelStatus$inboundSchema;
  /** @deprecated use `UpdateUserApiModelStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateUserApiModelStatus$outboundSchema;
  /** @deprecated use `UpdateUserApiModelStatus$Outbound` instead. */
  export type Outbound = UpdateUserApiModelStatus$Outbound;
}

export function updateUserApiModelStatusToJSON(
  updateUserApiModelStatus: UpdateUserApiModelStatus,
): string {
  return JSON.stringify(
    UpdateUserApiModelStatus$outboundSchema.parse(updateUserApiModelStatus),
  );
}

export function updateUserApiModelStatusFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserApiModelStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserApiModelStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserApiModelStatus' from JSON`,
  );
}

/** @internal */
export const UpdateUserApiModel$inboundSchema: z.ZodType<
  UpdateUserApiModel,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_name: z.nullable(z.string()).optional(),
  is_bot_user: z.nullable(
    z.union([z.boolean(), UpdateUserApiModel2$inboundSchema]),
  ).optional(),
  last_name: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  passthrough: z.nullable(z.record(z.any())).optional(),
  primary_email_address: z.nullable(z.string()).optional(),
  status: z.nullable(z.lazy(() => UpdateUserApiModelStatus$inboundSchema))
    .optional(),
  username: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "is_bot_user": "isBotUser",
    "last_name": "lastName",
    "primary_email_address": "primaryEmailAddress",
  });
});

/** @internal */
export type UpdateUserApiModel$Outbound = {
  first_name?: string | null | undefined;
  is_bot_user?: boolean | string | null | undefined;
  last_name?: string | null | undefined;
  name?: string | null | undefined;
  passthrough?: { [k: string]: any } | null | undefined;
  primary_email_address?: string | null | undefined;
  status?: UpdateUserApiModelStatus$Outbound | null | undefined;
  username?: string | null | undefined;
};

/** @internal */
export const UpdateUserApiModel$outboundSchema: z.ZodType<
  UpdateUserApiModel$Outbound,
  z.ZodTypeDef,
  UpdateUserApiModel
> = z.object({
  firstName: z.nullable(z.string()).optional(),
  isBotUser: z.nullable(
    z.union([z.boolean(), UpdateUserApiModel2$outboundSchema]),
  ).optional(),
  lastName: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  passthrough: z.nullable(z.record(z.any())).optional(),
  primaryEmailAddress: z.nullable(z.string()).optional(),
  status: z.nullable(z.lazy(() => UpdateUserApiModelStatus$outboundSchema))
    .optional(),
  username: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    isBotUser: "is_bot_user",
    lastName: "last_name",
    primaryEmailAddress: "primary_email_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserApiModel$ {
  /** @deprecated use `UpdateUserApiModel$inboundSchema` instead. */
  export const inboundSchema = UpdateUserApiModel$inboundSchema;
  /** @deprecated use `UpdateUserApiModel$outboundSchema` instead. */
  export const outboundSchema = UpdateUserApiModel$outboundSchema;
  /** @deprecated use `UpdateUserApiModel$Outbound` instead. */
  export type Outbound = UpdateUserApiModel$Outbound;
}

export function updateUserApiModelToJSON(
  updateUserApiModel: UpdateUserApiModel,
): string {
  return JSON.stringify(
    UpdateUserApiModel$outboundSchema.parse(updateUserApiModel),
  );
}

export function updateUserApiModelFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserApiModel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserApiModel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserApiModel' from JSON`,
  );
}
