/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type ContactsCustomFields4 = {};

/**
 * The value associated with the custom field.
 */
export type ContactsCustomFieldsValue =
    | ContactsCustomFields4
    | string
    | number
    | boolean
    | Array<any>;

export type ContactsCustomFields = {
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    /**
     * The name of the custom field.
     */
    name?: string | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    /**
     * Provider's unique identifier for the value of the custom field.
     */
    remoteValueId?: string | null | undefined;
    /**
     * The value associated with the custom field.
     */
    value?: ContactsCustomFields4 | string | number | boolean | Array<any> | null | undefined;
    /**
     * The unique identifier for the value of the custom field.
     */
    valueId?: string | null | undefined;
};

/** @internal */
export const ContactsCustomFields4$inboundSchema: z.ZodType<
    ContactsCustomFields4,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type ContactsCustomFields4$Outbound = {};

/** @internal */
export const ContactsCustomFields4$outboundSchema: z.ZodType<
    ContactsCustomFields4$Outbound,
    z.ZodTypeDef,
    ContactsCustomFields4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsCustomFields4$ {
    /** @deprecated use `ContactsCustomFields4$inboundSchema` instead. */
    export const inboundSchema = ContactsCustomFields4$inboundSchema;
    /** @deprecated use `ContactsCustomFields4$outboundSchema` instead. */
    export const outboundSchema = ContactsCustomFields4$outboundSchema;
    /** @deprecated use `ContactsCustomFields4$Outbound` instead. */
    export type Outbound = ContactsCustomFields4$Outbound;
}

/** @internal */
export const ContactsCustomFieldsValue$inboundSchema: z.ZodType<
    ContactsCustomFieldsValue,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => ContactsCustomFields4$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
]);

/** @internal */
export type ContactsCustomFieldsValue$Outbound =
    | ContactsCustomFields4$Outbound
    | string
    | number
    | boolean
    | Array<any>;

/** @internal */
export const ContactsCustomFieldsValue$outboundSchema: z.ZodType<
    ContactsCustomFieldsValue$Outbound,
    z.ZodTypeDef,
    ContactsCustomFieldsValue
> = z.union([
    z.lazy(() => ContactsCustomFields4$outboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsCustomFieldsValue$ {
    /** @deprecated use `ContactsCustomFieldsValue$inboundSchema` instead. */
    export const inboundSchema = ContactsCustomFieldsValue$inboundSchema;
    /** @deprecated use `ContactsCustomFieldsValue$outboundSchema` instead. */
    export const outboundSchema = ContactsCustomFieldsValue$outboundSchema;
    /** @deprecated use `ContactsCustomFieldsValue$Outbound` instead. */
    export type Outbound = ContactsCustomFieldsValue$Outbound;
}

/** @internal */
export const ContactsCustomFields$inboundSchema: z.ZodType<
    ContactsCustomFields,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        id: z.nullable(z.string()).optional(),
        name: z.nullable(z.string()).optional(),
        remote_id: z.nullable(z.string()).optional(),
        remote_value_id: z.nullable(z.string()).optional(),
        value: z
            .nullable(
                z.union([
                    z.lazy(() => ContactsCustomFields4$inboundSchema),
                    z.string(),
                    z.number(),
                    z.boolean(),
                    z.array(z.any()),
                ])
            )
            .optional(),
        value_id: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            remote_id: "remoteId",
            remote_value_id: "remoteValueId",
            value_id: "valueId",
        });
    });

/** @internal */
export type ContactsCustomFields$Outbound = {
    id?: string | null | undefined;
    name?: string | null | undefined;
    remote_id?: string | null | undefined;
    remote_value_id?: string | null | undefined;
    value?:
        | ContactsCustomFields4$Outbound
        | string
        | number
        | boolean
        | Array<any>
        | null
        | undefined;
    value_id?: string | null | undefined;
};

/** @internal */
export const ContactsCustomFields$outboundSchema: z.ZodType<
    ContactsCustomFields$Outbound,
    z.ZodTypeDef,
    ContactsCustomFields
> = z
    .object({
        id: z.nullable(z.string()).optional(),
        name: z.nullable(z.string()).optional(),
        remoteId: z.nullable(z.string()).optional(),
        remoteValueId: z.nullable(z.string()).optional(),
        value: z
            .nullable(
                z.union([
                    z.lazy(() => ContactsCustomFields4$outboundSchema),
                    z.string(),
                    z.number(),
                    z.boolean(),
                    z.array(z.any()),
                ])
            )
            .optional(),
        valueId: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            remoteId: "remote_id",
            remoteValueId: "remote_value_id",
            valueId: "value_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsCustomFields$ {
    /** @deprecated use `ContactsCustomFields$inboundSchema` instead. */
    export const inboundSchema = ContactsCustomFields$inboundSchema;
    /** @deprecated use `ContactsCustomFields$outboundSchema` instead. */
    export const outboundSchema = ContactsCustomFields$outboundSchema;
    /** @deprecated use `ContactsCustomFields$Outbound` instead. */
    export type Outbound = ContactsCustomFields$Outbound;
}
