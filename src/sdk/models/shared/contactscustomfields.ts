/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types";
import * as z from "zod";

export type ContactsCustomFields4 = {};

export type Options = ContactsCustomFields4 | string | number | boolean;

export type ContactsCustomFieldsSchemasType4 = {};

export type ContactsCustomFieldsSourceValue =
    | ContactsCustomFieldsSchemasType4
    | string
    | number
    | boolean;

export enum ContactsCustomFieldsSchemasValue {
    Date = "date",
    Float = "float",
    Integer = "integer",
    List = "list",
    Text = "text",
    UnmappedValue = "unmapped_value",
}
export type ContactsCustomFieldsSchemasValueOpen = OpenEnum<
    typeof ContactsCustomFieldsSchemasValue
>;

/**
 * The type of the custom field.
 */
export type ContactsCustomFieldsType = {
    sourceValue?: ContactsCustomFieldsSchemasType4 | string | number | boolean | null | undefined;
    value?: ContactsCustomFieldsSchemasValueOpen | null | undefined;
};

export type ContactsCustomFieldsSchemas4 = {};

/**
 * The value associated with the custom field.
 */
export type ContactsCustomFieldsValue = ContactsCustomFieldsSchemas4 | string | number | boolean;

export type ContactsCustomFields = {
    /**
     * The description of the custom field.
     */
    description?: string | null | undefined;
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    /**
     * The name of the custom field.
     */
    name?: string | null | undefined;
    /**
     * An array of possible options for the custom field.
     */
    options?: Array<ContactsCustomFields4 | string | number | boolean> | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    /**
     * The type of the custom field.
     */
    type?: ContactsCustomFieldsType | null | undefined;
    /**
     * The value associated with the custom field.
     */
    value?: ContactsCustomFieldsSchemas4 | string | number | boolean | null | undefined;
    /**
     * The unique identifier for the value of the custom field.
     */
    valueId?: string | null | undefined;
};

/** @internal */
export namespace ContactsCustomFields4$ {
    export const inboundSchema: z.ZodType<ContactsCustomFields4, z.ZodTypeDef, unknown> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContactsCustomFields4> =
        z.object({});
}

/** @internal */
export namespace Options$ {
    export const inboundSchema: z.ZodType<Options, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => ContactsCustomFields4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export type Outbound = ContactsCustomFields4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Options> = z.union([
        z.lazy(() => ContactsCustomFields4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace ContactsCustomFieldsSchemasType4$ {
    export const inboundSchema: z.ZodType<ContactsCustomFieldsSchemasType4, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ContactsCustomFieldsSchemasType4
    > = z.object({});
}

/** @internal */
export namespace ContactsCustomFieldsSourceValue$ {
    export const inboundSchema: z.ZodType<ContactsCustomFieldsSourceValue, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => ContactsCustomFieldsSchemasType4$.inboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);

    export type Outbound = ContactsCustomFieldsSchemasType4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ContactsCustomFieldsSourceValue
    > = z.union([
        z.lazy(() => ContactsCustomFieldsSchemasType4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace ContactsCustomFieldsSchemasValue$ {
    export const inboundSchema: z.ZodType<
        ContactsCustomFieldsSchemasValueOpen,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.nativeEnum(ContactsCustomFieldsSchemasValue),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema = z.union([
        z.nativeEnum(ContactsCustomFieldsSchemasValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace ContactsCustomFieldsType$ {
    export const inboundSchema: z.ZodType<ContactsCustomFieldsType, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => ContactsCustomFieldsSchemasType4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(ContactsCustomFieldsSchemasValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?:
            | ContactsCustomFieldsSchemasType4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContactsCustomFieldsType> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => ContactsCustomFieldsSchemasType4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(ContactsCustomFieldsSchemasValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace ContactsCustomFieldsSchemas4$ {
    export const inboundSchema: z.ZodType<ContactsCustomFieldsSchemas4, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContactsCustomFieldsSchemas4> =
        z.object({});
}

/** @internal */
export namespace ContactsCustomFieldsValue$ {
    export const inboundSchema: z.ZodType<ContactsCustomFieldsValue, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => ContactsCustomFieldsSchemas4$.inboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);

    export type Outbound = ContactsCustomFieldsSchemas4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContactsCustomFieldsValue> =
        z.union([
            z.lazy(() => ContactsCustomFieldsSchemas4$.outboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);
}

/** @internal */
export namespace ContactsCustomFields$ {
    export const inboundSchema: z.ZodType<ContactsCustomFields, z.ZodTypeDef, unknown> = z
        .object({
            description: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            options: z
                .nullable(
                    z.array(
                        z.union([
                            z.lazy(() => ContactsCustomFields4$.inboundSchema),
                            z.string(),
                            z.number(),
                            z.boolean(),
                        ])
                    )
                )
                .optional(),
            remote_id: z.nullable(z.string()).optional(),
            type: z.nullable(z.lazy(() => ContactsCustomFieldsType$.inboundSchema)).optional(),
            value: z
                .nullable(
                    z.union([
                        z.lazy(() => ContactsCustomFieldsSchemas4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value_id: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.options === undefined ? null : { options: v.options }),
                ...(v.remote_id === undefined ? null : { remoteId: v.remote_id }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.value_id === undefined ? null : { valueId: v.value_id }),
            };
        });

    export type Outbound = {
        description?: string | null | undefined;
        id?: string | null | undefined;
        name?: string | null | undefined;
        options?:
            | Array<ContactsCustomFields4$.Outbound | string | number | boolean>
            | null
            | undefined;
        remote_id?: string | null | undefined;
        type?: ContactsCustomFieldsType$.Outbound | null | undefined;
        value?:
            | ContactsCustomFieldsSchemas4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value_id?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContactsCustomFields> = z
        .object({
            description: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            options: z
                .nullable(
                    z.array(
                        z.union([
                            z.lazy(() => ContactsCustomFields4$.outboundSchema),
                            z.string(),
                            z.number(),
                            z.boolean(),
                        ])
                    )
                )
                .optional(),
            remoteId: z.nullable(z.string()).optional(),
            type: z.nullable(z.lazy(() => ContactsCustomFieldsType$.outboundSchema)).optional(),
            value: z
                .nullable(
                    z.union([
                        z.lazy(() => ContactsCustomFieldsSchemas4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            valueId: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.options === undefined ? null : { options: v.options }),
                ...(v.remoteId === undefined ? null : { remote_id: v.remoteId }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.valueId === undefined ? null : { value_id: v.valueId }),
            };
        });
}
