/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type InterviewPart = {
    /**
     * Interview part created date
     */
    createdAt?: Date | null | undefined;
    /**
     * The specific interview part's end date
     */
    endAt?: Date | null | undefined;
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    interviewerIds?: Array<string> | null | undefined;
    meetingProvider?: string | null | undefined;
    meetingUrl?: string | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    /**
     * The specific interview part's start date
     */
    startAt?: Date | null | undefined;
    /**
     * Interview part updated date
     */
    updatedAt?: Date | null | undefined;
};

/** @internal */
export namespace InterviewPart$ {
    export type Inbound = {
        created_at?: string | null | undefined;
        end_at?: string | null | undefined;
        id?: string | null | undefined;
        interviewer_ids?: Array<string> | null | undefined;
        meeting_provider?: string | null | undefined;
        meeting_url?: string | null | undefined;
        remote_id?: string | null | undefined;
        start_at?: string | null | undefined;
        updated_at?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<InterviewPart, z.ZodTypeDef, Inbound> = z
        .object({
            created_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            end_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            id: z.nullable(z.string()).optional(),
            interviewer_ids: z.nullable(z.array(z.string())).optional(),
            meeting_provider: z.nullable(z.string()).optional(),
            meeting_url: z.nullable(z.string()).optional(),
            remote_id: z.nullable(z.string()).optional(),
            start_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            updated_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.end_at === undefined ? null : { endAt: v.end_at }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.interviewer_ids === undefined ? null : { interviewerIds: v.interviewer_ids }),
                ...(v.meeting_provider === undefined
                    ? null
                    : { meetingProvider: v.meeting_provider }),
                ...(v.meeting_url === undefined ? null : { meetingUrl: v.meeting_url }),
                ...(v.remote_id === undefined ? null : { remoteId: v.remote_id }),
                ...(v.start_at === undefined ? null : { startAt: v.start_at }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        created_at?: string | null | undefined;
        end_at?: string | null | undefined;
        id?: string | null | undefined;
        interviewer_ids?: Array<string> | null | undefined;
        meeting_provider?: string | null | undefined;
        meeting_url?: string | null | undefined;
        remote_id?: string | null | undefined;
        start_at?: string | null | undefined;
        updated_at?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InterviewPart> = z
        .object({
            createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            endAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            id: z.nullable(z.string()).optional(),
            interviewerIds: z.nullable(z.array(z.string())).optional(),
            meetingProvider: z.nullable(z.string()).optional(),
            meetingUrl: z.nullable(z.string()).optional(),
            remoteId: z.nullable(z.string()).optional(),
            startAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            updatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.endAt === undefined ? null : { end_at: v.endAt }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.interviewerIds === undefined ? null : { interviewer_ids: v.interviewerIds }),
                ...(v.meetingProvider === undefined
                    ? null
                    : { meeting_provider: v.meetingProvider }),
                ...(v.meetingUrl === undefined ? null : { meeting_url: v.meetingUrl }),
                ...(v.remoteId === undefined ? null : { remote_id: v.remoteId }),
                ...(v.startAt === undefined ? null : { start_at: v.startAt }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}
