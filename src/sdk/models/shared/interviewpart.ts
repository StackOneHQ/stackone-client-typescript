/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type InterviewPart = {
    /**
     * Interview part created date
     */
    createdAt?: Date | null | undefined;
    id?: string | null | undefined;
    interviewerIds?: Array<string> | null | undefined;
    meetingProvider?: string | null | undefined;
    meetingUrl?: string | null | undefined;
    /**
     * Interview part updated date
     */
    updatedAt?: Date | null | undefined;
};

/** @internal */
export namespace InterviewPart$ {
    export type Inbound = {
        created_at?: string | null | undefined;
        id?: string | null | undefined;
        interviewer_ids?: Array<string> | null | undefined;
        meeting_provider?: string | null | undefined;
        meeting_url?: string | null | undefined;
        updated_at?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<InterviewPart, z.ZodTypeDef, Inbound> = z
        .object({
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .nullable()
                .optional(),
            id: z.string().nullable().optional(),
            interviewer_ids: z.array(z.string()).nullable().optional(),
            meeting_provider: z.string().nullable().optional(),
            meeting_url: z.string().nullable().optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .nullable()
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.interviewer_ids === undefined ? null : { interviewerIds: v.interviewer_ids }),
                ...(v.meeting_provider === undefined
                    ? null
                    : { meetingProvider: v.meeting_provider }),
                ...(v.meeting_url === undefined ? null : { meetingUrl: v.meeting_url }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        created_at?: string | null | undefined;
        id?: string | null | undefined;
        interviewer_ids?: Array<string> | null | undefined;
        meeting_provider?: string | null | undefined;
        meeting_url?: string | null | undefined;
        updated_at?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InterviewPart> = z
        .object({
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .nullable()
                .optional(),
            id: z.string().nullable().optional(),
            interviewerIds: z.array(z.string()).nullable().optional(),
            meetingProvider: z.string().nullable().optional(),
            meetingUrl: z.string().nullable().optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .nullable()
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.interviewerIds === undefined ? null : { interviewer_ids: v.interviewerIds }),
                ...(v.meetingProvider === undefined
                    ? null
                    : { meeting_provider: v.meetingProvider }),
                ...(v.meetingUrl === undefined ? null : { meeting_url: v.meetingUrl }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}
