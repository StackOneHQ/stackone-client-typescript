/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type InterviewPart4 = {};

/**
 * The source value of the interview type.
 */
export type InterviewPartSourceValue = InterviewPart4 | string | number | boolean;

/**
 * The type of the interview.
 */
export enum InterviewPartValue {
    Screening = "screening",
    Lunch = "lunch",
    OnSite = "on_site",
    Presentation = "presentation",
    Sell = "sell",
    Culture = "culture",
    Informal = "informal",
    Test = "test",
    Phone = "phone",
    Video = "video",
    UnmappedValue = "unmapped_value",
}

export type InterviewPartType = {
    /**
     * The source value of the interview type.
     */
    sourceValue?: InterviewPart4 | string | number | boolean | null | undefined;
    /**
     * The type of the interview.
     */
    value?: InterviewPartValue | null | undefined;
};

export type InterviewPart = {
    /**
     * Interview part created date
     */
    createdAt?: Date | null | undefined;
    /**
     * The specific interview part's end date
     */
    endAt?: Date | null | undefined;
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    /**
     * The user (interviewer) IDs taking part in this specific interview.
     */
    interviewerIds?: Array<string> | null | undefined;
    /**
     * The video meeting provider used for the interview.
     */
    meetingProvider?: string | null | undefined;
    /**
     * The meeting URL for the interview - this may be populated using the underlying location if the location string extracted is a valid url.
     */
    meetingUrl?: string | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    /**
     * The specific interview part's start date
     */
    startAt?: Date | null | undefined;
    /**
     * The title of interview, usually corresponding to the title of an associated calendar event
     */
    title?: string | null | undefined;
    type?: InterviewPartType | null | undefined;
    /**
     * Interview part updated date
     */
    updatedAt?: Date | null | undefined;
};

/** @internal */
export namespace InterviewPart4$ {
    export const inboundSchema: z.ZodType<InterviewPart4, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InterviewPart4> = z.object({});
}

/** @internal */
export namespace InterviewPartSourceValue$ {
    export const inboundSchema: z.ZodType<InterviewPartSourceValue, z.ZodTypeDef, unknown> =
        z.union([z.lazy(() => InterviewPart4$.inboundSchema), z.string(), z.number(), z.boolean()]);

    export type Outbound = InterviewPart4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InterviewPartSourceValue> =
        z.union([
            z.lazy(() => InterviewPart4$.outboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);
}

/** @internal */
export const InterviewPartValue$: z.ZodNativeEnum<typeof InterviewPartValue> =
    z.nativeEnum(InterviewPartValue);

/** @internal */
export namespace InterviewPartType$ {
    export const inboundSchema: z.ZodType<InterviewPartType, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => InterviewPart4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(InterviewPartValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?: InterviewPart4$.Outbound | string | number | boolean | null | undefined;
        value?: InterviewPartValue | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InterviewPartType> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => InterviewPart4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(InterviewPartValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace InterviewPart$ {
    export const inboundSchema: z.ZodType<InterviewPart, z.ZodTypeDef, unknown> = z
        .object({
            created_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            end_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            id: z.nullable(z.string()).optional(),
            interviewer_ids: z.nullable(z.array(z.string())).optional(),
            meeting_provider: z.nullable(z.string()).optional(),
            meeting_url: z.nullable(z.string()).optional(),
            remote_id: z.nullable(z.string()).optional(),
            start_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            title: z.nullable(z.string()).optional(),
            type: z.nullable(z.lazy(() => InterviewPartType$.inboundSchema)).optional(),
            updated_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.end_at === undefined ? null : { endAt: v.end_at }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.interviewer_ids === undefined ? null : { interviewerIds: v.interviewer_ids }),
                ...(v.meeting_provider === undefined
                    ? null
                    : { meetingProvider: v.meeting_provider }),
                ...(v.meeting_url === undefined ? null : { meetingUrl: v.meeting_url }),
                ...(v.remote_id === undefined ? null : { remoteId: v.remote_id }),
                ...(v.start_at === undefined ? null : { startAt: v.start_at }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        created_at?: string | null | undefined;
        end_at?: string | null | undefined;
        id?: string | null | undefined;
        interviewer_ids?: Array<string> | null | undefined;
        meeting_provider?: string | null | undefined;
        meeting_url?: string | null | undefined;
        remote_id?: string | null | undefined;
        start_at?: string | null | undefined;
        title?: string | null | undefined;
        type?: InterviewPartType$.Outbound | null | undefined;
        updated_at?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InterviewPart> = z
        .object({
            createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            endAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            id: z.nullable(z.string()).optional(),
            interviewerIds: z.nullable(z.array(z.string())).optional(),
            meetingProvider: z.nullable(z.string()).optional(),
            meetingUrl: z.nullable(z.string()).optional(),
            remoteId: z.nullable(z.string()).optional(),
            startAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            title: z.nullable(z.string()).optional(),
            type: z.nullable(z.lazy(() => InterviewPartType$.outboundSchema)).optional(),
            updatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.endAt === undefined ? null : { end_at: v.endAt }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.interviewerIds === undefined ? null : { interviewer_ids: v.interviewerIds }),
                ...(v.meetingProvider === undefined
                    ? null
                    : { meeting_provider: v.meetingProvider }),
                ...(v.meetingUrl === undefined ? null : { meeting_url: v.meetingUrl }),
                ...(v.remoteId === undefined ? null : { remote_id: v.remoteId }),
                ...(v.startAt === undefined ? null : { start_at: v.startAt }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}
