/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListItem = {
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
};

/** @internal */
export const ListItem$inboundSchema: z.ZodType<
  ListItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "remote_id": "remoteId",
  });
});

/** @internal */
export type ListItem$Outbound = {
  id?: string | null | undefined;
  remote_id?: string | null | undefined;
};

/** @internal */
export const ListItem$outboundSchema: z.ZodType<
  ListItem$Outbound,
  z.ZodTypeDef,
  ListItem
> = z.object({
  id: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListItem$ {
  /** @deprecated use `ListItem$inboundSchema` instead. */
  export const inboundSchema = ListItem$inboundSchema;
  /** @deprecated use `ListItem$outboundSchema` instead. */
  export const outboundSchema = ListItem$outboundSchema;
  /** @deprecated use `ListItem$Outbound` instead. */
  export type Outbound = ListItem$Outbound;
}

export function listItemToJSON(listItem: ListItem): string {
  return JSON.stringify(ListItem$outboundSchema.parse(listItem));
}

export function listItemFromJSON(
  jsonString: string,
): SafeParseResult<ListItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListItem' from JSON`,
  );
}
