/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type JournalLine4 = {};

export type JournalLineSourceValue =
  | JournalLine4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * Type of account
 */
export enum JournalLineValue {
  Asset = "asset",
  Liability = "liability",
  Equity = "equity",
  Revenue = "revenue",
  Expense = "expense",
  UnmappedValue = "unmapped_value",
}
/**
 * Type of account
 */
export type JournalLineValueOpen = OpenEnum<typeof JournalLineValue>;

/**
 * Type of the account
 */
export type AccountType = {
  sourceValue?:
    | JournalLine4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * Type of account
   */
  value?: JournalLineValueOpen | null | undefined;
};

export type JournalLineSchemas4 = {};

export type JournalLineSchemasSourceValue =
  | JournalLineSchemas4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * Default currency for the company
 */
export enum JournalLineSchemasValue {
  Aed = "AED",
  Afn = "AFN",
  All = "ALL",
  Amd = "AMD",
  Ang = "ANG",
  Aoa = "AOA",
  Ars = "ARS",
  Aud = "AUD",
  Awg = "AWG",
  Azn = "AZN",
  Bam = "BAM",
  Bbd = "BBD",
  Bdt = "BDT",
  Bgn = "BGN",
  Bhd = "BHD",
  Bif = "BIF",
  Bmd = "BMD",
  Bnd = "BND",
  Bob = "BOB",
  Brl = "BRL",
  Bsd = "BSD",
  Btn = "BTN",
  Bwp = "BWP",
  Byn = "BYN",
  Bzd = "BZD",
  Cad = "CAD",
  Cdf = "CDF",
  Chf = "CHF",
  Clp = "CLP",
  Cny = "CNY",
  Cop = "COP",
  Crc = "CRC",
  Cuc = "CUC",
  Cup = "CUP",
  Cve = "CVE",
  Czk = "CZK",
  Djf = "DJF",
  Dkk = "DKK",
  Dop = "DOP",
  Dzd = "DZD",
  Egp = "EGP",
  Ern = "ERN",
  Etb = "ETB",
  Eur = "EUR",
  Fjd = "FJD",
  Fkp = "FKP",
  Gbp = "GBP",
  Gel = "GEL",
  Ghs = "GHS",
  Gip = "GIP",
  Gmd = "GMD",
  Gnf = "GNF",
  Gtq = "GTQ",
  Gyd = "GYD",
  Hkd = "HKD",
  Hnl = "HNL",
  Hrk = "HRK",
  Htg = "HTG",
  Huf = "HUF",
  Idr = "IDR",
  Ils = "ILS",
  Inr = "INR",
  Iqd = "IQD",
  Irr = "IRR",
  Isk = "ISK",
  Jmd = "JMD",
  Jod = "JOD",
  Jpy = "JPY",
  Kes = "KES",
  Kgs = "KGS",
  Khr = "KHR",
  Kmf = "KMF",
  Kpw = "KPW",
  Krw = "KRW",
  Kwd = "KWD",
  Kyd = "KYD",
  Kzt = "KZT",
  Lak = "LAK",
  Lbp = "LBP",
  Lkr = "LKR",
  Lrd = "LRD",
  Lsl = "LSL",
  Lyd = "LYD",
  Mad = "MAD",
  Mdl = "MDL",
  Mga = "MGA",
  Mkd = "MKD",
  Mmk = "MMK",
  Mnt = "MNT",
  Mop = "MOP",
  Mru = "MRU",
  Mur = "MUR",
  Mvr = "MVR",
  Mwk = "MWK",
  Mxn = "MXN",
  Myr = "MYR",
  Mzn = "MZN",
  Nad = "NAD",
  Ngn = "NGN",
  Nio = "NIO",
  Nok = "NOK",
  Npr = "NPR",
  Nzd = "NZD",
  Omr = "OMR",
  Pab = "PAB",
  Pen = "PEN",
  Pgk = "PGK",
  Php = "PHP",
  Pkr = "PKR",
  Pln = "PLN",
  Pyg = "PYG",
  Qar = "QAR",
  Ron = "RON",
  Rsd = "RSD",
  Rub = "RUB",
  Rwf = "RWF",
  Sar = "SAR",
  Sbd = "SBD",
  Scr = "SCR",
  Sdg = "SDG",
  Sek = "SEK",
  Sgd = "SGD",
  Shp = "SHP",
  Sll = "SLL",
  Sos = "SOS",
  Srd = "SRD",
  Ssp = "SSP",
  Stn = "STN",
  Syp = "SYP",
  Szl = "SZL",
  Thb = "THB",
  Tjs = "TJS",
  Tmt = "TMT",
  Tnd = "TND",
  Top = "TOP",
  Try = "TRY",
  Ttd = "TTD",
  Twd = "TWD",
  Tzs = "TZS",
  Uah = "UAH",
  Ugx = "UGX",
  Usd = "USD",
  Uyu = "UYU",
  Uzs = "UZS",
  Ves = "VES",
  Vnd = "VND",
  Vuv = "VUV",
  Wst = "WST",
  Xaf = "XAF",
  Xcd = "XCD",
  Xdr = "XDR",
  Xof = "XOF",
  Xpf = "XPF",
  Yer = "YER",
  Zar = "ZAR",
  Zmw = "ZMW",
  Zwl = "ZWL",
  UnmappedValue = "unmapped_value",
}
/**
 * Default currency for the company
 */
export type JournalLineSchemasValueOpen = OpenEnum<
  typeof JournalLineSchemasValue
>;

/**
 * Currency code for this line
 */
export type JournalLineCurrencyCode = {
  sourceValue?:
    | JournalLineSchemas4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * Default currency for the company
   */
  value?: JournalLineSchemasValueOpen | null | undefined;
};

export type JournalLine = {
  /**
   * ID of the ledger account this line references
   */
  accountId?: string | null | undefined;
  /**
   * Type of the account
   */
  accountType?: AccountType | null | undefined;
  /**
   * Amount of the journal line in minor units, e.g. 10010 for 100.10 USD. Positive for debit, negative for credit
   */
  amount?: number | null | undefined;
  /**
   * Currency code for this line
   */
  currencyCode?: JournalLineCurrencyCode | null | undefined;
  /**
   * Description of the journal line
   */
  description?: string | null | undefined;
  /**
   * Exchange rate to company base currency
   */
  exchangeRate?: number | null | undefined;
  /**
   * Unique identifier for the journal line
   */
  id?: string | null | undefined;
  /**
   * Tax amount of the line in minor units, e.g. 10010 for 100.10 USD
   */
  taxAmount?: number | null | undefined;
  /**
   * Tax rate percentage
   */
  taxRatePercentage?: number | null | undefined;
};

/** @internal */
export const JournalLine4$inboundSchema: z.ZodType<
  JournalLine4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type JournalLine4$Outbound = {};

/** @internal */
export const JournalLine4$outboundSchema: z.ZodType<
  JournalLine4$Outbound,
  z.ZodTypeDef,
  JournalLine4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JournalLine4$ {
  /** @deprecated use `JournalLine4$inboundSchema` instead. */
  export const inboundSchema = JournalLine4$inboundSchema;
  /** @deprecated use `JournalLine4$outboundSchema` instead. */
  export const outboundSchema = JournalLine4$outboundSchema;
  /** @deprecated use `JournalLine4$Outbound` instead. */
  export type Outbound = JournalLine4$Outbound;
}

export function journalLine4ToJSON(journalLine4: JournalLine4): string {
  return JSON.stringify(JournalLine4$outboundSchema.parse(journalLine4));
}

export function journalLine4FromJSON(
  jsonString: string,
): SafeParseResult<JournalLine4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JournalLine4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JournalLine4' from JSON`,
  );
}

/** @internal */
export const JournalLineSourceValue$inboundSchema: z.ZodType<
  JournalLineSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => JournalLine4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type JournalLineSourceValue$Outbound =
  | JournalLine4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const JournalLineSourceValue$outboundSchema: z.ZodType<
  JournalLineSourceValue$Outbound,
  z.ZodTypeDef,
  JournalLineSourceValue
> = z.union([
  z.lazy(() => JournalLine4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JournalLineSourceValue$ {
  /** @deprecated use `JournalLineSourceValue$inboundSchema` instead. */
  export const inboundSchema = JournalLineSourceValue$inboundSchema;
  /** @deprecated use `JournalLineSourceValue$outboundSchema` instead. */
  export const outboundSchema = JournalLineSourceValue$outboundSchema;
  /** @deprecated use `JournalLineSourceValue$Outbound` instead. */
  export type Outbound = JournalLineSourceValue$Outbound;
}

export function journalLineSourceValueToJSON(
  journalLineSourceValue: JournalLineSourceValue,
): string {
  return JSON.stringify(
    JournalLineSourceValue$outboundSchema.parse(journalLineSourceValue),
  );
}

export function journalLineSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<JournalLineSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JournalLineSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JournalLineSourceValue' from JSON`,
  );
}

/** @internal */
export const JournalLineValue$inboundSchema: z.ZodType<
  JournalLineValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(JournalLineValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const JournalLineValue$outboundSchema: z.ZodType<
  JournalLineValueOpen,
  z.ZodTypeDef,
  JournalLineValueOpen
> = z.union([
  z.nativeEnum(JournalLineValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JournalLineValue$ {
  /** @deprecated use `JournalLineValue$inboundSchema` instead. */
  export const inboundSchema = JournalLineValue$inboundSchema;
  /** @deprecated use `JournalLineValue$outboundSchema` instead. */
  export const outboundSchema = JournalLineValue$outboundSchema;
}

/** @internal */
export const AccountType$inboundSchema: z.ZodType<
  AccountType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => JournalLine4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(JournalLineValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type AccountType$Outbound = {
  source_value?:
    | JournalLine4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const AccountType$outboundSchema: z.ZodType<
  AccountType$Outbound,
  z.ZodTypeDef,
  AccountType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => JournalLine4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(JournalLineValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountType$ {
  /** @deprecated use `AccountType$inboundSchema` instead. */
  export const inboundSchema = AccountType$inboundSchema;
  /** @deprecated use `AccountType$outboundSchema` instead. */
  export const outboundSchema = AccountType$outboundSchema;
  /** @deprecated use `AccountType$Outbound` instead. */
  export type Outbound = AccountType$Outbound;
}

export function accountTypeToJSON(accountType: AccountType): string {
  return JSON.stringify(AccountType$outboundSchema.parse(accountType));
}

export function accountTypeFromJSON(
  jsonString: string,
): SafeParseResult<AccountType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountType' from JSON`,
  );
}

/** @internal */
export const JournalLineSchemas4$inboundSchema: z.ZodType<
  JournalLineSchemas4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type JournalLineSchemas4$Outbound = {};

/** @internal */
export const JournalLineSchemas4$outboundSchema: z.ZodType<
  JournalLineSchemas4$Outbound,
  z.ZodTypeDef,
  JournalLineSchemas4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JournalLineSchemas4$ {
  /** @deprecated use `JournalLineSchemas4$inboundSchema` instead. */
  export const inboundSchema = JournalLineSchemas4$inboundSchema;
  /** @deprecated use `JournalLineSchemas4$outboundSchema` instead. */
  export const outboundSchema = JournalLineSchemas4$outboundSchema;
  /** @deprecated use `JournalLineSchemas4$Outbound` instead. */
  export type Outbound = JournalLineSchemas4$Outbound;
}

export function journalLineSchemas4ToJSON(
  journalLineSchemas4: JournalLineSchemas4,
): string {
  return JSON.stringify(
    JournalLineSchemas4$outboundSchema.parse(journalLineSchemas4),
  );
}

export function journalLineSchemas4FromJSON(
  jsonString: string,
): SafeParseResult<JournalLineSchemas4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JournalLineSchemas4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JournalLineSchemas4' from JSON`,
  );
}

/** @internal */
export const JournalLineSchemasSourceValue$inboundSchema: z.ZodType<
  JournalLineSchemasSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => JournalLineSchemas4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type JournalLineSchemasSourceValue$Outbound =
  | JournalLineSchemas4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const JournalLineSchemasSourceValue$outboundSchema: z.ZodType<
  JournalLineSchemasSourceValue$Outbound,
  z.ZodTypeDef,
  JournalLineSchemasSourceValue
> = z.union([
  z.lazy(() => JournalLineSchemas4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JournalLineSchemasSourceValue$ {
  /** @deprecated use `JournalLineSchemasSourceValue$inboundSchema` instead. */
  export const inboundSchema = JournalLineSchemasSourceValue$inboundSchema;
  /** @deprecated use `JournalLineSchemasSourceValue$outboundSchema` instead. */
  export const outboundSchema = JournalLineSchemasSourceValue$outboundSchema;
  /** @deprecated use `JournalLineSchemasSourceValue$Outbound` instead. */
  export type Outbound = JournalLineSchemasSourceValue$Outbound;
}

export function journalLineSchemasSourceValueToJSON(
  journalLineSchemasSourceValue: JournalLineSchemasSourceValue,
): string {
  return JSON.stringify(
    JournalLineSchemasSourceValue$outboundSchema.parse(
      journalLineSchemasSourceValue,
    ),
  );
}

export function journalLineSchemasSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<JournalLineSchemasSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JournalLineSchemasSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JournalLineSchemasSourceValue' from JSON`,
  );
}

/** @internal */
export const JournalLineSchemasValue$inboundSchema: z.ZodType<
  JournalLineSchemasValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(JournalLineSchemasValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const JournalLineSchemasValue$outboundSchema: z.ZodType<
  JournalLineSchemasValueOpen,
  z.ZodTypeDef,
  JournalLineSchemasValueOpen
> = z.union([
  z.nativeEnum(JournalLineSchemasValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JournalLineSchemasValue$ {
  /** @deprecated use `JournalLineSchemasValue$inboundSchema` instead. */
  export const inboundSchema = JournalLineSchemasValue$inboundSchema;
  /** @deprecated use `JournalLineSchemasValue$outboundSchema` instead. */
  export const outboundSchema = JournalLineSchemasValue$outboundSchema;
}

/** @internal */
export const JournalLineCurrencyCode$inboundSchema: z.ZodType<
  JournalLineCurrencyCode,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => JournalLineSchemas4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(JournalLineSchemasValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type JournalLineCurrencyCode$Outbound = {
  source_value?:
    | JournalLineSchemas4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const JournalLineCurrencyCode$outboundSchema: z.ZodType<
  JournalLineCurrencyCode$Outbound,
  z.ZodTypeDef,
  JournalLineCurrencyCode
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => JournalLineSchemas4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(JournalLineSchemasValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JournalLineCurrencyCode$ {
  /** @deprecated use `JournalLineCurrencyCode$inboundSchema` instead. */
  export const inboundSchema = JournalLineCurrencyCode$inboundSchema;
  /** @deprecated use `JournalLineCurrencyCode$outboundSchema` instead. */
  export const outboundSchema = JournalLineCurrencyCode$outboundSchema;
  /** @deprecated use `JournalLineCurrencyCode$Outbound` instead. */
  export type Outbound = JournalLineCurrencyCode$Outbound;
}

export function journalLineCurrencyCodeToJSON(
  journalLineCurrencyCode: JournalLineCurrencyCode,
): string {
  return JSON.stringify(
    JournalLineCurrencyCode$outboundSchema.parse(journalLineCurrencyCode),
  );
}

export function journalLineCurrencyCodeFromJSON(
  jsonString: string,
): SafeParseResult<JournalLineCurrencyCode, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JournalLineCurrencyCode$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JournalLineCurrencyCode' from JSON`,
  );
}

/** @internal */
export const JournalLine$inboundSchema: z.ZodType<
  JournalLine,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.nullable(z.string()).optional(),
  account_type: z.nullable(z.lazy(() => AccountType$inboundSchema)).optional(),
  amount: z.nullable(z.number()).optional(),
  currency_code: z.nullable(z.lazy(() => JournalLineCurrencyCode$inboundSchema))
    .optional(),
  description: z.nullable(z.string()).optional(),
  exchange_rate: z.nullable(z.number()).optional(),
  id: z.nullable(z.string()).optional(),
  tax_amount: z.nullable(z.number()).optional(),
  tax_rate_percentage: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "account_type": "accountType",
    "currency_code": "currencyCode",
    "exchange_rate": "exchangeRate",
    "tax_amount": "taxAmount",
    "tax_rate_percentage": "taxRatePercentage",
  });
});

/** @internal */
export type JournalLine$Outbound = {
  account_id?: string | null | undefined;
  account_type?: AccountType$Outbound | null | undefined;
  amount?: number | null | undefined;
  currency_code?: JournalLineCurrencyCode$Outbound | null | undefined;
  description?: string | null | undefined;
  exchange_rate?: number | null | undefined;
  id?: string | null | undefined;
  tax_amount?: number | null | undefined;
  tax_rate_percentage?: number | null | undefined;
};

/** @internal */
export const JournalLine$outboundSchema: z.ZodType<
  JournalLine$Outbound,
  z.ZodTypeDef,
  JournalLine
> = z.object({
  accountId: z.nullable(z.string()).optional(),
  accountType: z.nullable(z.lazy(() => AccountType$outboundSchema)).optional(),
  amount: z.nullable(z.number()).optional(),
  currencyCode: z.nullable(z.lazy(() => JournalLineCurrencyCode$outboundSchema))
    .optional(),
  description: z.nullable(z.string()).optional(),
  exchangeRate: z.nullable(z.number()).optional(),
  id: z.nullable(z.string()).optional(),
  taxAmount: z.nullable(z.number()).optional(),
  taxRatePercentage: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    accountType: "account_type",
    currencyCode: "currency_code",
    exchangeRate: "exchange_rate",
    taxAmount: "tax_amount",
    taxRatePercentage: "tax_rate_percentage",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JournalLine$ {
  /** @deprecated use `JournalLine$inboundSchema` instead. */
  export const inboundSchema = JournalLine$inboundSchema;
  /** @deprecated use `JournalLine$outboundSchema` instead. */
  export const outboundSchema = JournalLine$outboundSchema;
  /** @deprecated use `JournalLine$Outbound` instead. */
  export type Outbound = JournalLine$Outbound;
}

export function journalLineToJSON(journalLine: JournalLine): string {
  return JSON.stringify(JournalLine$outboundSchema.parse(journalLine));
}

export function journalLineFromJSON(
  jsonString: string,
): SafeParseResult<JournalLine, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JournalLine$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JournalLine' from JSON`,
  );
}
