/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ProviderErrorApiModel,
  ProviderErrorApiModel$inboundSchema,
  ProviderErrorApiModel$Outbound,
  ProviderErrorApiModel$outboundSchema,
} from "./providererrorapimodel.js";
import {
  UnifiedWarningApiModel,
  UnifiedWarningApiModel$inboundSchema,
  UnifiedWarningApiModel$Outbound,
  UnifiedWarningApiModel$outboundSchema,
} from "./unifiedwarningapimodel.js";

export type WriteResultApiModel = {
  message?: string | null | undefined;
  providerErrors?: Array<ProviderErrorApiModel> | null | undefined;
  statusCode?: number | null | undefined;
  timestamp?: Date | null | undefined;
  unifiedWarnings?: Array<UnifiedWarningApiModel> | null | undefined;
};

/** @internal */
export const WriteResultApiModel$inboundSchema: z.ZodType<
  WriteResultApiModel,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.nullable(z.string()).optional(),
  provider_errors: z.nullable(z.array(ProviderErrorApiModel$inboundSchema))
    .optional(),
  statusCode: z.nullable(z.number()).optional(),
  timestamp: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  unified_warnings: z.nullable(z.array(UnifiedWarningApiModel$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "provider_errors": "providerErrors",
    "unified_warnings": "unifiedWarnings",
  });
});

/** @internal */
export type WriteResultApiModel$Outbound = {
  message?: string | null | undefined;
  provider_errors?: Array<ProviderErrorApiModel$Outbound> | null | undefined;
  statusCode?: number | null | undefined;
  timestamp?: string | null | undefined;
  unified_warnings?: Array<UnifiedWarningApiModel$Outbound> | null | undefined;
};

/** @internal */
export const WriteResultApiModel$outboundSchema: z.ZodType<
  WriteResultApiModel$Outbound,
  z.ZodTypeDef,
  WriteResultApiModel
> = z.object({
  message: z.nullable(z.string()).optional(),
  providerErrors: z.nullable(z.array(ProviderErrorApiModel$outboundSchema))
    .optional(),
  statusCode: z.nullable(z.number()).optional(),
  timestamp: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  unifiedWarnings: z.nullable(z.array(UnifiedWarningApiModel$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    providerErrors: "provider_errors",
    unifiedWarnings: "unified_warnings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WriteResultApiModel$ {
  /** @deprecated use `WriteResultApiModel$inboundSchema` instead. */
  export const inboundSchema = WriteResultApiModel$inboundSchema;
  /** @deprecated use `WriteResultApiModel$outboundSchema` instead. */
  export const outboundSchema = WriteResultApiModel$outboundSchema;
  /** @deprecated use `WriteResultApiModel$Outbound` instead. */
  export type Outbound = WriteResultApiModel$Outbound;
}

export function writeResultApiModelToJSON(
  writeResultApiModel: WriteResultApiModel,
): string {
  return JSON.stringify(
    WriteResultApiModel$outboundSchema.parse(writeResultApiModel),
  );
}

export function writeResultApiModelFromJSON(
  jsonString: string,
): SafeParseResult<WriteResultApiModel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WriteResultApiModel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WriteResultApiModel' from JSON`,
  );
}
