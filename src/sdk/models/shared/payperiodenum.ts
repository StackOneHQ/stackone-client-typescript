/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * The pay period of the job postings.
 */
export enum PayPeriodEnumValue {
    Hour = "hour",
    Day = "day",
    Week = "week",
    EveryTwoWeeks = "every_two_weeks",
    Month = "month",
    Quarter = "quarter",
    EverySixMonths = "every_six_months",
    Year = "year",
    None = "none",
    UnmappedValue = "unmapped_value",
}

export type PayPeriodEnum = {
    /**
     * The source value of the pay period.
     */
    sourceValue: string;
    /**
     * The pay period of the job postings.
     */
    value: PayPeriodEnumValue;
};

/** @internal */
export const PayPeriodEnumValue$ = z.nativeEnum(PayPeriodEnumValue);

/** @internal */
export namespace PayPeriodEnum$ {
    export type Inbound = {
        source_value: string;
        value: PayPeriodEnumValue;
    };

    export const inboundSchema: z.ZodType<PayPeriodEnum, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z.string(),
            value: PayPeriodEnumValue$,
        })
        .transform((v) => {
            return {
                sourceValue: v.source_value,
                value: v.value,
            };
        });

    export type Outbound = {
        source_value: string;
        value: PayPeriodEnumValue;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PayPeriodEnum> = z
        .object({
            sourceValue: z.string(),
            value: PayPeriodEnumValue$,
        })
        .transform((v) => {
            return {
                source_value: v.sourceValue,
                value: v.value,
            };
        });
}
