/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CustomMappingError,
  CustomMappingError$inboundSchema,
  CustomMappingError$Outbound,
  CustomMappingError$outboundSchema,
} from "./custommappingerror.js";
import {
  ProviderError,
  ProviderError$inboundSchema,
  ProviderError$Outbound,
  ProviderError$outboundSchema,
} from "./providererror.js";
import {
  StepLog,
  StepLog$inboundSchema,
  StepLog$Outbound,
  StepLog$outboundSchema,
} from "./steplog.js";

/**
 * The request URL data
 */
export type UnifiedLogsUrl = {
  /**
   * The request URL hostname
   */
  hostname?: string | null | undefined;
  /**
   * The request path
   */
  path?: string | null | undefined;
  /**
   * The request query parameters
   */
  queryParams?: { [k: string]: any } | null | undefined;
  /**
   * The request URL
   */
  url?: string | null | undefined;
};

/**
 * The advanced log request data
 */
export type UnifiedLogsRequest = {
  body?: any | null | undefined;
  headers?: { [k: string]: any } | null | undefined;
  /**
   * The request ID
   */
  id?: string | null | undefined;
  /**
   * The request method
   */
  method?: string | null | undefined;
  /**
   * The request URL data
   */
  url?: UnifiedLogsUrl | null | undefined;
};

/**
 * The advanced log response data
 */
export type UnifiedLogsResponse = {
  body?: any | null | undefined;
  /**
   * The custom mapping errors
   */
  customMappingErrors?: Array<CustomMappingError> | null | undefined;
  headers?: { [k: string]: any } | null | undefined;
  /**
   * The provider errors
   */
  providerErrors?: Array<ProviderError> | null | undefined;
  /**
   * The response status code
   */
  statusCode?: number | null | undefined;
};

export type UnifiedLogs = {
  /**
   * The account ID of the request
   */
  accountId?: string | null | undefined;
  /**
   * The requested action
   */
  action?: string | null | undefined;
  /**
   * The requested child resource
   */
  childResource?: string | null | undefined;
  /**
   * The request duration in milliseconds
   */
  duration?: number | null | undefined;
  /**
   * The request end time ISO8601 date string
   */
  endTime?: Date | null | undefined;
  /**
   * The event ISO8601 date string
   */
  eventDatetime?: Date | null | undefined;
  /**
   * The requested HTTP method
   */
  httpMethod?: string | null | undefined;
  /**
   * The asynchronous worker flag
   */
  isWorker?: boolean | null | undefined;
  /**
   * The requested path
   */
  path?: string | null | undefined;
  /**
   * The project ID of the request
   */
  projectId?: string | null | undefined;
  /**
   * The requested provider
   */
  provider?: string | null | undefined;
  /**
   * The advanced log request data
   */
  request?: UnifiedLogsRequest | null | undefined;
  /**
   * The request ID
   */
  requestId?: string | null | undefined;
  /**
   * The requested resource
   */
  resource?: string | null | undefined;
  /**
   * The advanced log response data
   */
  response?: UnifiedLogsResponse | null | undefined;
  /**
   * The requested service
   */
  service?: string | null | undefined;
  /**
   * The requests source ID
   */
  sourceId?: string | null | undefined;
  /**
   * The requests source IPV4 ip address
   */
  sourceIp?: string | null | undefined;
  /**
   * The requests source type
   */
  sourceType?: string | null | undefined;
  /**
   * The requests source value
   */
  sourceValue?: string | null | undefined;
  /**
   * The request start time ISO8601 date string
   */
  startTime?: Date | null | undefined;
  /**
   * The requests response status code
   */
  status?: number | null | undefined;
  /**
   * The list of provider requests
   */
  stepRequests?: Array<StepLog> | null | undefined;
  /**
   * The requested sub resource
   */
  subResource?: string | null | undefined;
  /**
   * The request success flag
   */
  success?: boolean | null | undefined;
  /**
   * The requested URL
   */
  url?: string | null | undefined;
};

/** @internal */
export const UnifiedLogsUrl$inboundSchema: z.ZodType<
  UnifiedLogsUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  hostname: z.nullable(z.string()).optional(),
  path: z.nullable(z.string()).optional(),
  query_params: z.nullable(z.record(z.any())).optional(),
  url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "query_params": "queryParams",
  });
});

/** @internal */
export type UnifiedLogsUrl$Outbound = {
  hostname?: string | null | undefined;
  path?: string | null | undefined;
  query_params?: { [k: string]: any } | null | undefined;
  url?: string | null | undefined;
};

/** @internal */
export const UnifiedLogsUrl$outboundSchema: z.ZodType<
  UnifiedLogsUrl$Outbound,
  z.ZodTypeDef,
  UnifiedLogsUrl
> = z.object({
  hostname: z.nullable(z.string()).optional(),
  path: z.nullable(z.string()).optional(),
  queryParams: z.nullable(z.record(z.any())).optional(),
  url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    queryParams: "query_params",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedLogsUrl$ {
  /** @deprecated use `UnifiedLogsUrl$inboundSchema` instead. */
  export const inboundSchema = UnifiedLogsUrl$inboundSchema;
  /** @deprecated use `UnifiedLogsUrl$outboundSchema` instead. */
  export const outboundSchema = UnifiedLogsUrl$outboundSchema;
  /** @deprecated use `UnifiedLogsUrl$Outbound` instead. */
  export type Outbound = UnifiedLogsUrl$Outbound;
}

export function unifiedLogsUrlToJSON(unifiedLogsUrl: UnifiedLogsUrl): string {
  return JSON.stringify(UnifiedLogsUrl$outboundSchema.parse(unifiedLogsUrl));
}

export function unifiedLogsUrlFromJSON(
  jsonString: string,
): SafeParseResult<UnifiedLogsUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnifiedLogsUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnifiedLogsUrl' from JSON`,
  );
}

/** @internal */
export const UnifiedLogsRequest$inboundSchema: z.ZodType<
  UnifiedLogsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  body: z.nullable(z.any()).optional(),
  headers: z.nullable(z.record(z.any())).optional(),
  id: z.nullable(z.string()).optional(),
  method: z.nullable(z.string()).optional(),
  url: z.nullable(z.lazy(() => UnifiedLogsUrl$inboundSchema)).optional(),
});

/** @internal */
export type UnifiedLogsRequest$Outbound = {
  body?: any | null | undefined;
  headers?: { [k: string]: any } | null | undefined;
  id?: string | null | undefined;
  method?: string | null | undefined;
  url?: UnifiedLogsUrl$Outbound | null | undefined;
};

/** @internal */
export const UnifiedLogsRequest$outboundSchema: z.ZodType<
  UnifiedLogsRequest$Outbound,
  z.ZodTypeDef,
  UnifiedLogsRequest
> = z.object({
  body: z.nullable(z.any()).optional(),
  headers: z.nullable(z.record(z.any())).optional(),
  id: z.nullable(z.string()).optional(),
  method: z.nullable(z.string()).optional(),
  url: z.nullable(z.lazy(() => UnifiedLogsUrl$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedLogsRequest$ {
  /** @deprecated use `UnifiedLogsRequest$inboundSchema` instead. */
  export const inboundSchema = UnifiedLogsRequest$inboundSchema;
  /** @deprecated use `UnifiedLogsRequest$outboundSchema` instead. */
  export const outboundSchema = UnifiedLogsRequest$outboundSchema;
  /** @deprecated use `UnifiedLogsRequest$Outbound` instead. */
  export type Outbound = UnifiedLogsRequest$Outbound;
}

export function unifiedLogsRequestToJSON(
  unifiedLogsRequest: UnifiedLogsRequest,
): string {
  return JSON.stringify(
    UnifiedLogsRequest$outboundSchema.parse(unifiedLogsRequest),
  );
}

export function unifiedLogsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UnifiedLogsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnifiedLogsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnifiedLogsRequest' from JSON`,
  );
}

/** @internal */
export const UnifiedLogsResponse$inboundSchema: z.ZodType<
  UnifiedLogsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  body: z.nullable(z.any()).optional(),
  custom_mapping_errors: z.nullable(z.array(CustomMappingError$inboundSchema))
    .optional(),
  headers: z.nullable(z.record(z.any())).optional(),
  provider_errors: z.nullable(z.array(ProviderError$inboundSchema)).optional(),
  status_code: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "custom_mapping_errors": "customMappingErrors",
    "provider_errors": "providerErrors",
    "status_code": "statusCode",
  });
});

/** @internal */
export type UnifiedLogsResponse$Outbound = {
  body?: any | null | undefined;
  custom_mapping_errors?: Array<CustomMappingError$Outbound> | null | undefined;
  headers?: { [k: string]: any } | null | undefined;
  provider_errors?: Array<ProviderError$Outbound> | null | undefined;
  status_code?: number | null | undefined;
};

/** @internal */
export const UnifiedLogsResponse$outboundSchema: z.ZodType<
  UnifiedLogsResponse$Outbound,
  z.ZodTypeDef,
  UnifiedLogsResponse
> = z.object({
  body: z.nullable(z.any()).optional(),
  customMappingErrors: z.nullable(z.array(CustomMappingError$outboundSchema))
    .optional(),
  headers: z.nullable(z.record(z.any())).optional(),
  providerErrors: z.nullable(z.array(ProviderError$outboundSchema)).optional(),
  statusCode: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    customMappingErrors: "custom_mapping_errors",
    providerErrors: "provider_errors",
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedLogsResponse$ {
  /** @deprecated use `UnifiedLogsResponse$inboundSchema` instead. */
  export const inboundSchema = UnifiedLogsResponse$inboundSchema;
  /** @deprecated use `UnifiedLogsResponse$outboundSchema` instead. */
  export const outboundSchema = UnifiedLogsResponse$outboundSchema;
  /** @deprecated use `UnifiedLogsResponse$Outbound` instead. */
  export type Outbound = UnifiedLogsResponse$Outbound;
}

export function unifiedLogsResponseToJSON(
  unifiedLogsResponse: UnifiedLogsResponse,
): string {
  return JSON.stringify(
    UnifiedLogsResponse$outboundSchema.parse(unifiedLogsResponse),
  );
}

export function unifiedLogsResponseFromJSON(
  jsonString: string,
): SafeParseResult<UnifiedLogsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnifiedLogsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnifiedLogsResponse' from JSON`,
  );
}

/** @internal */
export const UnifiedLogs$inboundSchema: z.ZodType<
  UnifiedLogs,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.nullable(z.string()).optional(),
  action: z.nullable(z.string()).optional(),
  child_resource: z.nullable(z.string()).optional(),
  duration: z.nullable(z.number()).optional(),
  end_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  event_datetime: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  http_method: z.nullable(z.string()).optional(),
  is_worker: z.nullable(z.boolean()).optional(),
  path: z.nullable(z.string()).optional(),
  project_id: z.nullable(z.string()).optional(),
  provider: z.nullable(z.string()).optional(),
  request: z.nullable(z.lazy(() => UnifiedLogsRequest$inboundSchema))
    .optional(),
  request_id: z.nullable(z.string()).optional(),
  resource: z.nullable(z.string()).optional(),
  response: z.nullable(z.lazy(() => UnifiedLogsResponse$inboundSchema))
    .optional(),
  service: z.nullable(z.string()).optional(),
  source_id: z.nullable(z.string()).optional(),
  source_ip: z.nullable(z.string()).optional(),
  source_type: z.nullable(z.string()).optional(),
  source_value: z.nullable(z.string()).optional(),
  start_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  status: z.nullable(z.number()).optional(),
  step_requests: z.nullable(z.array(StepLog$inboundSchema)).optional(),
  sub_resource: z.nullable(z.string()).optional(),
  success: z.nullable(z.boolean()).optional(),
  url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "child_resource": "childResource",
    "end_time": "endTime",
    "event_datetime": "eventDatetime",
    "http_method": "httpMethod",
    "is_worker": "isWorker",
    "project_id": "projectId",
    "request_id": "requestId",
    "source_id": "sourceId",
    "source_ip": "sourceIp",
    "source_type": "sourceType",
    "source_value": "sourceValue",
    "start_time": "startTime",
    "step_requests": "stepRequests",
    "sub_resource": "subResource",
  });
});

/** @internal */
export type UnifiedLogs$Outbound = {
  account_id?: string | null | undefined;
  action?: string | null | undefined;
  child_resource?: string | null | undefined;
  duration?: number | null | undefined;
  end_time?: string | null | undefined;
  event_datetime?: string | null | undefined;
  http_method?: string | null | undefined;
  is_worker?: boolean | null | undefined;
  path?: string | null | undefined;
  project_id?: string | null | undefined;
  provider?: string | null | undefined;
  request?: UnifiedLogsRequest$Outbound | null | undefined;
  request_id?: string | null | undefined;
  resource?: string | null | undefined;
  response?: UnifiedLogsResponse$Outbound | null | undefined;
  service?: string | null | undefined;
  source_id?: string | null | undefined;
  source_ip?: string | null | undefined;
  source_type?: string | null | undefined;
  source_value?: string | null | undefined;
  start_time?: string | null | undefined;
  status?: number | null | undefined;
  step_requests?: Array<StepLog$Outbound> | null | undefined;
  sub_resource?: string | null | undefined;
  success?: boolean | null | undefined;
  url?: string | null | undefined;
};

/** @internal */
export const UnifiedLogs$outboundSchema: z.ZodType<
  UnifiedLogs$Outbound,
  z.ZodTypeDef,
  UnifiedLogs
> = z.object({
  accountId: z.nullable(z.string()).optional(),
  action: z.nullable(z.string()).optional(),
  childResource: z.nullable(z.string()).optional(),
  duration: z.nullable(z.number()).optional(),
  endTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  eventDatetime: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  httpMethod: z.nullable(z.string()).optional(),
  isWorker: z.nullable(z.boolean()).optional(),
  path: z.nullable(z.string()).optional(),
  projectId: z.nullable(z.string()).optional(),
  provider: z.nullable(z.string()).optional(),
  request: z.nullable(z.lazy(() => UnifiedLogsRequest$outboundSchema))
    .optional(),
  requestId: z.nullable(z.string()).optional(),
  resource: z.nullable(z.string()).optional(),
  response: z.nullable(z.lazy(() => UnifiedLogsResponse$outboundSchema))
    .optional(),
  service: z.nullable(z.string()).optional(),
  sourceId: z.nullable(z.string()).optional(),
  sourceIp: z.nullable(z.string()).optional(),
  sourceType: z.nullable(z.string()).optional(),
  sourceValue: z.nullable(z.string()).optional(),
  startTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  status: z.nullable(z.number()).optional(),
  stepRequests: z.nullable(z.array(StepLog$outboundSchema)).optional(),
  subResource: z.nullable(z.string()).optional(),
  success: z.nullable(z.boolean()).optional(),
  url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    childResource: "child_resource",
    endTime: "end_time",
    eventDatetime: "event_datetime",
    httpMethod: "http_method",
    isWorker: "is_worker",
    projectId: "project_id",
    requestId: "request_id",
    sourceId: "source_id",
    sourceIp: "source_ip",
    sourceType: "source_type",
    sourceValue: "source_value",
    startTime: "start_time",
    stepRequests: "step_requests",
    subResource: "sub_resource",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedLogs$ {
  /** @deprecated use `UnifiedLogs$inboundSchema` instead. */
  export const inboundSchema = UnifiedLogs$inboundSchema;
  /** @deprecated use `UnifiedLogs$outboundSchema` instead. */
  export const outboundSchema = UnifiedLogs$outboundSchema;
  /** @deprecated use `UnifiedLogs$Outbound` instead. */
  export type Outbound = UnifiedLogs$Outbound;
}

export function unifiedLogsToJSON(unifiedLogs: UnifiedLogs): string {
  return JSON.stringify(UnifiedLogs$outboundSchema.parse(unifiedLogs));
}

export function unifiedLogsFromJSON(
  jsonString: string,
): SafeParseResult<UnifiedLogs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnifiedLogs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnifiedLogs' from JSON`,
  );
}
