/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { EmployeeCustomFields, EmployeeCustomFields$ } from "./employeecustomfields";
import { Employment, Employment$ } from "./employment";
import {
    HrisLocationsCreateRequestDto,
    HrisLocationsCreateRequestDto$,
} from "./hrislocationscreaterequestdto";
import { z } from "zod";

/**
 * The employee avatar
 */
export type HrisCreateEmployeeRequestDtoAvatar = {
    base64?: string | undefined;
    url?: string | undefined;
};

export enum HrisCreateEmployeeRequestDtoValue {
    FullTime = "full_time",
    Shifts = "shifts",
    PartTime = "part_time",
    UnmappedValue = "unmapped_value",
}

/**
 * The employment work schedule type (e.g., full-time, part-time)
 */
export type HrisCreateEmployeeRequestDtoEmploymentContractType = {
    sourceValue: string;
    value: HrisCreateEmployeeRequestDtoValue;
};

export enum HrisCreateEmployeeRequestDtoSchemasValue {
    Active = "active",
    Pending = "pending",
    Terminated = "terminated",
    Leave = "leave",
    Inactive = "inactive",
    Unknown = "unknown",
    UnmappedValue = "unmapped_value",
}

/**
 * The employee employment status
 */
export type HrisCreateEmployeeRequestDtoEmploymentStatus = {
    sourceValue: string;
    value: HrisCreateEmployeeRequestDtoSchemasValue;
};

/**
 * The type of the employment.
 */
export enum HrisCreateEmployeeRequestDtoSchemasEmploymentTypeValue {
    Permanent = "permanent",
    Contractor = "contractor",
    Intern = "intern",
    Apprentice = "apprentice",
    Freelance = "freelance",
    Temporary = "temporary",
    Seasonal = "seasonal",
    Volunteer = "volunteer",
    UnmappedValue = "unmapped_value",
}

/**
 * The employee employment type
 */
export type HrisCreateEmployeeRequestDtoEmploymentType = {
    /**
     * The source value of the employment type.
     */
    sourceValue: string;
    /**
     * The type of the employment.
     */
    value: HrisCreateEmployeeRequestDtoSchemasEmploymentTypeValue;
};

export enum HrisCreateEmployeeRequestDtoSchemasEthnicityValue {
    White = "white",
    BlackOrAfricanAmerican = "black_or_african_american",
    Asian = "asian",
    HispanicOrLatino = "hispanic_or_latino",
    AmericanIndianOrAlaskaNative = "american_indian_or_alaska_native",
    NativeHawaiianOrPacificIslander = "native_hawaiian_or_pacific_islander",
    TwoOrMoreRaces = "two_or_more_races",
    NotDisclosed = "not_disclosed",
    Other = "other",
    UnmappedValue = "unmapped_value",
}

/**
 * The employee ethnicity
 */
export type HrisCreateEmployeeRequestDtoEthnicity = {
    sourceValue: string;
    value: HrisCreateEmployeeRequestDtoSchemasEthnicityValue;
};

export enum HrisCreateEmployeeRequestDtoSchemasGenderValue {
    Male = "male",
    Female = "female",
    NonBinary = "non_binary",
    Other = "other",
    NotDisclosed = "not_disclosed",
    Diverse = "diverse",
    UnmappedValue = "unmapped_value",
}

/**
 * The employee gender
 */
export type HrisCreateEmployeeRequestDtoGender = {
    sourceValue: string;
    value: HrisCreateEmployeeRequestDtoSchemasGenderValue;
};

export enum HrisCreateEmployeeRequestDtoSchemasMaritalStatusValue {
    Single = "single",
    Married = "married",
    CommonLaw = "common_law",
    Divorced = "divorced",
    Widowed = "widowed",
    DomesticPartnership = "domestic_partnership",
    Separated = "separated",
    Other = "other",
    NotDisclosed = "not_disclosed",
    UnmappedValue = "unmapped_value",
}

/**
 * The employee marital status
 */
export type HrisCreateEmployeeRequestDtoMaritalStatus = {
    sourceValue: string;
    value: HrisCreateEmployeeRequestDtoSchemasMaritalStatusValue;
};

export type HrisCreateEmployeeRequestDto = {
    /**
     * The employee avatar
     */
    avatar?: HrisCreateEmployeeRequestDtoAvatar | undefined;
    /**
     * The employee avatar Url
     */
    avatarUrl?: string | undefined;
    /**
     * The employee birthday
     */
    birthday?: Date | undefined;
    /**
     * The employee company name
     */
    companyName?: string | undefined;
    /**
     * The employee custom fields
     */
    customFields?: Array<EmployeeCustomFields> | undefined;
    /**
     * The employee date_of_birth
     */
    dateOfBirth?: Date | undefined;
    /**
     * The employee department
     */
    department?: string | undefined;
    /**
     * The employee display name
     */
    displayName?: string | undefined;
    /**
     * The employment work schedule type (e.g., full-time, part-time)
     */
    employmentContractType?: HrisCreateEmployeeRequestDtoEmploymentContractType | undefined;
    /**
     * The employee employment status
     */
    employmentStatus?: HrisCreateEmployeeRequestDtoEmploymentStatus | undefined;
    /**
     * The employee employment type
     */
    employmentType?: HrisCreateEmployeeRequestDtoEmploymentType | undefined;
    /**
     * The employee employments
     */
    employments?: Array<Employment> | undefined;
    /**
     * The employee ethnicity
     */
    ethnicity?: HrisCreateEmployeeRequestDtoEthnicity | undefined;
    /**
     * The employee first name
     */
    firstName: string;
    /**
     * The employee gender
     */
    gender?: HrisCreateEmployeeRequestDtoGender | undefined;
    /**
     * The employee hire date
     */
    hireDate?: Date | undefined;
    /**
     * The employee home location
     */
    homeLocation?: HrisLocationsCreateRequestDto | undefined;
    /**
     * The employee job title
     */
    jobTitle?: string | undefined;
    /**
     * The employee last name
     */
    lastName: string;
    /**
     * The employee manager ID
     */
    managerId?: string | undefined;
    /**
     * The employee marital status
     */
    maritalStatus?: HrisCreateEmployeeRequestDtoMaritalStatus | undefined;
    /**
     * The employee name
     */
    name?: string | undefined;
    /**
     * The employee personal email
     */
    personalEmail?: string | undefined;
    /**
     * The employee personal phone number
     */
    personalPhoneNumber?: string | undefined;
    /**
     * The employee start date
     */
    startDate?: Date | undefined;
    /**
     * The employee tenure
     */
    tenure?: number | undefined;
    /**
     * The employee termination date
     */
    terminationDate?: Date | undefined;
    /**
     * The employee work anniversary
     */
    workAnniversary?: Date | undefined;
    /**
     * The employee work email
     */
    workEmail: string;
    /**
     * The employee work location
     */
    workLocation?: HrisLocationsCreateRequestDto | undefined;
    /**
     * The employee work phone number
     */
    workPhoneNumber?: string | undefined;
};

/** @internal */
export namespace HrisCreateEmployeeRequestDtoAvatar$ {
    export type Inbound = {
        base64?: string | undefined;
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        HrisCreateEmployeeRequestDtoAvatar,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            base64: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.base64 === undefined ? null : { base64: v.base64 }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        base64?: string | undefined;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        HrisCreateEmployeeRequestDtoAvatar
    > = z
        .object({
            base64: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.base64 === undefined ? null : { base64: v.base64 }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export const HrisCreateEmployeeRequestDtoValue$ = z.nativeEnum(HrisCreateEmployeeRequestDtoValue);

/** @internal */
export namespace HrisCreateEmployeeRequestDtoEmploymentContractType$ {
    export type Inbound = {
        source_value: string;
        value: HrisCreateEmployeeRequestDtoValue;
    };

    export const inboundSchema: z.ZodType<
        HrisCreateEmployeeRequestDtoEmploymentContractType,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            source_value: z.string(),
            value: HrisCreateEmployeeRequestDtoValue$,
        })
        .transform((v) => {
            return {
                sourceValue: v.source_value,
                value: v.value,
            };
        });

    export type Outbound = {
        source_value: string;
        value: HrisCreateEmployeeRequestDtoValue;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        HrisCreateEmployeeRequestDtoEmploymentContractType
    > = z
        .object({
            sourceValue: z.string(),
            value: HrisCreateEmployeeRequestDtoValue$,
        })
        .transform((v) => {
            return {
                source_value: v.sourceValue,
                value: v.value,
            };
        });
}

/** @internal */
export const HrisCreateEmployeeRequestDtoSchemasValue$ = z.nativeEnum(
    HrisCreateEmployeeRequestDtoSchemasValue
);

/** @internal */
export namespace HrisCreateEmployeeRequestDtoEmploymentStatus$ {
    export type Inbound = {
        source_value: string;
        value: HrisCreateEmployeeRequestDtoSchemasValue;
    };

    export const inboundSchema: z.ZodType<
        HrisCreateEmployeeRequestDtoEmploymentStatus,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            source_value: z.string(),
            value: HrisCreateEmployeeRequestDtoSchemasValue$,
        })
        .transform((v) => {
            return {
                sourceValue: v.source_value,
                value: v.value,
            };
        });

    export type Outbound = {
        source_value: string;
        value: HrisCreateEmployeeRequestDtoSchemasValue;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        HrisCreateEmployeeRequestDtoEmploymentStatus
    > = z
        .object({
            sourceValue: z.string(),
            value: HrisCreateEmployeeRequestDtoSchemasValue$,
        })
        .transform((v) => {
            return {
                source_value: v.sourceValue,
                value: v.value,
            };
        });
}

/** @internal */
export const HrisCreateEmployeeRequestDtoSchemasEmploymentTypeValue$ = z.nativeEnum(
    HrisCreateEmployeeRequestDtoSchemasEmploymentTypeValue
);

/** @internal */
export namespace HrisCreateEmployeeRequestDtoEmploymentType$ {
    export type Inbound = {
        source_value: string;
        value: HrisCreateEmployeeRequestDtoSchemasEmploymentTypeValue;
    };

    export const inboundSchema: z.ZodType<
        HrisCreateEmployeeRequestDtoEmploymentType,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            source_value: z.string(),
            value: HrisCreateEmployeeRequestDtoSchemasEmploymentTypeValue$,
        })
        .transform((v) => {
            return {
                sourceValue: v.source_value,
                value: v.value,
            };
        });

    export type Outbound = {
        source_value: string;
        value: HrisCreateEmployeeRequestDtoSchemasEmploymentTypeValue;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        HrisCreateEmployeeRequestDtoEmploymentType
    > = z
        .object({
            sourceValue: z.string(),
            value: HrisCreateEmployeeRequestDtoSchemasEmploymentTypeValue$,
        })
        .transform((v) => {
            return {
                source_value: v.sourceValue,
                value: v.value,
            };
        });
}

/** @internal */
export const HrisCreateEmployeeRequestDtoSchemasEthnicityValue$ = z.nativeEnum(
    HrisCreateEmployeeRequestDtoSchemasEthnicityValue
);

/** @internal */
export namespace HrisCreateEmployeeRequestDtoEthnicity$ {
    export type Inbound = {
        source_value: string;
        value: HrisCreateEmployeeRequestDtoSchemasEthnicityValue;
    };

    export const inboundSchema: z.ZodType<
        HrisCreateEmployeeRequestDtoEthnicity,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            source_value: z.string(),
            value: HrisCreateEmployeeRequestDtoSchemasEthnicityValue$,
        })
        .transform((v) => {
            return {
                sourceValue: v.source_value,
                value: v.value,
            };
        });

    export type Outbound = {
        source_value: string;
        value: HrisCreateEmployeeRequestDtoSchemasEthnicityValue;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        HrisCreateEmployeeRequestDtoEthnicity
    > = z
        .object({
            sourceValue: z.string(),
            value: HrisCreateEmployeeRequestDtoSchemasEthnicityValue$,
        })
        .transform((v) => {
            return {
                source_value: v.sourceValue,
                value: v.value,
            };
        });
}

/** @internal */
export const HrisCreateEmployeeRequestDtoSchemasGenderValue$ = z.nativeEnum(
    HrisCreateEmployeeRequestDtoSchemasGenderValue
);

/** @internal */
export namespace HrisCreateEmployeeRequestDtoGender$ {
    export type Inbound = {
        source_value: string;
        value: HrisCreateEmployeeRequestDtoSchemasGenderValue;
    };

    export const inboundSchema: z.ZodType<
        HrisCreateEmployeeRequestDtoGender,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            source_value: z.string(),
            value: HrisCreateEmployeeRequestDtoSchemasGenderValue$,
        })
        .transform((v) => {
            return {
                sourceValue: v.source_value,
                value: v.value,
            };
        });

    export type Outbound = {
        source_value: string;
        value: HrisCreateEmployeeRequestDtoSchemasGenderValue;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        HrisCreateEmployeeRequestDtoGender
    > = z
        .object({
            sourceValue: z.string(),
            value: HrisCreateEmployeeRequestDtoSchemasGenderValue$,
        })
        .transform((v) => {
            return {
                source_value: v.sourceValue,
                value: v.value,
            };
        });
}

/** @internal */
export const HrisCreateEmployeeRequestDtoSchemasMaritalStatusValue$ = z.nativeEnum(
    HrisCreateEmployeeRequestDtoSchemasMaritalStatusValue
);

/** @internal */
export namespace HrisCreateEmployeeRequestDtoMaritalStatus$ {
    export type Inbound = {
        source_value: string;
        value: HrisCreateEmployeeRequestDtoSchemasMaritalStatusValue;
    };

    export const inboundSchema: z.ZodType<
        HrisCreateEmployeeRequestDtoMaritalStatus,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            source_value: z.string(),
            value: HrisCreateEmployeeRequestDtoSchemasMaritalStatusValue$,
        })
        .transform((v) => {
            return {
                sourceValue: v.source_value,
                value: v.value,
            };
        });

    export type Outbound = {
        source_value: string;
        value: HrisCreateEmployeeRequestDtoSchemasMaritalStatusValue;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        HrisCreateEmployeeRequestDtoMaritalStatus
    > = z
        .object({
            sourceValue: z.string(),
            value: HrisCreateEmployeeRequestDtoSchemasMaritalStatusValue$,
        })
        .transform((v) => {
            return {
                source_value: v.sourceValue,
                value: v.value,
            };
        });
}

/** @internal */
export namespace HrisCreateEmployeeRequestDto$ {
    export type Inbound = {
        avatar?: HrisCreateEmployeeRequestDtoAvatar$.Inbound | undefined;
        avatar_url?: string | undefined;
        birthday?: string | undefined;
        company_name?: string | undefined;
        custom_fields?: Array<EmployeeCustomFields$.Inbound> | undefined;
        date_of_birth?: string | undefined;
        department?: string | undefined;
        display_name?: string | undefined;
        employment_contract_type?:
            | HrisCreateEmployeeRequestDtoEmploymentContractType$.Inbound
            | undefined;
        employment_status?: HrisCreateEmployeeRequestDtoEmploymentStatus$.Inbound | undefined;
        employment_type?: HrisCreateEmployeeRequestDtoEmploymentType$.Inbound | undefined;
        employments?: Array<Employment$.Inbound> | undefined;
        ethnicity?: HrisCreateEmployeeRequestDtoEthnicity$.Inbound | undefined;
        first_name: string;
        gender?: HrisCreateEmployeeRequestDtoGender$.Inbound | undefined;
        hire_date?: string | undefined;
        home_location?: HrisLocationsCreateRequestDto$.Inbound | undefined;
        job_title?: string | undefined;
        last_name: string;
        manager_id?: string | undefined;
        marital_status?: HrisCreateEmployeeRequestDtoMaritalStatus$.Inbound | undefined;
        name?: string | undefined;
        personal_email?: string | undefined;
        personal_phone_number?: string | undefined;
        start_date?: string | undefined;
        tenure?: number | undefined;
        termination_date?: string | undefined;
        work_anniversary?: string | undefined;
        work_email: string;
        work_location?: HrisLocationsCreateRequestDto$.Inbound | undefined;
        work_phone_number?: string | undefined;
    };

    export const inboundSchema: z.ZodType<HrisCreateEmployeeRequestDto, z.ZodTypeDef, Inbound> = z
        .object({
            avatar: z.lazy(() => HrisCreateEmployeeRequestDtoAvatar$.inboundSchema).optional(),
            avatar_url: z.string().optional(),
            birthday: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            company_name: z.string().optional(),
            custom_fields: z.array(EmployeeCustomFields$.inboundSchema).optional(),
            date_of_birth: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            department: z.string().optional(),
            display_name: z.string().optional(),
            employment_contract_type: z
                .lazy(() => HrisCreateEmployeeRequestDtoEmploymentContractType$.inboundSchema)
                .optional(),
            employment_status: z
                .lazy(() => HrisCreateEmployeeRequestDtoEmploymentStatus$.inboundSchema)
                .optional(),
            employment_type: z
                .lazy(() => HrisCreateEmployeeRequestDtoEmploymentType$.inboundSchema)
                .optional(),
            employments: z.array(Employment$.inboundSchema).optional(),
            ethnicity: z
                .lazy(() => HrisCreateEmployeeRequestDtoEthnicity$.inboundSchema)
                .optional(),
            first_name: z.string(),
            gender: z.lazy(() => HrisCreateEmployeeRequestDtoGender$.inboundSchema).optional(),
            hire_date: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            home_location: HrisLocationsCreateRequestDto$.inboundSchema.optional(),
            job_title: z.string().optional(),
            last_name: z.string(),
            manager_id: z.string().optional(),
            marital_status: z
                .lazy(() => HrisCreateEmployeeRequestDtoMaritalStatus$.inboundSchema)
                .optional(),
            name: z.string().optional(),
            personal_email: z.string().optional(),
            personal_phone_number: z.string().optional(),
            start_date: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            tenure: z.number().optional(),
            termination_date: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            work_anniversary: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            work_email: z.string(),
            work_location: HrisLocationsCreateRequestDto$.inboundSchema.optional(),
            work_phone_number: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.avatar === undefined ? null : { avatar: v.avatar }),
                ...(v.avatar_url === undefined ? null : { avatarUrl: v.avatar_url }),
                ...(v.birthday === undefined ? null : { birthday: v.birthday }),
                ...(v.company_name === undefined ? null : { companyName: v.company_name }),
                ...(v.custom_fields === undefined ? null : { customFields: v.custom_fields }),
                ...(v.date_of_birth === undefined ? null : { dateOfBirth: v.date_of_birth }),
                ...(v.department === undefined ? null : { department: v.department }),
                ...(v.display_name === undefined ? null : { displayName: v.display_name }),
                ...(v.employment_contract_type === undefined
                    ? null
                    : { employmentContractType: v.employment_contract_type }),
                ...(v.employment_status === undefined
                    ? null
                    : { employmentStatus: v.employment_status }),
                ...(v.employment_type === undefined ? null : { employmentType: v.employment_type }),
                ...(v.employments === undefined ? null : { employments: v.employments }),
                ...(v.ethnicity === undefined ? null : { ethnicity: v.ethnicity }),
                firstName: v.first_name,
                ...(v.gender === undefined ? null : { gender: v.gender }),
                ...(v.hire_date === undefined ? null : { hireDate: v.hire_date }),
                ...(v.home_location === undefined ? null : { homeLocation: v.home_location }),
                ...(v.job_title === undefined ? null : { jobTitle: v.job_title }),
                lastName: v.last_name,
                ...(v.manager_id === undefined ? null : { managerId: v.manager_id }),
                ...(v.marital_status === undefined ? null : { maritalStatus: v.marital_status }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.personal_email === undefined ? null : { personalEmail: v.personal_email }),
                ...(v.personal_phone_number === undefined
                    ? null
                    : { personalPhoneNumber: v.personal_phone_number }),
                ...(v.start_date === undefined ? null : { startDate: v.start_date }),
                ...(v.tenure === undefined ? null : { tenure: v.tenure }),
                ...(v.termination_date === undefined
                    ? null
                    : { terminationDate: v.termination_date }),
                ...(v.work_anniversary === undefined
                    ? null
                    : { workAnniversary: v.work_anniversary }),
                workEmail: v.work_email,
                ...(v.work_location === undefined ? null : { workLocation: v.work_location }),
                ...(v.work_phone_number === undefined
                    ? null
                    : { workPhoneNumber: v.work_phone_number }),
            };
        });

    export type Outbound = {
        avatar?: HrisCreateEmployeeRequestDtoAvatar$.Outbound | undefined;
        avatar_url?: string | undefined;
        birthday?: string | undefined;
        company_name?: string | undefined;
        custom_fields?: Array<EmployeeCustomFields$.Outbound> | undefined;
        date_of_birth?: string | undefined;
        department?: string | undefined;
        display_name?: string | undefined;
        employment_contract_type?:
            | HrisCreateEmployeeRequestDtoEmploymentContractType$.Outbound
            | undefined;
        employment_status?: HrisCreateEmployeeRequestDtoEmploymentStatus$.Outbound | undefined;
        employment_type?: HrisCreateEmployeeRequestDtoEmploymentType$.Outbound | undefined;
        employments?: Array<Employment$.Outbound> | undefined;
        ethnicity?: HrisCreateEmployeeRequestDtoEthnicity$.Outbound | undefined;
        first_name: string;
        gender?: HrisCreateEmployeeRequestDtoGender$.Outbound | undefined;
        hire_date?: string | undefined;
        home_location?: HrisLocationsCreateRequestDto$.Outbound | undefined;
        job_title?: string | undefined;
        last_name: string;
        manager_id?: string | undefined;
        marital_status?: HrisCreateEmployeeRequestDtoMaritalStatus$.Outbound | undefined;
        name?: string | undefined;
        personal_email?: string | undefined;
        personal_phone_number?: string | undefined;
        start_date?: string | undefined;
        tenure?: number | undefined;
        termination_date?: string | undefined;
        work_anniversary?: string | undefined;
        work_email: string;
        work_location?: HrisLocationsCreateRequestDto$.Outbound | undefined;
        work_phone_number?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HrisCreateEmployeeRequestDto> = z
        .object({
            avatar: z.lazy(() => HrisCreateEmployeeRequestDtoAvatar$.outboundSchema).optional(),
            avatarUrl: z.string().optional(),
            birthday: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            companyName: z.string().optional(),
            customFields: z.array(EmployeeCustomFields$.outboundSchema).optional(),
            dateOfBirth: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            department: z.string().optional(),
            displayName: z.string().optional(),
            employmentContractType: z
                .lazy(() => HrisCreateEmployeeRequestDtoEmploymentContractType$.outboundSchema)
                .optional(),
            employmentStatus: z
                .lazy(() => HrisCreateEmployeeRequestDtoEmploymentStatus$.outboundSchema)
                .optional(),
            employmentType: z
                .lazy(() => HrisCreateEmployeeRequestDtoEmploymentType$.outboundSchema)
                .optional(),
            employments: z.array(Employment$.outboundSchema).optional(),
            ethnicity: z
                .lazy(() => HrisCreateEmployeeRequestDtoEthnicity$.outboundSchema)
                .optional(),
            firstName: z.string(),
            gender: z.lazy(() => HrisCreateEmployeeRequestDtoGender$.outboundSchema).optional(),
            hireDate: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            homeLocation: HrisLocationsCreateRequestDto$.outboundSchema.optional(),
            jobTitle: z.string().optional(),
            lastName: z.string(),
            managerId: z.string().optional(),
            maritalStatus: z
                .lazy(() => HrisCreateEmployeeRequestDtoMaritalStatus$.outboundSchema)
                .optional(),
            name: z.string().optional(),
            personalEmail: z.string().optional(),
            personalPhoneNumber: z.string().optional(),
            startDate: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            tenure: z.number().optional(),
            terminationDate: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            workAnniversary: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            workEmail: z.string(),
            workLocation: HrisLocationsCreateRequestDto$.outboundSchema.optional(),
            workPhoneNumber: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.avatar === undefined ? null : { avatar: v.avatar }),
                ...(v.avatarUrl === undefined ? null : { avatar_url: v.avatarUrl }),
                ...(v.birthday === undefined ? null : { birthday: v.birthday }),
                ...(v.companyName === undefined ? null : { company_name: v.companyName }),
                ...(v.customFields === undefined ? null : { custom_fields: v.customFields }),
                ...(v.dateOfBirth === undefined ? null : { date_of_birth: v.dateOfBirth }),
                ...(v.department === undefined ? null : { department: v.department }),
                ...(v.displayName === undefined ? null : { display_name: v.displayName }),
                ...(v.employmentContractType === undefined
                    ? null
                    : { employment_contract_type: v.employmentContractType }),
                ...(v.employmentStatus === undefined
                    ? null
                    : { employment_status: v.employmentStatus }),
                ...(v.employmentType === undefined ? null : { employment_type: v.employmentType }),
                ...(v.employments === undefined ? null : { employments: v.employments }),
                ...(v.ethnicity === undefined ? null : { ethnicity: v.ethnicity }),
                first_name: v.firstName,
                ...(v.gender === undefined ? null : { gender: v.gender }),
                ...(v.hireDate === undefined ? null : { hire_date: v.hireDate }),
                ...(v.homeLocation === undefined ? null : { home_location: v.homeLocation }),
                ...(v.jobTitle === undefined ? null : { job_title: v.jobTitle }),
                last_name: v.lastName,
                ...(v.managerId === undefined ? null : { manager_id: v.managerId }),
                ...(v.maritalStatus === undefined ? null : { marital_status: v.maritalStatus }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.personalEmail === undefined ? null : { personal_email: v.personalEmail }),
                ...(v.personalPhoneNumber === undefined
                    ? null
                    : { personal_phone_number: v.personalPhoneNumber }),
                ...(v.startDate === undefined ? null : { start_date: v.startDate }),
                ...(v.tenure === undefined ? null : { tenure: v.tenure }),
                ...(v.terminationDate === undefined
                    ? null
                    : { termination_date: v.terminationDate }),
                ...(v.workAnniversary === undefined
                    ? null
                    : { work_anniversary: v.workAnniversary }),
                work_email: v.workEmail,
                ...(v.workLocation === undefined ? null : { work_location: v.workLocation }),
                ...(v.workPhoneNumber === undefined
                    ? null
                    : { work_phone_number: v.workPhoneNumber }),
            };
        });
}
