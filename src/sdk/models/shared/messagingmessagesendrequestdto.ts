/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MessagingMessageSendRequestDto = {
  /**
   * Content body of the message
   */
  content?: string | null | undefined;
  /**
   * Can be a conversation ID, user ID, email or phone number.
   */
  recipient?: string | null | undefined;
  /**
   * The account_id or phone number of the message sender
   */
  sender?: string | null | undefined;
};

/** @internal */
export const MessagingMessageSendRequestDto$inboundSchema: z.ZodType<
  MessagingMessageSendRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(z.string()).optional(),
  recipient: z.nullable(z.string()).optional(),
  sender: z.nullable(z.string()).optional(),
});

/** @internal */
export type MessagingMessageSendRequestDto$Outbound = {
  content?: string | null | undefined;
  recipient?: string | null | undefined;
  sender?: string | null | undefined;
};

/** @internal */
export const MessagingMessageSendRequestDto$outboundSchema: z.ZodType<
  MessagingMessageSendRequestDto$Outbound,
  z.ZodTypeDef,
  MessagingMessageSendRequestDto
> = z.object({
  content: z.nullable(z.string()).optional(),
  recipient: z.nullable(z.string()).optional(),
  sender: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingMessageSendRequestDto$ {
  /** @deprecated use `MessagingMessageSendRequestDto$inboundSchema` instead. */
  export const inboundSchema = MessagingMessageSendRequestDto$inboundSchema;
  /** @deprecated use `MessagingMessageSendRequestDto$outboundSchema` instead. */
  export const outboundSchema = MessagingMessageSendRequestDto$outboundSchema;
  /** @deprecated use `MessagingMessageSendRequestDto$Outbound` instead. */
  export type Outbound = MessagingMessageSendRequestDto$Outbound;
}

export function messagingMessageSendRequestDtoToJSON(
  messagingMessageSendRequestDto: MessagingMessageSendRequestDto,
): string {
  return JSON.stringify(
    MessagingMessageSendRequestDto$outboundSchema.parse(
      messagingMessageSendRequestDto,
    ),
  );
}

export function messagingMessageSendRequestDtoFromJSON(
  jsonString: string,
): SafeParseResult<MessagingMessageSendRequestDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessagingMessageSendRequestDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessagingMessageSendRequestDto' from JSON`,
  );
}
