/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export enum Reference2 {
  True = "true",
  False = "false",
}

/**
 * The reference status
 */
export type Active = boolean | Reference2;

export type Reference = {
  /**
   * The reference status
   */
  active?: boolean | Reference2 | null | undefined;
  /**
   * The reference id
   */
  id?: string | null | undefined;
  /**
   * The reference name
   */
  name?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
};

/** @internal */
export const Reference2$inboundSchema: z.ZodNativeEnum<typeof Reference2> = z
  .nativeEnum(Reference2);

/** @internal */
export const Reference2$outboundSchema: z.ZodNativeEnum<typeof Reference2> =
  Reference2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Reference2$ {
  /** @deprecated use `Reference2$inboundSchema` instead. */
  export const inboundSchema = Reference2$inboundSchema;
  /** @deprecated use `Reference2$outboundSchema` instead. */
  export const outboundSchema = Reference2$outboundSchema;
}

/** @internal */
export const Active$inboundSchema: z.ZodType<Active, z.ZodTypeDef, unknown> = z
  .union([z.boolean(), Reference2$inboundSchema]);

/** @internal */
export type Active$Outbound = boolean | string;

/** @internal */
export const Active$outboundSchema: z.ZodType<
  Active$Outbound,
  z.ZodTypeDef,
  Active
> = z.union([z.boolean(), Reference2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Active$ {
  /** @deprecated use `Active$inboundSchema` instead. */
  export const inboundSchema = Active$inboundSchema;
  /** @deprecated use `Active$outboundSchema` instead. */
  export const outboundSchema = Active$outboundSchema;
  /** @deprecated use `Active$Outbound` instead. */
  export type Outbound = Active$Outbound;
}

/** @internal */
export const Reference$inboundSchema: z.ZodType<
  Reference,
  z.ZodTypeDef,
  unknown
> = z.object({
  active: z.nullable(z.union([z.boolean(), Reference2$inboundSchema]))
    .optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "remote_id": "remoteId",
  });
});

/** @internal */
export type Reference$Outbound = {
  active?: boolean | string | null | undefined;
  id?: string | null | undefined;
  name?: string | null | undefined;
  remote_id?: string | null | undefined;
};

/** @internal */
export const Reference$outboundSchema: z.ZodType<
  Reference$Outbound,
  z.ZodTypeDef,
  Reference
> = z.object({
  active: z.nullable(z.union([z.boolean(), Reference2$outboundSchema]))
    .optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Reference$ {
  /** @deprecated use `Reference$inboundSchema` instead. */
  export const inboundSchema = Reference$inboundSchema;
  /** @deprecated use `Reference$outboundSchema` instead. */
  export const outboundSchema = Reference$outboundSchema;
  /** @deprecated use `Reference$Outbound` instead. */
  export type Outbound = Reference$Outbound;
}
