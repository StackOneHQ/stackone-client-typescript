/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Employee,
  Employee$inboundSchema,
  Employee$Outbound,
  Employee$outboundSchema,
} from "./employee.js";
import {
  RawResponse,
  RawResponse$inboundSchema,
  RawResponse$Outbound,
  RawResponse$outboundSchema,
} from "./rawresponse.js";

export type EmployeeResult = {
  data: Employee;
  raw?: Array<RawResponse> | null | undefined;
};

/** @internal */
export const EmployeeResult$inboundSchema: z.ZodType<
  EmployeeResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: Employee$inboundSchema,
  raw: z.nullable(z.array(RawResponse$inboundSchema)).optional(),
});

/** @internal */
export type EmployeeResult$Outbound = {
  data: Employee$Outbound;
  raw?: Array<RawResponse$Outbound> | null | undefined;
};

/** @internal */
export const EmployeeResult$outboundSchema: z.ZodType<
  EmployeeResult$Outbound,
  z.ZodTypeDef,
  EmployeeResult
> = z.object({
  data: Employee$outboundSchema,
  raw: z.nullable(z.array(RawResponse$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeResult$ {
  /** @deprecated use `EmployeeResult$inboundSchema` instead. */
  export const inboundSchema = EmployeeResult$inboundSchema;
  /** @deprecated use `EmployeeResult$outboundSchema` instead. */
  export const outboundSchema = EmployeeResult$outboundSchema;
  /** @deprecated use `EmployeeResult$Outbound` instead. */
  export type Outbound = EmployeeResult$Outbound;
}

export function employeeResultToJSON(employeeResult: EmployeeResult): string {
  return JSON.stringify(EmployeeResult$outboundSchema.parse(employeeResult));
}

export function employeeResultFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeResult' from JSON`,
  );
}
