/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export enum MessagingCreateConversationRequestDto2 {
  True = "true",
  False = "false",
}

/**
 * Whether the conversation is private
 */
export type MessagingCreateConversationRequestDtoPrivate =
  | boolean
  | MessagingCreateConversationRequestDto2;

export type MessagingCreateConversationRequestDto = {
  /**
   * Name or title of the conversation
   */
  name?: string | null | undefined;
  /**
   * List of participant user IDs in the conversation
   */
  participants?: Array<string> | null | undefined;
  /**
   * Whether the conversation is private
   */
  private?: boolean | MessagingCreateConversationRequestDto2 | null | undefined;
};

/** @internal */
export const MessagingCreateConversationRequestDto2$inboundSchema:
  z.ZodNativeEnum<typeof MessagingCreateConversationRequestDto2> = z.nativeEnum(
    MessagingCreateConversationRequestDto2,
  );

/** @internal */
export const MessagingCreateConversationRequestDto2$outboundSchema:
  z.ZodNativeEnum<typeof MessagingCreateConversationRequestDto2> =
    MessagingCreateConversationRequestDto2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingCreateConversationRequestDto2$ {
  /** @deprecated use `MessagingCreateConversationRequestDto2$inboundSchema` instead. */
  export const inboundSchema =
    MessagingCreateConversationRequestDto2$inboundSchema;
  /** @deprecated use `MessagingCreateConversationRequestDto2$outboundSchema` instead. */
  export const outboundSchema =
    MessagingCreateConversationRequestDto2$outboundSchema;
}

/** @internal */
export const MessagingCreateConversationRequestDtoPrivate$inboundSchema:
  z.ZodType<
    MessagingCreateConversationRequestDtoPrivate,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.boolean(),
    MessagingCreateConversationRequestDto2$inboundSchema,
  ]);

/** @internal */
export type MessagingCreateConversationRequestDtoPrivate$Outbound =
  | boolean
  | string;

/** @internal */
export const MessagingCreateConversationRequestDtoPrivate$outboundSchema:
  z.ZodType<
    MessagingCreateConversationRequestDtoPrivate$Outbound,
    z.ZodTypeDef,
    MessagingCreateConversationRequestDtoPrivate
  > = z.union([
    z.boolean(),
    MessagingCreateConversationRequestDto2$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingCreateConversationRequestDtoPrivate$ {
  /** @deprecated use `MessagingCreateConversationRequestDtoPrivate$inboundSchema` instead. */
  export const inboundSchema =
    MessagingCreateConversationRequestDtoPrivate$inboundSchema;
  /** @deprecated use `MessagingCreateConversationRequestDtoPrivate$outboundSchema` instead. */
  export const outboundSchema =
    MessagingCreateConversationRequestDtoPrivate$outboundSchema;
  /** @deprecated use `MessagingCreateConversationRequestDtoPrivate$Outbound` instead. */
  export type Outbound = MessagingCreateConversationRequestDtoPrivate$Outbound;
}

export function messagingCreateConversationRequestDtoPrivateToJSON(
  messagingCreateConversationRequestDtoPrivate:
    MessagingCreateConversationRequestDtoPrivate,
): string {
  return JSON.stringify(
    MessagingCreateConversationRequestDtoPrivate$outboundSchema.parse(
      messagingCreateConversationRequestDtoPrivate,
    ),
  );
}

export function messagingCreateConversationRequestDtoPrivateFromJSON(
  jsonString: string,
): SafeParseResult<
  MessagingCreateConversationRequestDtoPrivate,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MessagingCreateConversationRequestDtoPrivate$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MessagingCreateConversationRequestDtoPrivate' from JSON`,
  );
}

/** @internal */
export const MessagingCreateConversationRequestDto$inboundSchema: z.ZodType<
  MessagingCreateConversationRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  participants: z.nullable(z.array(z.string())).optional(),
  private: z.nullable(
    z.union([
      z.boolean(),
      MessagingCreateConversationRequestDto2$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type MessagingCreateConversationRequestDto$Outbound = {
  name?: string | null | undefined;
  participants?: Array<string> | null | undefined;
  private?: boolean | string | null | undefined;
};

/** @internal */
export const MessagingCreateConversationRequestDto$outboundSchema: z.ZodType<
  MessagingCreateConversationRequestDto$Outbound,
  z.ZodTypeDef,
  MessagingCreateConversationRequestDto
> = z.object({
  name: z.nullable(z.string()).optional(),
  participants: z.nullable(z.array(z.string())).optional(),
  private: z.nullable(
    z.union([
      z.boolean(),
      MessagingCreateConversationRequestDto2$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingCreateConversationRequestDto$ {
  /** @deprecated use `MessagingCreateConversationRequestDto$inboundSchema` instead. */
  export const inboundSchema =
    MessagingCreateConversationRequestDto$inboundSchema;
  /** @deprecated use `MessagingCreateConversationRequestDto$outboundSchema` instead. */
  export const outboundSchema =
    MessagingCreateConversationRequestDto$outboundSchema;
  /** @deprecated use `MessagingCreateConversationRequestDto$Outbound` instead. */
  export type Outbound = MessagingCreateConversationRequestDto$Outbound;
}

export function messagingCreateConversationRequestDtoToJSON(
  messagingCreateConversationRequestDto: MessagingCreateConversationRequestDto,
): string {
  return JSON.stringify(
    MessagingCreateConversationRequestDto$outboundSchema.parse(
      messagingCreateConversationRequestDto,
    ),
  );
}

export function messagingCreateConversationRequestDtoFromJSON(
  jsonString: string,
): SafeParseResult<MessagingCreateConversationRequestDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MessagingCreateConversationRequestDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessagingCreateConversationRequestDto' from JSON`,
  );
}
