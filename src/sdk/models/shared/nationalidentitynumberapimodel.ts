/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NationalIdentityNumberApiModel4 = {};

export type NationalIdentityNumberApiModelSourceValue =
  | string
  | number
  | boolean
  | NationalIdentityNumberApiModel4
  | Array<any>;

/**
 * The ISO3166-1 Alpha2 Code of the Country
 */
export enum NationalIdentityNumberApiModelValue {
  Af = "AF",
  Al = "AL",
  Dz = "DZ",
  As = "AS",
  Ad = "AD",
  Ao = "AO",
  Ai = "AI",
  Aq = "AQ",
  Ag = "AG",
  Ar = "AR",
  Am = "AM",
  Aw = "AW",
  Au = "AU",
  At = "AT",
  Az = "AZ",
  Bs = "BS",
  Bh = "BH",
  Bd = "BD",
  Bb = "BB",
  By = "BY",
  Be = "BE",
  Bz = "BZ",
  Bj = "BJ",
  Bm = "BM",
  Bt = "BT",
  Bo = "BO",
  Bq = "BQ",
  Ba = "BA",
  Bw = "BW",
  Bv = "BV",
  Br = "BR",
  Io = "IO",
  Bn = "BN",
  Bg = "BG",
  Bf = "BF",
  Bi = "BI",
  Kh = "KH",
  Cm = "CM",
  Ca = "CA",
  Cv = "CV",
  Ky = "KY",
  Cf = "CF",
  Td = "TD",
  Cl = "CL",
  Cn = "CN",
  Cx = "CX",
  Cc = "CC",
  Co = "CO",
  Km = "KM",
  Cg = "CG",
  Cd = "CD",
  Ck = "CK",
  Cr = "CR",
  Hr = "HR",
  Cu = "CU",
  Cw = "CW",
  Cy = "CY",
  Cz = "CZ",
  Ci = "CI",
  Dk = "DK",
  Dj = "DJ",
  Dm = "DM",
  Do = "DO",
  Ec = "EC",
  Eg = "EG",
  Sv = "SV",
  Gq = "GQ",
  Er = "ER",
  Ee = "EE",
  Et = "ET",
  Fk = "FK",
  Fo = "FO",
  Fj = "FJ",
  Fi = "FI",
  Fr = "FR",
  Gf = "GF",
  Pf = "PF",
  Tf = "TF",
  Ga = "GA",
  Gm = "GM",
  Ge = "GE",
  De = "DE",
  Gh = "GH",
  Gi = "GI",
  Gr = "GR",
  Gl = "GL",
  Gd = "GD",
  Gp = "GP",
  Gu = "GU",
  Gt = "GT",
  Gg = "GG",
  Gn = "GN",
  Gw = "GW",
  Gy = "GY",
  Ht = "HT",
  Hm = "HM",
  Va = "VA",
  Hn = "HN",
  Hk = "HK",
  Hu = "HU",
  Is = "IS",
  In = "IN",
  Id = "ID",
  Ir = "IR",
  Iq = "IQ",
  Ie = "IE",
  Im = "IM",
  Il = "IL",
  It = "IT",
  Jm = "JM",
  Jp = "JP",
  Je = "JE",
  Jo = "JO",
  Kz = "KZ",
  Ke = "KE",
  Ki = "KI",
  Kp = "KP",
  Kr = "KR",
  Kw = "KW",
  Kg = "KG",
  La = "LA",
  Lv = "LV",
  Lb = "LB",
  Ls = "LS",
  Lr = "LR",
  Ly = "LY",
  Li = "LI",
  Lt = "LT",
  Lu = "LU",
  Mo = "MO",
  Mk = "MK",
  Mg = "MG",
  Mw = "MW",
  My = "MY",
  Mv = "MV",
  Ml = "ML",
  Mt = "MT",
  Mh = "MH",
  Mq = "MQ",
  Mr = "MR",
  Mu = "MU",
  Yt = "YT",
  Mx = "MX",
  Fm = "FM",
  Md = "MD",
  Mc = "MC",
  Mn = "MN",
  Me = "ME",
  Ms = "MS",
  Ma = "MA",
  Mz = "MZ",
  Mm = "MM",
  Na = "NA",
  Nr = "NR",
  Np = "NP",
  Nl = "NL",
  Nc = "NC",
  Nz = "NZ",
  Ni = "NI",
  Ne = "NE",
  Ng = "NG",
  Nu = "NU",
  Nf = "NF",
  Mp = "MP",
  No = "NO",
  Om = "OM",
  Pk = "PK",
  Pw = "PW",
  Ps = "PS",
  Pa = "PA",
  Pg = "PG",
  Py = "PY",
  Pe = "PE",
  Ph = "PH",
  Pn = "PN",
  Pl = "PL",
  Pt = "PT",
  Pr = "PR",
  Qa = "QA",
  Ro = "RO",
  Ru = "RU",
  Rw = "RW",
  Re = "RE",
  Bl = "BL",
  Sh = "SH",
  Kn = "KN",
  Lc = "LC",
  Mf = "MF",
  Pm = "PM",
  Vc = "VC",
  Ws = "WS",
  Sm = "SM",
  St = "ST",
  Sa = "SA",
  Sn = "SN",
  Rs = "RS",
  Sc = "SC",
  Sl = "SL",
  Sg = "SG",
  Sx = "SX",
  Sk = "SK",
  Si = "SI",
  Sb = "SB",
  So = "SO",
  Za = "ZA",
  Gs = "GS",
  Ss = "SS",
  Es = "ES",
  Lk = "LK",
  Sd = "SD",
  Sr = "SR",
  Sj = "SJ",
  Sz = "SZ",
  Se = "SE",
  Ch = "CH",
  Sy = "SY",
  Tw = "TW",
  Tj = "TJ",
  Tz = "TZ",
  Th = "TH",
  Tl = "TL",
  Tg = "TG",
  Tk = "TK",
  To = "TO",
  Tt = "TT",
  Tn = "TN",
  Tr = "TR",
  Tm = "TM",
  Tc = "TC",
  Tv = "TV",
  Ug = "UG",
  Ua = "UA",
  Ae = "AE",
  Gb = "GB",
  Us = "US",
  Um = "UM",
  Uy = "UY",
  Uz = "UZ",
  Vu = "VU",
  Ve = "VE",
  Vn = "VN",
  Vg = "VG",
  Vi = "VI",
  Wf = "WF",
  Eh = "EH",
  Ye = "YE",
  Zm = "ZM",
  Zw = "ZW",
  UnmappedValue = "unmapped_value",
}
/**
 * The ISO3166-1 Alpha2 Code of the Country
 */
export type NationalIdentityNumberApiModelValueOpen = OpenEnum<
  typeof NationalIdentityNumberApiModelValue
>;

/**
 * The country code
 */
export type NationalIdentityNumberApiModelCountry = {
  sourceValue?:
    | string
    | number
    | boolean
    | NationalIdentityNumberApiModel4
    | Array<any>
    | null
    | undefined;
  /**
   * The ISO3166-1 Alpha2 Code of the Country
   */
  value?: NationalIdentityNumberApiModelValueOpen | null | undefined;
};

export type NationalIdentityNumberApiModelSchemas4 = {};

export type NationalIdentityNumberApiModelSchemasSourceValue =
  | string
  | number
  | boolean
  | NationalIdentityNumberApiModelSchemas4
  | Array<any>;

/**
 * The type of the national identity number
 */
export enum NationalIdentityNumberApiModelSchemasValue {
  Ssn = "ssn",
  Nin = "nin",
  Sin = "sin",
  Nid = "nid",
  Pin = "pin",
  Pn = "pn",
  Umcn = "umcn",
  Pic = "pic",
  Ric = "ric",
  Idnum = "idnum",
  Cid = "cid",
  Nidnr = "nidnr",
  Pan = "pan",
  Aadhaar = "aadhaar",
  Epic = "epic",
  Ptn = "ptn",
  Itin = "itin",
  Tin = "tin",
  Uprc = "uprc",
  Pcode = "pcode",
  Ssi = "ssi",
  Cedula = "cedula",
  Passport = "passport",
  Voterid = "voterid",
  Ntin = "ntin",
  Bn = "bn",
  Fnr = "fnr",
  Mva = "mva",
  CivilId = "civil_id",
  Cnic = "cnic",
  Nric = "nric",
  Fin = "fin",
  Uen = "uen",
  Registrationnumber = "registrationnumber",
  Nic = "nic",
  Personnummer = "personnummer",
  Ahv = "ahv",
  Id = "id",
  Eid = "eid",
  Va = "va",
  Pid = "pid",
  Nrt = "nrt",
  Nipt = "nipt",
  Cbu = "cbu",
  Cuit = "cuit",
  Dni = "dni",
  Businessid = "businessid",
  Vnr = "vnr",
  Abn = "abn",
  Acn = "acn",
  Tfn = "tfn",
  Jmbg = "jmbg",
  Bis = "bis",
  Insz = "insz",
  Nn = "nn",
  Egn = "egn",
  Pnf = "pnf",
  Vat = "vat",
  Cnpj = "cnpj",
  Unp = "unp",
  Gst = "gst",
  Pst = "pst",
  Qst = "qst",
  Ni = "ni",
  Dic = "dic",
  Rc = "rc",
  Uid = "uid",
  Rut = "rut",
  Uscc = "uscc",
  Cpf = "cpf",
  Cpj = "cpj",
  Cr = "cr",
  Stnr = "stnr",
  Svnr = "svnr",
  Ncf = "ncf",
  Rnc = "rnc",
  Nif = "nif",
  Ci = "ci",
  Ik = "ik",
  Kmkr = "kmkr",
  Registrikood = "registrikood",
  Tn = "tn",
  Ruc = "ruc",
  Nit = "nit",
  Alv = "alv",
  Hetu = "hetu",
  Ytunnus = "ytunnus",
  Vn = "vn",
  Utr = "utr",
  Nifp = "nifp",
  Amka = "amka",
  Cui = "cui",
  Nir = "nir",
  Siren = "siren",
  Siret = "siret",
  Tva = "tva",
  Oib = "oib",
  Hkid = "hkid",
  Anum = "anum",
  Kennitala = "kennitala",
  Vsk = "vsk",
  Npwp = "npwp",
  Pps = "pps",
  Gstin = "gstin",
  Idnr = "idnr",
  Hr = "hr",
  Aic = "aic",
  Codicefiscale = "codicefiscale",
  Iva = "iva",
  Peid = "peid",
  Asmens = "asmens",
  Pvm = "pvm",
  Ctps = "ctps",
  Vrn = "vrn",
  Vtk = "vtk",
  Int = "int",
  Tk = "tk",
  Pas = "pas",
  Rne = "rne",
  Rg = "rg",
  Nci = "nci",
  Crnm = "crnm",
  Pis = "pis",
  Insee = "insee",
  Tax = "tax",
  Mpf = "mpf",
  Epfo = "epfo",
  Esi = "esi",
  Pran = "pran",
  Uan = "uan",
  Idk = "idk",
  Bsn = "bsn",
  Mid = "mid",
  Sss = "sss",
  Nie = "nie",
  Nss = "nss",
  Arc = "arc",
  Curp = "curp",
  Imss = "imss",
  Rfc = "rfc",
  Ein = "ein",
  Other = "other",
  Unknown = "unknown",
  UnmappedValue = "unmapped_value",
}
/**
 * The type of the national identity number
 */
export type NationalIdentityNumberApiModelSchemasValueOpen = OpenEnum<
  typeof NationalIdentityNumberApiModelSchemasValue
>;

export type NationalIdentityNumberApiModelType = {
  sourceValue?:
    | string
    | number
    | boolean
    | NationalIdentityNumberApiModelSchemas4
    | Array<any>
    | null
    | undefined;
  /**
   * The type of the national identity number
   */
  value?: NationalIdentityNumberApiModelSchemasValueOpen | null | undefined;
};

export type NationalIdentityNumberApiModel = {
  /**
   * The country code
   */
  country?: NationalIdentityNumberApiModelCountry | null | undefined;
  type?: NationalIdentityNumberApiModelType | null | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const NationalIdentityNumberApiModel4$inboundSchema: z.ZodType<
  NationalIdentityNumberApiModel4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type NationalIdentityNumberApiModel4$Outbound = {};

/** @internal */
export const NationalIdentityNumberApiModel4$outboundSchema: z.ZodType<
  NationalIdentityNumberApiModel4$Outbound,
  z.ZodTypeDef,
  NationalIdentityNumberApiModel4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NationalIdentityNumberApiModel4$ {
  /** @deprecated use `NationalIdentityNumberApiModel4$inboundSchema` instead. */
  export const inboundSchema = NationalIdentityNumberApiModel4$inboundSchema;
  /** @deprecated use `NationalIdentityNumberApiModel4$outboundSchema` instead. */
  export const outboundSchema = NationalIdentityNumberApiModel4$outboundSchema;
  /** @deprecated use `NationalIdentityNumberApiModel4$Outbound` instead. */
  export type Outbound = NationalIdentityNumberApiModel4$Outbound;
}

export function nationalIdentityNumberApiModel4ToJSON(
  nationalIdentityNumberApiModel4: NationalIdentityNumberApiModel4,
): string {
  return JSON.stringify(
    NationalIdentityNumberApiModel4$outboundSchema.parse(
      nationalIdentityNumberApiModel4,
    ),
  );
}

export function nationalIdentityNumberApiModel4FromJSON(
  jsonString: string,
): SafeParseResult<NationalIdentityNumberApiModel4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NationalIdentityNumberApiModel4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NationalIdentityNumberApiModel4' from JSON`,
  );
}

/** @internal */
export const NationalIdentityNumberApiModelSourceValue$inboundSchema: z.ZodType<
  NationalIdentityNumberApiModelSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => NationalIdentityNumberApiModel4$inboundSchema),
  z.array(z.any()),
]);

/** @internal */
export type NationalIdentityNumberApiModelSourceValue$Outbound =
  | string
  | number
  | boolean
  | NationalIdentityNumberApiModel4$Outbound
  | Array<any>;

/** @internal */
export const NationalIdentityNumberApiModelSourceValue$outboundSchema:
  z.ZodType<
    NationalIdentityNumberApiModelSourceValue$Outbound,
    z.ZodTypeDef,
    NationalIdentityNumberApiModelSourceValue
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.lazy(() => NationalIdentityNumberApiModel4$outboundSchema),
    z.array(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NationalIdentityNumberApiModelSourceValue$ {
  /** @deprecated use `NationalIdentityNumberApiModelSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    NationalIdentityNumberApiModelSourceValue$inboundSchema;
  /** @deprecated use `NationalIdentityNumberApiModelSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    NationalIdentityNumberApiModelSourceValue$outboundSchema;
  /** @deprecated use `NationalIdentityNumberApiModelSourceValue$Outbound` instead. */
  export type Outbound = NationalIdentityNumberApiModelSourceValue$Outbound;
}

export function nationalIdentityNumberApiModelSourceValueToJSON(
  nationalIdentityNumberApiModelSourceValue:
    NationalIdentityNumberApiModelSourceValue,
): string {
  return JSON.stringify(
    NationalIdentityNumberApiModelSourceValue$outboundSchema.parse(
      nationalIdentityNumberApiModelSourceValue,
    ),
  );
}

export function nationalIdentityNumberApiModelSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  NationalIdentityNumberApiModelSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NationalIdentityNumberApiModelSourceValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'NationalIdentityNumberApiModelSourceValue' from JSON`,
  );
}

/** @internal */
export const NationalIdentityNumberApiModelValue$inboundSchema: z.ZodType<
  NationalIdentityNumberApiModelValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(NationalIdentityNumberApiModelValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const NationalIdentityNumberApiModelValue$outboundSchema: z.ZodType<
  NationalIdentityNumberApiModelValueOpen,
  z.ZodTypeDef,
  NationalIdentityNumberApiModelValueOpen
> = z.union([
  z.nativeEnum(NationalIdentityNumberApiModelValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NationalIdentityNumberApiModelValue$ {
  /** @deprecated use `NationalIdentityNumberApiModelValue$inboundSchema` instead. */
  export const inboundSchema =
    NationalIdentityNumberApiModelValue$inboundSchema;
  /** @deprecated use `NationalIdentityNumberApiModelValue$outboundSchema` instead. */
  export const outboundSchema =
    NationalIdentityNumberApiModelValue$outboundSchema;
}

/** @internal */
export const NationalIdentityNumberApiModelCountry$inboundSchema: z.ZodType<
  NationalIdentityNumberApiModelCountry,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => NationalIdentityNumberApiModel4$inboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(NationalIdentityNumberApiModelValue$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type NationalIdentityNumberApiModelCountry$Outbound = {
  source_value?:
    | string
    | number
    | boolean
    | NationalIdentityNumberApiModel4$Outbound
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const NationalIdentityNumberApiModelCountry$outboundSchema: z.ZodType<
  NationalIdentityNumberApiModelCountry$Outbound,
  z.ZodTypeDef,
  NationalIdentityNumberApiModelCountry
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => NationalIdentityNumberApiModel4$outboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(NationalIdentityNumberApiModelValue$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NationalIdentityNumberApiModelCountry$ {
  /** @deprecated use `NationalIdentityNumberApiModelCountry$inboundSchema` instead. */
  export const inboundSchema =
    NationalIdentityNumberApiModelCountry$inboundSchema;
  /** @deprecated use `NationalIdentityNumberApiModelCountry$outboundSchema` instead. */
  export const outboundSchema =
    NationalIdentityNumberApiModelCountry$outboundSchema;
  /** @deprecated use `NationalIdentityNumberApiModelCountry$Outbound` instead. */
  export type Outbound = NationalIdentityNumberApiModelCountry$Outbound;
}

export function nationalIdentityNumberApiModelCountryToJSON(
  nationalIdentityNumberApiModelCountry: NationalIdentityNumberApiModelCountry,
): string {
  return JSON.stringify(
    NationalIdentityNumberApiModelCountry$outboundSchema.parse(
      nationalIdentityNumberApiModelCountry,
    ),
  );
}

export function nationalIdentityNumberApiModelCountryFromJSON(
  jsonString: string,
): SafeParseResult<NationalIdentityNumberApiModelCountry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      NationalIdentityNumberApiModelCountry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NationalIdentityNumberApiModelCountry' from JSON`,
  );
}

/** @internal */
export const NationalIdentityNumberApiModelSchemas4$inboundSchema: z.ZodType<
  NationalIdentityNumberApiModelSchemas4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type NationalIdentityNumberApiModelSchemas4$Outbound = {};

/** @internal */
export const NationalIdentityNumberApiModelSchemas4$outboundSchema: z.ZodType<
  NationalIdentityNumberApiModelSchemas4$Outbound,
  z.ZodTypeDef,
  NationalIdentityNumberApiModelSchemas4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NationalIdentityNumberApiModelSchemas4$ {
  /** @deprecated use `NationalIdentityNumberApiModelSchemas4$inboundSchema` instead. */
  export const inboundSchema =
    NationalIdentityNumberApiModelSchemas4$inboundSchema;
  /** @deprecated use `NationalIdentityNumberApiModelSchemas4$outboundSchema` instead. */
  export const outboundSchema =
    NationalIdentityNumberApiModelSchemas4$outboundSchema;
  /** @deprecated use `NationalIdentityNumberApiModelSchemas4$Outbound` instead. */
  export type Outbound = NationalIdentityNumberApiModelSchemas4$Outbound;
}

export function nationalIdentityNumberApiModelSchemas4ToJSON(
  nationalIdentityNumberApiModelSchemas4:
    NationalIdentityNumberApiModelSchemas4,
): string {
  return JSON.stringify(
    NationalIdentityNumberApiModelSchemas4$outboundSchema.parse(
      nationalIdentityNumberApiModelSchemas4,
    ),
  );
}

export function nationalIdentityNumberApiModelSchemas4FromJSON(
  jsonString: string,
): SafeParseResult<NationalIdentityNumberApiModelSchemas4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      NationalIdentityNumberApiModelSchemas4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NationalIdentityNumberApiModelSchemas4' from JSON`,
  );
}

/** @internal */
export const NationalIdentityNumberApiModelSchemasSourceValue$inboundSchema:
  z.ZodType<
    NationalIdentityNumberApiModelSchemasSourceValue,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.lazy(() => NationalIdentityNumberApiModelSchemas4$inboundSchema),
    z.array(z.any()),
  ]);

/** @internal */
export type NationalIdentityNumberApiModelSchemasSourceValue$Outbound =
  | string
  | number
  | boolean
  | NationalIdentityNumberApiModelSchemas4$Outbound
  | Array<any>;

/** @internal */
export const NationalIdentityNumberApiModelSchemasSourceValue$outboundSchema:
  z.ZodType<
    NationalIdentityNumberApiModelSchemasSourceValue$Outbound,
    z.ZodTypeDef,
    NationalIdentityNumberApiModelSchemasSourceValue
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.lazy(() => NationalIdentityNumberApiModelSchemas4$outboundSchema),
    z.array(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NationalIdentityNumberApiModelSchemasSourceValue$ {
  /** @deprecated use `NationalIdentityNumberApiModelSchemasSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    NationalIdentityNumberApiModelSchemasSourceValue$inboundSchema;
  /** @deprecated use `NationalIdentityNumberApiModelSchemasSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    NationalIdentityNumberApiModelSchemasSourceValue$outboundSchema;
  /** @deprecated use `NationalIdentityNumberApiModelSchemasSourceValue$Outbound` instead. */
  export type Outbound =
    NationalIdentityNumberApiModelSchemasSourceValue$Outbound;
}

export function nationalIdentityNumberApiModelSchemasSourceValueToJSON(
  nationalIdentityNumberApiModelSchemasSourceValue:
    NationalIdentityNumberApiModelSchemasSourceValue,
): string {
  return JSON.stringify(
    NationalIdentityNumberApiModelSchemasSourceValue$outboundSchema.parse(
      nationalIdentityNumberApiModelSchemasSourceValue,
    ),
  );
}

export function nationalIdentityNumberApiModelSchemasSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  NationalIdentityNumberApiModelSchemasSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NationalIdentityNumberApiModelSchemasSourceValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'NationalIdentityNumberApiModelSchemasSourceValue' from JSON`,
  );
}

/** @internal */
export const NationalIdentityNumberApiModelSchemasValue$inboundSchema:
  z.ZodType<
    NationalIdentityNumberApiModelSchemasValueOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(NationalIdentityNumberApiModelSchemasValue),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const NationalIdentityNumberApiModelSchemasValue$outboundSchema:
  z.ZodType<
    NationalIdentityNumberApiModelSchemasValueOpen,
    z.ZodTypeDef,
    NationalIdentityNumberApiModelSchemasValueOpen
  > = z.union([
    z.nativeEnum(NationalIdentityNumberApiModelSchemasValue),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NationalIdentityNumberApiModelSchemasValue$ {
  /** @deprecated use `NationalIdentityNumberApiModelSchemasValue$inboundSchema` instead. */
  export const inboundSchema =
    NationalIdentityNumberApiModelSchemasValue$inboundSchema;
  /** @deprecated use `NationalIdentityNumberApiModelSchemasValue$outboundSchema` instead. */
  export const outboundSchema =
    NationalIdentityNumberApiModelSchemasValue$outboundSchema;
}

/** @internal */
export const NationalIdentityNumberApiModelType$inboundSchema: z.ZodType<
  NationalIdentityNumberApiModelType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => NationalIdentityNumberApiModelSchemas4$inboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(NationalIdentityNumberApiModelSchemasValue$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type NationalIdentityNumberApiModelType$Outbound = {
  source_value?:
    | string
    | number
    | boolean
    | NationalIdentityNumberApiModelSchemas4$Outbound
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const NationalIdentityNumberApiModelType$outboundSchema: z.ZodType<
  NationalIdentityNumberApiModelType$Outbound,
  z.ZodTypeDef,
  NationalIdentityNumberApiModelType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => NationalIdentityNumberApiModelSchemas4$outboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(NationalIdentityNumberApiModelSchemasValue$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NationalIdentityNumberApiModelType$ {
  /** @deprecated use `NationalIdentityNumberApiModelType$inboundSchema` instead. */
  export const inboundSchema = NationalIdentityNumberApiModelType$inboundSchema;
  /** @deprecated use `NationalIdentityNumberApiModelType$outboundSchema` instead. */
  export const outboundSchema =
    NationalIdentityNumberApiModelType$outboundSchema;
  /** @deprecated use `NationalIdentityNumberApiModelType$Outbound` instead. */
  export type Outbound = NationalIdentityNumberApiModelType$Outbound;
}

export function nationalIdentityNumberApiModelTypeToJSON(
  nationalIdentityNumberApiModelType: NationalIdentityNumberApiModelType,
): string {
  return JSON.stringify(
    NationalIdentityNumberApiModelType$outboundSchema.parse(
      nationalIdentityNumberApiModelType,
    ),
  );
}

export function nationalIdentityNumberApiModelTypeFromJSON(
  jsonString: string,
): SafeParseResult<NationalIdentityNumberApiModelType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      NationalIdentityNumberApiModelType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NationalIdentityNumberApiModelType' from JSON`,
  );
}

/** @internal */
export const NationalIdentityNumberApiModel$inboundSchema: z.ZodType<
  NationalIdentityNumberApiModel,
  z.ZodTypeDef,
  unknown
> = z.object({
  country: z.nullable(
    z.lazy(() => NationalIdentityNumberApiModelCountry$inboundSchema),
  ).optional(),
  type: z.nullable(
    z.lazy(() => NationalIdentityNumberApiModelType$inboundSchema),
  ).optional(),
  value: z.nullable(z.string()).optional(),
});

/** @internal */
export type NationalIdentityNumberApiModel$Outbound = {
  country?: NationalIdentityNumberApiModelCountry$Outbound | null | undefined;
  type?: NationalIdentityNumberApiModelType$Outbound | null | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const NationalIdentityNumberApiModel$outboundSchema: z.ZodType<
  NationalIdentityNumberApiModel$Outbound,
  z.ZodTypeDef,
  NationalIdentityNumberApiModel
> = z.object({
  country: z.nullable(
    z.lazy(() => NationalIdentityNumberApiModelCountry$outboundSchema),
  ).optional(),
  type: z.nullable(
    z.lazy(() => NationalIdentityNumberApiModelType$outboundSchema),
  ).optional(),
  value: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NationalIdentityNumberApiModel$ {
  /** @deprecated use `NationalIdentityNumberApiModel$inboundSchema` instead. */
  export const inboundSchema = NationalIdentityNumberApiModel$inboundSchema;
  /** @deprecated use `NationalIdentityNumberApiModel$outboundSchema` instead. */
  export const outboundSchema = NationalIdentityNumberApiModel$outboundSchema;
  /** @deprecated use `NationalIdentityNumberApiModel$Outbound` instead. */
  export type Outbound = NationalIdentityNumberApiModel$Outbound;
}

export function nationalIdentityNumberApiModelToJSON(
  nationalIdentityNumberApiModel: NationalIdentityNumberApiModel,
): string {
  return JSON.stringify(
    NationalIdentityNumberApiModel$outboundSchema.parse(
      nationalIdentityNumberApiModel,
    ),
  );
}

export function nationalIdentityNumberApiModelFromJSON(
  jsonString: string,
): SafeParseResult<NationalIdentityNumberApiModel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NationalIdentityNumberApiModel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NationalIdentityNumberApiModel' from JSON`,
  );
}
