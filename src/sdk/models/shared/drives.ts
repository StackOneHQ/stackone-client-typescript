/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Drives = {
  /**
   * The created date of the drive
   */
  createdAt?: Date | null | undefined;
  /**
   * The description associated with this drive
   */
  description?: string | null | undefined;
  /**
   * The ID associated with this drive
   */
  id?: string | null | undefined;
  /**
   * The name associated with this drive
   */
  name?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * The last updated date of the drive
   */
  updatedAt?: Date | null | undefined;
  /**
   * The url of the drive
   */
  url?: string | null | undefined;
};

/** @internal */
export const Drives$inboundSchema: z.ZodType<Drives, z.ZodTypeDef, unknown> = z
  .object({
    created_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    description: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    remote_id: z.nullable(z.string()).optional(),
    updated_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    url: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "remote_id": "remoteId",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Drives$Outbound = {
  created_at?: string | null | undefined;
  description?: string | null | undefined;
  id?: string | null | undefined;
  name?: string | null | undefined;
  remote_id?: string | null | undefined;
  updated_at?: string | null | undefined;
  url?: string | null | undefined;
};

/** @internal */
export const Drives$outboundSchema: z.ZodType<
  Drives$Outbound,
  z.ZodTypeDef,
  Drives
> = z.object({
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  description: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    remoteId: "remote_id",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Drives$ {
  /** @deprecated use `Drives$inboundSchema` instead. */
  export const inboundSchema = Drives$inboundSchema;
  /** @deprecated use `Drives$outboundSchema` instead. */
  export const outboundSchema = Drives$outboundSchema;
  /** @deprecated use `Drives$Outbound` instead. */
  export type Outbound = Drives$Outbound;
}

export function drivesToJSON(drives: Drives): string {
  return JSON.stringify(Drives$outboundSchema.parse(drives));
}

export function drivesFromJSON(
  jsonString: string,
): SafeParseResult<Drives, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Drives$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Drives' from JSON`,
  );
}
