/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AssessmentsAttachment4 = {};

/**
 * The source value of the content type.
 */
export type AssessmentsAttachmentSourceValue =
  | AssessmentsAttachment4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The content type of the attachment.
 */
export enum AssessmentsAttachmentValue {
  Text = "text",
  UnmappedValue = "unmapped_value",
}
/**
 * The content type of the attachment.
 */
export type AssessmentsAttachmentValueOpen = OpenEnum<
  typeof AssessmentsAttachmentValue
>;

export type AssessmentsAttachmentContentType = {
  /**
   * The source value of the content type.
   */
  sourceValue?:
    | AssessmentsAttachment4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The content type of the attachment.
   */
  value?: AssessmentsAttachmentValueOpen | null | undefined;
};

export type AssessmentsAttachment = {
  contentType?: AssessmentsAttachmentContentType | null | undefined;
  /**
   * The URL of the attachment.
   */
  url?: string | null | undefined;
};

/** @internal */
export const AssessmentsAttachment4$inboundSchema: z.ZodType<
  AssessmentsAttachment4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AssessmentsAttachment4$Outbound = {};

/** @internal */
export const AssessmentsAttachment4$outboundSchema: z.ZodType<
  AssessmentsAttachment4$Outbound,
  z.ZodTypeDef,
  AssessmentsAttachment4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentsAttachment4$ {
  /** @deprecated use `AssessmentsAttachment4$inboundSchema` instead. */
  export const inboundSchema = AssessmentsAttachment4$inboundSchema;
  /** @deprecated use `AssessmentsAttachment4$outboundSchema` instead. */
  export const outboundSchema = AssessmentsAttachment4$outboundSchema;
  /** @deprecated use `AssessmentsAttachment4$Outbound` instead. */
  export type Outbound = AssessmentsAttachment4$Outbound;
}

export function assessmentsAttachment4ToJSON(
  assessmentsAttachment4: AssessmentsAttachment4,
): string {
  return JSON.stringify(
    AssessmentsAttachment4$outboundSchema.parse(assessmentsAttachment4),
  );
}

export function assessmentsAttachment4FromJSON(
  jsonString: string,
): SafeParseResult<AssessmentsAttachment4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentsAttachment4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentsAttachment4' from JSON`,
  );
}

/** @internal */
export const AssessmentsAttachmentSourceValue$inboundSchema: z.ZodType<
  AssessmentsAttachmentSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => AssessmentsAttachment4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type AssessmentsAttachmentSourceValue$Outbound =
  | AssessmentsAttachment4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const AssessmentsAttachmentSourceValue$outboundSchema: z.ZodType<
  AssessmentsAttachmentSourceValue$Outbound,
  z.ZodTypeDef,
  AssessmentsAttachmentSourceValue
> = z.union([
  z.lazy(() => AssessmentsAttachment4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentsAttachmentSourceValue$ {
  /** @deprecated use `AssessmentsAttachmentSourceValue$inboundSchema` instead. */
  export const inboundSchema = AssessmentsAttachmentSourceValue$inboundSchema;
  /** @deprecated use `AssessmentsAttachmentSourceValue$outboundSchema` instead. */
  export const outboundSchema = AssessmentsAttachmentSourceValue$outboundSchema;
  /** @deprecated use `AssessmentsAttachmentSourceValue$Outbound` instead. */
  export type Outbound = AssessmentsAttachmentSourceValue$Outbound;
}

export function assessmentsAttachmentSourceValueToJSON(
  assessmentsAttachmentSourceValue: AssessmentsAttachmentSourceValue,
): string {
  return JSON.stringify(
    AssessmentsAttachmentSourceValue$outboundSchema.parse(
      assessmentsAttachmentSourceValue,
    ),
  );
}

export function assessmentsAttachmentSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentsAttachmentSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentsAttachmentSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentsAttachmentSourceValue' from JSON`,
  );
}

/** @internal */
export const AssessmentsAttachmentValue$inboundSchema: z.ZodType<
  AssessmentsAttachmentValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AssessmentsAttachmentValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AssessmentsAttachmentValue$outboundSchema: z.ZodType<
  AssessmentsAttachmentValueOpen,
  z.ZodTypeDef,
  AssessmentsAttachmentValueOpen
> = z.union([
  z.nativeEnum(AssessmentsAttachmentValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentsAttachmentValue$ {
  /** @deprecated use `AssessmentsAttachmentValue$inboundSchema` instead. */
  export const inboundSchema = AssessmentsAttachmentValue$inboundSchema;
  /** @deprecated use `AssessmentsAttachmentValue$outboundSchema` instead. */
  export const outboundSchema = AssessmentsAttachmentValue$outboundSchema;
}

/** @internal */
export const AssessmentsAttachmentContentType$inboundSchema: z.ZodType<
  AssessmentsAttachmentContentType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => AssessmentsAttachment4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(AssessmentsAttachmentValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type AssessmentsAttachmentContentType$Outbound = {
  source_value?:
    | AssessmentsAttachment4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const AssessmentsAttachmentContentType$outboundSchema: z.ZodType<
  AssessmentsAttachmentContentType$Outbound,
  z.ZodTypeDef,
  AssessmentsAttachmentContentType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => AssessmentsAttachment4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(AssessmentsAttachmentValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentsAttachmentContentType$ {
  /** @deprecated use `AssessmentsAttachmentContentType$inboundSchema` instead. */
  export const inboundSchema = AssessmentsAttachmentContentType$inboundSchema;
  /** @deprecated use `AssessmentsAttachmentContentType$outboundSchema` instead. */
  export const outboundSchema = AssessmentsAttachmentContentType$outboundSchema;
  /** @deprecated use `AssessmentsAttachmentContentType$Outbound` instead. */
  export type Outbound = AssessmentsAttachmentContentType$Outbound;
}

export function assessmentsAttachmentContentTypeToJSON(
  assessmentsAttachmentContentType: AssessmentsAttachmentContentType,
): string {
  return JSON.stringify(
    AssessmentsAttachmentContentType$outboundSchema.parse(
      assessmentsAttachmentContentType,
    ),
  );
}

export function assessmentsAttachmentContentTypeFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentsAttachmentContentType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentsAttachmentContentType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentsAttachmentContentType' from JSON`,
  );
}

/** @internal */
export const AssessmentsAttachment$inboundSchema: z.ZodType<
  AssessmentsAttachment,
  z.ZodTypeDef,
  unknown
> = z.object({
  content_type: z.nullable(
    z.lazy(() => AssessmentsAttachmentContentType$inboundSchema),
  ).optional(),
  url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "content_type": "contentType",
  });
});

/** @internal */
export type AssessmentsAttachment$Outbound = {
  content_type?: AssessmentsAttachmentContentType$Outbound | null | undefined;
  url?: string | null | undefined;
};

/** @internal */
export const AssessmentsAttachment$outboundSchema: z.ZodType<
  AssessmentsAttachment$Outbound,
  z.ZodTypeDef,
  AssessmentsAttachment
> = z.object({
  contentType: z.nullable(
    z.lazy(() => AssessmentsAttachmentContentType$outboundSchema),
  ).optional(),
  url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "content_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentsAttachment$ {
  /** @deprecated use `AssessmentsAttachment$inboundSchema` instead. */
  export const inboundSchema = AssessmentsAttachment$inboundSchema;
  /** @deprecated use `AssessmentsAttachment$outboundSchema` instead. */
  export const outboundSchema = AssessmentsAttachment$outboundSchema;
  /** @deprecated use `AssessmentsAttachment$Outbound` instead. */
  export type Outbound = AssessmentsAttachment$Outbound;
}

export function assessmentsAttachmentToJSON(
  assessmentsAttachment: AssessmentsAttachment,
): string {
  return JSON.stringify(
    AssessmentsAttachment$outboundSchema.parse(assessmentsAttachment),
  );
}

export function assessmentsAttachmentFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentsAttachment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentsAttachment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentsAttachment' from JSON`,
  );
}
