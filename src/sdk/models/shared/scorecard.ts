/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types/enums.js";
import {
    ScorecardSection,
    ScorecardSection$inboundSchema,
    ScorecardSection$Outbound,
    ScorecardSection$outboundSchema,
} from "./scorecardsection.js";
import * as z from "zod";

/**
 * The overall recommendation
 */
export enum OverallRecommendation {
    StrongYes = "strong_yes",
    Yes = "yes",
    No = "no",
    StrongNo = "strong_no",
    NoDecision = "no_decision",
    UnmappedValue = "unmapped_value",
}
/**
 * The overall recommendation
 */
export type OverallRecommendationOpen = OpenEnum<typeof OverallRecommendation>;

export type Scorecard = {
    /**
     * The application ID associated with the scorecard
     */
    applicationId?: string | null | undefined;
    /**
     * The author ID of the scorecard
     */
    authorId?: string | null | undefined;
    /**
     * The candidate ID associated with the scorecard
     */
    candidateId?: string | null | undefined;
    /**
     * The creation date of the scorecard
     */
    createdAt?: Date | null | undefined;
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    /**
     * The interview ID associated with the scorecard
     */
    interviewId?: string | null | undefined;
    /**
     * The label of the scorecard
     */
    label?: string | null | undefined;
    /**
     * The overall recommendation
     */
    overallRecommendation?: OverallRecommendationOpen | null | undefined;
    /**
     * Provider's unique identifier of the application
     */
    remoteApplicationId?: string | null | undefined;
    /**
     * Provider's unique identifier of the author
     */
    remoteAuthorId?: string | null | undefined;
    /**
     * Provider's unique identifier of the candidate
     */
    remoteCandidateId?: string | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    /**
     * Provider's unique identifier of the interview
     */
    remoteInterviewId?: string | null | undefined;
    /**
     * The sections in the scorecard
     */
    sections?: Array<ScorecardSection> | null | undefined;
    /**
     * The update date of the scorecard
     */
    updatedAt?: Date | null | undefined;
};

/** @internal */
export const OverallRecommendation$inboundSchema: z.ZodType<
    OverallRecommendationOpen,
    z.ZodTypeDef,
    unknown
> = z.union([z.nativeEnum(OverallRecommendation), z.string().transform(catchUnrecognizedEnum)]);

/** @internal */
export const OverallRecommendation$outboundSchema: z.ZodType<
    OverallRecommendationOpen,
    z.ZodTypeDef,
    OverallRecommendationOpen
> = z.union([
    z.nativeEnum(OverallRecommendation),
    z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OverallRecommendation$ {
    /** @deprecated use `OverallRecommendation$inboundSchema` instead. */
    export const inboundSchema = OverallRecommendation$inboundSchema;
    /** @deprecated use `OverallRecommendation$outboundSchema` instead. */
    export const outboundSchema = OverallRecommendation$outboundSchema;
}

/** @internal */
export const Scorecard$inboundSchema: z.ZodType<Scorecard, z.ZodTypeDef, unknown> = z
    .object({
        application_id: z.nullable(z.string()).optional(),
        author_id: z.nullable(z.string()).optional(),
        candidate_id: z.nullable(z.string()).optional(),
        created_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        id: z.nullable(z.string()).optional(),
        interview_id: z.nullable(z.string()).optional(),
        label: z.nullable(z.string()).optional(),
        overall_recommendation: z.nullable(OverallRecommendation$inboundSchema).optional(),
        remote_application_id: z.nullable(z.string()).optional(),
        remote_author_id: z.nullable(z.string()).optional(),
        remote_candidate_id: z.nullable(z.string()).optional(),
        remote_id: z.nullable(z.string()).optional(),
        remote_interview_id: z.nullable(z.string()).optional(),
        sections: z.nullable(z.array(ScorecardSection$inboundSchema)).optional(),
        updated_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            application_id: "applicationId",
            author_id: "authorId",
            candidate_id: "candidateId",
            created_at: "createdAt",
            interview_id: "interviewId",
            overall_recommendation: "overallRecommendation",
            remote_application_id: "remoteApplicationId",
            remote_author_id: "remoteAuthorId",
            remote_candidate_id: "remoteCandidateId",
            remote_id: "remoteId",
            remote_interview_id: "remoteInterviewId",
            updated_at: "updatedAt",
        });
    });

/** @internal */
export type Scorecard$Outbound = {
    application_id?: string | null | undefined;
    author_id?: string | null | undefined;
    candidate_id?: string | null | undefined;
    created_at?: string | null | undefined;
    id?: string | null | undefined;
    interview_id?: string | null | undefined;
    label?: string | null | undefined;
    overall_recommendation?: string | null | undefined;
    remote_application_id?: string | null | undefined;
    remote_author_id?: string | null | undefined;
    remote_candidate_id?: string | null | undefined;
    remote_id?: string | null | undefined;
    remote_interview_id?: string | null | undefined;
    sections?: Array<ScorecardSection$Outbound> | null | undefined;
    updated_at?: string | null | undefined;
};

/** @internal */
export const Scorecard$outboundSchema: z.ZodType<Scorecard$Outbound, z.ZodTypeDef, Scorecard> = z
    .object({
        applicationId: z.nullable(z.string()).optional(),
        authorId: z.nullable(z.string()).optional(),
        candidateId: z.nullable(z.string()).optional(),
        createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        id: z.nullable(z.string()).optional(),
        interviewId: z.nullable(z.string()).optional(),
        label: z.nullable(z.string()).optional(),
        overallRecommendation: z.nullable(OverallRecommendation$outboundSchema).optional(),
        remoteApplicationId: z.nullable(z.string()).optional(),
        remoteAuthorId: z.nullable(z.string()).optional(),
        remoteCandidateId: z.nullable(z.string()).optional(),
        remoteId: z.nullable(z.string()).optional(),
        remoteInterviewId: z.nullable(z.string()).optional(),
        sections: z.nullable(z.array(ScorecardSection$outboundSchema)).optional(),
        updatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            applicationId: "application_id",
            authorId: "author_id",
            candidateId: "candidate_id",
            createdAt: "created_at",
            interviewId: "interview_id",
            overallRecommendation: "overall_recommendation",
            remoteApplicationId: "remote_application_id",
            remoteAuthorId: "remote_author_id",
            remoteCandidateId: "remote_candidate_id",
            remoteId: "remote_id",
            remoteInterviewId: "remote_interview_id",
            updatedAt: "updated_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Scorecard$ {
    /** @deprecated use `Scorecard$inboundSchema` instead. */
    export const inboundSchema = Scorecard$inboundSchema;
    /** @deprecated use `Scorecard$outboundSchema` instead. */
    export const outboundSchema = Scorecard$outboundSchema;
    /** @deprecated use `Scorecard$Outbound` instead. */
    export type Outbound = Scorecard$Outbound;
}
