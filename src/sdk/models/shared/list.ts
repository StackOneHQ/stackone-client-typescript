/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * The type of the list.
 */
export enum ListValue {
    Contacts = "contacts",
    Companies = "companies",
    UnmappedValue = "unmapped_value",
}

/**
 * The list type
 */
export type ListType = {
    /**
     * The source value of the list type.
     */
    sourceValue: string;
    /**
     * The type of the list.
     */
    value: ListValue;
};

export type List = {
    /**
     * Timestamp when the list was created
     */
    createdAt?: Date | null | undefined;
    id: string;
    items?: Array<string> | null | undefined;
    name: string;
    /**
     * The list type
     */
    type?: ListType | null | undefined;
    /**
     * Timestamp when the list was last updated
     */
    updatedAt?: Date | null | undefined;
};

/** @internal */
export const ListValue$ = z.nativeEnum(ListValue);

/** @internal */
export namespace ListType$ {
    export type Inbound = {
        source_value: string;
        value: ListValue;
    };

    export const inboundSchema: z.ZodType<ListType, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z.string(),
            value: ListValue$,
        })
        .transform((v) => {
            return {
                sourceValue: v.source_value,
                value: v.value,
            };
        });

    export type Outbound = {
        source_value: string;
        value: ListValue;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListType> = z
        .object({
            sourceValue: z.string(),
            value: ListValue$,
        })
        .transform((v) => {
            return {
                source_value: v.sourceValue,
                value: v.value,
            };
        });
}

/** @internal */
export namespace List$ {
    export type Inbound = {
        created_at?: string | null | undefined;
        id: string;
        items?: Array<string> | null | undefined;
        name: string;
        type?: ListType$.Inbound | null | undefined;
        updated_at?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<List, z.ZodTypeDef, Inbound> = z
        .object({
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .nullable()
                .optional(),
            id: z.string(),
            items: z.array(z.string()).nullable().optional(),
            name: z.string(),
            type: z
                .lazy(() => ListType$.inboundSchema)
                .nullable()
                .optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .nullable()
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                id: v.id,
                ...(v.items === undefined ? null : { items: v.items }),
                name: v.name,
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        created_at?: string | null | undefined;
        id: string;
        items?: Array<string> | null | undefined;
        name: string;
        type?: ListType$.Outbound | null | undefined;
        updated_at?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, List> = z
        .object({
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .nullable()
                .optional(),
            id: z.string(),
            items: z.array(z.string()).nullable().optional(),
            name: z.string(),
            type: z
                .lazy(() => ListType$.outboundSchema)
                .nullable()
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .nullable()
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                id: v.id,
                ...(v.items === undefined ? null : { items: v.items }),
                name: v.name,
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}
