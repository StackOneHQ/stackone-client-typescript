/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Reason,
  Reason$inboundSchema,
  Reason$Outbound,
  Reason$outboundSchema,
} from "./reason.js";

export type TimeOffBalances4 = {};

export type TimeOffBalancesSourceValue =
  | TimeOffBalances4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The unified value for the duration unit. If the provider does not specify this unit, the value will be set to unknown
 */
export enum TimeOffBalancesValue {
  Minutes = "minutes",
  Hours = "hours",
  Days = "days",
  Weeks = "weeks",
  Months = "months",
  Years = "years",
  Unknown = "unknown",
}
/**
 * The unified value for the duration unit. If the provider does not specify this unit, the value will be set to unknown
 */
export type TimeOffBalancesValueOpen = OpenEnum<typeof TimeOffBalancesValue>;

/**
 * The duration unit of the current balance
 */
export type BalanceUnit = {
  sourceValue?:
    | TimeOffBalances4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The unified value for the duration unit. If the provider does not specify this unit, the value will be set to unknown
   */
  value?: TimeOffBalancesValueOpen | null | undefined;
};

export type TimeOffBalancesSchemas4 = {};

export type TimeOffBalancesSchemasSourceValue =
  | TimeOffBalancesSchemas4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The unified value for the duration unit. If the provider does not specify this unit, the value will be set to unknown
 */
export enum TimeOffBalancesSchemasValue {
  Minutes = "minutes",
  Hours = "hours",
  Days = "days",
  Weeks = "weeks",
  Months = "months",
  Years = "years",
  Unknown = "unknown",
}
/**
 * The unified value for the duration unit. If the provider does not specify this unit, the value will be set to unknown
 */
export type TimeOffBalancesSchemasValueOpen = OpenEnum<
  typeof TimeOffBalancesSchemasValue
>;

/**
 * The duration unit of the current policy
 */
export type TimeOffBalancesDurationUnit = {
  sourceValue?:
    | TimeOffBalancesSchemas4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The unified value for the duration unit. If the provider does not specify this unit, the value will be set to unknown
   */
  value?: TimeOffBalancesSchemasValueOpen | null | undefined;
};

export type TimeOffBalancesSchemasPolicy4 = {};

export type TimeOffBalancesSchemasPolicySourceValue =
  | TimeOffBalancesSchemasPolicy4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The unified value for the type of the time off policy. If the provider does not specify this unit, the value will be set to unmapped_value
 */
export enum TimeOffBalancesSchemasPolicyValue {
  Paid = "paid",
  Unpaid = "unpaid",
  Holiday = "holiday",
  Vacation = "vacation",
  Sick = "sick",
  Personal = "personal",
  InLieu = "in_lieu",
  Bereavement = "bereavement",
  JuryDuty = "jury_duty",
  UnmappedValue = "unmapped_value",
}
/**
 * The unified value for the type of the time off policy. If the provider does not specify this unit, the value will be set to unmapped_value
 */
export type TimeOffBalancesSchemasPolicyValueOpen = OpenEnum<
  typeof TimeOffBalancesSchemasPolicyValue
>;

/**
 * The type of this policy
 */
export type TimeOffBalancesType = {
  sourceValue?:
    | TimeOffBalancesSchemasPolicy4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The unified value for the type of the time off policy. If the provider does not specify this unit, the value will be set to unmapped_value
   */
  value?: TimeOffBalancesSchemasPolicyValueOpen | null | undefined;
};

/**
 * The time off policy associated with this balance
 */
export type TimeOffBalancesPolicy = {
  /**
   * The created_at date of this policy
   */
  createdAt?: Date | null | undefined;
  /**
   * The description of this policy
   */
  description?: string | null | undefined;
  /**
   * The duration unit of the current policy
   */
  durationUnit?: TimeOffBalancesDurationUnit | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The name of this policy
   */
  name?: string | null | undefined;
  reasons?: Array<Reason> | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * The type of this policy
   */
  type?: TimeOffBalancesType | null | undefined;
  /**
   * The updated_at date of this policy
   */
  updatedAt?: Date | null | undefined;
};

export type TimeOffBalances = {
  /**
   * The date of when the current balance expires
   */
  balanceExpiryDate?: Date | null | undefined;
  /**
   * The date of when the initial balance quantity was set
   */
  balanceStartDate?: Date | null | undefined;
  /**
   * The duration unit of the current balance
   */
  balanceUnit?: BalanceUnit | null | undefined;
  /**
   * The current numeric balance for the associated employee and time off policy
   */
  currentBalance?: number | null | undefined;
  /**
   * The employee id associated with this balance
   */
  employeeId?: string | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The initial numeric balance for the associated employee and time off policy as of the balance start date
   */
  initialBalance?: number | null | undefined;
  /**
   * The time off policy associated with this balance
   */
  policy?: TimeOffBalancesPolicy | null | undefined;
  /**
   * The time off policy id associated with this balance
   */
  policyId?: string | null | undefined;
  /**
   * Provider's unique identifier of the employee associated with this balance
   */
  remoteEmployeeId?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * Provider's unique identifier of the time off policy id associated with this balance
   */
  remotePolicyId?: string | null | undefined;
  /**
   * The updated_at date of this time off balance
   */
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const TimeOffBalances4$inboundSchema: z.ZodType<
  TimeOffBalances4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TimeOffBalances4$Outbound = {};

/** @internal */
export const TimeOffBalances4$outboundSchema: z.ZodType<
  TimeOffBalances4$Outbound,
  z.ZodTypeDef,
  TimeOffBalances4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeOffBalances4$ {
  /** @deprecated use `TimeOffBalances4$inboundSchema` instead. */
  export const inboundSchema = TimeOffBalances4$inboundSchema;
  /** @deprecated use `TimeOffBalances4$outboundSchema` instead. */
  export const outboundSchema = TimeOffBalances4$outboundSchema;
  /** @deprecated use `TimeOffBalances4$Outbound` instead. */
  export type Outbound = TimeOffBalances4$Outbound;
}

export function timeOffBalances4ToJSON(
  timeOffBalances4: TimeOffBalances4,
): string {
  return JSON.stringify(
    TimeOffBalances4$outboundSchema.parse(timeOffBalances4),
  );
}

export function timeOffBalances4FromJSON(
  jsonString: string,
): SafeParseResult<TimeOffBalances4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TimeOffBalances4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TimeOffBalances4' from JSON`,
  );
}

/** @internal */
export const TimeOffBalancesSourceValue$inboundSchema: z.ZodType<
  TimeOffBalancesSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TimeOffBalances4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type TimeOffBalancesSourceValue$Outbound =
  | TimeOffBalances4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const TimeOffBalancesSourceValue$outboundSchema: z.ZodType<
  TimeOffBalancesSourceValue$Outbound,
  z.ZodTypeDef,
  TimeOffBalancesSourceValue
> = z.union([
  z.lazy(() => TimeOffBalances4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeOffBalancesSourceValue$ {
  /** @deprecated use `TimeOffBalancesSourceValue$inboundSchema` instead. */
  export const inboundSchema = TimeOffBalancesSourceValue$inboundSchema;
  /** @deprecated use `TimeOffBalancesSourceValue$outboundSchema` instead. */
  export const outboundSchema = TimeOffBalancesSourceValue$outboundSchema;
  /** @deprecated use `TimeOffBalancesSourceValue$Outbound` instead. */
  export type Outbound = TimeOffBalancesSourceValue$Outbound;
}

export function timeOffBalancesSourceValueToJSON(
  timeOffBalancesSourceValue: TimeOffBalancesSourceValue,
): string {
  return JSON.stringify(
    TimeOffBalancesSourceValue$outboundSchema.parse(timeOffBalancesSourceValue),
  );
}

export function timeOffBalancesSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<TimeOffBalancesSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TimeOffBalancesSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TimeOffBalancesSourceValue' from JSON`,
  );
}

/** @internal */
export const TimeOffBalancesValue$inboundSchema: z.ZodType<
  TimeOffBalancesValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TimeOffBalancesValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TimeOffBalancesValue$outboundSchema: z.ZodType<
  TimeOffBalancesValueOpen,
  z.ZodTypeDef,
  TimeOffBalancesValueOpen
> = z.union([
  z.nativeEnum(TimeOffBalancesValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeOffBalancesValue$ {
  /** @deprecated use `TimeOffBalancesValue$inboundSchema` instead. */
  export const inboundSchema = TimeOffBalancesValue$inboundSchema;
  /** @deprecated use `TimeOffBalancesValue$outboundSchema` instead. */
  export const outboundSchema = TimeOffBalancesValue$outboundSchema;
}

/** @internal */
export const BalanceUnit$inboundSchema: z.ZodType<
  BalanceUnit,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => TimeOffBalances4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(TimeOffBalancesValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type BalanceUnit$Outbound = {
  source_value?:
    | TimeOffBalances4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const BalanceUnit$outboundSchema: z.ZodType<
  BalanceUnit$Outbound,
  z.ZodTypeDef,
  BalanceUnit
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => TimeOffBalances4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(TimeOffBalancesValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BalanceUnit$ {
  /** @deprecated use `BalanceUnit$inboundSchema` instead. */
  export const inboundSchema = BalanceUnit$inboundSchema;
  /** @deprecated use `BalanceUnit$outboundSchema` instead. */
  export const outboundSchema = BalanceUnit$outboundSchema;
  /** @deprecated use `BalanceUnit$Outbound` instead. */
  export type Outbound = BalanceUnit$Outbound;
}

export function balanceUnitToJSON(balanceUnit: BalanceUnit): string {
  return JSON.stringify(BalanceUnit$outboundSchema.parse(balanceUnit));
}

export function balanceUnitFromJSON(
  jsonString: string,
): SafeParseResult<BalanceUnit, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BalanceUnit$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BalanceUnit' from JSON`,
  );
}

/** @internal */
export const TimeOffBalancesSchemas4$inboundSchema: z.ZodType<
  TimeOffBalancesSchemas4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TimeOffBalancesSchemas4$Outbound = {};

/** @internal */
export const TimeOffBalancesSchemas4$outboundSchema: z.ZodType<
  TimeOffBalancesSchemas4$Outbound,
  z.ZodTypeDef,
  TimeOffBalancesSchemas4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeOffBalancesSchemas4$ {
  /** @deprecated use `TimeOffBalancesSchemas4$inboundSchema` instead. */
  export const inboundSchema = TimeOffBalancesSchemas4$inboundSchema;
  /** @deprecated use `TimeOffBalancesSchemas4$outboundSchema` instead. */
  export const outboundSchema = TimeOffBalancesSchemas4$outboundSchema;
  /** @deprecated use `TimeOffBalancesSchemas4$Outbound` instead. */
  export type Outbound = TimeOffBalancesSchemas4$Outbound;
}

export function timeOffBalancesSchemas4ToJSON(
  timeOffBalancesSchemas4: TimeOffBalancesSchemas4,
): string {
  return JSON.stringify(
    TimeOffBalancesSchemas4$outboundSchema.parse(timeOffBalancesSchemas4),
  );
}

export function timeOffBalancesSchemas4FromJSON(
  jsonString: string,
): SafeParseResult<TimeOffBalancesSchemas4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TimeOffBalancesSchemas4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TimeOffBalancesSchemas4' from JSON`,
  );
}

/** @internal */
export const TimeOffBalancesSchemasSourceValue$inboundSchema: z.ZodType<
  TimeOffBalancesSchemasSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TimeOffBalancesSchemas4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type TimeOffBalancesSchemasSourceValue$Outbound =
  | TimeOffBalancesSchemas4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const TimeOffBalancesSchemasSourceValue$outboundSchema: z.ZodType<
  TimeOffBalancesSchemasSourceValue$Outbound,
  z.ZodTypeDef,
  TimeOffBalancesSchemasSourceValue
> = z.union([
  z.lazy(() => TimeOffBalancesSchemas4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeOffBalancesSchemasSourceValue$ {
  /** @deprecated use `TimeOffBalancesSchemasSourceValue$inboundSchema` instead. */
  export const inboundSchema = TimeOffBalancesSchemasSourceValue$inboundSchema;
  /** @deprecated use `TimeOffBalancesSchemasSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    TimeOffBalancesSchemasSourceValue$outboundSchema;
  /** @deprecated use `TimeOffBalancesSchemasSourceValue$Outbound` instead. */
  export type Outbound = TimeOffBalancesSchemasSourceValue$Outbound;
}

export function timeOffBalancesSchemasSourceValueToJSON(
  timeOffBalancesSchemasSourceValue: TimeOffBalancesSchemasSourceValue,
): string {
  return JSON.stringify(
    TimeOffBalancesSchemasSourceValue$outboundSchema.parse(
      timeOffBalancesSchemasSourceValue,
    ),
  );
}

export function timeOffBalancesSchemasSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<TimeOffBalancesSchemasSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TimeOffBalancesSchemasSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TimeOffBalancesSchemasSourceValue' from JSON`,
  );
}

/** @internal */
export const TimeOffBalancesSchemasValue$inboundSchema: z.ZodType<
  TimeOffBalancesSchemasValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TimeOffBalancesSchemasValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TimeOffBalancesSchemasValue$outboundSchema: z.ZodType<
  TimeOffBalancesSchemasValueOpen,
  z.ZodTypeDef,
  TimeOffBalancesSchemasValueOpen
> = z.union([
  z.nativeEnum(TimeOffBalancesSchemasValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeOffBalancesSchemasValue$ {
  /** @deprecated use `TimeOffBalancesSchemasValue$inboundSchema` instead. */
  export const inboundSchema = TimeOffBalancesSchemasValue$inboundSchema;
  /** @deprecated use `TimeOffBalancesSchemasValue$outboundSchema` instead. */
  export const outboundSchema = TimeOffBalancesSchemasValue$outboundSchema;
}

/** @internal */
export const TimeOffBalancesDurationUnit$inboundSchema: z.ZodType<
  TimeOffBalancesDurationUnit,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => TimeOffBalancesSchemas4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(TimeOffBalancesSchemasValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type TimeOffBalancesDurationUnit$Outbound = {
  source_value?:
    | TimeOffBalancesSchemas4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const TimeOffBalancesDurationUnit$outboundSchema: z.ZodType<
  TimeOffBalancesDurationUnit$Outbound,
  z.ZodTypeDef,
  TimeOffBalancesDurationUnit
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => TimeOffBalancesSchemas4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(TimeOffBalancesSchemasValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeOffBalancesDurationUnit$ {
  /** @deprecated use `TimeOffBalancesDurationUnit$inboundSchema` instead. */
  export const inboundSchema = TimeOffBalancesDurationUnit$inboundSchema;
  /** @deprecated use `TimeOffBalancesDurationUnit$outboundSchema` instead. */
  export const outboundSchema = TimeOffBalancesDurationUnit$outboundSchema;
  /** @deprecated use `TimeOffBalancesDurationUnit$Outbound` instead. */
  export type Outbound = TimeOffBalancesDurationUnit$Outbound;
}

export function timeOffBalancesDurationUnitToJSON(
  timeOffBalancesDurationUnit: TimeOffBalancesDurationUnit,
): string {
  return JSON.stringify(
    TimeOffBalancesDurationUnit$outboundSchema.parse(
      timeOffBalancesDurationUnit,
    ),
  );
}

export function timeOffBalancesDurationUnitFromJSON(
  jsonString: string,
): SafeParseResult<TimeOffBalancesDurationUnit, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TimeOffBalancesDurationUnit$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TimeOffBalancesDurationUnit' from JSON`,
  );
}

/** @internal */
export const TimeOffBalancesSchemasPolicy4$inboundSchema: z.ZodType<
  TimeOffBalancesSchemasPolicy4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TimeOffBalancesSchemasPolicy4$Outbound = {};

/** @internal */
export const TimeOffBalancesSchemasPolicy4$outboundSchema: z.ZodType<
  TimeOffBalancesSchemasPolicy4$Outbound,
  z.ZodTypeDef,
  TimeOffBalancesSchemasPolicy4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeOffBalancesSchemasPolicy4$ {
  /** @deprecated use `TimeOffBalancesSchemasPolicy4$inboundSchema` instead. */
  export const inboundSchema = TimeOffBalancesSchemasPolicy4$inboundSchema;
  /** @deprecated use `TimeOffBalancesSchemasPolicy4$outboundSchema` instead. */
  export const outboundSchema = TimeOffBalancesSchemasPolicy4$outboundSchema;
  /** @deprecated use `TimeOffBalancesSchemasPolicy4$Outbound` instead. */
  export type Outbound = TimeOffBalancesSchemasPolicy4$Outbound;
}

export function timeOffBalancesSchemasPolicy4ToJSON(
  timeOffBalancesSchemasPolicy4: TimeOffBalancesSchemasPolicy4,
): string {
  return JSON.stringify(
    TimeOffBalancesSchemasPolicy4$outboundSchema.parse(
      timeOffBalancesSchemasPolicy4,
    ),
  );
}

export function timeOffBalancesSchemasPolicy4FromJSON(
  jsonString: string,
): SafeParseResult<TimeOffBalancesSchemasPolicy4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TimeOffBalancesSchemasPolicy4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TimeOffBalancesSchemasPolicy4' from JSON`,
  );
}

/** @internal */
export const TimeOffBalancesSchemasPolicySourceValue$inboundSchema: z.ZodType<
  TimeOffBalancesSchemasPolicySourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TimeOffBalancesSchemasPolicy4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type TimeOffBalancesSchemasPolicySourceValue$Outbound =
  | TimeOffBalancesSchemasPolicy4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const TimeOffBalancesSchemasPolicySourceValue$outboundSchema: z.ZodType<
  TimeOffBalancesSchemasPolicySourceValue$Outbound,
  z.ZodTypeDef,
  TimeOffBalancesSchemasPolicySourceValue
> = z.union([
  z.lazy(() => TimeOffBalancesSchemasPolicy4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeOffBalancesSchemasPolicySourceValue$ {
  /** @deprecated use `TimeOffBalancesSchemasPolicySourceValue$inboundSchema` instead. */
  export const inboundSchema =
    TimeOffBalancesSchemasPolicySourceValue$inboundSchema;
  /** @deprecated use `TimeOffBalancesSchemasPolicySourceValue$outboundSchema` instead. */
  export const outboundSchema =
    TimeOffBalancesSchemasPolicySourceValue$outboundSchema;
  /** @deprecated use `TimeOffBalancesSchemasPolicySourceValue$Outbound` instead. */
  export type Outbound = TimeOffBalancesSchemasPolicySourceValue$Outbound;
}

export function timeOffBalancesSchemasPolicySourceValueToJSON(
  timeOffBalancesSchemasPolicySourceValue:
    TimeOffBalancesSchemasPolicySourceValue,
): string {
  return JSON.stringify(
    TimeOffBalancesSchemasPolicySourceValue$outboundSchema.parse(
      timeOffBalancesSchemasPolicySourceValue,
    ),
  );
}

export function timeOffBalancesSchemasPolicySourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  TimeOffBalancesSchemasPolicySourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TimeOffBalancesSchemasPolicySourceValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TimeOffBalancesSchemasPolicySourceValue' from JSON`,
  );
}

/** @internal */
export const TimeOffBalancesSchemasPolicyValue$inboundSchema: z.ZodType<
  TimeOffBalancesSchemasPolicyValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TimeOffBalancesSchemasPolicyValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TimeOffBalancesSchemasPolicyValue$outboundSchema: z.ZodType<
  TimeOffBalancesSchemasPolicyValueOpen,
  z.ZodTypeDef,
  TimeOffBalancesSchemasPolicyValueOpen
> = z.union([
  z.nativeEnum(TimeOffBalancesSchemasPolicyValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeOffBalancesSchemasPolicyValue$ {
  /** @deprecated use `TimeOffBalancesSchemasPolicyValue$inboundSchema` instead. */
  export const inboundSchema = TimeOffBalancesSchemasPolicyValue$inboundSchema;
  /** @deprecated use `TimeOffBalancesSchemasPolicyValue$outboundSchema` instead. */
  export const outboundSchema =
    TimeOffBalancesSchemasPolicyValue$outboundSchema;
}

/** @internal */
export const TimeOffBalancesType$inboundSchema: z.ZodType<
  TimeOffBalancesType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => TimeOffBalancesSchemasPolicy4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(TimeOffBalancesSchemasPolicyValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type TimeOffBalancesType$Outbound = {
  source_value?:
    | TimeOffBalancesSchemasPolicy4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const TimeOffBalancesType$outboundSchema: z.ZodType<
  TimeOffBalancesType$Outbound,
  z.ZodTypeDef,
  TimeOffBalancesType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => TimeOffBalancesSchemasPolicy4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(TimeOffBalancesSchemasPolicyValue$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeOffBalancesType$ {
  /** @deprecated use `TimeOffBalancesType$inboundSchema` instead. */
  export const inboundSchema = TimeOffBalancesType$inboundSchema;
  /** @deprecated use `TimeOffBalancesType$outboundSchema` instead. */
  export const outboundSchema = TimeOffBalancesType$outboundSchema;
  /** @deprecated use `TimeOffBalancesType$Outbound` instead. */
  export type Outbound = TimeOffBalancesType$Outbound;
}

export function timeOffBalancesTypeToJSON(
  timeOffBalancesType: TimeOffBalancesType,
): string {
  return JSON.stringify(
    TimeOffBalancesType$outboundSchema.parse(timeOffBalancesType),
  );
}

export function timeOffBalancesTypeFromJSON(
  jsonString: string,
): SafeParseResult<TimeOffBalancesType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TimeOffBalancesType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TimeOffBalancesType' from JSON`,
  );
}

/** @internal */
export const TimeOffBalancesPolicy$inboundSchema: z.ZodType<
  TimeOffBalancesPolicy,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  description: z.nullable(z.string()).optional(),
  duration_unit: z.nullable(
    z.lazy(() => TimeOffBalancesDurationUnit$inboundSchema),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  reasons: z.nullable(z.array(Reason$inboundSchema)).optional(),
  remote_id: z.nullable(z.string()).optional(),
  type: z.nullable(z.lazy(() => TimeOffBalancesType$inboundSchema)).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "duration_unit": "durationUnit",
    "remote_id": "remoteId",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type TimeOffBalancesPolicy$Outbound = {
  created_at?: string | null | undefined;
  description?: string | null | undefined;
  duration_unit?: TimeOffBalancesDurationUnit$Outbound | null | undefined;
  id?: string | null | undefined;
  name?: string | null | undefined;
  reasons?: Array<Reason$Outbound> | null | undefined;
  remote_id?: string | null | undefined;
  type?: TimeOffBalancesType$Outbound | null | undefined;
  updated_at?: string | null | undefined;
};

/** @internal */
export const TimeOffBalancesPolicy$outboundSchema: z.ZodType<
  TimeOffBalancesPolicy$Outbound,
  z.ZodTypeDef,
  TimeOffBalancesPolicy
> = z.object({
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  description: z.nullable(z.string()).optional(),
  durationUnit: z.nullable(
    z.lazy(() => TimeOffBalancesDurationUnit$outboundSchema),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  reasons: z.nullable(z.array(Reason$outboundSchema)).optional(),
  remoteId: z.nullable(z.string()).optional(),
  type: z.nullable(z.lazy(() => TimeOffBalancesType$outboundSchema)).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    durationUnit: "duration_unit",
    remoteId: "remote_id",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeOffBalancesPolicy$ {
  /** @deprecated use `TimeOffBalancesPolicy$inboundSchema` instead. */
  export const inboundSchema = TimeOffBalancesPolicy$inboundSchema;
  /** @deprecated use `TimeOffBalancesPolicy$outboundSchema` instead. */
  export const outboundSchema = TimeOffBalancesPolicy$outboundSchema;
  /** @deprecated use `TimeOffBalancesPolicy$Outbound` instead. */
  export type Outbound = TimeOffBalancesPolicy$Outbound;
}

export function timeOffBalancesPolicyToJSON(
  timeOffBalancesPolicy: TimeOffBalancesPolicy,
): string {
  return JSON.stringify(
    TimeOffBalancesPolicy$outboundSchema.parse(timeOffBalancesPolicy),
  );
}

export function timeOffBalancesPolicyFromJSON(
  jsonString: string,
): SafeParseResult<TimeOffBalancesPolicy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TimeOffBalancesPolicy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TimeOffBalancesPolicy' from JSON`,
  );
}

/** @internal */
export const TimeOffBalances$inboundSchema: z.ZodType<
  TimeOffBalances,
  z.ZodTypeDef,
  unknown
> = z.object({
  balance_expiry_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  balance_start_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  balance_unit: z.nullable(z.lazy(() => BalanceUnit$inboundSchema)).optional(),
  current_balance: z.nullable(z.number()).optional(),
  employee_id: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  initial_balance: z.nullable(z.number()).optional(),
  policy: z.nullable(z.lazy(() => TimeOffBalancesPolicy$inboundSchema))
    .optional(),
  policy_id: z.nullable(z.string()).optional(),
  remote_employee_id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  remote_policy_id: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "balance_expiry_date": "balanceExpiryDate",
    "balance_start_date": "balanceStartDate",
    "balance_unit": "balanceUnit",
    "current_balance": "currentBalance",
    "employee_id": "employeeId",
    "initial_balance": "initialBalance",
    "policy_id": "policyId",
    "remote_employee_id": "remoteEmployeeId",
    "remote_id": "remoteId",
    "remote_policy_id": "remotePolicyId",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type TimeOffBalances$Outbound = {
  balance_expiry_date?: string | null | undefined;
  balance_start_date?: string | null | undefined;
  balance_unit?: BalanceUnit$Outbound | null | undefined;
  current_balance?: number | null | undefined;
  employee_id?: string | null | undefined;
  id?: string | null | undefined;
  initial_balance?: number | null | undefined;
  policy?: TimeOffBalancesPolicy$Outbound | null | undefined;
  policy_id?: string | null | undefined;
  remote_employee_id?: string | null | undefined;
  remote_id?: string | null | undefined;
  remote_policy_id?: string | null | undefined;
  updated_at?: string | null | undefined;
};

/** @internal */
export const TimeOffBalances$outboundSchema: z.ZodType<
  TimeOffBalances$Outbound,
  z.ZodTypeDef,
  TimeOffBalances
> = z.object({
  balanceExpiryDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  balanceStartDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  balanceUnit: z.nullable(z.lazy(() => BalanceUnit$outboundSchema)).optional(),
  currentBalance: z.nullable(z.number()).optional(),
  employeeId: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  initialBalance: z.nullable(z.number()).optional(),
  policy: z.nullable(z.lazy(() => TimeOffBalancesPolicy$outboundSchema))
    .optional(),
  policyId: z.nullable(z.string()).optional(),
  remoteEmployeeId: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  remotePolicyId: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    balanceExpiryDate: "balance_expiry_date",
    balanceStartDate: "balance_start_date",
    balanceUnit: "balance_unit",
    currentBalance: "current_balance",
    employeeId: "employee_id",
    initialBalance: "initial_balance",
    policyId: "policy_id",
    remoteEmployeeId: "remote_employee_id",
    remoteId: "remote_id",
    remotePolicyId: "remote_policy_id",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeOffBalances$ {
  /** @deprecated use `TimeOffBalances$inboundSchema` instead. */
  export const inboundSchema = TimeOffBalances$inboundSchema;
  /** @deprecated use `TimeOffBalances$outboundSchema` instead. */
  export const outboundSchema = TimeOffBalances$outboundSchema;
  /** @deprecated use `TimeOffBalances$Outbound` instead. */
  export type Outbound = TimeOffBalances$Outbound;
}

export function timeOffBalancesToJSON(
  timeOffBalances: TimeOffBalances,
): string {
  return JSON.stringify(TimeOffBalances$outboundSchema.parse(timeOffBalances));
}

export function timeOffBalancesFromJSON(
  jsonString: string,
): SafeParseResult<TimeOffBalances, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TimeOffBalances$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TimeOffBalances' from JSON`,
  );
}
