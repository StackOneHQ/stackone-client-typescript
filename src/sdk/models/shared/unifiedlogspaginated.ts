/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UnifiedLogsPartial,
  UnifiedLogsPartial$inboundSchema,
  UnifiedLogsPartial$Outbound,
  UnifiedLogsPartial$outboundSchema,
} from "./unifiedlogspartial.js";

export type UnifiedLogsPaginated = {
  data: Array<UnifiedLogsPartial>;
  next?: string | null | undefined;
};

/** @internal */
export const UnifiedLogsPaginated$inboundSchema: z.ZodType<
  UnifiedLogsPaginated,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(UnifiedLogsPartial$inboundSchema),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type UnifiedLogsPaginated$Outbound = {
  data: Array<UnifiedLogsPartial$Outbound>;
  next?: string | null | undefined;
};

/** @internal */
export const UnifiedLogsPaginated$outboundSchema: z.ZodType<
  UnifiedLogsPaginated$Outbound,
  z.ZodTypeDef,
  UnifiedLogsPaginated
> = z.object({
  data: z.array(UnifiedLogsPartial$outboundSchema),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedLogsPaginated$ {
  /** @deprecated use `UnifiedLogsPaginated$inboundSchema` instead. */
  export const inboundSchema = UnifiedLogsPaginated$inboundSchema;
  /** @deprecated use `UnifiedLogsPaginated$outboundSchema` instead. */
  export const outboundSchema = UnifiedLogsPaginated$outboundSchema;
  /** @deprecated use `UnifiedLogsPaginated$Outbound` instead. */
  export type Outbound = UnifiedLogsPaginated$Outbound;
}

export function unifiedLogsPaginatedToJSON(
  unifiedLogsPaginated: UnifiedLogsPaginated,
): string {
  return JSON.stringify(
    UnifiedLogsPaginated$outboundSchema.parse(unifiedLogsPaginated),
  );
}

export function unifiedLogsPaginatedFromJSON(
  jsonString: string,
): SafeParseResult<UnifiedLogsPaginated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnifiedLogsPaginated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnifiedLogsPaginated' from JSON`,
  );
}
