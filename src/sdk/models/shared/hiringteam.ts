/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type HiringTeam = {
    email?: string | null | undefined;
    firstName?: string | null | undefined;
    lastName?: string | null | undefined;
    role?: string | null | undefined;
    userId?: string | null | undefined;
};

/** @internal */
export namespace HiringTeam$ {
    export type Inbound = {
        email?: string | null | undefined;
        first_name?: string | null | undefined;
        last_name?: string | null | undefined;
        role?: string | null | undefined;
        user_id?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<HiringTeam, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string().nullable().optional(),
            first_name: z.string().nullable().optional(),
            last_name: z.string().nullable().optional(),
            role: z.string().nullable().optional(),
            user_id: z.string().nullable().optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.first_name === undefined ? null : { firstName: v.first_name }),
                ...(v.last_name === undefined ? null : { lastName: v.last_name }),
                ...(v.role === undefined ? null : { role: v.role }),
                ...(v.user_id === undefined ? null : { userId: v.user_id }),
            };
        });

    export type Outbound = {
        email?: string | null | undefined;
        first_name?: string | null | undefined;
        last_name?: string | null | undefined;
        role?: string | null | undefined;
        user_id?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HiringTeam> = z
        .object({
            email: z.string().nullable().optional(),
            firstName: z.string().nullable().optional(),
            lastName: z.string().nullable().optional(),
            role: z.string().nullable().optional(),
            userId: z.string().nullable().optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.firstName === undefined ? null : { first_name: v.firstName }),
                ...(v.lastName === undefined ? null : { last_name: v.lastName }),
                ...(v.role === undefined ? null : { role: v.role }),
                ...(v.userId === undefined ? null : { user_id: v.userId }),
            };
        });
}
