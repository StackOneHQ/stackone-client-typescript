/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum Categories {
    Ats = "ats",
    Hris = "hris",
    HrisLegacy = "hris-legacy",
    Crm = "crm",
    Marketing = "marketing",
    Stackone = "stackone",
}

export type ConnectSession = {
    categories?: Array<Categories> | undefined;
    createdAt: Date;
    id: string;
    organizationId: string;
    originOwnerId: string;
    originOwnerName: string;
    originUsername?: string | undefined;
    projectId: string;
    provider: string;
};

/** @internal */
export const Categories$ = z.nativeEnum(Categories);

/** @internal */
export namespace ConnectSession$ {
    export type Inbound = {
        categories?: Array<Categories> | undefined;
        created_at: string;
        id: string;
        organization_id: string;
        origin_owner_id: string;
        origin_owner_name: string;
        origin_username?: string | undefined;
        project_id: string;
        provider: string;
    };

    export const inboundSchema: z.ZodType<ConnectSession, z.ZodTypeDef, Inbound> = z
        .object({
            categories: z.array(Categories$).optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            id: z.string(),
            organization_id: z.string(),
            origin_owner_id: z.string(),
            origin_owner_name: z.string(),
            origin_username: z.string().optional(),
            project_id: z.string(),
            provider: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.categories === undefined ? null : { categories: v.categories }),
                createdAt: v.created_at,
                id: v.id,
                organizationId: v.organization_id,
                originOwnerId: v.origin_owner_id,
                originOwnerName: v.origin_owner_name,
                ...(v.origin_username === undefined ? null : { originUsername: v.origin_username }),
                projectId: v.project_id,
                provider: v.provider,
            };
        });

    export type Outbound = {
        categories?: Array<Categories> | undefined;
        created_at: string;
        id: string;
        organization_id: string;
        origin_owner_id: string;
        origin_owner_name: string;
        origin_username?: string | undefined;
        project_id: string;
        provider: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectSession> = z
        .object({
            categories: z.array(Categories$).optional(),
            createdAt: z.date().transform((v) => v.toISOString()),
            id: z.string(),
            organizationId: z.string(),
            originOwnerId: z.string(),
            originOwnerName: z.string(),
            originUsername: z.string().optional(),
            projectId: z.string(),
            provider: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.categories === undefined ? null : { categories: v.categories }),
                created_at: v.createdAt,
                id: v.id,
                organization_id: v.organizationId,
                origin_owner_id: v.originOwnerId,
                origin_owner_name: v.originOwnerName,
                ...(v.originUsername === undefined ? null : { origin_username: v.originUsername }),
                project_id: v.projectId,
                provider: v.provider,
            };
        });
}
