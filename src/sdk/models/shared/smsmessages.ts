/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SmsMessagesMessageContent = {
  body?: string | null | undefined;
  from?: string | null | undefined;
};

export type SmsMessages4 = {};

/**
 * The original value from the provider used to derive the unified message type.
 */
export type SmsMessagesSourceValue =
  | SmsMessages4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The unified message type.
 */
export enum SmsMessagesValue {
  Email = "email",
  Sms = "sms",
  Push = "push",
  WebPush = "web_push",
  IosPush = "ios_push",
  AndroidPush = "android_push",
  AppPush = "app_push",
  OmniChannel = "omni_channel",
  ContentBlock = "content_block",
  InApp = "in_app",
  Unknown = "unknown",
  UnmappedValue = "unmapped_value",
}
/**
 * The unified message type.
 */
export type SmsMessagesValueOpen = OpenEnum<typeof SmsMessagesValue>;

export type SmsMessagesMessageType = {
  /**
   * The original value from the provider used to derive the unified message type.
   */
  sourceValue?:
    | SmsMessages4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The unified message type.
   */
  value?: SmsMessagesValueOpen | null | undefined;
};

export type SmsMessages = {
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  messageContent?: SmsMessagesMessageContent | null | undefined;
  messageType?: SmsMessagesMessageType | null | undefined;
  name?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
};

/** @internal */
export const SmsMessagesMessageContent$inboundSchema: z.ZodType<
  SmsMessagesMessageContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  body: z.nullable(z.string()).optional(),
  from: z.nullable(z.string()).optional(),
});

/** @internal */
export type SmsMessagesMessageContent$Outbound = {
  body?: string | null | undefined;
  from?: string | null | undefined;
};

/** @internal */
export const SmsMessagesMessageContent$outboundSchema: z.ZodType<
  SmsMessagesMessageContent$Outbound,
  z.ZodTypeDef,
  SmsMessagesMessageContent
> = z.object({
  body: z.nullable(z.string()).optional(),
  from: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SmsMessagesMessageContent$ {
  /** @deprecated use `SmsMessagesMessageContent$inboundSchema` instead. */
  export const inboundSchema = SmsMessagesMessageContent$inboundSchema;
  /** @deprecated use `SmsMessagesMessageContent$outboundSchema` instead. */
  export const outboundSchema = SmsMessagesMessageContent$outboundSchema;
  /** @deprecated use `SmsMessagesMessageContent$Outbound` instead. */
  export type Outbound = SmsMessagesMessageContent$Outbound;
}

export function smsMessagesMessageContentToJSON(
  smsMessagesMessageContent: SmsMessagesMessageContent,
): string {
  return JSON.stringify(
    SmsMessagesMessageContent$outboundSchema.parse(smsMessagesMessageContent),
  );
}

export function smsMessagesMessageContentFromJSON(
  jsonString: string,
): SafeParseResult<SmsMessagesMessageContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SmsMessagesMessageContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SmsMessagesMessageContent' from JSON`,
  );
}

/** @internal */
export const SmsMessages4$inboundSchema: z.ZodType<
  SmsMessages4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SmsMessages4$Outbound = {};

/** @internal */
export const SmsMessages4$outboundSchema: z.ZodType<
  SmsMessages4$Outbound,
  z.ZodTypeDef,
  SmsMessages4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SmsMessages4$ {
  /** @deprecated use `SmsMessages4$inboundSchema` instead. */
  export const inboundSchema = SmsMessages4$inboundSchema;
  /** @deprecated use `SmsMessages4$outboundSchema` instead. */
  export const outboundSchema = SmsMessages4$outboundSchema;
  /** @deprecated use `SmsMessages4$Outbound` instead. */
  export type Outbound = SmsMessages4$Outbound;
}

export function smsMessages4ToJSON(smsMessages4: SmsMessages4): string {
  return JSON.stringify(SmsMessages4$outboundSchema.parse(smsMessages4));
}

export function smsMessages4FromJSON(
  jsonString: string,
): SafeParseResult<SmsMessages4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SmsMessages4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SmsMessages4' from JSON`,
  );
}

/** @internal */
export const SmsMessagesSourceValue$inboundSchema: z.ZodType<
  SmsMessagesSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => SmsMessages4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type SmsMessagesSourceValue$Outbound =
  | SmsMessages4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const SmsMessagesSourceValue$outboundSchema: z.ZodType<
  SmsMessagesSourceValue$Outbound,
  z.ZodTypeDef,
  SmsMessagesSourceValue
> = z.union([
  z.lazy(() => SmsMessages4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SmsMessagesSourceValue$ {
  /** @deprecated use `SmsMessagesSourceValue$inboundSchema` instead. */
  export const inboundSchema = SmsMessagesSourceValue$inboundSchema;
  /** @deprecated use `SmsMessagesSourceValue$outboundSchema` instead. */
  export const outboundSchema = SmsMessagesSourceValue$outboundSchema;
  /** @deprecated use `SmsMessagesSourceValue$Outbound` instead. */
  export type Outbound = SmsMessagesSourceValue$Outbound;
}

export function smsMessagesSourceValueToJSON(
  smsMessagesSourceValue: SmsMessagesSourceValue,
): string {
  return JSON.stringify(
    SmsMessagesSourceValue$outboundSchema.parse(smsMessagesSourceValue),
  );
}

export function smsMessagesSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<SmsMessagesSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SmsMessagesSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SmsMessagesSourceValue' from JSON`,
  );
}

/** @internal */
export const SmsMessagesValue$inboundSchema: z.ZodType<
  SmsMessagesValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(SmsMessagesValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const SmsMessagesValue$outboundSchema: z.ZodType<
  SmsMessagesValueOpen,
  z.ZodTypeDef,
  SmsMessagesValueOpen
> = z.union([
  z.nativeEnum(SmsMessagesValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SmsMessagesValue$ {
  /** @deprecated use `SmsMessagesValue$inboundSchema` instead. */
  export const inboundSchema = SmsMessagesValue$inboundSchema;
  /** @deprecated use `SmsMessagesValue$outboundSchema` instead. */
  export const outboundSchema = SmsMessagesValue$outboundSchema;
}

/** @internal */
export const SmsMessagesMessageType$inboundSchema: z.ZodType<
  SmsMessagesMessageType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => SmsMessages4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(SmsMessagesValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type SmsMessagesMessageType$Outbound = {
  source_value?:
    | SmsMessages4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const SmsMessagesMessageType$outboundSchema: z.ZodType<
  SmsMessagesMessageType$Outbound,
  z.ZodTypeDef,
  SmsMessagesMessageType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => SmsMessages4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(SmsMessagesValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SmsMessagesMessageType$ {
  /** @deprecated use `SmsMessagesMessageType$inboundSchema` instead. */
  export const inboundSchema = SmsMessagesMessageType$inboundSchema;
  /** @deprecated use `SmsMessagesMessageType$outboundSchema` instead. */
  export const outboundSchema = SmsMessagesMessageType$outboundSchema;
  /** @deprecated use `SmsMessagesMessageType$Outbound` instead. */
  export type Outbound = SmsMessagesMessageType$Outbound;
}

export function smsMessagesMessageTypeToJSON(
  smsMessagesMessageType: SmsMessagesMessageType,
): string {
  return JSON.stringify(
    SmsMessagesMessageType$outboundSchema.parse(smsMessagesMessageType),
  );
}

export function smsMessagesMessageTypeFromJSON(
  jsonString: string,
): SafeParseResult<SmsMessagesMessageType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SmsMessagesMessageType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SmsMessagesMessageType' from JSON`,
  );
}

/** @internal */
export const SmsMessages$inboundSchema: z.ZodType<
  SmsMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  message_content: z.nullable(
    z.lazy(() => SmsMessagesMessageContent$inboundSchema),
  ).optional(),
  message_type: z.nullable(z.lazy(() => SmsMessagesMessageType$inboundSchema))
    .optional(),
  name: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "message_content": "messageContent",
    "message_type": "messageType",
    "remote_id": "remoteId",
  });
});

/** @internal */
export type SmsMessages$Outbound = {
  id?: string | null | undefined;
  message_content?: SmsMessagesMessageContent$Outbound | null | undefined;
  message_type?: SmsMessagesMessageType$Outbound | null | undefined;
  name?: string | null | undefined;
  remote_id?: string | null | undefined;
};

/** @internal */
export const SmsMessages$outboundSchema: z.ZodType<
  SmsMessages$Outbound,
  z.ZodTypeDef,
  SmsMessages
> = z.object({
  id: z.nullable(z.string()).optional(),
  messageContent: z.nullable(
    z.lazy(() => SmsMessagesMessageContent$outboundSchema),
  ).optional(),
  messageType: z.nullable(z.lazy(() => SmsMessagesMessageType$outboundSchema))
    .optional(),
  name: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    messageContent: "message_content",
    messageType: "message_type",
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SmsMessages$ {
  /** @deprecated use `SmsMessages$inboundSchema` instead. */
  export const inboundSchema = SmsMessages$inboundSchema;
  /** @deprecated use `SmsMessages$outboundSchema` instead. */
  export const outboundSchema = SmsMessages$outboundSchema;
  /** @deprecated use `SmsMessages$Outbound` instead. */
  export type Outbound = SmsMessages$Outbound;
}

export function smsMessagesToJSON(smsMessages: SmsMessages): string {
  return JSON.stringify(SmsMessages$outboundSchema.parse(smsMessages));
}

export function smsMessagesFromJSON(
  jsonString: string,
): SafeParseResult<SmsMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SmsMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SmsMessages' from JSON`,
  );
}
