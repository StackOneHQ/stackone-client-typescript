/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EmploymentManagerApiModel,
  EmploymentManagerApiModel$inboundSchema,
  EmploymentManagerApiModel$Outbound,
  EmploymentManagerApiModel$outboundSchema,
} from "./employmentmanagerapimodel.js";
import {
  HRISCostCenter,
  HRISCostCenter$inboundSchema,
  HRISCostCenter$Outbound,
  HRISCostCenter$outboundSchema,
} from "./hriscostcenter.js";

export type EmploymentSchemasContractType4 = {};

export type EmploymentSchemasContractTypeSourceValue =
  | EmploymentSchemasContractType4
  | string
  | number
  | boolean
  | Array<any>;

export enum EmploymentSchemasContractTypeValue {
  FullTime = "full_time",
  Shifts = "shifts",
  PartTime = "part_time",
  UnmappedValue = "unmapped_value",
}
export type EmploymentSchemasContractTypeValueOpen = OpenEnum<
  typeof EmploymentSchemasContractTypeValue
>;

/**
 * The employment work schedule type (e.g., full-time, part-time)
 */
export type EmploymentSchemasContractType = {
  sourceValue?:
    | EmploymentSchemasContractType4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: EmploymentSchemasContractTypeValueOpen | null | undefined;
};

/**
 * The employment work schedule type
 */
export type ContractType = {
  /**
   * The employment work schedule type (e.g., full-time, part-time)
   */
  contractType?: EmploymentSchemasContractType | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The label of the employment type
   */
  label?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
};

export type EmploymentSchemasCostCenter4 = {};

export type EmploymentSchemasCostCenterSourceValue =
  | EmploymentSchemasCostCenter4
  | string
  | number
  | boolean
  | Array<any>;

export enum EmploymentSchemasCostCenterValue {
  Workspace = "workspace",
  Team = "team",
  Department = "department",
  Group = "group",
  Organization = "organization",
  UnmappedValue = "unmapped_value",
  CostCenter = "cost_center",
}
export type EmploymentSchemasCostCenterValueOpen = OpenEnum<
  typeof EmploymentSchemasCostCenterValue
>;

/**
 * The type of the group
 */
export type EmploymentSchemasCostCenterType = {
  sourceValue?:
    | EmploymentSchemasCostCenter4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: EmploymentSchemasCostCenterValueOpen | null | undefined;
};

/**
 * The employee cost_center
 *
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type CostCenter = {
  /**
   * The id of the company that the group belongs to
   */
  companyId?: string | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The name of the group
   */
  name?: string | null | undefined;
  /**
   * The list of group owner ids of the given group
   */
  ownerIds?: Array<string> | null | undefined;
  /**
   * The list of parent group ids of the given group
   */
  parentIds?: Array<string> | null | undefined;
  /**
   * Provider's id of the company that the group belongs to
   */
  remoteCompanyId?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * The list of remote group owner ids of the given group
   */
  remoteOwnerIds?: Array<string> | null | undefined;
  /**
   * Provider's list of parent group remote ids of the given group
   */
  remoteParentIds?: Array<string> | null | undefined;
  /**
   * The type of the group
   */
  type?: EmploymentSchemasCostCenterType | null | undefined;
  /**
   * Custom Unified Fields configured in your StackOne project
   */
  unifiedCustomFields?: { [k: string]: any } | null | undefined;
};

export type EmploymentSchemasDepartment4 = {};

export type EmploymentSchemasDepartmentSourceValue =
  | EmploymentSchemasDepartment4
  | string
  | number
  | boolean
  | Array<any>;

export enum EmploymentSchemasDepartmentValue {
  Workspace = "workspace",
  Team = "team",
  Department = "department",
  Group = "group",
  Organization = "organization",
  UnmappedValue = "unmapped_value",
  CostCenter = "cost_center",
}
export type EmploymentSchemasDepartmentValueOpen = OpenEnum<
  typeof EmploymentSchemasDepartmentValue
>;

/**
 * The type of the group
 */
export type EmploymentSchemasDepartmentType = {
  sourceValue?:
    | EmploymentSchemasDepartment4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: EmploymentSchemasDepartmentValueOpen | null | undefined;
};

/**
 * The employee department
 */
export type EmploymentDepartment = {
  /**
   * The id of the company that the group belongs to
   */
  companyId?: string | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The name of the group
   */
  name?: string | null | undefined;
  /**
   * The list of group owner ids of the given group
   */
  ownerIds?: Array<string> | null | undefined;
  /**
   * The list of parent group ids of the given group
   */
  parentIds?: Array<string> | null | undefined;
  /**
   * Provider's id of the company that the group belongs to
   */
  remoteCompanyId?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * The list of remote group owner ids of the given group
   */
  remoteOwnerIds?: Array<string> | null | undefined;
  /**
   * Provider's list of parent group remote ids of the given group
   */
  remoteParentIds?: Array<string> | null | undefined;
  /**
   * The type of the group
   */
  type?: EmploymentSchemasDepartmentType | null | undefined;
  /**
   * Custom Unified Fields configured in your StackOne project
   */
  unifiedCustomFields?: { [k: string]: any } | null | undefined;
};

export type EmploymentSchemasDivision4 = {};

export type EmploymentSchemasDivisionSourceValue =
  | EmploymentSchemasDivision4
  | string
  | number
  | boolean
  | Array<any>;

export enum EmploymentSchemasDivisionValue {
  Workspace = "workspace",
  Team = "team",
  Department = "department",
  Group = "group",
  Organization = "organization",
  UnmappedValue = "unmapped_value",
  CostCenter = "cost_center",
}
export type EmploymentSchemasDivisionValueOpen = OpenEnum<
  typeof EmploymentSchemasDivisionValue
>;

/**
 * The type of the group
 */
export type EmploymentSchemasDivisionType = {
  sourceValue?:
    | EmploymentSchemasDivision4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: EmploymentSchemasDivisionValueOpen | null | undefined;
};

/**
 * The employee division
 */
export type Division = {
  /**
   * The id of the company that the group belongs to
   */
  companyId?: string | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The name of the group
   */
  name?: string | null | undefined;
  /**
   * The list of group owner ids of the given group
   */
  ownerIds?: Array<string> | null | undefined;
  /**
   * The list of parent group ids of the given group
   */
  parentIds?: Array<string> | null | undefined;
  /**
   * Provider's id of the company that the group belongs to
   */
  remoteCompanyId?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * The list of remote group owner ids of the given group
   */
  remoteOwnerIds?: Array<string> | null | undefined;
  /**
   * Provider's list of parent group remote ids of the given group
   */
  remoteParentIds?: Array<string> | null | undefined;
  /**
   * The type of the group
   */
  type?: EmploymentSchemasDivisionType | null | undefined;
  /**
   * Custom Unified Fields configured in your StackOne project
   */
  unifiedCustomFields?: { [k: string]: any } | null | undefined;
};

export type Employment4 = {};

export type EmploymentSourceValue =
  | Employment4
  | string
  | number
  | boolean
  | Array<any>;

export enum EmploymentValue {
  FullTime = "full_time",
  Shifts = "shifts",
  PartTime = "part_time",
  UnmappedValue = "unmapped_value",
}
export type EmploymentValueOpen = OpenEnum<typeof EmploymentValue>;

/**
 * The employment work schedule type (e.g., full-time, part-time)
 *
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type EmploymentEmploymentContractType = {
  sourceValue?:
    | Employment4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: EmploymentValueOpen | null | undefined;
};

export type EmploymentSchemas4 = {};

/**
 * The source value of the employment type.
 */
export type EmploymentSchemasSourceValue =
  | EmploymentSchemas4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The type of the employment.
 */
export enum EmploymentSchemasValue {
  Contractor = "contractor",
  Intern = "intern",
  Permanent = "permanent",
  Apprentice = "apprentice",
  Freelance = "freelance",
  Terminated = "terminated",
  Temporary = "temporary",
  Seasonal = "seasonal",
  Volunteer = "volunteer",
  Probation = "probation",
  Internal = "internal",
  External = "external",
  Expatriate = "expatriate",
  EmployerOfRecord = "employer_of_record",
  Casual = "casual",
  Programme = "Programme",
  UnmappedValue = "unmapped_value",
}
/**
 * The type of the employment.
 */
export type EmploymentSchemasValueOpen = OpenEnum<
  typeof EmploymentSchemasValue
>;

/**
 * The type of employment (e.g., contractor, permanent)
 *
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type EmploymentEmploymentType = {
  /**
   * The source value of the employment type.
   */
  sourceValue?:
    | EmploymentSchemas4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The type of the employment.
   */
  value?: EmploymentSchemasValueOpen | null | undefined;
};

/**
 * Represents the employee’s position within the organizational hierarchy.
 */
export type EmploymentGrade = {
  /**
   * description of the grade
   */
  description?: string | null | undefined;
  /**
   * The reference id
   */
  id?: string | null | undefined;
  /**
   * The reference name
   */
  name?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
};

/**
 * The employee job description
 */
export type Description = {
  text?: string | null | undefined;
};

/**
 * The job of employee
 */
export type EmploymentJob = {
  /**
   * The employee job description
   */
  description?: Description | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The owner_id of the job
   */
  ownerId?: string | null | undefined;
  /**
   * The parent_id of the job
   */
  parentId?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * Title of the job
   */
  title?: string | null | undefined;
};

export type EmploymentSchemasPayFrequency4 = {};

/**
 * The source value of the pay frequency.
 */
export type EmploymentSchemasPayFrequencySourceValue =
  | EmploymentSchemasPayFrequency4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The pay frequency of the job postings.
 */
export enum EmploymentSchemasPayFrequencyValue {
  Hourly = "hourly",
  Weekly = "weekly",
  BiWeekly = "bi_weekly",
  FourWeekly = "four_weekly",
  SemiMonthly = "semi_monthly",
  Monthly = "monthly",
  BiMonthly = "bi_monthly",
  Quarterly = "quarterly",
  SemiAnnually = "semi_annually",
  Yearly = "yearly",
  ThirteenMonthly = "thirteen_monthly",
  ProRata = "pro_rata",
  UnmappedValue = "unmapped_value",
  HalfYearly = "half_yearly",
  Daily = "daily",
}
/**
 * The pay frequency of the job postings.
 */
export type EmploymentSchemasPayFrequencyValueOpen = OpenEnum<
  typeof EmploymentSchemasPayFrequencyValue
>;

/**
 * The pay frequency
 */
export type EmploymentPayFrequency = {
  /**
   * The source value of the pay frequency.
   */
  sourceValue?:
    | EmploymentSchemasPayFrequency4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The pay frequency of the job postings.
   */
  value?: EmploymentSchemasPayFrequencyValueOpen | null | undefined;
};

export type EmploymentSchemasPayPeriod4 = {};

/**
 * The source value of the pay period.
 */
export type EmploymentSchemasPayPeriodSourceValue =
  | EmploymentSchemasPayPeriod4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The pay period of the job postings.
 */
export enum EmploymentSchemasPayPeriodValue {
  Hour = "hour",
  Day = "day",
  Week = "week",
  EveryTwoWeeks = "every_two_weeks",
  Month = "month",
  TwiceAMonth = "twice_a_month",
  EveryTwoMonths = "every_two_months",
  Quarter = "quarter",
  EverySixMonths = "every_six_months",
  Year = "year",
  OneOff = "one_off",
  None = "none",
  UnmappedValue = "unmapped_value",
}
/**
 * The pay period of the job postings.
 */
export type EmploymentSchemasPayPeriodValueOpen = OpenEnum<
  typeof EmploymentSchemasPayPeriodValue
>;

/**
 * The pay period
 */
export type EmploymentPayPeriod = {
  /**
   * The source value of the pay period.
   */
  sourceValue?:
    | EmploymentSchemasPayPeriod4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The pay period of the job postings.
   */
  value?: EmploymentSchemasPayPeriodValueOpen | null | undefined;
};

export type EmploymentSchemasType4 = {};

export type EmploymentSchemasTypeSourceValue =
  | EmploymentSchemasType4
  | string
  | number
  | boolean
  | Array<any>;

export enum EmploymentSchemasTypeValue {
  Contractor = "contractor",
  Intern = "intern",
  Permanent = "permanent",
  Apprentice = "apprentice",
  Freelance = "freelance",
  Terminated = "terminated",
  Temporary = "temporary",
  Seasonal = "seasonal",
  Volunteer = "volunteer",
  Probation = "probation",
  Internal = "internal",
  External = "external",
  Expatriate = "expatriate",
  EmployerOfRecord = "employer_of_record",
  Casual = "casual",
  Programme = "Programme",
  UnmappedValue = "unmapped_value",
}
export type EmploymentSchemasTypeValueOpen = OpenEnum<
  typeof EmploymentSchemasTypeValue
>;

/**
 * The type of employment (e.g., contractor, permanent)
 */
export type EmploymentSchemasTypeType = {
  sourceValue?:
    | EmploymentSchemasType4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: EmploymentSchemasTypeValueOpen | null | undefined;
};

/**
 * The type of employment
 */
export type EmploymentSchemasType = {
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The label of the employment type
   */
  label?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * The type of employment (e.g., contractor, permanent)
   */
  type?: EmploymentSchemasTypeType | null | undefined;
};

export type EmploymentSchemasWorkTime4 = {};

export type EmploymentSchemasWorkTimeSourceValue =
  | EmploymentSchemasWorkTime4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The unified value for the period.
 */
export enum EmploymentSchemasWorkTimeValue {
  Day = "day",
  Week = "week",
  Month = "month",
  Year = "year",
  UnmappedValue = "unmapped_value",
}
/**
 * The unified value for the period.
 */
export type EmploymentSchemasWorkTimeValueOpen = OpenEnum<
  typeof EmploymentSchemasWorkTimeValue
>;

/**
 * The duration unit of the work time
 */
export type EmploymentDurationUnit = {
  sourceValue?:
    | EmploymentSchemasWorkTime4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The unified value for the period.
   */
  value?: EmploymentSchemasWorkTimeValueOpen | null | undefined;
};

export type EmploymentWorkTime = {
  /**
   * The work time duration in ISO 8601 duration format
   */
  duration?: string | null | undefined;
  /**
   * The duration unit of the work time
   */
  durationUnit?: EmploymentDurationUnit | null | undefined;
};

export type Employment = {
  /**
   * The employment active status
   */
  active?: boolean | null | undefined;
  /**
   * The employment work schedule type
   */
  contractType?: ContractType | null | undefined;
  /**
   * The employee cost_center
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  costCenter?: CostCenter | null | undefined;
  /**
   * The employee cost_centers
   */
  costCenters?: Array<HRISCostCenter> | null | undefined;
  /**
   * The created_at date
   */
  createdAt?: Date | null | undefined;
  /**
   * The employee department
   */
  department?: EmploymentDepartment | null | undefined;
  /**
   * The employee division
   */
  division?: Division | null | undefined;
  /**
   * The effective date of the employment contract
   */
  effectiveDate?: Date | null | undefined;
  /**
   * The employee ID associated with this employment
   */
  employeeId?: string | null | undefined;
  /**
   * The employment work schedule type (e.g., full-time, part-time)
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  employmentContractType?: EmploymentEmploymentContractType | null | undefined;
  /**
   * The type of employment (e.g., contractor, permanent)
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  employmentType?: EmploymentEmploymentType | null | undefined;
  /**
   * The end date of employment
   */
  endDate?: Date | null | undefined;
  /**
   * the employee's working percentage relative to a full-time employee
   */
  fte?: number | null | undefined;
  /**
   * Represents the employee’s position within the organizational hierarchy.
   */
  grade?: EmploymentGrade | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The job of employee
   */
  job?: EmploymentJob | null | undefined;
  /**
   * The job title of the employee
   */
  jobTitle?: string | null | undefined;
  /**
   * The employee manager
   */
  manager?: Array<EmploymentManagerApiModel> | null | undefined;
  /**
   * The currency used for pay
   */
  payCurrency?: string | null | undefined;
  /**
   * The pay frequency
   */
  payFrequency?: EmploymentPayFrequency | null | undefined;
  /**
   * The pay period
   */
  payPeriod?: EmploymentPayPeriod | null | undefined;
  /**
   * The pay rate for the employee
   */
  payRate?: string | null | undefined;
  /**
   * The payroll code of the employee
   */
  payrollCode?: string | null | undefined;
  /**
   * Provider's unique identifier of the employee associated with this employment
   */
  remoteEmployeeId?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * The start_date of employment
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  startDate?: Date | null | undefined;
  /**
   * The type of employment
   */
  type?: EmploymentSchemasType | null | undefined;
  /**
   * Custom Unified Fields configured in your StackOne project
   */
  unifiedCustomFields?: { [k: string]: any } | null | undefined;
  /**
   * The updated_at date
   */
  updatedAt?: Date | null | undefined;
  workTime?: EmploymentWorkTime | null | undefined;
};

/** @internal */
export const EmploymentSchemasContractType4$inboundSchema: z.ZodType<
  EmploymentSchemasContractType4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EmploymentSchemasContractType4$Outbound = {};

/** @internal */
export const EmploymentSchemasContractType4$outboundSchema: z.ZodType<
  EmploymentSchemasContractType4$Outbound,
  z.ZodTypeDef,
  EmploymentSchemasContractType4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasContractType4$ {
  /** @deprecated use `EmploymentSchemasContractType4$inboundSchema` instead. */
  export const inboundSchema = EmploymentSchemasContractType4$inboundSchema;
  /** @deprecated use `EmploymentSchemasContractType4$outboundSchema` instead. */
  export const outboundSchema = EmploymentSchemasContractType4$outboundSchema;
  /** @deprecated use `EmploymentSchemasContractType4$Outbound` instead. */
  export type Outbound = EmploymentSchemasContractType4$Outbound;
}

export function employmentSchemasContractType4ToJSON(
  employmentSchemasContractType4: EmploymentSchemasContractType4,
): string {
  return JSON.stringify(
    EmploymentSchemasContractType4$outboundSchema.parse(
      employmentSchemasContractType4,
    ),
  );
}

export function employmentSchemasContractType4FromJSON(
  jsonString: string,
): SafeParseResult<EmploymentSchemasContractType4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentSchemasContractType4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentSchemasContractType4' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemasContractTypeSourceValue$inboundSchema: z.ZodType<
  EmploymentSchemasContractTypeSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => EmploymentSchemasContractType4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type EmploymentSchemasContractTypeSourceValue$Outbound =
  | EmploymentSchemasContractType4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const EmploymentSchemasContractTypeSourceValue$outboundSchema: z.ZodType<
  EmploymentSchemasContractTypeSourceValue$Outbound,
  z.ZodTypeDef,
  EmploymentSchemasContractTypeSourceValue
> = z.union([
  z.lazy(() => EmploymentSchemasContractType4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasContractTypeSourceValue$ {
  /** @deprecated use `EmploymentSchemasContractTypeSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    EmploymentSchemasContractTypeSourceValue$inboundSchema;
  /** @deprecated use `EmploymentSchemasContractTypeSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    EmploymentSchemasContractTypeSourceValue$outboundSchema;
  /** @deprecated use `EmploymentSchemasContractTypeSourceValue$Outbound` instead. */
  export type Outbound = EmploymentSchemasContractTypeSourceValue$Outbound;
}

export function employmentSchemasContractTypeSourceValueToJSON(
  employmentSchemasContractTypeSourceValue:
    EmploymentSchemasContractTypeSourceValue,
): string {
  return JSON.stringify(
    EmploymentSchemasContractTypeSourceValue$outboundSchema.parse(
      employmentSchemasContractTypeSourceValue,
    ),
  );
}

export function employmentSchemasContractTypeSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  EmploymentSchemasContractTypeSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EmploymentSchemasContractTypeSourceValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EmploymentSchemasContractTypeSourceValue' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemasContractTypeValue$inboundSchema: z.ZodType<
  EmploymentSchemasContractTypeValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EmploymentSchemasContractTypeValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EmploymentSchemasContractTypeValue$outboundSchema: z.ZodType<
  EmploymentSchemasContractTypeValueOpen,
  z.ZodTypeDef,
  EmploymentSchemasContractTypeValueOpen
> = z.union([
  z.nativeEnum(EmploymentSchemasContractTypeValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasContractTypeValue$ {
  /** @deprecated use `EmploymentSchemasContractTypeValue$inboundSchema` instead. */
  export const inboundSchema = EmploymentSchemasContractTypeValue$inboundSchema;
  /** @deprecated use `EmploymentSchemasContractTypeValue$outboundSchema` instead. */
  export const outboundSchema =
    EmploymentSchemasContractTypeValue$outboundSchema;
}

/** @internal */
export const EmploymentSchemasContractType$inboundSchema: z.ZodType<
  EmploymentSchemasContractType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => EmploymentSchemasContractType4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmploymentSchemasContractTypeValue$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type EmploymentSchemasContractType$Outbound = {
  source_value?:
    | EmploymentSchemasContractType4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const EmploymentSchemasContractType$outboundSchema: z.ZodType<
  EmploymentSchemasContractType$Outbound,
  z.ZodTypeDef,
  EmploymentSchemasContractType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => EmploymentSchemasContractType4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmploymentSchemasContractTypeValue$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasContractType$ {
  /** @deprecated use `EmploymentSchemasContractType$inboundSchema` instead. */
  export const inboundSchema = EmploymentSchemasContractType$inboundSchema;
  /** @deprecated use `EmploymentSchemasContractType$outboundSchema` instead. */
  export const outboundSchema = EmploymentSchemasContractType$outboundSchema;
  /** @deprecated use `EmploymentSchemasContractType$Outbound` instead. */
  export type Outbound = EmploymentSchemasContractType$Outbound;
}

export function employmentSchemasContractTypeToJSON(
  employmentSchemasContractType: EmploymentSchemasContractType,
): string {
  return JSON.stringify(
    EmploymentSchemasContractType$outboundSchema.parse(
      employmentSchemasContractType,
    ),
  );
}

export function employmentSchemasContractTypeFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentSchemasContractType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentSchemasContractType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentSchemasContractType' from JSON`,
  );
}

/** @internal */
export const ContractType$inboundSchema: z.ZodType<
  ContractType,
  z.ZodTypeDef,
  unknown
> = z.object({
  contract_type: z.nullable(
    z.lazy(() => EmploymentSchemasContractType$inboundSchema),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "contract_type": "contractType",
    "remote_id": "remoteId",
  });
});

/** @internal */
export type ContractType$Outbound = {
  contract_type?: EmploymentSchemasContractType$Outbound | null | undefined;
  id?: string | null | undefined;
  label?: string | null | undefined;
  remote_id?: string | null | undefined;
};

/** @internal */
export const ContractType$outboundSchema: z.ZodType<
  ContractType$Outbound,
  z.ZodTypeDef,
  ContractType
> = z.object({
  contractType: z.nullable(
    z.lazy(() => EmploymentSchemasContractType$outboundSchema),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    contractType: "contract_type",
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractType$ {
  /** @deprecated use `ContractType$inboundSchema` instead. */
  export const inboundSchema = ContractType$inboundSchema;
  /** @deprecated use `ContractType$outboundSchema` instead. */
  export const outboundSchema = ContractType$outboundSchema;
  /** @deprecated use `ContractType$Outbound` instead. */
  export type Outbound = ContractType$Outbound;
}

export function contractTypeToJSON(contractType: ContractType): string {
  return JSON.stringify(ContractType$outboundSchema.parse(contractType));
}

export function contractTypeFromJSON(
  jsonString: string,
): SafeParseResult<ContractType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContractType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContractType' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemasCostCenter4$inboundSchema: z.ZodType<
  EmploymentSchemasCostCenter4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EmploymentSchemasCostCenter4$Outbound = {};

/** @internal */
export const EmploymentSchemasCostCenter4$outboundSchema: z.ZodType<
  EmploymentSchemasCostCenter4$Outbound,
  z.ZodTypeDef,
  EmploymentSchemasCostCenter4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasCostCenter4$ {
  /** @deprecated use `EmploymentSchemasCostCenter4$inboundSchema` instead. */
  export const inboundSchema = EmploymentSchemasCostCenter4$inboundSchema;
  /** @deprecated use `EmploymentSchemasCostCenter4$outboundSchema` instead. */
  export const outboundSchema = EmploymentSchemasCostCenter4$outboundSchema;
  /** @deprecated use `EmploymentSchemasCostCenter4$Outbound` instead. */
  export type Outbound = EmploymentSchemasCostCenter4$Outbound;
}

export function employmentSchemasCostCenter4ToJSON(
  employmentSchemasCostCenter4: EmploymentSchemasCostCenter4,
): string {
  return JSON.stringify(
    EmploymentSchemasCostCenter4$outboundSchema.parse(
      employmentSchemasCostCenter4,
    ),
  );
}

export function employmentSchemasCostCenter4FromJSON(
  jsonString: string,
): SafeParseResult<EmploymentSchemasCostCenter4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentSchemasCostCenter4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentSchemasCostCenter4' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemasCostCenterSourceValue$inboundSchema: z.ZodType<
  EmploymentSchemasCostCenterSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => EmploymentSchemasCostCenter4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type EmploymentSchemasCostCenterSourceValue$Outbound =
  | EmploymentSchemasCostCenter4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const EmploymentSchemasCostCenterSourceValue$outboundSchema: z.ZodType<
  EmploymentSchemasCostCenterSourceValue$Outbound,
  z.ZodTypeDef,
  EmploymentSchemasCostCenterSourceValue
> = z.union([
  z.lazy(() => EmploymentSchemasCostCenter4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasCostCenterSourceValue$ {
  /** @deprecated use `EmploymentSchemasCostCenterSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    EmploymentSchemasCostCenterSourceValue$inboundSchema;
  /** @deprecated use `EmploymentSchemasCostCenterSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    EmploymentSchemasCostCenterSourceValue$outboundSchema;
  /** @deprecated use `EmploymentSchemasCostCenterSourceValue$Outbound` instead. */
  export type Outbound = EmploymentSchemasCostCenterSourceValue$Outbound;
}

export function employmentSchemasCostCenterSourceValueToJSON(
  employmentSchemasCostCenterSourceValue:
    EmploymentSchemasCostCenterSourceValue,
): string {
  return JSON.stringify(
    EmploymentSchemasCostCenterSourceValue$outboundSchema.parse(
      employmentSchemasCostCenterSourceValue,
    ),
  );
}

export function employmentSchemasCostCenterSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentSchemasCostCenterSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EmploymentSchemasCostCenterSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentSchemasCostCenterSourceValue' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemasCostCenterValue$inboundSchema: z.ZodType<
  EmploymentSchemasCostCenterValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EmploymentSchemasCostCenterValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EmploymentSchemasCostCenterValue$outboundSchema: z.ZodType<
  EmploymentSchemasCostCenterValueOpen,
  z.ZodTypeDef,
  EmploymentSchemasCostCenterValueOpen
> = z.union([
  z.nativeEnum(EmploymentSchemasCostCenterValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasCostCenterValue$ {
  /** @deprecated use `EmploymentSchemasCostCenterValue$inboundSchema` instead. */
  export const inboundSchema = EmploymentSchemasCostCenterValue$inboundSchema;
  /** @deprecated use `EmploymentSchemasCostCenterValue$outboundSchema` instead. */
  export const outboundSchema = EmploymentSchemasCostCenterValue$outboundSchema;
}

/** @internal */
export const EmploymentSchemasCostCenterType$inboundSchema: z.ZodType<
  EmploymentSchemasCostCenterType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => EmploymentSchemasCostCenter4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmploymentSchemasCostCenterValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type EmploymentSchemasCostCenterType$Outbound = {
  source_value?:
    | EmploymentSchemasCostCenter4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const EmploymentSchemasCostCenterType$outboundSchema: z.ZodType<
  EmploymentSchemasCostCenterType$Outbound,
  z.ZodTypeDef,
  EmploymentSchemasCostCenterType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => EmploymentSchemasCostCenter4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmploymentSchemasCostCenterValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasCostCenterType$ {
  /** @deprecated use `EmploymentSchemasCostCenterType$inboundSchema` instead. */
  export const inboundSchema = EmploymentSchemasCostCenterType$inboundSchema;
  /** @deprecated use `EmploymentSchemasCostCenterType$outboundSchema` instead. */
  export const outboundSchema = EmploymentSchemasCostCenterType$outboundSchema;
  /** @deprecated use `EmploymentSchemasCostCenterType$Outbound` instead. */
  export type Outbound = EmploymentSchemasCostCenterType$Outbound;
}

export function employmentSchemasCostCenterTypeToJSON(
  employmentSchemasCostCenterType: EmploymentSchemasCostCenterType,
): string {
  return JSON.stringify(
    EmploymentSchemasCostCenterType$outboundSchema.parse(
      employmentSchemasCostCenterType,
    ),
  );
}

export function employmentSchemasCostCenterTypeFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentSchemasCostCenterType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentSchemasCostCenterType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentSchemasCostCenterType' from JSON`,
  );
}

/** @internal */
export const CostCenter$inboundSchema: z.ZodType<
  CostCenter,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_id: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  owner_ids: z.nullable(z.array(z.string())).optional(),
  parent_ids: z.nullable(z.array(z.string())).optional(),
  remote_company_id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  remote_owner_ids: z.nullable(z.array(z.string())).optional(),
  remote_parent_ids: z.nullable(z.array(z.string())).optional(),
  type: z.nullable(z.lazy(() => EmploymentSchemasCostCenterType$inboundSchema))
    .optional(),
  unified_custom_fields: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_id": "companyId",
    "owner_ids": "ownerIds",
    "parent_ids": "parentIds",
    "remote_company_id": "remoteCompanyId",
    "remote_id": "remoteId",
    "remote_owner_ids": "remoteOwnerIds",
    "remote_parent_ids": "remoteParentIds",
    "unified_custom_fields": "unifiedCustomFields",
  });
});

/** @internal */
export type CostCenter$Outbound = {
  company_id?: string | null | undefined;
  id?: string | null | undefined;
  name?: string | null | undefined;
  owner_ids?: Array<string> | null | undefined;
  parent_ids?: Array<string> | null | undefined;
  remote_company_id?: string | null | undefined;
  remote_id?: string | null | undefined;
  remote_owner_ids?: Array<string> | null | undefined;
  remote_parent_ids?: Array<string> | null | undefined;
  type?: EmploymentSchemasCostCenterType$Outbound | null | undefined;
  unified_custom_fields?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const CostCenter$outboundSchema: z.ZodType<
  CostCenter$Outbound,
  z.ZodTypeDef,
  CostCenter
> = z.object({
  companyId: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  ownerIds: z.nullable(z.array(z.string())).optional(),
  parentIds: z.nullable(z.array(z.string())).optional(),
  remoteCompanyId: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  remoteOwnerIds: z.nullable(z.array(z.string())).optional(),
  remoteParentIds: z.nullable(z.array(z.string())).optional(),
  type: z.nullable(z.lazy(() => EmploymentSchemasCostCenterType$outboundSchema))
    .optional(),
  unifiedCustomFields: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company_id",
    ownerIds: "owner_ids",
    parentIds: "parent_ids",
    remoteCompanyId: "remote_company_id",
    remoteId: "remote_id",
    remoteOwnerIds: "remote_owner_ids",
    remoteParentIds: "remote_parent_ids",
    unifiedCustomFields: "unified_custom_fields",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CostCenter$ {
  /** @deprecated use `CostCenter$inboundSchema` instead. */
  export const inboundSchema = CostCenter$inboundSchema;
  /** @deprecated use `CostCenter$outboundSchema` instead. */
  export const outboundSchema = CostCenter$outboundSchema;
  /** @deprecated use `CostCenter$Outbound` instead. */
  export type Outbound = CostCenter$Outbound;
}

export function costCenterToJSON(costCenter: CostCenter): string {
  return JSON.stringify(CostCenter$outboundSchema.parse(costCenter));
}

export function costCenterFromJSON(
  jsonString: string,
): SafeParseResult<CostCenter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CostCenter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CostCenter' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemasDepartment4$inboundSchema: z.ZodType<
  EmploymentSchemasDepartment4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EmploymentSchemasDepartment4$Outbound = {};

/** @internal */
export const EmploymentSchemasDepartment4$outboundSchema: z.ZodType<
  EmploymentSchemasDepartment4$Outbound,
  z.ZodTypeDef,
  EmploymentSchemasDepartment4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasDepartment4$ {
  /** @deprecated use `EmploymentSchemasDepartment4$inboundSchema` instead. */
  export const inboundSchema = EmploymentSchemasDepartment4$inboundSchema;
  /** @deprecated use `EmploymentSchemasDepartment4$outboundSchema` instead. */
  export const outboundSchema = EmploymentSchemasDepartment4$outboundSchema;
  /** @deprecated use `EmploymentSchemasDepartment4$Outbound` instead. */
  export type Outbound = EmploymentSchemasDepartment4$Outbound;
}

export function employmentSchemasDepartment4ToJSON(
  employmentSchemasDepartment4: EmploymentSchemasDepartment4,
): string {
  return JSON.stringify(
    EmploymentSchemasDepartment4$outboundSchema.parse(
      employmentSchemasDepartment4,
    ),
  );
}

export function employmentSchemasDepartment4FromJSON(
  jsonString: string,
): SafeParseResult<EmploymentSchemasDepartment4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentSchemasDepartment4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentSchemasDepartment4' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemasDepartmentSourceValue$inboundSchema: z.ZodType<
  EmploymentSchemasDepartmentSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => EmploymentSchemasDepartment4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type EmploymentSchemasDepartmentSourceValue$Outbound =
  | EmploymentSchemasDepartment4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const EmploymentSchemasDepartmentSourceValue$outboundSchema: z.ZodType<
  EmploymentSchemasDepartmentSourceValue$Outbound,
  z.ZodTypeDef,
  EmploymentSchemasDepartmentSourceValue
> = z.union([
  z.lazy(() => EmploymentSchemasDepartment4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasDepartmentSourceValue$ {
  /** @deprecated use `EmploymentSchemasDepartmentSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    EmploymentSchemasDepartmentSourceValue$inboundSchema;
  /** @deprecated use `EmploymentSchemasDepartmentSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    EmploymentSchemasDepartmentSourceValue$outboundSchema;
  /** @deprecated use `EmploymentSchemasDepartmentSourceValue$Outbound` instead. */
  export type Outbound = EmploymentSchemasDepartmentSourceValue$Outbound;
}

export function employmentSchemasDepartmentSourceValueToJSON(
  employmentSchemasDepartmentSourceValue:
    EmploymentSchemasDepartmentSourceValue,
): string {
  return JSON.stringify(
    EmploymentSchemasDepartmentSourceValue$outboundSchema.parse(
      employmentSchemasDepartmentSourceValue,
    ),
  );
}

export function employmentSchemasDepartmentSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentSchemasDepartmentSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EmploymentSchemasDepartmentSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentSchemasDepartmentSourceValue' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemasDepartmentValue$inboundSchema: z.ZodType<
  EmploymentSchemasDepartmentValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EmploymentSchemasDepartmentValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EmploymentSchemasDepartmentValue$outboundSchema: z.ZodType<
  EmploymentSchemasDepartmentValueOpen,
  z.ZodTypeDef,
  EmploymentSchemasDepartmentValueOpen
> = z.union([
  z.nativeEnum(EmploymentSchemasDepartmentValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasDepartmentValue$ {
  /** @deprecated use `EmploymentSchemasDepartmentValue$inboundSchema` instead. */
  export const inboundSchema = EmploymentSchemasDepartmentValue$inboundSchema;
  /** @deprecated use `EmploymentSchemasDepartmentValue$outboundSchema` instead. */
  export const outboundSchema = EmploymentSchemasDepartmentValue$outboundSchema;
}

/** @internal */
export const EmploymentSchemasDepartmentType$inboundSchema: z.ZodType<
  EmploymentSchemasDepartmentType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => EmploymentSchemasDepartment4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmploymentSchemasDepartmentValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type EmploymentSchemasDepartmentType$Outbound = {
  source_value?:
    | EmploymentSchemasDepartment4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const EmploymentSchemasDepartmentType$outboundSchema: z.ZodType<
  EmploymentSchemasDepartmentType$Outbound,
  z.ZodTypeDef,
  EmploymentSchemasDepartmentType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => EmploymentSchemasDepartment4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmploymentSchemasDepartmentValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasDepartmentType$ {
  /** @deprecated use `EmploymentSchemasDepartmentType$inboundSchema` instead. */
  export const inboundSchema = EmploymentSchemasDepartmentType$inboundSchema;
  /** @deprecated use `EmploymentSchemasDepartmentType$outboundSchema` instead. */
  export const outboundSchema = EmploymentSchemasDepartmentType$outboundSchema;
  /** @deprecated use `EmploymentSchemasDepartmentType$Outbound` instead. */
  export type Outbound = EmploymentSchemasDepartmentType$Outbound;
}

export function employmentSchemasDepartmentTypeToJSON(
  employmentSchemasDepartmentType: EmploymentSchemasDepartmentType,
): string {
  return JSON.stringify(
    EmploymentSchemasDepartmentType$outboundSchema.parse(
      employmentSchemasDepartmentType,
    ),
  );
}

export function employmentSchemasDepartmentTypeFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentSchemasDepartmentType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentSchemasDepartmentType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentSchemasDepartmentType' from JSON`,
  );
}

/** @internal */
export const EmploymentDepartment$inboundSchema: z.ZodType<
  EmploymentDepartment,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_id: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  owner_ids: z.nullable(z.array(z.string())).optional(),
  parent_ids: z.nullable(z.array(z.string())).optional(),
  remote_company_id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  remote_owner_ids: z.nullable(z.array(z.string())).optional(),
  remote_parent_ids: z.nullable(z.array(z.string())).optional(),
  type: z.nullable(z.lazy(() => EmploymentSchemasDepartmentType$inboundSchema))
    .optional(),
  unified_custom_fields: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_id": "companyId",
    "owner_ids": "ownerIds",
    "parent_ids": "parentIds",
    "remote_company_id": "remoteCompanyId",
    "remote_id": "remoteId",
    "remote_owner_ids": "remoteOwnerIds",
    "remote_parent_ids": "remoteParentIds",
    "unified_custom_fields": "unifiedCustomFields",
  });
});

/** @internal */
export type EmploymentDepartment$Outbound = {
  company_id?: string | null | undefined;
  id?: string | null | undefined;
  name?: string | null | undefined;
  owner_ids?: Array<string> | null | undefined;
  parent_ids?: Array<string> | null | undefined;
  remote_company_id?: string | null | undefined;
  remote_id?: string | null | undefined;
  remote_owner_ids?: Array<string> | null | undefined;
  remote_parent_ids?: Array<string> | null | undefined;
  type?: EmploymentSchemasDepartmentType$Outbound | null | undefined;
  unified_custom_fields?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const EmploymentDepartment$outboundSchema: z.ZodType<
  EmploymentDepartment$Outbound,
  z.ZodTypeDef,
  EmploymentDepartment
> = z.object({
  companyId: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  ownerIds: z.nullable(z.array(z.string())).optional(),
  parentIds: z.nullable(z.array(z.string())).optional(),
  remoteCompanyId: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  remoteOwnerIds: z.nullable(z.array(z.string())).optional(),
  remoteParentIds: z.nullable(z.array(z.string())).optional(),
  type: z.nullable(z.lazy(() => EmploymentSchemasDepartmentType$outboundSchema))
    .optional(),
  unifiedCustomFields: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company_id",
    ownerIds: "owner_ids",
    parentIds: "parent_ids",
    remoteCompanyId: "remote_company_id",
    remoteId: "remote_id",
    remoteOwnerIds: "remote_owner_ids",
    remoteParentIds: "remote_parent_ids",
    unifiedCustomFields: "unified_custom_fields",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentDepartment$ {
  /** @deprecated use `EmploymentDepartment$inboundSchema` instead. */
  export const inboundSchema = EmploymentDepartment$inboundSchema;
  /** @deprecated use `EmploymentDepartment$outboundSchema` instead. */
  export const outboundSchema = EmploymentDepartment$outboundSchema;
  /** @deprecated use `EmploymentDepartment$Outbound` instead. */
  export type Outbound = EmploymentDepartment$Outbound;
}

export function employmentDepartmentToJSON(
  employmentDepartment: EmploymentDepartment,
): string {
  return JSON.stringify(
    EmploymentDepartment$outboundSchema.parse(employmentDepartment),
  );
}

export function employmentDepartmentFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentDepartment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentDepartment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentDepartment' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemasDivision4$inboundSchema: z.ZodType<
  EmploymentSchemasDivision4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EmploymentSchemasDivision4$Outbound = {};

/** @internal */
export const EmploymentSchemasDivision4$outboundSchema: z.ZodType<
  EmploymentSchemasDivision4$Outbound,
  z.ZodTypeDef,
  EmploymentSchemasDivision4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasDivision4$ {
  /** @deprecated use `EmploymentSchemasDivision4$inboundSchema` instead. */
  export const inboundSchema = EmploymentSchemasDivision4$inboundSchema;
  /** @deprecated use `EmploymentSchemasDivision4$outboundSchema` instead. */
  export const outboundSchema = EmploymentSchemasDivision4$outboundSchema;
  /** @deprecated use `EmploymentSchemasDivision4$Outbound` instead. */
  export type Outbound = EmploymentSchemasDivision4$Outbound;
}

export function employmentSchemasDivision4ToJSON(
  employmentSchemasDivision4: EmploymentSchemasDivision4,
): string {
  return JSON.stringify(
    EmploymentSchemasDivision4$outboundSchema.parse(employmentSchemasDivision4),
  );
}

export function employmentSchemasDivision4FromJSON(
  jsonString: string,
): SafeParseResult<EmploymentSchemasDivision4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentSchemasDivision4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentSchemasDivision4' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemasDivisionSourceValue$inboundSchema: z.ZodType<
  EmploymentSchemasDivisionSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => EmploymentSchemasDivision4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type EmploymentSchemasDivisionSourceValue$Outbound =
  | EmploymentSchemasDivision4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const EmploymentSchemasDivisionSourceValue$outboundSchema: z.ZodType<
  EmploymentSchemasDivisionSourceValue$Outbound,
  z.ZodTypeDef,
  EmploymentSchemasDivisionSourceValue
> = z.union([
  z.lazy(() => EmploymentSchemasDivision4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasDivisionSourceValue$ {
  /** @deprecated use `EmploymentSchemasDivisionSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    EmploymentSchemasDivisionSourceValue$inboundSchema;
  /** @deprecated use `EmploymentSchemasDivisionSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    EmploymentSchemasDivisionSourceValue$outboundSchema;
  /** @deprecated use `EmploymentSchemasDivisionSourceValue$Outbound` instead. */
  export type Outbound = EmploymentSchemasDivisionSourceValue$Outbound;
}

export function employmentSchemasDivisionSourceValueToJSON(
  employmentSchemasDivisionSourceValue: EmploymentSchemasDivisionSourceValue,
): string {
  return JSON.stringify(
    EmploymentSchemasDivisionSourceValue$outboundSchema.parse(
      employmentSchemasDivisionSourceValue,
    ),
  );
}

export function employmentSchemasDivisionSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentSchemasDivisionSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EmploymentSchemasDivisionSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentSchemasDivisionSourceValue' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemasDivisionValue$inboundSchema: z.ZodType<
  EmploymentSchemasDivisionValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EmploymentSchemasDivisionValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EmploymentSchemasDivisionValue$outboundSchema: z.ZodType<
  EmploymentSchemasDivisionValueOpen,
  z.ZodTypeDef,
  EmploymentSchemasDivisionValueOpen
> = z.union([
  z.nativeEnum(EmploymentSchemasDivisionValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasDivisionValue$ {
  /** @deprecated use `EmploymentSchemasDivisionValue$inboundSchema` instead. */
  export const inboundSchema = EmploymentSchemasDivisionValue$inboundSchema;
  /** @deprecated use `EmploymentSchemasDivisionValue$outboundSchema` instead. */
  export const outboundSchema = EmploymentSchemasDivisionValue$outboundSchema;
}

/** @internal */
export const EmploymentSchemasDivisionType$inboundSchema: z.ZodType<
  EmploymentSchemasDivisionType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => EmploymentSchemasDivision4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmploymentSchemasDivisionValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type EmploymentSchemasDivisionType$Outbound = {
  source_value?:
    | EmploymentSchemasDivision4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const EmploymentSchemasDivisionType$outboundSchema: z.ZodType<
  EmploymentSchemasDivisionType$Outbound,
  z.ZodTypeDef,
  EmploymentSchemasDivisionType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => EmploymentSchemasDivision4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmploymentSchemasDivisionValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasDivisionType$ {
  /** @deprecated use `EmploymentSchemasDivisionType$inboundSchema` instead. */
  export const inboundSchema = EmploymentSchemasDivisionType$inboundSchema;
  /** @deprecated use `EmploymentSchemasDivisionType$outboundSchema` instead. */
  export const outboundSchema = EmploymentSchemasDivisionType$outboundSchema;
  /** @deprecated use `EmploymentSchemasDivisionType$Outbound` instead. */
  export type Outbound = EmploymentSchemasDivisionType$Outbound;
}

export function employmentSchemasDivisionTypeToJSON(
  employmentSchemasDivisionType: EmploymentSchemasDivisionType,
): string {
  return JSON.stringify(
    EmploymentSchemasDivisionType$outboundSchema.parse(
      employmentSchemasDivisionType,
    ),
  );
}

export function employmentSchemasDivisionTypeFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentSchemasDivisionType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentSchemasDivisionType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentSchemasDivisionType' from JSON`,
  );
}

/** @internal */
export const Division$inboundSchema: z.ZodType<
  Division,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_id: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  owner_ids: z.nullable(z.array(z.string())).optional(),
  parent_ids: z.nullable(z.array(z.string())).optional(),
  remote_company_id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  remote_owner_ids: z.nullable(z.array(z.string())).optional(),
  remote_parent_ids: z.nullable(z.array(z.string())).optional(),
  type: z.nullable(z.lazy(() => EmploymentSchemasDivisionType$inboundSchema))
    .optional(),
  unified_custom_fields: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_id": "companyId",
    "owner_ids": "ownerIds",
    "parent_ids": "parentIds",
    "remote_company_id": "remoteCompanyId",
    "remote_id": "remoteId",
    "remote_owner_ids": "remoteOwnerIds",
    "remote_parent_ids": "remoteParentIds",
    "unified_custom_fields": "unifiedCustomFields",
  });
});

/** @internal */
export type Division$Outbound = {
  company_id?: string | null | undefined;
  id?: string | null | undefined;
  name?: string | null | undefined;
  owner_ids?: Array<string> | null | undefined;
  parent_ids?: Array<string> | null | undefined;
  remote_company_id?: string | null | undefined;
  remote_id?: string | null | undefined;
  remote_owner_ids?: Array<string> | null | undefined;
  remote_parent_ids?: Array<string> | null | undefined;
  type?: EmploymentSchemasDivisionType$Outbound | null | undefined;
  unified_custom_fields?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const Division$outboundSchema: z.ZodType<
  Division$Outbound,
  z.ZodTypeDef,
  Division
> = z.object({
  companyId: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  ownerIds: z.nullable(z.array(z.string())).optional(),
  parentIds: z.nullable(z.array(z.string())).optional(),
  remoteCompanyId: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  remoteOwnerIds: z.nullable(z.array(z.string())).optional(),
  remoteParentIds: z.nullable(z.array(z.string())).optional(),
  type: z.nullable(z.lazy(() => EmploymentSchemasDivisionType$outboundSchema))
    .optional(),
  unifiedCustomFields: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company_id",
    ownerIds: "owner_ids",
    parentIds: "parent_ids",
    remoteCompanyId: "remote_company_id",
    remoteId: "remote_id",
    remoteOwnerIds: "remote_owner_ids",
    remoteParentIds: "remote_parent_ids",
    unifiedCustomFields: "unified_custom_fields",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Division$ {
  /** @deprecated use `Division$inboundSchema` instead. */
  export const inboundSchema = Division$inboundSchema;
  /** @deprecated use `Division$outboundSchema` instead. */
  export const outboundSchema = Division$outboundSchema;
  /** @deprecated use `Division$Outbound` instead. */
  export type Outbound = Division$Outbound;
}

export function divisionToJSON(division: Division): string {
  return JSON.stringify(Division$outboundSchema.parse(division));
}

export function divisionFromJSON(
  jsonString: string,
): SafeParseResult<Division, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Division$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Division' from JSON`,
  );
}

/** @internal */
export const Employment4$inboundSchema: z.ZodType<
  Employment4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Employment4$Outbound = {};

/** @internal */
export const Employment4$outboundSchema: z.ZodType<
  Employment4$Outbound,
  z.ZodTypeDef,
  Employment4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Employment4$ {
  /** @deprecated use `Employment4$inboundSchema` instead. */
  export const inboundSchema = Employment4$inboundSchema;
  /** @deprecated use `Employment4$outboundSchema` instead. */
  export const outboundSchema = Employment4$outboundSchema;
  /** @deprecated use `Employment4$Outbound` instead. */
  export type Outbound = Employment4$Outbound;
}

export function employment4ToJSON(employment4: Employment4): string {
  return JSON.stringify(Employment4$outboundSchema.parse(employment4));
}

export function employment4FromJSON(
  jsonString: string,
): SafeParseResult<Employment4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Employment4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Employment4' from JSON`,
  );
}

/** @internal */
export const EmploymentSourceValue$inboundSchema: z.ZodType<
  EmploymentSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Employment4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type EmploymentSourceValue$Outbound =
  | Employment4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const EmploymentSourceValue$outboundSchema: z.ZodType<
  EmploymentSourceValue$Outbound,
  z.ZodTypeDef,
  EmploymentSourceValue
> = z.union([
  z.lazy(() => Employment4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSourceValue$ {
  /** @deprecated use `EmploymentSourceValue$inboundSchema` instead. */
  export const inboundSchema = EmploymentSourceValue$inboundSchema;
  /** @deprecated use `EmploymentSourceValue$outboundSchema` instead. */
  export const outboundSchema = EmploymentSourceValue$outboundSchema;
  /** @deprecated use `EmploymentSourceValue$Outbound` instead. */
  export type Outbound = EmploymentSourceValue$Outbound;
}

export function employmentSourceValueToJSON(
  employmentSourceValue: EmploymentSourceValue,
): string {
  return JSON.stringify(
    EmploymentSourceValue$outboundSchema.parse(employmentSourceValue),
  );
}

export function employmentSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentSourceValue' from JSON`,
  );
}

/** @internal */
export const EmploymentValue$inboundSchema: z.ZodType<
  EmploymentValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EmploymentValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EmploymentValue$outboundSchema: z.ZodType<
  EmploymentValueOpen,
  z.ZodTypeDef,
  EmploymentValueOpen
> = z.union([
  z.nativeEnum(EmploymentValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentValue$ {
  /** @deprecated use `EmploymentValue$inboundSchema` instead. */
  export const inboundSchema = EmploymentValue$inboundSchema;
  /** @deprecated use `EmploymentValue$outboundSchema` instead. */
  export const outboundSchema = EmploymentValue$outboundSchema;
}

/** @internal */
export const EmploymentEmploymentContractType$inboundSchema: z.ZodType<
  EmploymentEmploymentContractType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => Employment4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmploymentValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type EmploymentEmploymentContractType$Outbound = {
  source_value?:
    | Employment4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const EmploymentEmploymentContractType$outboundSchema: z.ZodType<
  EmploymentEmploymentContractType$Outbound,
  z.ZodTypeDef,
  EmploymentEmploymentContractType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => Employment4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmploymentValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentEmploymentContractType$ {
  /** @deprecated use `EmploymentEmploymentContractType$inboundSchema` instead. */
  export const inboundSchema = EmploymentEmploymentContractType$inboundSchema;
  /** @deprecated use `EmploymentEmploymentContractType$outboundSchema` instead. */
  export const outboundSchema = EmploymentEmploymentContractType$outboundSchema;
  /** @deprecated use `EmploymentEmploymentContractType$Outbound` instead. */
  export type Outbound = EmploymentEmploymentContractType$Outbound;
}

export function employmentEmploymentContractTypeToJSON(
  employmentEmploymentContractType: EmploymentEmploymentContractType,
): string {
  return JSON.stringify(
    EmploymentEmploymentContractType$outboundSchema.parse(
      employmentEmploymentContractType,
    ),
  );
}

export function employmentEmploymentContractTypeFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentEmploymentContractType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentEmploymentContractType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentEmploymentContractType' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemas4$inboundSchema: z.ZodType<
  EmploymentSchemas4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EmploymentSchemas4$Outbound = {};

/** @internal */
export const EmploymentSchemas4$outboundSchema: z.ZodType<
  EmploymentSchemas4$Outbound,
  z.ZodTypeDef,
  EmploymentSchemas4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemas4$ {
  /** @deprecated use `EmploymentSchemas4$inboundSchema` instead. */
  export const inboundSchema = EmploymentSchemas4$inboundSchema;
  /** @deprecated use `EmploymentSchemas4$outboundSchema` instead. */
  export const outboundSchema = EmploymentSchemas4$outboundSchema;
  /** @deprecated use `EmploymentSchemas4$Outbound` instead. */
  export type Outbound = EmploymentSchemas4$Outbound;
}

export function employmentSchemas4ToJSON(
  employmentSchemas4: EmploymentSchemas4,
): string {
  return JSON.stringify(
    EmploymentSchemas4$outboundSchema.parse(employmentSchemas4),
  );
}

export function employmentSchemas4FromJSON(
  jsonString: string,
): SafeParseResult<EmploymentSchemas4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentSchemas4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentSchemas4' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemasSourceValue$inboundSchema: z.ZodType<
  EmploymentSchemasSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => EmploymentSchemas4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type EmploymentSchemasSourceValue$Outbound =
  | EmploymentSchemas4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const EmploymentSchemasSourceValue$outboundSchema: z.ZodType<
  EmploymentSchemasSourceValue$Outbound,
  z.ZodTypeDef,
  EmploymentSchemasSourceValue
> = z.union([
  z.lazy(() => EmploymentSchemas4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasSourceValue$ {
  /** @deprecated use `EmploymentSchemasSourceValue$inboundSchema` instead. */
  export const inboundSchema = EmploymentSchemasSourceValue$inboundSchema;
  /** @deprecated use `EmploymentSchemasSourceValue$outboundSchema` instead. */
  export const outboundSchema = EmploymentSchemasSourceValue$outboundSchema;
  /** @deprecated use `EmploymentSchemasSourceValue$Outbound` instead. */
  export type Outbound = EmploymentSchemasSourceValue$Outbound;
}

export function employmentSchemasSourceValueToJSON(
  employmentSchemasSourceValue: EmploymentSchemasSourceValue,
): string {
  return JSON.stringify(
    EmploymentSchemasSourceValue$outboundSchema.parse(
      employmentSchemasSourceValue,
    ),
  );
}

export function employmentSchemasSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentSchemasSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentSchemasSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentSchemasSourceValue' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemasValue$inboundSchema: z.ZodType<
  EmploymentSchemasValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EmploymentSchemasValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EmploymentSchemasValue$outboundSchema: z.ZodType<
  EmploymentSchemasValueOpen,
  z.ZodTypeDef,
  EmploymentSchemasValueOpen
> = z.union([
  z.nativeEnum(EmploymentSchemasValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasValue$ {
  /** @deprecated use `EmploymentSchemasValue$inboundSchema` instead. */
  export const inboundSchema = EmploymentSchemasValue$inboundSchema;
  /** @deprecated use `EmploymentSchemasValue$outboundSchema` instead. */
  export const outboundSchema = EmploymentSchemasValue$outboundSchema;
}

/** @internal */
export const EmploymentEmploymentType$inboundSchema: z.ZodType<
  EmploymentEmploymentType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => EmploymentSchemas4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmploymentSchemasValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type EmploymentEmploymentType$Outbound = {
  source_value?:
    | EmploymentSchemas4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const EmploymentEmploymentType$outboundSchema: z.ZodType<
  EmploymentEmploymentType$Outbound,
  z.ZodTypeDef,
  EmploymentEmploymentType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => EmploymentSchemas4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmploymentSchemasValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentEmploymentType$ {
  /** @deprecated use `EmploymentEmploymentType$inboundSchema` instead. */
  export const inboundSchema = EmploymentEmploymentType$inboundSchema;
  /** @deprecated use `EmploymentEmploymentType$outboundSchema` instead. */
  export const outboundSchema = EmploymentEmploymentType$outboundSchema;
  /** @deprecated use `EmploymentEmploymentType$Outbound` instead. */
  export type Outbound = EmploymentEmploymentType$Outbound;
}

export function employmentEmploymentTypeToJSON(
  employmentEmploymentType: EmploymentEmploymentType,
): string {
  return JSON.stringify(
    EmploymentEmploymentType$outboundSchema.parse(employmentEmploymentType),
  );
}

export function employmentEmploymentTypeFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentEmploymentType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentEmploymentType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentEmploymentType' from JSON`,
  );
}

/** @internal */
export const EmploymentGrade$inboundSchema: z.ZodType<
  EmploymentGrade,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "remote_id": "remoteId",
  });
});

/** @internal */
export type EmploymentGrade$Outbound = {
  description?: string | null | undefined;
  id?: string | null | undefined;
  name?: string | null | undefined;
  remote_id?: string | null | undefined;
};

/** @internal */
export const EmploymentGrade$outboundSchema: z.ZodType<
  EmploymentGrade$Outbound,
  z.ZodTypeDef,
  EmploymentGrade
> = z.object({
  description: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentGrade$ {
  /** @deprecated use `EmploymentGrade$inboundSchema` instead. */
  export const inboundSchema = EmploymentGrade$inboundSchema;
  /** @deprecated use `EmploymentGrade$outboundSchema` instead. */
  export const outboundSchema = EmploymentGrade$outboundSchema;
  /** @deprecated use `EmploymentGrade$Outbound` instead. */
  export type Outbound = EmploymentGrade$Outbound;
}

export function employmentGradeToJSON(
  employmentGrade: EmploymentGrade,
): string {
  return JSON.stringify(EmploymentGrade$outboundSchema.parse(employmentGrade));
}

export function employmentGradeFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentGrade, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentGrade$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentGrade' from JSON`,
  );
}

/** @internal */
export const Description$inboundSchema: z.ZodType<
  Description,
  z.ZodTypeDef,
  unknown
> = z.object({
  text: z.nullable(z.string()).optional(),
});

/** @internal */
export type Description$Outbound = {
  text?: string | null | undefined;
};

/** @internal */
export const Description$outboundSchema: z.ZodType<
  Description$Outbound,
  z.ZodTypeDef,
  Description
> = z.object({
  text: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Description$ {
  /** @deprecated use `Description$inboundSchema` instead. */
  export const inboundSchema = Description$inboundSchema;
  /** @deprecated use `Description$outboundSchema` instead. */
  export const outboundSchema = Description$outboundSchema;
  /** @deprecated use `Description$Outbound` instead. */
  export type Outbound = Description$Outbound;
}

export function descriptionToJSON(description: Description): string {
  return JSON.stringify(Description$outboundSchema.parse(description));
}

export function descriptionFromJSON(
  jsonString: string,
): SafeParseResult<Description, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Description$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Description' from JSON`,
  );
}

/** @internal */
export const EmploymentJob$inboundSchema: z.ZodType<
  EmploymentJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.nullable(z.lazy(() => Description$inboundSchema)).optional(),
  id: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  parent_id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "parent_id": "parentId",
    "remote_id": "remoteId",
  });
});

/** @internal */
export type EmploymentJob$Outbound = {
  description?: Description$Outbound | null | undefined;
  id?: string | null | undefined;
  owner_id?: string | null | undefined;
  parent_id?: string | null | undefined;
  remote_id?: string | null | undefined;
  title?: string | null | undefined;
};

/** @internal */
export const EmploymentJob$outboundSchema: z.ZodType<
  EmploymentJob$Outbound,
  z.ZodTypeDef,
  EmploymentJob
> = z.object({
  description: z.nullable(z.lazy(() => Description$outboundSchema)).optional(),
  id: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  parentId: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    parentId: "parent_id",
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentJob$ {
  /** @deprecated use `EmploymentJob$inboundSchema` instead. */
  export const inboundSchema = EmploymentJob$inboundSchema;
  /** @deprecated use `EmploymentJob$outboundSchema` instead. */
  export const outboundSchema = EmploymentJob$outboundSchema;
  /** @deprecated use `EmploymentJob$Outbound` instead. */
  export type Outbound = EmploymentJob$Outbound;
}

export function employmentJobToJSON(employmentJob: EmploymentJob): string {
  return JSON.stringify(EmploymentJob$outboundSchema.parse(employmentJob));
}

export function employmentJobFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentJob' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemasPayFrequency4$inboundSchema: z.ZodType<
  EmploymentSchemasPayFrequency4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EmploymentSchemasPayFrequency4$Outbound = {};

/** @internal */
export const EmploymentSchemasPayFrequency4$outboundSchema: z.ZodType<
  EmploymentSchemasPayFrequency4$Outbound,
  z.ZodTypeDef,
  EmploymentSchemasPayFrequency4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasPayFrequency4$ {
  /** @deprecated use `EmploymentSchemasPayFrequency4$inboundSchema` instead. */
  export const inboundSchema = EmploymentSchemasPayFrequency4$inboundSchema;
  /** @deprecated use `EmploymentSchemasPayFrequency4$outboundSchema` instead. */
  export const outboundSchema = EmploymentSchemasPayFrequency4$outboundSchema;
  /** @deprecated use `EmploymentSchemasPayFrequency4$Outbound` instead. */
  export type Outbound = EmploymentSchemasPayFrequency4$Outbound;
}

export function employmentSchemasPayFrequency4ToJSON(
  employmentSchemasPayFrequency4: EmploymentSchemasPayFrequency4,
): string {
  return JSON.stringify(
    EmploymentSchemasPayFrequency4$outboundSchema.parse(
      employmentSchemasPayFrequency4,
    ),
  );
}

export function employmentSchemasPayFrequency4FromJSON(
  jsonString: string,
): SafeParseResult<EmploymentSchemasPayFrequency4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentSchemasPayFrequency4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentSchemasPayFrequency4' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemasPayFrequencySourceValue$inboundSchema: z.ZodType<
  EmploymentSchemasPayFrequencySourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => EmploymentSchemasPayFrequency4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type EmploymentSchemasPayFrequencySourceValue$Outbound =
  | EmploymentSchemasPayFrequency4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const EmploymentSchemasPayFrequencySourceValue$outboundSchema: z.ZodType<
  EmploymentSchemasPayFrequencySourceValue$Outbound,
  z.ZodTypeDef,
  EmploymentSchemasPayFrequencySourceValue
> = z.union([
  z.lazy(() => EmploymentSchemasPayFrequency4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasPayFrequencySourceValue$ {
  /** @deprecated use `EmploymentSchemasPayFrequencySourceValue$inboundSchema` instead. */
  export const inboundSchema =
    EmploymentSchemasPayFrequencySourceValue$inboundSchema;
  /** @deprecated use `EmploymentSchemasPayFrequencySourceValue$outboundSchema` instead. */
  export const outboundSchema =
    EmploymentSchemasPayFrequencySourceValue$outboundSchema;
  /** @deprecated use `EmploymentSchemasPayFrequencySourceValue$Outbound` instead. */
  export type Outbound = EmploymentSchemasPayFrequencySourceValue$Outbound;
}

export function employmentSchemasPayFrequencySourceValueToJSON(
  employmentSchemasPayFrequencySourceValue:
    EmploymentSchemasPayFrequencySourceValue,
): string {
  return JSON.stringify(
    EmploymentSchemasPayFrequencySourceValue$outboundSchema.parse(
      employmentSchemasPayFrequencySourceValue,
    ),
  );
}

export function employmentSchemasPayFrequencySourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  EmploymentSchemasPayFrequencySourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EmploymentSchemasPayFrequencySourceValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EmploymentSchemasPayFrequencySourceValue' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemasPayFrequencyValue$inboundSchema: z.ZodType<
  EmploymentSchemasPayFrequencyValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EmploymentSchemasPayFrequencyValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EmploymentSchemasPayFrequencyValue$outboundSchema: z.ZodType<
  EmploymentSchemasPayFrequencyValueOpen,
  z.ZodTypeDef,
  EmploymentSchemasPayFrequencyValueOpen
> = z.union([
  z.nativeEnum(EmploymentSchemasPayFrequencyValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasPayFrequencyValue$ {
  /** @deprecated use `EmploymentSchemasPayFrequencyValue$inboundSchema` instead. */
  export const inboundSchema = EmploymentSchemasPayFrequencyValue$inboundSchema;
  /** @deprecated use `EmploymentSchemasPayFrequencyValue$outboundSchema` instead. */
  export const outboundSchema =
    EmploymentSchemasPayFrequencyValue$outboundSchema;
}

/** @internal */
export const EmploymentPayFrequency$inboundSchema: z.ZodType<
  EmploymentPayFrequency,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => EmploymentSchemasPayFrequency4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmploymentSchemasPayFrequencyValue$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type EmploymentPayFrequency$Outbound = {
  source_value?:
    | EmploymentSchemasPayFrequency4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const EmploymentPayFrequency$outboundSchema: z.ZodType<
  EmploymentPayFrequency$Outbound,
  z.ZodTypeDef,
  EmploymentPayFrequency
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => EmploymentSchemasPayFrequency4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmploymentSchemasPayFrequencyValue$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentPayFrequency$ {
  /** @deprecated use `EmploymentPayFrequency$inboundSchema` instead. */
  export const inboundSchema = EmploymentPayFrequency$inboundSchema;
  /** @deprecated use `EmploymentPayFrequency$outboundSchema` instead. */
  export const outboundSchema = EmploymentPayFrequency$outboundSchema;
  /** @deprecated use `EmploymentPayFrequency$Outbound` instead. */
  export type Outbound = EmploymentPayFrequency$Outbound;
}

export function employmentPayFrequencyToJSON(
  employmentPayFrequency: EmploymentPayFrequency,
): string {
  return JSON.stringify(
    EmploymentPayFrequency$outboundSchema.parse(employmentPayFrequency),
  );
}

export function employmentPayFrequencyFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentPayFrequency, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentPayFrequency$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentPayFrequency' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemasPayPeriod4$inboundSchema: z.ZodType<
  EmploymentSchemasPayPeriod4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EmploymentSchemasPayPeriod4$Outbound = {};

/** @internal */
export const EmploymentSchemasPayPeriod4$outboundSchema: z.ZodType<
  EmploymentSchemasPayPeriod4$Outbound,
  z.ZodTypeDef,
  EmploymentSchemasPayPeriod4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasPayPeriod4$ {
  /** @deprecated use `EmploymentSchemasPayPeriod4$inboundSchema` instead. */
  export const inboundSchema = EmploymentSchemasPayPeriod4$inboundSchema;
  /** @deprecated use `EmploymentSchemasPayPeriod4$outboundSchema` instead. */
  export const outboundSchema = EmploymentSchemasPayPeriod4$outboundSchema;
  /** @deprecated use `EmploymentSchemasPayPeriod4$Outbound` instead. */
  export type Outbound = EmploymentSchemasPayPeriod4$Outbound;
}

export function employmentSchemasPayPeriod4ToJSON(
  employmentSchemasPayPeriod4: EmploymentSchemasPayPeriod4,
): string {
  return JSON.stringify(
    EmploymentSchemasPayPeriod4$outboundSchema.parse(
      employmentSchemasPayPeriod4,
    ),
  );
}

export function employmentSchemasPayPeriod4FromJSON(
  jsonString: string,
): SafeParseResult<EmploymentSchemasPayPeriod4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentSchemasPayPeriod4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentSchemasPayPeriod4' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemasPayPeriodSourceValue$inboundSchema: z.ZodType<
  EmploymentSchemasPayPeriodSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => EmploymentSchemasPayPeriod4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type EmploymentSchemasPayPeriodSourceValue$Outbound =
  | EmploymentSchemasPayPeriod4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const EmploymentSchemasPayPeriodSourceValue$outboundSchema: z.ZodType<
  EmploymentSchemasPayPeriodSourceValue$Outbound,
  z.ZodTypeDef,
  EmploymentSchemasPayPeriodSourceValue
> = z.union([
  z.lazy(() => EmploymentSchemasPayPeriod4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasPayPeriodSourceValue$ {
  /** @deprecated use `EmploymentSchemasPayPeriodSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    EmploymentSchemasPayPeriodSourceValue$inboundSchema;
  /** @deprecated use `EmploymentSchemasPayPeriodSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    EmploymentSchemasPayPeriodSourceValue$outboundSchema;
  /** @deprecated use `EmploymentSchemasPayPeriodSourceValue$Outbound` instead. */
  export type Outbound = EmploymentSchemasPayPeriodSourceValue$Outbound;
}

export function employmentSchemasPayPeriodSourceValueToJSON(
  employmentSchemasPayPeriodSourceValue: EmploymentSchemasPayPeriodSourceValue,
): string {
  return JSON.stringify(
    EmploymentSchemasPayPeriodSourceValue$outboundSchema.parse(
      employmentSchemasPayPeriodSourceValue,
    ),
  );
}

export function employmentSchemasPayPeriodSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentSchemasPayPeriodSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EmploymentSchemasPayPeriodSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentSchemasPayPeriodSourceValue' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemasPayPeriodValue$inboundSchema: z.ZodType<
  EmploymentSchemasPayPeriodValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EmploymentSchemasPayPeriodValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EmploymentSchemasPayPeriodValue$outboundSchema: z.ZodType<
  EmploymentSchemasPayPeriodValueOpen,
  z.ZodTypeDef,
  EmploymentSchemasPayPeriodValueOpen
> = z.union([
  z.nativeEnum(EmploymentSchemasPayPeriodValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasPayPeriodValue$ {
  /** @deprecated use `EmploymentSchemasPayPeriodValue$inboundSchema` instead. */
  export const inboundSchema = EmploymentSchemasPayPeriodValue$inboundSchema;
  /** @deprecated use `EmploymentSchemasPayPeriodValue$outboundSchema` instead. */
  export const outboundSchema = EmploymentSchemasPayPeriodValue$outboundSchema;
}

/** @internal */
export const EmploymentPayPeriod$inboundSchema: z.ZodType<
  EmploymentPayPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => EmploymentSchemasPayPeriod4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmploymentSchemasPayPeriodValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type EmploymentPayPeriod$Outbound = {
  source_value?:
    | EmploymentSchemasPayPeriod4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const EmploymentPayPeriod$outboundSchema: z.ZodType<
  EmploymentPayPeriod$Outbound,
  z.ZodTypeDef,
  EmploymentPayPeriod
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => EmploymentSchemasPayPeriod4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmploymentSchemasPayPeriodValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentPayPeriod$ {
  /** @deprecated use `EmploymentPayPeriod$inboundSchema` instead. */
  export const inboundSchema = EmploymentPayPeriod$inboundSchema;
  /** @deprecated use `EmploymentPayPeriod$outboundSchema` instead. */
  export const outboundSchema = EmploymentPayPeriod$outboundSchema;
  /** @deprecated use `EmploymentPayPeriod$Outbound` instead. */
  export type Outbound = EmploymentPayPeriod$Outbound;
}

export function employmentPayPeriodToJSON(
  employmentPayPeriod: EmploymentPayPeriod,
): string {
  return JSON.stringify(
    EmploymentPayPeriod$outboundSchema.parse(employmentPayPeriod),
  );
}

export function employmentPayPeriodFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentPayPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentPayPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentPayPeriod' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemasType4$inboundSchema: z.ZodType<
  EmploymentSchemasType4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EmploymentSchemasType4$Outbound = {};

/** @internal */
export const EmploymentSchemasType4$outboundSchema: z.ZodType<
  EmploymentSchemasType4$Outbound,
  z.ZodTypeDef,
  EmploymentSchemasType4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasType4$ {
  /** @deprecated use `EmploymentSchemasType4$inboundSchema` instead. */
  export const inboundSchema = EmploymentSchemasType4$inboundSchema;
  /** @deprecated use `EmploymentSchemasType4$outboundSchema` instead. */
  export const outboundSchema = EmploymentSchemasType4$outboundSchema;
  /** @deprecated use `EmploymentSchemasType4$Outbound` instead. */
  export type Outbound = EmploymentSchemasType4$Outbound;
}

export function employmentSchemasType4ToJSON(
  employmentSchemasType4: EmploymentSchemasType4,
): string {
  return JSON.stringify(
    EmploymentSchemasType4$outboundSchema.parse(employmentSchemasType4),
  );
}

export function employmentSchemasType4FromJSON(
  jsonString: string,
): SafeParseResult<EmploymentSchemasType4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentSchemasType4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentSchemasType4' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemasTypeSourceValue$inboundSchema: z.ZodType<
  EmploymentSchemasTypeSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => EmploymentSchemasType4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type EmploymentSchemasTypeSourceValue$Outbound =
  | EmploymentSchemasType4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const EmploymentSchemasTypeSourceValue$outboundSchema: z.ZodType<
  EmploymentSchemasTypeSourceValue$Outbound,
  z.ZodTypeDef,
  EmploymentSchemasTypeSourceValue
> = z.union([
  z.lazy(() => EmploymentSchemasType4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasTypeSourceValue$ {
  /** @deprecated use `EmploymentSchemasTypeSourceValue$inboundSchema` instead. */
  export const inboundSchema = EmploymentSchemasTypeSourceValue$inboundSchema;
  /** @deprecated use `EmploymentSchemasTypeSourceValue$outboundSchema` instead. */
  export const outboundSchema = EmploymentSchemasTypeSourceValue$outboundSchema;
  /** @deprecated use `EmploymentSchemasTypeSourceValue$Outbound` instead. */
  export type Outbound = EmploymentSchemasTypeSourceValue$Outbound;
}

export function employmentSchemasTypeSourceValueToJSON(
  employmentSchemasTypeSourceValue: EmploymentSchemasTypeSourceValue,
): string {
  return JSON.stringify(
    EmploymentSchemasTypeSourceValue$outboundSchema.parse(
      employmentSchemasTypeSourceValue,
    ),
  );
}

export function employmentSchemasTypeSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentSchemasTypeSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentSchemasTypeSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentSchemasTypeSourceValue' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemasTypeValue$inboundSchema: z.ZodType<
  EmploymentSchemasTypeValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EmploymentSchemasTypeValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EmploymentSchemasTypeValue$outboundSchema: z.ZodType<
  EmploymentSchemasTypeValueOpen,
  z.ZodTypeDef,
  EmploymentSchemasTypeValueOpen
> = z.union([
  z.nativeEnum(EmploymentSchemasTypeValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasTypeValue$ {
  /** @deprecated use `EmploymentSchemasTypeValue$inboundSchema` instead. */
  export const inboundSchema = EmploymentSchemasTypeValue$inboundSchema;
  /** @deprecated use `EmploymentSchemasTypeValue$outboundSchema` instead. */
  export const outboundSchema = EmploymentSchemasTypeValue$outboundSchema;
}

/** @internal */
export const EmploymentSchemasTypeType$inboundSchema: z.ZodType<
  EmploymentSchemasTypeType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => EmploymentSchemasType4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmploymentSchemasTypeValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type EmploymentSchemasTypeType$Outbound = {
  source_value?:
    | EmploymentSchemasType4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const EmploymentSchemasTypeType$outboundSchema: z.ZodType<
  EmploymentSchemasTypeType$Outbound,
  z.ZodTypeDef,
  EmploymentSchemasTypeType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => EmploymentSchemasType4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmploymentSchemasTypeValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasTypeType$ {
  /** @deprecated use `EmploymentSchemasTypeType$inboundSchema` instead. */
  export const inboundSchema = EmploymentSchemasTypeType$inboundSchema;
  /** @deprecated use `EmploymentSchemasTypeType$outboundSchema` instead. */
  export const outboundSchema = EmploymentSchemasTypeType$outboundSchema;
  /** @deprecated use `EmploymentSchemasTypeType$Outbound` instead. */
  export type Outbound = EmploymentSchemasTypeType$Outbound;
}

export function employmentSchemasTypeTypeToJSON(
  employmentSchemasTypeType: EmploymentSchemasTypeType,
): string {
  return JSON.stringify(
    EmploymentSchemasTypeType$outboundSchema.parse(employmentSchemasTypeType),
  );
}

export function employmentSchemasTypeTypeFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentSchemasTypeType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentSchemasTypeType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentSchemasTypeType' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemasType$inboundSchema: z.ZodType<
  EmploymentSchemasType,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  type: z.nullable(z.lazy(() => EmploymentSchemasTypeType$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "remote_id": "remoteId",
  });
});

/** @internal */
export type EmploymentSchemasType$Outbound = {
  id?: string | null | undefined;
  label?: string | null | undefined;
  remote_id?: string | null | undefined;
  type?: EmploymentSchemasTypeType$Outbound | null | undefined;
};

/** @internal */
export const EmploymentSchemasType$outboundSchema: z.ZodType<
  EmploymentSchemasType$Outbound,
  z.ZodTypeDef,
  EmploymentSchemasType
> = z.object({
  id: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  type: z.nullable(z.lazy(() => EmploymentSchemasTypeType$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasType$ {
  /** @deprecated use `EmploymentSchemasType$inboundSchema` instead. */
  export const inboundSchema = EmploymentSchemasType$inboundSchema;
  /** @deprecated use `EmploymentSchemasType$outboundSchema` instead. */
  export const outboundSchema = EmploymentSchemasType$outboundSchema;
  /** @deprecated use `EmploymentSchemasType$Outbound` instead. */
  export type Outbound = EmploymentSchemasType$Outbound;
}

export function employmentSchemasTypeToJSON(
  employmentSchemasType: EmploymentSchemasType,
): string {
  return JSON.stringify(
    EmploymentSchemasType$outboundSchema.parse(employmentSchemasType),
  );
}

export function employmentSchemasTypeFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentSchemasType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentSchemasType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentSchemasType' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemasWorkTime4$inboundSchema: z.ZodType<
  EmploymentSchemasWorkTime4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EmploymentSchemasWorkTime4$Outbound = {};

/** @internal */
export const EmploymentSchemasWorkTime4$outboundSchema: z.ZodType<
  EmploymentSchemasWorkTime4$Outbound,
  z.ZodTypeDef,
  EmploymentSchemasWorkTime4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasWorkTime4$ {
  /** @deprecated use `EmploymentSchemasWorkTime4$inboundSchema` instead. */
  export const inboundSchema = EmploymentSchemasWorkTime4$inboundSchema;
  /** @deprecated use `EmploymentSchemasWorkTime4$outboundSchema` instead. */
  export const outboundSchema = EmploymentSchemasWorkTime4$outboundSchema;
  /** @deprecated use `EmploymentSchemasWorkTime4$Outbound` instead. */
  export type Outbound = EmploymentSchemasWorkTime4$Outbound;
}

export function employmentSchemasWorkTime4ToJSON(
  employmentSchemasWorkTime4: EmploymentSchemasWorkTime4,
): string {
  return JSON.stringify(
    EmploymentSchemasWorkTime4$outboundSchema.parse(employmentSchemasWorkTime4),
  );
}

export function employmentSchemasWorkTime4FromJSON(
  jsonString: string,
): SafeParseResult<EmploymentSchemasWorkTime4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentSchemasWorkTime4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentSchemasWorkTime4' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemasWorkTimeSourceValue$inboundSchema: z.ZodType<
  EmploymentSchemasWorkTimeSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => EmploymentSchemasWorkTime4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type EmploymentSchemasWorkTimeSourceValue$Outbound =
  | EmploymentSchemasWorkTime4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const EmploymentSchemasWorkTimeSourceValue$outboundSchema: z.ZodType<
  EmploymentSchemasWorkTimeSourceValue$Outbound,
  z.ZodTypeDef,
  EmploymentSchemasWorkTimeSourceValue
> = z.union([
  z.lazy(() => EmploymentSchemasWorkTime4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasWorkTimeSourceValue$ {
  /** @deprecated use `EmploymentSchemasWorkTimeSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    EmploymentSchemasWorkTimeSourceValue$inboundSchema;
  /** @deprecated use `EmploymentSchemasWorkTimeSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    EmploymentSchemasWorkTimeSourceValue$outboundSchema;
  /** @deprecated use `EmploymentSchemasWorkTimeSourceValue$Outbound` instead. */
  export type Outbound = EmploymentSchemasWorkTimeSourceValue$Outbound;
}

export function employmentSchemasWorkTimeSourceValueToJSON(
  employmentSchemasWorkTimeSourceValue: EmploymentSchemasWorkTimeSourceValue,
): string {
  return JSON.stringify(
    EmploymentSchemasWorkTimeSourceValue$outboundSchema.parse(
      employmentSchemasWorkTimeSourceValue,
    ),
  );
}

export function employmentSchemasWorkTimeSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentSchemasWorkTimeSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EmploymentSchemasWorkTimeSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentSchemasWorkTimeSourceValue' from JSON`,
  );
}

/** @internal */
export const EmploymentSchemasWorkTimeValue$inboundSchema: z.ZodType<
  EmploymentSchemasWorkTimeValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EmploymentSchemasWorkTimeValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EmploymentSchemasWorkTimeValue$outboundSchema: z.ZodType<
  EmploymentSchemasWorkTimeValueOpen,
  z.ZodTypeDef,
  EmploymentSchemasWorkTimeValueOpen
> = z.union([
  z.nativeEnum(EmploymentSchemasWorkTimeValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSchemasWorkTimeValue$ {
  /** @deprecated use `EmploymentSchemasWorkTimeValue$inboundSchema` instead. */
  export const inboundSchema = EmploymentSchemasWorkTimeValue$inboundSchema;
  /** @deprecated use `EmploymentSchemasWorkTimeValue$outboundSchema` instead. */
  export const outboundSchema = EmploymentSchemasWorkTimeValue$outboundSchema;
}

/** @internal */
export const EmploymentDurationUnit$inboundSchema: z.ZodType<
  EmploymentDurationUnit,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => EmploymentSchemasWorkTime4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmploymentSchemasWorkTimeValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type EmploymentDurationUnit$Outbound = {
  source_value?:
    | EmploymentSchemasWorkTime4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const EmploymentDurationUnit$outboundSchema: z.ZodType<
  EmploymentDurationUnit$Outbound,
  z.ZodTypeDef,
  EmploymentDurationUnit
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => EmploymentSchemasWorkTime4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmploymentSchemasWorkTimeValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentDurationUnit$ {
  /** @deprecated use `EmploymentDurationUnit$inboundSchema` instead. */
  export const inboundSchema = EmploymentDurationUnit$inboundSchema;
  /** @deprecated use `EmploymentDurationUnit$outboundSchema` instead. */
  export const outboundSchema = EmploymentDurationUnit$outboundSchema;
  /** @deprecated use `EmploymentDurationUnit$Outbound` instead. */
  export type Outbound = EmploymentDurationUnit$Outbound;
}

export function employmentDurationUnitToJSON(
  employmentDurationUnit: EmploymentDurationUnit,
): string {
  return JSON.stringify(
    EmploymentDurationUnit$outboundSchema.parse(employmentDurationUnit),
  );
}

export function employmentDurationUnitFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentDurationUnit, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentDurationUnit$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentDurationUnit' from JSON`,
  );
}

/** @internal */
export const EmploymentWorkTime$inboundSchema: z.ZodType<
  EmploymentWorkTime,
  z.ZodTypeDef,
  unknown
> = z.object({
  duration: z.nullable(z.string()).optional(),
  duration_unit: z.nullable(z.lazy(() => EmploymentDurationUnit$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "duration_unit": "durationUnit",
  });
});

/** @internal */
export type EmploymentWorkTime$Outbound = {
  duration?: string | null | undefined;
  duration_unit?: EmploymentDurationUnit$Outbound | null | undefined;
};

/** @internal */
export const EmploymentWorkTime$outboundSchema: z.ZodType<
  EmploymentWorkTime$Outbound,
  z.ZodTypeDef,
  EmploymentWorkTime
> = z.object({
  duration: z.nullable(z.string()).optional(),
  durationUnit: z.nullable(z.lazy(() => EmploymentDurationUnit$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    durationUnit: "duration_unit",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentWorkTime$ {
  /** @deprecated use `EmploymentWorkTime$inboundSchema` instead. */
  export const inboundSchema = EmploymentWorkTime$inboundSchema;
  /** @deprecated use `EmploymentWorkTime$outboundSchema` instead. */
  export const outboundSchema = EmploymentWorkTime$outboundSchema;
  /** @deprecated use `EmploymentWorkTime$Outbound` instead. */
  export type Outbound = EmploymentWorkTime$Outbound;
}

export function employmentWorkTimeToJSON(
  employmentWorkTime: EmploymentWorkTime,
): string {
  return JSON.stringify(
    EmploymentWorkTime$outboundSchema.parse(employmentWorkTime),
  );
}

export function employmentWorkTimeFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentWorkTime, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentWorkTime$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentWorkTime' from JSON`,
  );
}

/** @internal */
export const Employment$inboundSchema: z.ZodType<
  Employment,
  z.ZodTypeDef,
  unknown
> = z.object({
  active: z.nullable(z.boolean()).optional(),
  contract_type: z.nullable(z.lazy(() => ContractType$inboundSchema))
    .optional(),
  cost_center: z.nullable(z.lazy(() => CostCenter$inboundSchema)).optional(),
  cost_centers: z.nullable(z.array(HRISCostCenter$inboundSchema)).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  department: z.nullable(z.lazy(() => EmploymentDepartment$inboundSchema))
    .optional(),
  division: z.nullable(z.lazy(() => Division$inboundSchema)).optional(),
  effective_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  employee_id: z.nullable(z.string()).optional(),
  employment_contract_type: z.nullable(
    z.lazy(() => EmploymentEmploymentContractType$inboundSchema),
  ).optional(),
  employment_type: z.nullable(
    z.lazy(() => EmploymentEmploymentType$inboundSchema),
  ).optional(),
  end_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  fte: z.nullable(z.number()).optional(),
  grade: z.nullable(z.lazy(() => EmploymentGrade$inboundSchema)).optional(),
  id: z.nullable(z.string()).optional(),
  job: z.nullable(z.lazy(() => EmploymentJob$inboundSchema)).optional(),
  job_title: z.nullable(z.string()).optional(),
  manager: z.nullable(z.array(EmploymentManagerApiModel$inboundSchema))
    .optional(),
  pay_currency: z.nullable(z.string()).optional(),
  pay_frequency: z.nullable(z.lazy(() => EmploymentPayFrequency$inboundSchema))
    .optional(),
  pay_period: z.nullable(z.lazy(() => EmploymentPayPeriod$inboundSchema))
    .optional(),
  pay_rate: z.nullable(z.string()).optional(),
  payroll_code: z.nullable(z.string()).optional(),
  remote_employee_id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  start_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  type: z.nullable(z.lazy(() => EmploymentSchemasType$inboundSchema))
    .optional(),
  unified_custom_fields: z.nullable(z.record(z.any())).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  work_time: z.nullable(z.lazy(() => EmploymentWorkTime$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "contract_type": "contractType",
    "cost_center": "costCenter",
    "cost_centers": "costCenters",
    "created_at": "createdAt",
    "effective_date": "effectiveDate",
    "employee_id": "employeeId",
    "employment_contract_type": "employmentContractType",
    "employment_type": "employmentType",
    "end_date": "endDate",
    "job_title": "jobTitle",
    "pay_currency": "payCurrency",
    "pay_frequency": "payFrequency",
    "pay_period": "payPeriod",
    "pay_rate": "payRate",
    "payroll_code": "payrollCode",
    "remote_employee_id": "remoteEmployeeId",
    "remote_id": "remoteId",
    "start_date": "startDate",
    "unified_custom_fields": "unifiedCustomFields",
    "updated_at": "updatedAt",
    "work_time": "workTime",
  });
});

/** @internal */
export type Employment$Outbound = {
  active?: boolean | null | undefined;
  contract_type?: ContractType$Outbound | null | undefined;
  cost_center?: CostCenter$Outbound | null | undefined;
  cost_centers?: Array<HRISCostCenter$Outbound> | null | undefined;
  created_at?: string | null | undefined;
  department?: EmploymentDepartment$Outbound | null | undefined;
  division?: Division$Outbound | null | undefined;
  effective_date?: string | null | undefined;
  employee_id?: string | null | undefined;
  employment_contract_type?:
    | EmploymentEmploymentContractType$Outbound
    | null
    | undefined;
  employment_type?: EmploymentEmploymentType$Outbound | null | undefined;
  end_date?: string | null | undefined;
  fte?: number | null | undefined;
  grade?: EmploymentGrade$Outbound | null | undefined;
  id?: string | null | undefined;
  job?: EmploymentJob$Outbound | null | undefined;
  job_title?: string | null | undefined;
  manager?: Array<EmploymentManagerApiModel$Outbound> | null | undefined;
  pay_currency?: string | null | undefined;
  pay_frequency?: EmploymentPayFrequency$Outbound | null | undefined;
  pay_period?: EmploymentPayPeriod$Outbound | null | undefined;
  pay_rate?: string | null | undefined;
  payroll_code?: string | null | undefined;
  remote_employee_id?: string | null | undefined;
  remote_id?: string | null | undefined;
  start_date?: string | null | undefined;
  type?: EmploymentSchemasType$Outbound | null | undefined;
  unified_custom_fields?: { [k: string]: any } | null | undefined;
  updated_at?: string | null | undefined;
  work_time?: EmploymentWorkTime$Outbound | null | undefined;
};

/** @internal */
export const Employment$outboundSchema: z.ZodType<
  Employment$Outbound,
  z.ZodTypeDef,
  Employment
> = z.object({
  active: z.nullable(z.boolean()).optional(),
  contractType: z.nullable(z.lazy(() => ContractType$outboundSchema))
    .optional(),
  costCenter: z.nullable(z.lazy(() => CostCenter$outboundSchema)).optional(),
  costCenters: z.nullable(z.array(HRISCostCenter$outboundSchema)).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  department: z.nullable(z.lazy(() => EmploymentDepartment$outboundSchema))
    .optional(),
  division: z.nullable(z.lazy(() => Division$outboundSchema)).optional(),
  effectiveDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  employeeId: z.nullable(z.string()).optional(),
  employmentContractType: z.nullable(
    z.lazy(() => EmploymentEmploymentContractType$outboundSchema),
  ).optional(),
  employmentType: z.nullable(
    z.lazy(() => EmploymentEmploymentType$outboundSchema),
  ).optional(),
  endDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  fte: z.nullable(z.number()).optional(),
  grade: z.nullable(z.lazy(() => EmploymentGrade$outboundSchema)).optional(),
  id: z.nullable(z.string()).optional(),
  job: z.nullable(z.lazy(() => EmploymentJob$outboundSchema)).optional(),
  jobTitle: z.nullable(z.string()).optional(),
  manager: z.nullable(z.array(EmploymentManagerApiModel$outboundSchema))
    .optional(),
  payCurrency: z.nullable(z.string()).optional(),
  payFrequency: z.nullable(z.lazy(() => EmploymentPayFrequency$outboundSchema))
    .optional(),
  payPeriod: z.nullable(z.lazy(() => EmploymentPayPeriod$outboundSchema))
    .optional(),
  payRate: z.nullable(z.string()).optional(),
  payrollCode: z.nullable(z.string()).optional(),
  remoteEmployeeId: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  startDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  type: z.nullable(z.lazy(() => EmploymentSchemasType$outboundSchema))
    .optional(),
  unifiedCustomFields: z.nullable(z.record(z.any())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  workTime: z.nullable(z.lazy(() => EmploymentWorkTime$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    contractType: "contract_type",
    costCenter: "cost_center",
    costCenters: "cost_centers",
    createdAt: "created_at",
    effectiveDate: "effective_date",
    employeeId: "employee_id",
    employmentContractType: "employment_contract_type",
    employmentType: "employment_type",
    endDate: "end_date",
    jobTitle: "job_title",
    payCurrency: "pay_currency",
    payFrequency: "pay_frequency",
    payPeriod: "pay_period",
    payRate: "pay_rate",
    payrollCode: "payroll_code",
    remoteEmployeeId: "remote_employee_id",
    remoteId: "remote_id",
    startDate: "start_date",
    unifiedCustomFields: "unified_custom_fields",
    updatedAt: "updated_at",
    workTime: "work_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Employment$ {
  /** @deprecated use `Employment$inboundSchema` instead. */
  export const inboundSchema = Employment$inboundSchema;
  /** @deprecated use `Employment$outboundSchema` instead. */
  export const outboundSchema = Employment$outboundSchema;
  /** @deprecated use `Employment$Outbound` instead. */
  export type Outbound = Employment$Outbound;
}

export function employmentToJSON(employment: Employment): string {
  return JSON.stringify(Employment$outboundSchema.parse(employment));
}

export function employmentFromJSON(
  jsonString: string,
): SafeParseResult<Employment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Employment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Employment' from JSON`,
  );
}
