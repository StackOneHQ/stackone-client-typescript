/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Message, Message$ } from "./message";
import { z } from "zod";

export type MarketingCreateTemplateRequestDto = {
    id?: string | undefined;
    messages?: Array<Message> | undefined;
    name?: string | undefined;
    tags?: Array<string> | undefined;
};

/** @internal */
export namespace MarketingCreateTemplateRequestDto$ {
    export type Inbound = {
        id?: string | undefined;
        messages?: Array<Message$.Inbound> | undefined;
        name?: string | undefined;
        tags?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<
        MarketingCreateTemplateRequestDto,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            messages: z.array(Message$.inboundSchema).optional(),
            name: z.string().optional(),
            tags: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.messages === undefined ? null : { messages: v.messages }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        messages?: Array<Message$.Outbound> | undefined;
        name?: string | undefined;
        tags?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MarketingCreateTemplateRequestDto
    > = z
        .object({
            id: z.string().optional(),
            messages: z.array(Message$.outboundSchema).optional(),
            name: z.string().optional(),
            tags: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.messages === undefined ? null : { messages: v.messages }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
            };
        });
}
