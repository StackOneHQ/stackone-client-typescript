/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomFields4 = {};

/**
 * The value associated with the custom field.
 */
export type CustomFieldsValue =
  | CustomFields4
  | string
  | number
  | boolean
  | Array<any>;

export type CustomFields = {
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The name of the custom field.
   */
  name?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * Provider's unique identifier for the value of the custom field.
   */
  remoteValueId?: string | null | undefined;
  /**
   * The value associated with the custom field.
   */
  value?:
    | CustomFields4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The unique identifier for the value of the custom field.
   */
  valueId?: string | null | undefined;
};

/** @internal */
export const CustomFields4$inboundSchema: z.ZodType<
  CustomFields4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CustomFields4$Outbound = {};

/** @internal */
export const CustomFields4$outboundSchema: z.ZodType<
  CustomFields4$Outbound,
  z.ZodTypeDef,
  CustomFields4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFields4$ {
  /** @deprecated use `CustomFields4$inboundSchema` instead. */
  export const inboundSchema = CustomFields4$inboundSchema;
  /** @deprecated use `CustomFields4$outboundSchema` instead. */
  export const outboundSchema = CustomFields4$outboundSchema;
  /** @deprecated use `CustomFields4$Outbound` instead. */
  export type Outbound = CustomFields4$Outbound;
}

export function customFields4ToJSON(customFields4: CustomFields4): string {
  return JSON.stringify(CustomFields4$outboundSchema.parse(customFields4));
}

export function customFields4FromJSON(
  jsonString: string,
): SafeParseResult<CustomFields4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomFields4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomFields4' from JSON`,
  );
}

/** @internal */
export const CustomFieldsValue$inboundSchema: z.ZodType<
  CustomFieldsValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CustomFields4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type CustomFieldsValue$Outbound =
  | CustomFields4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const CustomFieldsValue$outboundSchema: z.ZodType<
  CustomFieldsValue$Outbound,
  z.ZodTypeDef,
  CustomFieldsValue
> = z.union([
  z.lazy(() => CustomFields4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFieldsValue$ {
  /** @deprecated use `CustomFieldsValue$inboundSchema` instead. */
  export const inboundSchema = CustomFieldsValue$inboundSchema;
  /** @deprecated use `CustomFieldsValue$outboundSchema` instead. */
  export const outboundSchema = CustomFieldsValue$outboundSchema;
  /** @deprecated use `CustomFieldsValue$Outbound` instead. */
  export type Outbound = CustomFieldsValue$Outbound;
}

export function customFieldsValueToJSON(
  customFieldsValue: CustomFieldsValue,
): string {
  return JSON.stringify(
    CustomFieldsValue$outboundSchema.parse(customFieldsValue),
  );
}

export function customFieldsValueFromJSON(
  jsonString: string,
): SafeParseResult<CustomFieldsValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomFieldsValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomFieldsValue' from JSON`,
  );
}

/** @internal */
export const CustomFields$inboundSchema: z.ZodType<
  CustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  remote_value_id: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => CustomFields4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "remote_id": "remoteId",
    "remote_value_id": "remoteValueId",
    "value_id": "valueId",
  });
});

/** @internal */
export type CustomFields$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  remote_id?: string | null | undefined;
  remote_value_id?: string | null | undefined;
  value?:
    | CustomFields4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value_id?: string | null | undefined;
};

/** @internal */
export const CustomFields$outboundSchema: z.ZodType<
  CustomFields$Outbound,
  z.ZodTypeDef,
  CustomFields
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  remoteValueId: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => CustomFields4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  valueId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    remoteId: "remote_id",
    remoteValueId: "remote_value_id",
    valueId: "value_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFields$ {
  /** @deprecated use `CustomFields$inboundSchema` instead. */
  export const inboundSchema = CustomFields$inboundSchema;
  /** @deprecated use `CustomFields$outboundSchema` instead. */
  export const outboundSchema = CustomFields$outboundSchema;
  /** @deprecated use `CustomFields$Outbound` instead. */
  export type Outbound = CustomFields$Outbound;
}

export function customFieldsToJSON(customFields: CustomFields): string {
  return JSON.stringify(CustomFields$outboundSchema.parse(customFields));
}

export function customFieldsFromJSON(
  jsonString: string,
): SafeParseResult<CustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomFields' from JSON`,
  );
}
