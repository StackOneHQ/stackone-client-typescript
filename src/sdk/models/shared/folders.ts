/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export enum Folders2 {
  True = "true",
  False = "false",
}

/**
 * Whether the folder has children
 */
export type FoldersHasChildren = boolean | Folders2;

export enum FoldersSchemas2 {
  True = "true",
  False = "false",
}

/**
 * Whether the folder has content
 */
export type FoldersHasContent = boolean | FoldersSchemas2;

export enum FoldersSchemasIsRoot2 {
  True = "true",
  False = "false",
}

/**
 * Whether the folder is at the root level of the drive
 */
export type IsRoot = boolean | FoldersSchemasIsRoot2;

export type Folders = {
  /**
   * List of containing parent Folder IDs in descending order
   */
  allParentFolderIds?: Array<string> | null | undefined;
  /**
   * The created date of the folder
   */
  createdAt?: Date | null | undefined;
  /**
   * The description of the folder
   */
  description?: string | null | undefined;
  /**
   * The parent drive ID associated with this folder
   */
  driveId?: string | null | undefined;
  /**
   * Whether the folder has children
   */
  hasChildren?: boolean | Folders2 | null | undefined;
  /**
   * Whether the folder has content
   */
  hasContent?: boolean | FoldersSchemas2 | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Whether the folder is at the root level of the drive
   */
  isRoot?: boolean | FoldersSchemasIsRoot2 | null | undefined;
  /**
   * The name associated with this folder
   */
  name?: string | null | undefined;
  /**
   * The user ID of owner of this folder
   */
  ownerId?: string | null | undefined;
  /**
   * The parent folder ID associated with this folder
   */
  parentFolderId?: string | null | undefined;
  /**
   * The path where the folder is stored
   */
  path?: string | null | undefined;
  /**
   * Provider's unique identifier of the parent drive associated with this folder
   */
  remoteDriveId?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * Provider's unique identifier of the owner of this folder
   */
  remoteOwnerId?: string | null | undefined;
  /**
   * Provider's unique identifier of the parent folder associated with this folder
   */
  remoteParentFolderId?: string | null | undefined;
  /**
   * The size of this folder in bytes
   */
  size?: number | null | undefined;
  /**
   * The last updated date of the folder
   */
  updatedAt?: Date | null | undefined;
  /**
   * The url of the folder
   */
  url?: string | null | undefined;
};

/** @internal */
export const Folders2$inboundSchema: z.ZodNativeEnum<typeof Folders2> = z
  .nativeEnum(Folders2);

/** @internal */
export const Folders2$outboundSchema: z.ZodNativeEnum<typeof Folders2> =
  Folders2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Folders2$ {
  /** @deprecated use `Folders2$inboundSchema` instead. */
  export const inboundSchema = Folders2$inboundSchema;
  /** @deprecated use `Folders2$outboundSchema` instead. */
  export const outboundSchema = Folders2$outboundSchema;
}

/** @internal */
export const FoldersHasChildren$inboundSchema: z.ZodType<
  FoldersHasChildren,
  z.ZodTypeDef,
  unknown
> = z.union([z.boolean(), Folders2$inboundSchema]);

/** @internal */
export type FoldersHasChildren$Outbound = boolean | string;

/** @internal */
export const FoldersHasChildren$outboundSchema: z.ZodType<
  FoldersHasChildren$Outbound,
  z.ZodTypeDef,
  FoldersHasChildren
> = z.union([z.boolean(), Folders2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FoldersHasChildren$ {
  /** @deprecated use `FoldersHasChildren$inboundSchema` instead. */
  export const inboundSchema = FoldersHasChildren$inboundSchema;
  /** @deprecated use `FoldersHasChildren$outboundSchema` instead. */
  export const outboundSchema = FoldersHasChildren$outboundSchema;
  /** @deprecated use `FoldersHasChildren$Outbound` instead. */
  export type Outbound = FoldersHasChildren$Outbound;
}

export function foldersHasChildrenToJSON(
  foldersHasChildren: FoldersHasChildren,
): string {
  return JSON.stringify(
    FoldersHasChildren$outboundSchema.parse(foldersHasChildren),
  );
}

export function foldersHasChildrenFromJSON(
  jsonString: string,
): SafeParseResult<FoldersHasChildren, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FoldersHasChildren$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FoldersHasChildren' from JSON`,
  );
}

/** @internal */
export const FoldersSchemas2$inboundSchema: z.ZodNativeEnum<
  typeof FoldersSchemas2
> = z.nativeEnum(FoldersSchemas2);

/** @internal */
export const FoldersSchemas2$outboundSchema: z.ZodNativeEnum<
  typeof FoldersSchemas2
> = FoldersSchemas2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FoldersSchemas2$ {
  /** @deprecated use `FoldersSchemas2$inboundSchema` instead. */
  export const inboundSchema = FoldersSchemas2$inboundSchema;
  /** @deprecated use `FoldersSchemas2$outboundSchema` instead. */
  export const outboundSchema = FoldersSchemas2$outboundSchema;
}

/** @internal */
export const FoldersHasContent$inboundSchema: z.ZodType<
  FoldersHasContent,
  z.ZodTypeDef,
  unknown
> = z.union([z.boolean(), FoldersSchemas2$inboundSchema]);

/** @internal */
export type FoldersHasContent$Outbound = boolean | string;

/** @internal */
export const FoldersHasContent$outboundSchema: z.ZodType<
  FoldersHasContent$Outbound,
  z.ZodTypeDef,
  FoldersHasContent
> = z.union([z.boolean(), FoldersSchemas2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FoldersHasContent$ {
  /** @deprecated use `FoldersHasContent$inboundSchema` instead. */
  export const inboundSchema = FoldersHasContent$inboundSchema;
  /** @deprecated use `FoldersHasContent$outboundSchema` instead. */
  export const outboundSchema = FoldersHasContent$outboundSchema;
  /** @deprecated use `FoldersHasContent$Outbound` instead. */
  export type Outbound = FoldersHasContent$Outbound;
}

export function foldersHasContentToJSON(
  foldersHasContent: FoldersHasContent,
): string {
  return JSON.stringify(
    FoldersHasContent$outboundSchema.parse(foldersHasContent),
  );
}

export function foldersHasContentFromJSON(
  jsonString: string,
): SafeParseResult<FoldersHasContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FoldersHasContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FoldersHasContent' from JSON`,
  );
}

/** @internal */
export const FoldersSchemasIsRoot2$inboundSchema: z.ZodNativeEnum<
  typeof FoldersSchemasIsRoot2
> = z.nativeEnum(FoldersSchemasIsRoot2);

/** @internal */
export const FoldersSchemasIsRoot2$outboundSchema: z.ZodNativeEnum<
  typeof FoldersSchemasIsRoot2
> = FoldersSchemasIsRoot2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FoldersSchemasIsRoot2$ {
  /** @deprecated use `FoldersSchemasIsRoot2$inboundSchema` instead. */
  export const inboundSchema = FoldersSchemasIsRoot2$inboundSchema;
  /** @deprecated use `FoldersSchemasIsRoot2$outboundSchema` instead. */
  export const outboundSchema = FoldersSchemasIsRoot2$outboundSchema;
}

/** @internal */
export const IsRoot$inboundSchema: z.ZodType<IsRoot, z.ZodTypeDef, unknown> = z
  .union([z.boolean(), FoldersSchemasIsRoot2$inboundSchema]);

/** @internal */
export type IsRoot$Outbound = boolean | string;

/** @internal */
export const IsRoot$outboundSchema: z.ZodType<
  IsRoot$Outbound,
  z.ZodTypeDef,
  IsRoot
> = z.union([z.boolean(), FoldersSchemasIsRoot2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IsRoot$ {
  /** @deprecated use `IsRoot$inboundSchema` instead. */
  export const inboundSchema = IsRoot$inboundSchema;
  /** @deprecated use `IsRoot$outboundSchema` instead. */
  export const outboundSchema = IsRoot$outboundSchema;
  /** @deprecated use `IsRoot$Outbound` instead. */
  export type Outbound = IsRoot$Outbound;
}

export function isRootToJSON(isRoot: IsRoot): string {
  return JSON.stringify(IsRoot$outboundSchema.parse(isRoot));
}

export function isRootFromJSON(
  jsonString: string,
): SafeParseResult<IsRoot, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IsRoot$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IsRoot' from JSON`,
  );
}

/** @internal */
export const Folders$inboundSchema: z.ZodType<Folders, z.ZodTypeDef, unknown> =
  z.object({
    all_parent_folder_ids: z.nullable(z.array(z.string())).optional(),
    created_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    description: z.nullable(z.string()).optional(),
    drive_id: z.nullable(z.string()).optional(),
    has_children: z.nullable(z.union([z.boolean(), Folders2$inboundSchema]))
      .optional(),
    has_content: z.nullable(
      z.union([z.boolean(), FoldersSchemas2$inboundSchema]),
    ).optional(),
    id: z.nullable(z.string()).optional(),
    is_root: z.nullable(
      z.union([z.boolean(), FoldersSchemasIsRoot2$inboundSchema]),
    ).optional(),
    name: z.nullable(z.string()).optional(),
    owner_id: z.nullable(z.string()).optional(),
    parent_folder_id: z.nullable(z.string()).optional(),
    path: z.nullable(z.string()).optional(),
    remote_drive_id: z.nullable(z.string()).optional(),
    remote_id: z.nullable(z.string()).optional(),
    remote_owner_id: z.nullable(z.string()).optional(),
    remote_parent_folder_id: z.nullable(z.string()).optional(),
    size: z.nullable(z.number()).optional(),
    updated_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    url: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "all_parent_folder_ids": "allParentFolderIds",
      "created_at": "createdAt",
      "drive_id": "driveId",
      "has_children": "hasChildren",
      "has_content": "hasContent",
      "is_root": "isRoot",
      "owner_id": "ownerId",
      "parent_folder_id": "parentFolderId",
      "remote_drive_id": "remoteDriveId",
      "remote_id": "remoteId",
      "remote_owner_id": "remoteOwnerId",
      "remote_parent_folder_id": "remoteParentFolderId",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Folders$Outbound = {
  all_parent_folder_ids?: Array<string> | null | undefined;
  created_at?: string | null | undefined;
  description?: string | null | undefined;
  drive_id?: string | null | undefined;
  has_children?: boolean | string | null | undefined;
  has_content?: boolean | string | null | undefined;
  id?: string | null | undefined;
  is_root?: boolean | string | null | undefined;
  name?: string | null | undefined;
  owner_id?: string | null | undefined;
  parent_folder_id?: string | null | undefined;
  path?: string | null | undefined;
  remote_drive_id?: string | null | undefined;
  remote_id?: string | null | undefined;
  remote_owner_id?: string | null | undefined;
  remote_parent_folder_id?: string | null | undefined;
  size?: number | null | undefined;
  updated_at?: string | null | undefined;
  url?: string | null | undefined;
};

/** @internal */
export const Folders$outboundSchema: z.ZodType<
  Folders$Outbound,
  z.ZodTypeDef,
  Folders
> = z.object({
  allParentFolderIds: z.nullable(z.array(z.string())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  description: z.nullable(z.string()).optional(),
  driveId: z.nullable(z.string()).optional(),
  hasChildren: z.nullable(z.union([z.boolean(), Folders2$outboundSchema]))
    .optional(),
  hasContent: z.nullable(z.union([z.boolean(), FoldersSchemas2$outboundSchema]))
    .optional(),
  id: z.nullable(z.string()).optional(),
  isRoot: z.nullable(
    z.union([z.boolean(), FoldersSchemasIsRoot2$outboundSchema]),
  ).optional(),
  name: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  parentFolderId: z.nullable(z.string()).optional(),
  path: z.nullable(z.string()).optional(),
  remoteDriveId: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  remoteOwnerId: z.nullable(z.string()).optional(),
  remoteParentFolderId: z.nullable(z.string()).optional(),
  size: z.nullable(z.number()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    allParentFolderIds: "all_parent_folder_ids",
    createdAt: "created_at",
    driveId: "drive_id",
    hasChildren: "has_children",
    hasContent: "has_content",
    isRoot: "is_root",
    ownerId: "owner_id",
    parentFolderId: "parent_folder_id",
    remoteDriveId: "remote_drive_id",
    remoteId: "remote_id",
    remoteOwnerId: "remote_owner_id",
    remoteParentFolderId: "remote_parent_folder_id",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Folders$ {
  /** @deprecated use `Folders$inboundSchema` instead. */
  export const inboundSchema = Folders$inboundSchema;
  /** @deprecated use `Folders$outboundSchema` instead. */
  export const outboundSchema = Folders$outboundSchema;
  /** @deprecated use `Folders$Outbound` instead. */
  export type Outbound = Folders$Outbound;
}

export function foldersToJSON(folders: Folders): string {
  return JSON.stringify(Folders$outboundSchema.parse(folders));
}

export function foldersFromJSON(
  jsonString: string,
): SafeParseResult<Folders, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Folders$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Folders' from JSON`,
  );
}
