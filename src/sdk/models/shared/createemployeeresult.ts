/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type CreateEmployeeResult = {
    message?: string | null | undefined;
    statusCode: number;
    timestamp: Date;
};

/** @internal */
export namespace CreateEmployeeResult$ {
    export type Inbound = {
        message?: string | null | undefined;
        statusCode: number;
        timestamp: string;
    };

    export const inboundSchema: z.ZodType<CreateEmployeeResult, z.ZodTypeDef, Inbound> = z
        .object({
            message: z.nullable(z.string()).optional(),
            statusCode: z.number(),
            timestamp: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
        })
        .transform((v) => {
            return {
                ...(v.message === undefined ? null : { message: v.message }),
                statusCode: v.statusCode,
                timestamp: v.timestamp,
            };
        });

    export type Outbound = {
        message?: string | null | undefined;
        statusCode: number;
        timestamp: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateEmployeeResult> = z
        .object({
            message: z.nullable(z.string()).optional(),
            statusCode: z.number(),
            timestamp: z.date().transform((v) => v.toISOString()),
        })
        .transform((v) => {
            return {
                ...(v.message === undefined ? null : { message: v.message }),
                statusCode: v.statusCode,
                timestamp: v.timestamp,
            };
        });
}
