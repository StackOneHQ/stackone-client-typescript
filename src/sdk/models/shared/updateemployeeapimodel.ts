/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CountryCodeEnum,
  CountryCodeEnum$inboundSchema,
  CountryCodeEnum$Outbound,
  CountryCodeEnum$outboundSchema,
} from "./countrycodeenum.js";
import {
  CreateHRISBenefit,
  CreateHRISBenefit$inboundSchema,
  CreateHRISBenefit$Outbound,
  CreateHRISBenefit$outboundSchema,
} from "./createhrisbenefit.js";
import {
  CustomFields,
  CustomFields$inboundSchema,
  CustomFields$Outbound,
  CustomFields$outboundSchema,
} from "./customfields.js";

/**
 * The employee avatar
 */
export type UpdateEmployeeApiModelAvatar = {
  base64?: string | null | undefined;
  url?: string | null | undefined;
};

export type UpdateEmployeeApiModel4 = {};

export type UpdateEmployeeApiModelSourceValue =
  | UpdateEmployeeApiModel4
  | string
  | number
  | boolean
  | Array<any>;

export enum UpdateEmployeeApiModelValue {
  FullTime = "full_time",
  Shifts = "shifts",
  PartTime = "part_time",
  UnmappedValue = "unmapped_value",
}
export type UpdateEmployeeApiModelValueOpen = OpenEnum<
  typeof UpdateEmployeeApiModelValue
>;

/**
 * The employment work schedule type (e.g., full-time, part-time)
 */
export type UpdateEmployeeApiModelEmploymentContractType = {
  sourceValue?:
    | UpdateEmployeeApiModel4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: UpdateEmployeeApiModelValueOpen | null | undefined;
};

export type UpdateEmployeeApiModelSchemas4 = {};

export type UpdateEmployeeApiModelSchemasSourceValue =
  | UpdateEmployeeApiModelSchemas4
  | string
  | number
  | boolean
  | Array<any>;

export enum UpdateEmployeeApiModelSchemasValue {
  Active = "active",
  Pending = "pending",
  Terminated = "terminated",
  Leave = "leave",
  Inactive = "inactive",
  Unknown = "unknown",
  UnmappedValue = "unmapped_value",
}
export type UpdateEmployeeApiModelSchemasValueOpen = OpenEnum<
  typeof UpdateEmployeeApiModelSchemasValue
>;

/**
 * The employee employment status
 */
export type UpdateEmployeeApiModelEmploymentStatus = {
  sourceValue?:
    | UpdateEmployeeApiModelSchemas4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: UpdateEmployeeApiModelSchemasValueOpen | null | undefined;
};

export type UpdateEmployeeApiModelSchemasEmploymentType4 = {};

/**
 * The source value of the employment type.
 */
export type UpdateEmployeeApiModelSchemasEmploymentTypeSourceValue =
  | UpdateEmployeeApiModelSchemasEmploymentType4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The type of the employment.
 */
export enum UpdateEmployeeApiModelSchemasEmploymentTypeValue {
  Contractor = "contractor",
  Intern = "intern",
  Permanent = "permanent",
  Apprentice = "apprentice",
  Freelance = "freelance",
  Terminated = "terminated",
  Temporary = "temporary",
  Seasonal = "seasonal",
  Volunteer = "volunteer",
  Probation = "probation",
  Internal = "internal",
  External = "external",
  Expatriate = "expatriate",
  EmployerOfRecord = "employer_of_record",
  Casual = "casual",
  Programme = "Programme",
  UnmappedValue = "unmapped_value",
}
/**
 * The type of the employment.
 */
export type UpdateEmployeeApiModelSchemasEmploymentTypeValueOpen = OpenEnum<
  typeof UpdateEmployeeApiModelSchemasEmploymentTypeValue
>;

/**
 * The employee employment type
 */
export type UpdateEmployeeApiModelEmploymentType = {
  /**
   * The source value of the employment type.
   */
  sourceValue?:
    | UpdateEmployeeApiModelSchemasEmploymentType4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The type of the employment.
   */
  value?:
    | UpdateEmployeeApiModelSchemasEmploymentTypeValueOpen
    | null
    | undefined;
};

export type UpdateEmployeeApiModelSchemasEthnicity4 = {};

export type UpdateEmployeeApiModelSchemasEthnicitySourceValue =
  | UpdateEmployeeApiModelSchemasEthnicity4
  | string
  | number
  | boolean
  | Array<any>;

export enum UpdateEmployeeApiModelSchemasEthnicityValue {
  White = "white",
  BlackOrAfricanAmerican = "black_or_african_american",
  Asian = "asian",
  HispanicOrLatino = "hispanic_or_latino",
  AmericanIndianOrAlaskaNative = "american_indian_or_alaska_native",
  NativeHawaiianOrPacificIslander = "native_hawaiian_or_pacific_islander",
  TwoOrMoreRaces = "two_or_more_races",
  NotDisclosed = "not_disclosed",
  Other = "other",
  UnmappedValue = "unmapped_value",
}
export type UpdateEmployeeApiModelSchemasEthnicityValueOpen = OpenEnum<
  typeof UpdateEmployeeApiModelSchemasEthnicityValue
>;

/**
 * The employee ethnicity
 */
export type UpdateEmployeeApiModelEthnicity = {
  sourceValue?:
    | UpdateEmployeeApiModelSchemasEthnicity4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: UpdateEmployeeApiModelSchemasEthnicityValueOpen | null | undefined;
};

export type UpdateEmployeeApiModelSchemasGender4 = {};

export type UpdateEmployeeApiModelSchemasGenderSourceValue =
  | UpdateEmployeeApiModelSchemasGender4
  | string
  | number
  | boolean
  | Array<any>;

export enum UpdateEmployeeApiModelSchemasGenderValue {
  Male = "male",
  Female = "female",
  NonBinary = "non_binary",
  Other = "other",
  NotDisclosed = "not_disclosed",
  Diverse = "diverse",
  UnmappedValue = "unmapped_value",
}
export type UpdateEmployeeApiModelSchemasGenderValueOpen = OpenEnum<
  typeof UpdateEmployeeApiModelSchemasGenderValue
>;

/**
 * The employee gender
 */
export type UpdateEmployeeApiModelGender = {
  sourceValue?:
    | UpdateEmployeeApiModelSchemasGender4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: UpdateEmployeeApiModelSchemasGenderValueOpen | null | undefined;
};

export type UpdateEmployeeApiModelSchemasHomeLocation4 = {};

export type UpdateEmployeeApiModelSchemasHomeLocationSourceValue =
  | UpdateEmployeeApiModelSchemasHomeLocation4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The ISO3166-1 Alpha2 Code of the Country
 */
export enum UpdateEmployeeApiModelSchemasHomeLocationValue {
  Af = "AF",
  Al = "AL",
  Dz = "DZ",
  As = "AS",
  Ad = "AD",
  Ao = "AO",
  Ai = "AI",
  Aq = "AQ",
  Ag = "AG",
  Ar = "AR",
  Am = "AM",
  Aw = "AW",
  Au = "AU",
  At = "AT",
  Az = "AZ",
  Bs = "BS",
  Bh = "BH",
  Bd = "BD",
  Bb = "BB",
  By = "BY",
  Be = "BE",
  Bz = "BZ",
  Bj = "BJ",
  Bm = "BM",
  Bt = "BT",
  Bo = "BO",
  Bq = "BQ",
  Ba = "BA",
  Bw = "BW",
  Bv = "BV",
  Br = "BR",
  Io = "IO",
  Bn = "BN",
  Bg = "BG",
  Bf = "BF",
  Bi = "BI",
  Kh = "KH",
  Cm = "CM",
  Ca = "CA",
  Cv = "CV",
  Ky = "KY",
  Cf = "CF",
  Td = "TD",
  Cl = "CL",
  Cn = "CN",
  Cx = "CX",
  Cc = "CC",
  Co = "CO",
  Km = "KM",
  Cg = "CG",
  Cd = "CD",
  Ck = "CK",
  Cr = "CR",
  Hr = "HR",
  Cu = "CU",
  Cw = "CW",
  Cy = "CY",
  Cz = "CZ",
  Ci = "CI",
  Dk = "DK",
  Dj = "DJ",
  Dm = "DM",
  Do = "DO",
  Ec = "EC",
  Eg = "EG",
  Sv = "SV",
  Gq = "GQ",
  Er = "ER",
  Ee = "EE",
  Et = "ET",
  Fk = "FK",
  Fo = "FO",
  Fj = "FJ",
  Fi = "FI",
  Fr = "FR",
  Gf = "GF",
  Pf = "PF",
  Tf = "TF",
  Ga = "GA",
  Gm = "GM",
  Ge = "GE",
  De = "DE",
  Gh = "GH",
  Gi = "GI",
  Gr = "GR",
  Gl = "GL",
  Gd = "GD",
  Gp = "GP",
  Gu = "GU",
  Gt = "GT",
  Gg = "GG",
  Gn = "GN",
  Gw = "GW",
  Gy = "GY",
  Ht = "HT",
  Hm = "HM",
  Va = "VA",
  Hn = "HN",
  Hk = "HK",
  Hu = "HU",
  Is = "IS",
  In = "IN",
  Id = "ID",
  Ir = "IR",
  Iq = "IQ",
  Ie = "IE",
  Im = "IM",
  Il = "IL",
  It = "IT",
  Jm = "JM",
  Jp = "JP",
  Je = "JE",
  Jo = "JO",
  Kz = "KZ",
  Ke = "KE",
  Ki = "KI",
  Kp = "KP",
  Kr = "KR",
  Kw = "KW",
  Kg = "KG",
  La = "LA",
  Lv = "LV",
  Lb = "LB",
  Ls = "LS",
  Lr = "LR",
  Ly = "LY",
  Li = "LI",
  Lt = "LT",
  Lu = "LU",
  Mo = "MO",
  Mk = "MK",
  Mg = "MG",
  Mw = "MW",
  My = "MY",
  Mv = "MV",
  Ml = "ML",
  Mt = "MT",
  Mh = "MH",
  Mq = "MQ",
  Mr = "MR",
  Mu = "MU",
  Yt = "YT",
  Mx = "MX",
  Fm = "FM",
  Md = "MD",
  Mc = "MC",
  Mn = "MN",
  Me = "ME",
  Ms = "MS",
  Ma = "MA",
  Mz = "MZ",
  Mm = "MM",
  Na = "NA",
  Nr = "NR",
  Np = "NP",
  Nl = "NL",
  Nc = "NC",
  Nz = "NZ",
  Ni = "NI",
  Ne = "NE",
  Ng = "NG",
  Nu = "NU",
  Nf = "NF",
  Mp = "MP",
  No = "NO",
  Om = "OM",
  Pk = "PK",
  Pw = "PW",
  Ps = "PS",
  Pa = "PA",
  Pg = "PG",
  Py = "PY",
  Pe = "PE",
  Ph = "PH",
  Pn = "PN",
  Pl = "PL",
  Pt = "PT",
  Pr = "PR",
  Qa = "QA",
  Ro = "RO",
  Ru = "RU",
  Rw = "RW",
  Re = "RE",
  Bl = "BL",
  Sh = "SH",
  Kn = "KN",
  Lc = "LC",
  Mf = "MF",
  Pm = "PM",
  Vc = "VC",
  Ws = "WS",
  Sm = "SM",
  St = "ST",
  Sa = "SA",
  Sn = "SN",
  Rs = "RS",
  Sc = "SC",
  Sl = "SL",
  Sg = "SG",
  Sx = "SX",
  Sk = "SK",
  Si = "SI",
  Sb = "SB",
  So = "SO",
  Za = "ZA",
  Gs = "GS",
  Ss = "SS",
  Es = "ES",
  Lk = "LK",
  Sd = "SD",
  Sr = "SR",
  Sj = "SJ",
  Sz = "SZ",
  Se = "SE",
  Ch = "CH",
  Sy = "SY",
  Tw = "TW",
  Tj = "TJ",
  Tz = "TZ",
  Th = "TH",
  Tl = "TL",
  Tg = "TG",
  Tk = "TK",
  To = "TO",
  Tt = "TT",
  Tn = "TN",
  Tr = "TR",
  Tm = "TM",
  Tc = "TC",
  Tv = "TV",
  Ug = "UG",
  Ua = "UA",
  Ae = "AE",
  Gb = "GB",
  Us = "US",
  Um = "UM",
  Uy = "UY",
  Uz = "UZ",
  Vu = "VU",
  Ve = "VE",
  Vn = "VN",
  Vg = "VG",
  Vi = "VI",
  Wf = "WF",
  Eh = "EH",
  Ye = "YE",
  Zm = "ZM",
  Zw = "ZW",
  UnmappedValue = "unmapped_value",
}
/**
 * The ISO3166-1 Alpha2 Code of the Country
 */
export type UpdateEmployeeApiModelSchemasHomeLocationValueOpen = OpenEnum<
  typeof UpdateEmployeeApiModelSchemasHomeLocationValue
>;

/**
 * The country code
 */
export type UpdateEmployeeApiModelCountry = {
  sourceValue?:
    | UpdateEmployeeApiModelSchemasHomeLocation4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The ISO3166-1 Alpha2 Code of the Country
   */
  value?: UpdateEmployeeApiModelSchemasHomeLocationValueOpen | null | undefined;
};

export type UpdateEmployeeApiModelSchemasHomeLocationState4 = {};

export type UpdateEmployeeApiModelSchemasHomeLocationStateSourceValue =
  | UpdateEmployeeApiModelSchemasHomeLocationState4
  | string
  | number
  | boolean
  | Array<any>;

export enum UpdateEmployeeApiModelSchemasHomeLocationStateValue {
  Ad07 = "AD-07",
  Ad02 = "AD-02",
  Ad03 = "AD-03",
  Ad08 = "AD-08",
  Ad04 = "AD-04",
  Ad05 = "AD-05",
  Ad06 = "AD-06",
  AeAj = "AE-AJ",
  AeAz = "AE-AZ",
  AeFu = "AE-FU",
  AeSh = "AE-SH",
  AeDu = "AE-DU",
  AeRk = "AE-RK",
  AeUq = "AE-UQ",
  AfBds = "AF-BDS",
  AfBdg = "AF-BDG",
  AfBgl = "AF-BGL",
  AfBal = "AF-BAL",
  AfBam = "AF-BAM",
  AfDay = "AF-DAY",
  AfFra = "AF-FRA",
  AfFyb = "AF-FYB",
  AfGha = "AF-GHA",
  AfGho = "AF-GHO",
  AfHel = "AF-HEL",
  AfHer = "AF-HER",
  AfJow = "AF-JOW",
  AfKab = "AF-KAB",
  AfKan = "AF-KAN",
  AfKap = "AF-KAP",
  AfKho = "AF-KHO",
  AfKdz = "AF-KDZ",
  AfLag = "AF-LAG",
  AfLog = "AF-LOG",
  AfNan = "AF-NAN",
  AfNim = "AF-NIM",
  AfPia = "AF-PIA",
  AfPar = "AF-PAR",
  AfSar = "AF-SAR",
  AfTak = "AF-TAK",
  AfUru = "AF-URU",
  Ag11 = "AG-11",
  Ag03 = "AG-03",
  Ag04 = "AG-04",
  Ag06 = "AG-06",
  Ag07 = "AG-07",
  Ag08 = "AG-08",
  AiXx1 = "AI-XX-1",
  Al01 = "AL-01",
  Al09 = "AL-09",
  Al02 = "AL-02",
  Al03 = "AL-03",
  Al04 = "AL-04",
  Al05 = "AL-05",
  Al06 = "AL-06",
  Al07 = "AL-07",
  Al08 = "AL-08",
  Al10 = "AL-10",
  Al11 = "AL-11",
  Al12 = "AL-12",
  AmAg = "AM-AG",
  AmAr = "AM-AR",
  AmAv = "AM-AV",
  AmEr = "AM-ER",
  AmGr = "AM-GR",
  AmKt = "AM-KT",
  AmLo = "AM-LO",
  AmSh = "AM-SH",
  AmSu = "AM-SU",
  AmTv = "AM-TV",
  AmVd = "AM-VD",
  AoBgo = "AO-BGO",
  AoBgu = "AO-BGU",
  AoBie = "AO-BIE",
  AoCab = "AO-CAB",
  AoCcu = "AO-CCU",
  AoCno = "AO-CNO",
  AoCus = "AO-CUS",
  AoCnn = "AO-CNN",
  AoHua = "AO-HUA",
  AoHui = "AO-HUI",
  AoLua = "AO-LUA",
  AoLno = "AO-LNO",
  AoLsu = "AO-LSU",
  AoMal = "AO-MAL",
  AoMox = "AO-MOX",
  AoNam = "AO-NAM",
  AoUig = "AO-UIG",
  AoZai = "AO-ZAI",
  AqXx1 = "AQ-XX-1",
  ArB = "AR-B",
  ArK = "AR-K",
  ArH = "AR-H",
  ArU = "AR-U",
  ArC = "AR-C",
  ArX = "AR-X",
  ArW = "AR-W",
  ArE = "AR-E",
  ArP = "AR-P",
  ArY = "AR-Y",
  ArL = "AR-L",
  ArF = "AR-F",
  ArM = "AR-M",
  ArN = "AR-N",
  ArQ = "AR-Q",
  ArR = "AR-R",
  ArA = "AR-A",
  ArJ = "AR-J",
  ArD = "AR-D",
  ArZ = "AR-Z",
  ArS = "AR-S",
  ArG = "AR-G",
  ArV = "AR-V",
  ArT = "AR-T",
  AsXx1 = "AS-XX-1",
  AsXx2 = "AS-XX-2",
  At1 = "AT-1",
  At2 = "AT-2",
  At3 = "AT-3",
  At4 = "AT-4",
  At5 = "AT-5",
  At6 = "AT-6",
  At7 = "AT-7",
  At8 = "AT-8",
  At9 = "AT-9",
  AuAct = "AU-ACT",
  AuNsw = "AU-NSW",
  AuNt = "AU-NT",
  AuQld = "AU-QLD",
  AuSa = "AU-SA",
  AuTas = "AU-TAS",
  AuVic = "AU-VIC",
  AuWa = "AU-WA",
  AwXx1 = "AW-XX-1",
  AxXx1 = "AX-XX-1",
  AxXx2 = "AX-XX-2",
  AxXx3 = "AX-XX-3",
  AxXx4 = "AX-XX-4",
  AxXx5 = "AX-XX-5",
  AxXx6 = "AX-XX-6",
  AxXx7 = "AX-XX-7",
  AxXx8 = "AX-XX-8",
  AzAbs = "AZ-ABS",
  AzAgc = "AZ-AGC",
  AzAgu = "AZ-AGU",
  AzAst = "AZ-AST",
  AzBa = "AZ-BA",
  AzBal = "AZ-BAL",
  AzBar = "AZ-BAR",
  AzBey = "AZ-BEY",
  AzBil = "AZ-BIL",
  AzCal = "AZ-CAL",
  AzFuz = "AZ-FUZ",
  AzGad = "AZ-GAD",
  AzGa = "AZ-GA",
  AzGor = "AZ-GOR",
  AzGoy = "AZ-GOY",
  AzGyg = "AZ-GYG",
  AzImi = "AZ-IMI",
  AzIsm = "AZ-ISM",
  AzKur = "AZ-KUR",
  AzLa = "AZ-LA",
  AzMas = "AZ-MAS",
  AzMi = "AZ-MI",
  AzNa = "AZ-NA",
  AzNx = "AZ-NX",
  AzNef = "AZ-NEF",
  AzOgu = "AZ-OGU",
  AzQab = "AZ-QAB",
  AzQax = "AZ-QAX",
  AzQaz = "AZ-QAZ",
  AzQba = "AZ-QBA",
  AzQus = "AZ-QUS",
  AzSat = "AZ-SAT",
  AzSab = "AZ-SAB",
  AzSak = "AZ-SAK",
  AzSal = "AZ-SAL",
  AzSmi = "AZ-SMI",
  AzSkr = "AZ-SKR",
  AzSmx = "AZ-SMX",
  AzSr = "AZ-SR",
  AzSm = "AZ-SM",
  AzTar = "AZ-TAR",
  AzUca = "AZ-UCA",
  AzXac = "AZ-XAC",
  AzXvd = "AZ-XVD",
  AzYar = "AZ-YAR",
  AzYev = "AZ-YEV",
  AzZaq = "AZ-ZAQ",
  AzZar = "AZ-ZAR",
  BaBrc = "BA-BRC",
  BaBih = "BA-BIH",
  BaSrp = "BA-SRP",
  Bb01 = "BB-01",
  Bb02 = "BB-02",
  Bb03 = "BB-03",
  Bb04 = "BB-04",
  Bb05 = "BB-05",
  Bb07 = "BB-07",
  Bb08 = "BB-08",
  Bb09 = "BB-09",
  Bb10 = "BB-10",
  Bb11 = "BB-11",
  BdA = "BD-A",
  BdB = "BD-B",
  BdC = "BD-C",
  BdD = "BD-D",
  BdE = "BD-E",
  BdF = "BD-F",
  BdG = "BD-G",
  BeVan = "BE-VAN",
  BeWbr = "BE-WBR",
  BeBru = "BE-BRU",
  BeWht = "BE-WHT",
  BeWlg = "BE-WLG",
  BeVli = "BE-VLI",
  BeWlx = "BE-WLX",
  BeWna = "BE-WNA",
  BeVov = "BE-VOV",
  BeVbr = "BE-VBR",
  BeVwv = "BE-VWV",
  BfBam = "BF-BAM",
  BfBaz = "BF-BAZ",
  BfBlg = "BF-BLG",
  BfBlk = "BF-BLK",
  BfCom = "BF-COM",
  BfGan = "BF-GAN",
  BfGna = "BF-GNA",
  BfGou = "BF-GOU",
  BfHou = "BF-HOU",
  BfIob = "BF-IOB",
  BfKad = "BF-KAD",
  BfKen = "BF-KEN",
  BfKmp = "BF-KMP",
  BfKos = "BF-KOS",
  BfKot = "BF-KOT",
  BfKow = "BF-KOW",
  BfLer = "BF-LER",
  BfLor = "BF-LOR",
  BfMou = "BF-MOU",
  BfNao = "BF-NAO",
  BfNam = "BF-NAM",
  BfNay = "BF-NAY",
  BfOub = "BF-OUB",
  BfOud = "BF-OUD",
  BfPas = "BF-PAS",
  BfPon = "BF-PON",
  BfSng = "BF-SNG",
  BfSmt = "BF-SMT",
  BfSen = "BF-SEN",
  BfSis = "BF-SIS",
  BfSom = "BF-SOM",
  BfSor = "BF-SOR",
  BfTap = "BF-TAP",
  BfTui = "BF-TUI",
  BfYat = "BF-YAT",
  BfZir = "BF-ZIR",
  BfZon = "BF-ZON",
  BfZou = "BF-ZOU",
  Bg01 = "BG-01",
  Bg02 = "BG-02",
  Bg08 = "BG-08",
  Bg07 = "BG-07",
  Bg26 = "BG-26",
  Bg09 = "BG-09",
  Bg10 = "BG-10",
  Bg11 = "BG-11",
  Bg12 = "BG-12",
  Bg13 = "BG-13",
  Bg14 = "BG-14",
  Bg15 = "BG-15",
  Bg16 = "BG-16",
  Bg17 = "BG-17",
  Bg18 = "BG-18",
  Bg27 = "BG-27",
  Bg19 = "BG-19",
  Bg20 = "BG-20",
  Bg21 = "BG-21",
  Bg23 = "BG-23",
  Bg22 = "BG-22",
  Bg24 = "BG-24",
  Bg25 = "BG-25",
  Bg03 = "BG-03",
  Bg04 = "BG-04",
  Bg05 = "BG-05",
  Bg06 = "BG-06",
  Bg28 = "BG-28",
  Bh13 = "BH-13",
  Bh14 = "BH-14",
  Bh15 = "BH-15",
  Bh17 = "BH-17",
  BiBm = "BI-BM",
  BiCi = "BI-CI",
  BiGi = "BI-GI",
  BiKr = "BI-KR",
  BiKi = "BI-KI",
  BiMw = "BI-MW",
  BiNg = "BI-NG",
  BiRm = "BI-RM",
  BiRt = "BI-RT",
  BiRy = "BI-RY",
  BjAk = "BJ-AK",
  BjAq = "BJ-AQ",
  BjBo = "BJ-BO",
  BjCo = "BJ-CO",
  BjDo = "BJ-DO",
  BjLi = "BJ-LI",
  BjMo = "BJ-MO",
  BjOu = "BJ-OU",
  BjPl = "BJ-PL",
  BjZo = "BJ-ZO",
  BlXx1 = "BL-XX-1",
  BmXx1 = "BM-XX-1",
  BmXx2 = "BM-XX-2",
  BnBe = "BN-BE",
  BnBm = "BN-BM",
  BnTe = "BN-TE",
  BnTu = "BN-TU",
  BoH = "BO-H",
  BoC = "BO-C",
  BoB = "BO-B",
  BoL = "BO-L",
  BoO = "BO-O",
  BoN = "BO-N",
  BoP = "BO-P",
  BoS = "BO-S",
  BoT = "BO-T",
  BqBo = "BQ-BO",
  BqSa = "BQ-SA",
  BqSe = "BQ-SE",
  BrAc = "BR-AC",
  BrAl = "BR-AL",
  BrAp = "BR-AP",
  BrAm = "BR-AM",
  BrBa = "BR-BA",
  BrCe = "BR-CE",
  BrDf = "BR-DF",
  BrEs = "BR-ES",
  BrGo = "BR-GO",
  BrMa = "BR-MA",
  BrMt = "BR-MT",
  BrMs = "BR-MS",
  BrMg = "BR-MG",
  BrPa = "BR-PA",
  BrPb = "BR-PB",
  BrPr = "BR-PR",
  BrPe = "BR-PE",
  BrPi = "BR-PI",
  BrRn = "BR-RN",
  BrRs = "BR-RS",
  BrRj = "BR-RJ",
  BrRo = "BR-RO",
  BrRr = "BR-RR",
  BrSc = "BR-SC",
  BrSp = "BR-SP",
  BrSe = "BR-SE",
  BrTo = "BR-TO",
  BsBp = "BS-BP",
  BsCo = "BS-CO",
  BsFp = "BS-FP",
  BsEg = "BS-EG",
  BsHi = "BS-HI",
  BsLi = "BS-LI",
  BsNp = "BS-NP",
  BsNo = "BS-NO",
  BsNs = "BS-NS",
  BsNe = "BS-NE",
  BsSe = "BS-SE",
  BsWg = "BS-WG",
  Bt33 = "BT-33",
  Bt12 = "BT-12",
  Bt22 = "BT-22",
  BtGa = "BT-GA",
  Bt44 = "BT-44",
  Bt42 = "BT-42",
  Bt11 = "BT-11",
  Bt43 = "BT-43",
  Bt23 = "BT-23",
  Bt45 = "BT-45",
  Bt14 = "BT-14",
  Bt31 = "BT-31",
  Bt15 = "BT-15",
  Bt41 = "BT-41",
  Bt32 = "BT-32",
  Bt21 = "BT-21",
  Bt24 = "BT-24",
  BvXx1 = "BV-XX-1",
  BwCe = "BW-CE",
  BwCh = "BW-CH",
  BwGh = "BW-GH",
  BwKg = "BW-KG",
  BwKl = "BW-KL",
  BwKw = "BW-KW",
  BwNe = "BW-NE",
  BwNw = "BW-NW",
  BwSe = "BW-SE",
  BwSo = "BW-SO",
  ByBr = "BY-BR",
  ByHo = "BY-HO",
  ByHm = "BY-HM",
  ByHr = "BY-HR",
  ByMa = "BY-MA",
  ByMi = "BY-MI",
  ByVi = "BY-VI",
  BzBz = "BZ-BZ",
  BzCy = "BZ-CY",
  BzCzl = "BZ-CZL",
  BzOw = "BZ-OW",
  BzSc = "BZ-SC",
  BzTol = "BZ-TOL",
  CaAb = "CA-AB",
  CaBc = "CA-BC",
  CaMb = "CA-MB",
  CaNb = "CA-NB",
  CaNl = "CA-NL",
  CaNt = "CA-NT",
  CaNs = "CA-NS",
  CaNu = "CA-NU",
  CaOn = "CA-ON",
  CaPe = "CA-PE",
  CaQc = "CA-QC",
  CaSk = "CA-SK",
  CaYt = "CA-YT",
  CcXx1 = "CC-XX-1",
  CdEq = "CD-EQ",
  CdHk = "CD-HK",
  CdHl = "CD-HL",
  CdIt = "CD-IT",
  CdKc = "CD-KC",
  CdKe = "CD-KE",
  CdKn = "CD-KN",
  CdBc = "CD-BC",
  CdKg = "CD-KG",
  CdKl = "CD-KL",
  CdLu = "CD-LU",
  CdNk = "CD-NK",
  CdSa = "CD-SA",
  CdSk = "CD-SK",
  CdTa = "CD-TA",
  CdTo = "CD-TO",
  CdTu = "CD-TU",
  CfBb = "CF-BB",
  CfBgf = "CF-BGF",
  CfKb = "CF-KB",
  CfHm = "CF-HM",
  CfKg = "CF-KG",
  CfNm = "CF-NM",
  CfUk = "CF-UK",
  CfAc = "CF-AC",
  CfOp = "CF-OP",
  CfVk = "CF-VK",
  Cg11 = "CG-11",
  CgBzv = "CG-BZV",
  Cg8 = "CG-8",
  Cg9 = "CG-9",
  Cg16 = "CG-16",
  Cg13 = "CG-13",
  ChAg = "CH-AG",
  ChAr = "CH-AR",
  ChAi = "CH-AI",
  ChBl = "CH-BL",
  ChBs = "CH-BS",
  ChBe = "CH-BE",
  ChFr = "CH-FR",
  ChGe = "CH-GE",
  ChGl = "CH-GL",
  ChGr = "CH-GR",
  ChJu = "CH-JU",
  ChLu = "CH-LU",
  ChNe = "CH-NE",
  ChNw = "CH-NW",
  ChOw = "CH-OW",
  ChSg = "CH-SG",
  ChSh = "CH-SH",
  ChSz = "CH-SZ",
  ChSo = "CH-SO",
  ChTg = "CH-TG",
  ChTi = "CH-TI",
  ChUr = "CH-UR",
  ChVs = "CH-VS",
  ChVd = "CH-VD",
  ChZg = "CH-ZG",
  ChZh = "CH-ZH",
  CiAb = "CI-AB",
  CiBs = "CI-BS",
  CiCm = "CI-CM",
  CiDn = "CI-DN",
  CiGd = "CI-GD",
  CiLc = "CI-LC",
  CiLg = "CI-LG",
  CiMg = "CI-MG",
  CiSm = "CI-SM",
  CiSv = "CI-SV",
  CiVb = "CI-VB",
  CiWr = "CI-WR",
  CiYm = "CI-YM",
  CiZz = "CI-ZZ",
  CkXx1 = "CK-XX-1",
  ClAi = "CL-AI",
  ClAn = "CL-AN",
  ClAp = "CL-AP",
  ClAt = "CL-AT",
  ClBi = "CL-BI",
  ClCo = "CL-CO",
  ClAr = "CL-AR",
  ClLi = "CL-LI",
  ClLl = "CL-LL",
  ClLr = "CL-LR",
  ClMa = "CL-MA",
  ClMl = "CL-ML",
  ClNb = "CL-NB",
  ClRm = "CL-RM",
  ClTa = "CL-TA",
  ClVs = "CL-VS",
  CmAd = "CM-AD",
  CmCe = "CM-CE",
  CmEs = "CM-ES",
  CmEn = "CM-EN",
  CmLt = "CM-LT",
  CmNo = "CM-NO",
  CmNw = "CM-NW",
  CmOu = "CM-OU",
  CmSu = "CM-SU",
  CmSw = "CM-SW",
  CnAh = "CN-AH",
  CnBj = "CN-BJ",
  CnCq = "CN-CQ",
  CnFj = "CN-FJ",
  CnGs = "CN-GS",
  CnGd = "CN-GD",
  CnGx = "CN-GX",
  CnGz = "CN-GZ",
  CnHi = "CN-HI",
  CnHe = "CN-HE",
  CnHl = "CN-HL",
  CnHa = "CN-HA",
  CnHb = "CN-HB",
  CnHn = "CN-HN",
  CnJs = "CN-JS",
  CnJx = "CN-JX",
  CnJl = "CN-JL",
  CnLn = "CN-LN",
  CnNm = "CN-NM",
  CnNx = "CN-NX",
  CnQh = "CN-QH",
  CnSn = "CN-SN",
  CnSd = "CN-SD",
  CnSh = "CN-SH",
  CnSx = "CN-SX",
  CnSc = "CN-SC",
  CnTj = "CN-TJ",
  CnXj = "CN-XJ",
  CnXz = "CN-XZ",
  CnYn = "CN-YN",
  CnZj = "CN-ZJ",
  CoAma = "CO-AMA",
  CoAnt = "CO-ANT",
  CoAra = "CO-ARA",
  CoAtl = "CO-ATL",
  CoBol = "CO-BOL",
  CoBoy = "CO-BOY",
  CoCal = "CO-CAL",
  CoCaq = "CO-CAQ",
  CoCas = "CO-CAS",
  CoCau = "CO-CAU",
  CoCes = "CO-CES",
  CoCho = "CO-CHO",
  CoCor = "CO-COR",
  CoCun = "CO-CUN",
  CoDc = "CO-DC",
  CoGua = "CO-GUA",
  CoGuv = "CO-GUV",
  CoHui = "CO-HUI",
  CoLag = "CO-LAG",
  CoMag = "CO-MAG",
  CoMet = "CO-MET",
  CoNar = "CO-NAR",
  CoNsa = "CO-NSA",
  CoPut = "CO-PUT",
  CoQui = "CO-QUI",
  CoRis = "CO-RIS",
  CoSap = "CO-SAP",
  CoSan = "CO-SAN",
  CoSuc = "CO-SUC",
  CoTol = "CO-TOL",
  CoVac = "CO-VAC",
  CoVid = "CO-VID",
  CrA = "CR-A",
  CrC = "CR-C",
  CrG = "CR-G",
  CrH = "CR-H",
  CrL = "CR-L",
  CrP = "CR-P",
  CrSj = "CR-SJ",
  Cu15 = "CU-15",
  Cu09 = "CU-09",
  Cu08 = "CU-08",
  Cu06 = "CU-06",
  Cu12 = "CU-12",
  Cu14 = "CU-14",
  Cu11 = "CU-11",
  Cu03 = "CU-03",
  Cu10 = "CU-10",
  Cu04 = "CU-04",
  Cu16 = "CU-16",
  Cu01 = "CU-01",
  Cu07 = "CU-07",
  Cu13 = "CU-13",
  Cu05 = "CU-05",
  CvBv = "CV-BV",
  CvBr = "CV-BR",
  CvMo = "CV-MO",
  CvPn = "CV-PN",
  CvPr = "CV-PR",
  CvRs = "CV-RS",
  CvSl = "CV-SL",
  CvCr = "CV-CR",
  CvSd = "CV-SD",
  CvSo = "CV-SO",
  CvSv = "CV-SV",
  CvTa = "CV-TA",
  CvTs = "CV-TS",
  CwXx1 = "CW-XX-1",
  CxXx1 = "CX-XX-1",
  Cy04 = "CY-04",
  Cy06 = "CY-06",
  Cy03 = "CY-03",
  Cy01 = "CY-01",
  Cy02 = "CY-02",
  Cy05 = "CY-05",
  Cz31 = "CZ-31",
  Cz64 = "CZ-64",
  Cz41 = "CZ-41",
  Cz63 = "CZ-63",
  Cz52 = "CZ-52",
  Cz51 = "CZ-51",
  Cz80 = "CZ-80",
  Cz71 = "CZ-71",
  Cz53 = "CZ-53",
  Cz32 = "CZ-32",
  Cz10 = "CZ-10",
  Cz20 = "CZ-20",
  Cz42 = "CZ-42",
  Cz72 = "CZ-72",
  DeBw = "DE-BW",
  DeBy = "DE-BY",
  DeBe = "DE-BE",
  DeBb = "DE-BB",
  DeHb = "DE-HB",
  DeHh = "DE-HH",
  DeHe = "DE-HE",
  DeMv = "DE-MV",
  DeNi = "DE-NI",
  DeNw = "DE-NW",
  DeRp = "DE-RP",
  DeSl = "DE-SL",
  DeSn = "DE-SN",
  DeSt = "DE-ST",
  DeSh = "DE-SH",
  DeTh = "DE-TH",
  DjAr = "DJ-AR",
  DjDj = "DJ-DJ",
  Dk84 = "DK-84",
  Dk82 = "DK-82",
  Dk81 = "DK-81",
  Dk85 = "DK-85",
  Dk83 = "DK-83",
  Dm02 = "DM-02",
  Dm04 = "DM-04",
  Dm05 = "DM-05",
  Dm06 = "DM-06",
  Dm07 = "DM-07",
  Dm09 = "DM-09",
  Dm10 = "DM-10",
  Do02 = "DO-02",
  Do03 = "DO-03",
  Do04 = "DO-04",
  Do05 = "DO-05",
  Do01 = "DO-01",
  Do06 = "DO-06",
  Do08 = "DO-08",
  Do07 = "DO-07",
  Do09 = "DO-09",
  Do30 = "DO-30",
  Do19 = "DO-19",
  Do10 = "DO-10",
  Do11 = "DO-11",
  Do12 = "DO-12",
  Do13 = "DO-13",
  Do14 = "DO-14",
  Do28 = "DO-28",
  Do15 = "DO-15",
  Do29 = "DO-29",
  Do17 = "DO-17",
  Do18 = "DO-18",
  Do20 = "DO-20",
  Do21 = "DO-21",
  Do31 = "DO-31",
  Do22 = "DO-22",
  Do23 = "DO-23",
  Do24 = "DO-24",
  Do25 = "DO-25",
  Do26 = "DO-26",
  Do27 = "DO-27",
  Dz01 = "DZ-01",
  Dz44 = "DZ-44",
  Dz46 = "DZ-46",
  Dz16 = "DZ-16",
  Dz23 = "DZ-23",
  Dz05 = "DZ-05",
  Dz08 = "DZ-08",
  Dz06 = "DZ-06",
  Dz07 = "DZ-07",
  Dz09 = "DZ-09",
  Dz34 = "DZ-34",
  Dz10 = "DZ-10",
  Dz35 = "DZ-35",
  Dz02 = "DZ-02",
  Dz25 = "DZ-25",
  Dz17 = "DZ-17",
  Dz32 = "DZ-32",
  Dz39 = "DZ-39",
  Dz36 = "DZ-36",
  Dz47 = "DZ-47",
  Dz24 = "DZ-24",
  Dz33 = "DZ-33",
  Dz18 = "DZ-18",
  Dz40 = "DZ-40",
  Dz03 = "DZ-03",
  Dz28 = "DZ-28",
  Dz29 = "DZ-29",
  Dz26 = "DZ-26",
  Dz43 = "DZ-43",
  Dz27 = "DZ-27",
  Dz45 = "DZ-45",
  Dz31 = "DZ-31",
  Dz30 = "DZ-30",
  Dz04 = "DZ-04",
  Dz48 = "DZ-48",
  Dz20 = "DZ-20",
  Dz19 = "DZ-19",
  Dz22 = "DZ-22",
  Dz21 = "DZ-21",
  Dz41 = "DZ-41",
  Dz11 = "DZ-11",
  Dz12 = "DZ-12",
  Dz14 = "DZ-14",
  Dz37 = "DZ-37",
  Dz42 = "DZ-42",
  Dz38 = "DZ-38",
  Dz15 = "DZ-15",
  Dz13 = "DZ-13",
  EcA = "EC-A",
  EcB = "EC-B",
  EcF = "EC-F",
  EcC = "EC-C",
  EcH = "EC-H",
  EcX = "EC-X",
  EcO = "EC-O",
  EcE = "EC-E",
  EcW = "EC-W",
  EcG = "EC-G",
  EcI = "EC-I",
  EcL = "EC-L",
  EcR = "EC-R",
  EcM = "EC-M",
  EcS = "EC-S",
  EcN = "EC-N",
  EcD = "EC-D",
  EcY = "EC-Y",
  EcP = "EC-P",
  EcSe = "EC-SE",
  EcSd = "EC-SD",
  EcU = "EC-U",
  EcT = "EC-T",
  EcZ = "EC-Z",
  Ee37 = "EE-37",
  Ee39 = "EE-39",
  Ee45 = "EE-45",
  Ee52 = "EE-52",
  Ee50 = "EE-50",
  Ee60 = "EE-60",
  Ee56 = "EE-56",
  Ee68 = "EE-68",
  Ee64 = "EE-64",
  Ee71 = "EE-71",
  Ee74 = "EE-74",
  Ee79 = "EE-79",
  Ee81 = "EE-81",
  Ee84 = "EE-84",
  Ee87 = "EE-87",
  EgDk = "EG-DK",
  EgBa = "EG-BA",
  EgBh = "EG-BH",
  EgFym = "EG-FYM",
  EgGh = "EG-GH",
  EgAlx = "EG-ALX",
  EgIs = "EG-IS",
  EgGz = "EG-GZ",
  EgMnf = "EG-MNF",
  EgMn = "EG-MN",
  EgC = "EG-C",
  EgKb = "EG-KB",
  EgLx = "EG-LX",
  EgWad = "EG-WAD",
  EgSuz = "EG-SUZ",
  EgShr = "EG-SHR",
  EgAsn = "EG-ASN",
  EgAst = "EG-AST",
  EgBns = "EG-BNS",
  EgPts = "EG-PTS",
  EgDt = "EG-DT",
  EgJs = "EG-JS",
  EgKfs = "EG-KFS",
  EgMt = "EG-MT",
  EgKn = "EG-KN",
  EgSin = "EG-SIN",
  EgShg = "EG-SHG",
  EhXx1 = "EH-XX-1",
  ErMa = "ER-MA",
  ErDk = "ER-DK",
  ErSk = "ER-SK",
  EsAn = "ES-AN",
  EsAr = "ES-AR",
  EsAs = "ES-AS",
  EsCn = "ES-CN",
  EsCb = "ES-CB",
  EsCl = "ES-CL",
  EsCm = "ES-CM",
  EsCt = "ES-CT",
  EsCe = "ES-CE",
  EsEx = "ES-EX",
  EsGa = "ES-GA",
  EsIb = "ES-IB",
  EsRi = "ES-RI",
  EsMd = "ES-MD",
  EsMl = "ES-ML",
  EsMc = "ES-MC",
  EsNc = "ES-NC",
  EsPv = "ES-PV",
  EsVc = "ES-VC",
  EtAa = "ET-AA",
  EtAf = "ET-AF",
  EtAm = "ET-AM",
  EtBe = "ET-BE",
  EtDd = "ET-DD",
  EtGa = "ET-GA",
  EtHa = "ET-HA",
  EtOr = "ET-OR",
  EtSo = "ET-SO",
  EtTi = "ET-TI",
  EtSn = "ET-SN",
  Fi02 = "FI-02",
  Fi03 = "FI-03",
  Fi04 = "FI-04",
  Fi05 = "FI-05",
  Fi06 = "FI-06",
  Fi07 = "FI-07",
  Fi08 = "FI-08",
  Fi09 = "FI-09",
  Fi10 = "FI-10",
  Fi16 = "FI-16",
  Fi11 = "FI-11",
  Fi12 = "FI-12",
  Fi13 = "FI-13",
  Fi14 = "FI-14",
  Fi15 = "FI-15",
  Fi17 = "FI-17",
  Fi18 = "FI-18",
  Fi19 = "FI-19",
  FjC = "FJ-C",
  FjE = "FJ-E",
  FjN = "FJ-N",
  FjR = "FJ-R",
  FjW = "FJ-W",
  FkXx1 = "FK-XX-1",
  FmTrk = "FM-TRK",
  FmKsa = "FM-KSA",
  FmPni = "FM-PNI",
  FmYap = "FM-YAP",
  FoXx1 = "FO-XX-1",
  FoXx2 = "FO-XX-2",
  FoXx3 = "FO-XX-3",
  FoXx4 = "FO-XX-4",
  FoXx5 = "FO-XX-5",
  FrAra = "FR-ARA",
  FrBfc = "FR-BFC",
  FrBre = "FR-BRE",
  FrCvl = "FR-CVL",
  Fr20R = "FR-20R",
  FrGes = "FR-GES",
  FrHdf = "FR-HDF",
  FrIdf = "FR-IDF",
  FrNor = "FR-NOR",
  FrNaq = "FR-NAQ",
  FrOcc = "FR-OCC",
  FrPdl = "FR-PDL",
  FrPac = "FR-PAC",
  Ga1 = "GA-1",
  Ga2 = "GA-2",
  Ga4 = "GA-4",
  Ga5 = "GA-5",
  Ga8 = "GA-8",
  Ga9 = "GA-9",
  GbEng = "GB-ENG",
  GbNir = "GB-NIR",
  GbSct = "GB-SCT",
  GbWls = "GB-WLS",
  GbCam = "GB-CAM",
  GbCma = "GB-CMA",
  GbDby = "GB-DBY",
  GbDev = "GB-DEV",
  GbDor = "GB-DOR",
  GbEsx = "GB-ESX",
  GbEss = "GB-ESS",
  GbGls = "GB-GLS",
  GbHam = "GB-HAM",
  GbHrt = "GB-HRT",
  GbKen = "GB-KEN",
  GbLan = "GB-LAN",
  GbLec = "GB-LEC",
  GbLin = "GB-LIN",
  GbNfk = "GB-NFK",
  GbNyk = "GB-NYK",
  GbNtt = "GB-NTT",
  GbOxf = "GB-OXF",
  GbSom = "GB-SOM",
  GbSts = "GB-STS",
  GbSfk = "GB-SFK",
  GbSry = "GB-SRY",
  GbWar = "GB-WAR",
  GbWsx = "GB-WSX",
  GbWor = "GB-WOR",
  GbLnd = "GB-LND",
  GbBdg = "GB-BDG",
  GbBne = "GB-BNE",
  GbBex = "GB-BEX",
  GbBen = "GB-BEN",
  GbBry = "GB-BRY",
  GbCmd = "GB-CMD",
  GbCry = "GB-CRY",
  GbEal = "GB-EAL",
  GbEnf = "GB-ENF",
  GbGre = "GB-GRE",
  GbHck = "GB-HCK",
  GbHmf = "GB-HMF",
  GbHry = "GB-HRY",
  GbHrw = "GB-HRW",
  GbHav = "GB-HAV",
  GbHil = "GB-HIL",
  GbHns = "GB-HNS",
  GbIsl = "GB-ISL",
  GbKec = "GB-KEC",
  GbKtt = "GB-KTT",
  GbLbh = "GB-LBH",
  GbLew = "GB-LEW",
  GbMrt = "GB-MRT",
  GbNwm = "GB-NWM",
  GbRdb = "GB-RDB",
  GbRic = "GB-RIC",
  GbSwk = "GB-SWK",
  GbStn = "GB-STN",
  GbTwh = "GB-TWH",
  GbWft = "GB-WFT",
  GbWnd = "GB-WND",
  GbWsm = "GB-WSM",
  GbBns = "GB-BNS",
  GbBir = "GB-BIR",
  GbBol = "GB-BOL",
  GbBrd = "GB-BRD",
  GbBur = "GB-BUR",
  GbCld = "GB-CLD",
  GbCov = "GB-COV",
  GbDnc = "GB-DNC",
  GbDud = "GB-DUD",
  GbGat = "GB-GAT",
  GbKir = "GB-KIR",
  GbKwl = "GB-KWL",
  GbLds = "GB-LDS",
  GbLiv = "GB-LIV",
  GbMan = "GB-MAN",
  GbNet = "GB-NET",
  GbNty = "GB-NTY",
  GbOld = "GB-OLD",
  GbRch = "GB-RCH",
  GbRot = "GB-ROT",
  GbShn = "GB-SHN",
  GbSlf = "GB-SLF",
  GbSaw = "GB-SAW",
  GbSft = "GB-SFT",
  GbShf = "GB-SHF",
  GbSol = "GB-SOL",
  GbSty = "GB-STY",
  GbSkp = "GB-SKP",
  GbSnd = "GB-SND",
  GbTam = "GB-TAM",
  GbTrf = "GB-TRF",
  GbWkf = "GB-WKF",
  GbWll = "GB-WLL",
  GbWgn = "GB-WGN",
  GbWrl = "GB-WRL",
  GbWlv = "GB-WLV",
  GbBas = "GB-BAS",
  GbBdf = "GB-BDF",
  GbBbd = "GB-BBD",
  GbBpl = "GB-BPL",
  GbBcp = "GB-BCP",
  GbBrc = "GB-BRC",
  GbBnh = "GB-BNH",
  GbBst = "GB-BST",
  GbBkm = "GB-BKM",
  GbCbf = "GB-CBF",
  GbChe = "GB-CHE",
  GbChw = "GB-CHW",
  GbCon = "GB-CON",
  GbDal = "GB-DAL",
  GbDer = "GB-DER",
  GbDur = "GB-DUR",
  GbEry = "GB-ERY",
  GbHal = "GB-HAL",
  GbHpl = "GB-HPL",
  GbHef = "GB-HEF",
  GbIow = "GB-IOW",
  GbIos = "GB-IOS",
  GbKhl = "GB-KHL",
  GbLce = "GB-LCE",
  GbLut = "GB-LUT",
  GbMdw = "GB-MDW",
  GbMdb = "GB-MDB",
  GbMik = "GB-MIK",
  GbNel = "GB-NEL",
  GbNln = "GB-NLN",
  GbNnh = "GB-NNH",
  GbNsm = "GB-NSM",
  GbNbl = "GB-NBL",
  GbNgm = "GB-NGM",
  GbPte = "GB-PTE",
  GbPly = "GB-PLY",
  GbPor = "GB-POR",
  GbRdg = "GB-RDG",
  GbRcc = "GB-RCC",
  GbRut = "GB-RUT",
  GbShr = "GB-SHR",
  GbSlg = "GB-SLG",
  GbSgc = "GB-SGC",
  GbSth = "GB-STH",
  GbSos = "GB-SOS",
  GbStt = "GB-STT",
  GbSte = "GB-STE",
  GbSwd = "GB-SWD",
  GbTfw = "GB-TFW",
  GbThr = "GB-THR",
  GbTob = "GB-TOB",
  GbWrt = "GB-WRT",
  GbWbk = "GB-WBK",
  GbWnh = "GB-WNH",
  GbWil = "GB-WIL",
  GbWnm = "GB-WNM",
  GbWok = "GB-WOK",
  GbYor = "GB-YOR",
  GbAnn = "GB-ANN",
  GbAnd = "GB-AND",
  GbAbc = "GB-ABC",
  GbBfs = "GB-BFS",
  GbCcg = "GB-CCG",
  GbDrs = "GB-DRS",
  GbFmo = "GB-FMO",
  GbLbc = "GB-LBC",
  GbMea = "GB-MEA",
  GbMul = "GB-MUL",
  GbNmd = "GB-NMD",
  GbAbe = "GB-ABE",
  GbAbd = "GB-ABD",
  GbAns = "GB-ANS",
  GbAgb = "GB-AGB",
  GbClk = "GB-CLK",
  GbDgy = "GB-DGY",
  GbDnd = "GB-DND",
  GbEay = "GB-EAY",
  GbEdu = "GB-EDU",
  GbEln = "GB-ELN",
  GbErw = "GB-ERW",
  GbEdh = "GB-EDH",
  GbEls = "GB-ELS",
  GbFal = "GB-FAL",
  GbFif = "GB-FIF",
  GbGlg = "GB-GLG",
  GbHld = "GB-HLD",
  GbIvc = "GB-IVC",
  GbMln = "GB-MLN",
  GbMry = "GB-MRY",
  GbNay = "GB-NAY",
  GbNlk = "GB-NLK",
  GbOrk = "GB-ORK",
  GbPkn = "GB-PKN",
  GbRfw = "GB-RFW",
  GbScb = "GB-SCB",
  GbZet = "GB-ZET",
  GbSay = "GB-SAY",
  GbSlk = "GB-SLK",
  GbStg = "GB-STG",
  GbWdu = "GB-WDU",
  GbWln = "GB-WLN",
  GbBgw = "GB-BGW",
  GbBge = "GB-BGE",
  GbCay = "GB-CAY",
  GbCrf = "GB-CRF",
  GbCmn = "GB-CMN",
  GbCgn = "GB-CGN",
  GbCwy = "GB-CWY",
  GbDen = "GB-DEN",
  GbFln = "GB-FLN",
  GbGwn = "GB-GWN",
  GbAgy = "GB-AGY",
  GbMty = "GB-MTY",
  GbMon = "GB-MON",
  GbNtl = "GB-NTL",
  GbNwp = "GB-NWP",
  GbPem = "GB-PEM",
  GbPow = "GB-POW",
  GbRct = "GB-RCT",
  GbSwa = "GB-SWA",
  GbTof = "GB-TOF",
  GbVgl = "GB-VGL",
  GbWrx = "GB-WRX",
  Gd01 = "GD-01",
  Gd02 = "GD-02",
  Gd03 = "GD-03",
  Gd04 = "GD-04",
  Gd05 = "GD-05",
  Gd06 = "GD-06",
  Gd10 = "GD-10",
  GeAb = "GE-AB",
  GeAj = "GE-AJ",
  GeGu = "GE-GU",
  GeIm = "GE-IM",
  GeKa = "GE-KA",
  GeKk = "GE-KK",
  GeMm = "GE-MM",
  GeRl = "GE-RL",
  GeSz = "GE-SZ",
  GeSj = "GE-SJ",
  GeSk = "GE-SK",
  GeTb = "GE-TB",
  GfXx1 = "GF-XX-1",
  GgXx1 = "GG-XX-1",
  GhAf = "GH-AF",
  GhAh = "GH-AH",
  GhBo = "GH-BO",
  GhBe = "GH-BE",
  GhCp = "GH-CP",
  GhEp = "GH-EP",
  GhAa = "GH-AA",
  GhNp = "GH-NP",
  GhUe = "GH-UE",
  GhUw = "GH-UW",
  GhTv = "GH-TV",
  GhWp = "GH-WP",
  GiXx1 = "GI-XX-1",
  GlAv = "GL-AV",
  GlKu = "GL-KU",
  GlQt = "GL-QT",
  GlSm = "GL-SM",
  GlQe = "GL-QE",
  GmB = "GM-B",
  GmM = "GM-M",
  GmL = "GM-L",
  GmN = "GM-N",
  GmU = "GM-U",
  GmW = "GM-W",
  GnBf = "GN-BF",
  GnB = "GN-B",
  GnC = "GN-C",
  GnCo = "GN-CO",
  GnDb = "GN-DB",
  GnDu = "GN-DU",
  GnK = "GN-K",
  GnL = "GN-L",
  GnLa = "GN-LA",
  GnMc = "GN-MC",
  GnN = "GN-N",
  GnSi = "GN-SI",
  GpXx1 = "GP-XX-1",
  GqBn = "GQ-BN",
  GqKn = "GQ-KN",
  GqLi = "GQ-LI",
  GqWn = "GQ-WN",
  GrA = "GR-A",
  GrI = "GR-I",
  GrG = "GR-G",
  GrC = "GR-C",
  GrF = "GR-F",
  GrD = "GR-D",
  GrB = "GR-B",
  GrM = "GR-M",
  GrL = "GR-L",
  GrJ = "GR-J",
  GrH = "GR-H",
  GrE = "GR-E",
  GrK = "GR-K",
  GsXx1 = "GS-XX-1",
  Gt16 = "GT-16",
  Gt15 = "GT-15",
  Gt04 = "GT-04",
  Gt20 = "GT-20",
  Gt02 = "GT-02",
  Gt05 = "GT-05",
  Gt01 = "GT-01",
  Gt13 = "GT-13",
  Gt18 = "GT-18",
  Gt21 = "GT-21",
  Gt22 = "GT-22",
  Gt17 = "GT-17",
  Gt09 = "GT-09",
  Gt14 = "GT-14",
  Gt11 = "GT-11",
  Gt03 = "GT-03",
  Gt12 = "GT-12",
  Gt06 = "GT-06",
  Gt07 = "GT-07",
  Gt10 = "GT-10",
  Gt08 = "GT-08",
  Gt19 = "GT-19",
  GuXx1 = "GU-XX-1",
  GuXx2 = "GU-XX-2",
  GuXx3 = "GU-XX-3",
  GuXx4 = "GU-XX-4",
  GuXx5 = "GU-XX-5",
  GuXx6 = "GU-XX-6",
  GuXx7 = "GU-XX-7",
  GuXx8 = "GU-XX-8",
  GuXx9 = "GU-XX-9",
  GuXx10 = "GU-XX-10",
  GuXx11 = "GU-XX-11",
  GuXx12 = "GU-XX-12",
  GuXx13 = "GU-XX-13",
  GuXx14 = "GU-XX-14",
  GuXx15 = "GU-XX-15",
  GuXx16 = "GU-XX-16",
  GwBs = "GW-BS",
  GwGa = "GW-GA",
  GyCu = "GY-CU",
  GyDe = "GY-DE",
  GyEb = "GY-EB",
  GyEs = "GY-ES",
  GyMa = "GY-MA",
  GyPt = "GY-PT",
  GyUd = "GY-UD",
  HkXx1 = "HK-XX-1",
  HmXx1 = "HM-XX-1",
  HnAt = "HN-AT",
  HnCh = "HN-CH",
  HnCl = "HN-CL",
  HnCm = "HN-CM",
  HnCp = "HN-CP",
  HnCr = "HN-CR",
  HnEp = "HN-EP",
  HnFm = "HN-FM",
  HnGd = "HN-GD",
  HnIn = "HN-IN",
  HnIb = "HN-IB",
  HnLp = "HN-LP",
  HnLe = "HN-LE",
  HnOc = "HN-OC",
  HnOl = "HN-OL",
  HnSb = "HN-SB",
  HnVa = "HN-VA",
  HnYo = "HN-YO",
  Hr07 = "HR-07",
  Hr12 = "HR-12",
  Hr19 = "HR-19",
  Hr21 = "HR-21",
  Hr18 = "HR-18",
  Hr04 = "HR-04",
  Hr06 = "HR-06",
  Hr02 = "HR-02",
  Hr09 = "HR-09",
  Hr20 = "HR-20",
  Hr14 = "HR-14",
  Hr11 = "HR-11",
  Hr08 = "HR-08",
  Hr15 = "HR-15",
  Hr03 = "HR-03",
  Hr17 = "HR-17",
  Hr05 = "HR-05",
  Hr10 = "HR-10",
  Hr16 = "HR-16",
  Hr13 = "HR-13",
  Hr01 = "HR-01",
  HtAr = "HT-AR",
  HtCe = "HT-CE",
  HtGa = "HT-GA",
  HtNi = "HT-NI",
  HtNd = "HT-ND",
  HtOu = "HT-OU",
  HtSd = "HT-SD",
  HtSe = "HT-SE",
  HuBk = "HU-BK",
  HuBa = "HU-BA",
  HuBe = "HU-BE",
  HuBz = "HU-BZ",
  HuBu = "HU-BU",
  HuCs = "HU-CS",
  HuFe = "HU-FE",
  HuGs = "HU-GS",
  HuHb = "HU-HB",
  HuHe = "HU-HE",
  HuJn = "HU-JN",
  HuKe = "HU-KE",
  HuNo = "HU-NO",
  HuPe = "HU-PE",
  HuSo = "HU-SO",
  HuSz = "HU-SZ",
  HuTo = "HU-TO",
  HuVa = "HU-VA",
  HuVe = "HU-VE",
  HuZa = "HU-ZA",
  IdAc = "ID-AC",
  IdBa = "ID-BA",
  IdBt = "ID-BT",
  IdBe = "ID-BE",
  IdGo = "ID-GO",
  IdJk = "ID-JK",
  IdJa = "ID-JA",
  IdJb = "ID-JB",
  IdJt = "ID-JT",
  IdJi = "ID-JI",
  IdKb = "ID-KB",
  IdKs = "ID-KS",
  IdKt = "ID-KT",
  IdKi = "ID-KI",
  IdKu = "ID-KU",
  IdBb = "ID-BB",
  IdKr = "ID-KR",
  IdLa = "ID-LA",
  IdMl = "ID-ML",
  IdMu = "ID-MU",
  IdNb = "ID-NB",
  IdNt = "ID-NT",
  IdPp = "ID-PP",
  IdPb = "ID-PB",
  IdRi = "ID-RI",
  IdSr = "ID-SR",
  IdSn = "ID-SN",
  IdSt = "ID-ST",
  IdSg = "ID-SG",
  IdSa = "ID-SA",
  IdSb = "ID-SB",
  IdSs = "ID-SS",
  IdSu = "ID-SU",
  IdYo = "ID-YO",
  IeCw = "IE-CW",
  IeCn = "IE-CN",
  IeCe = "IE-CE",
  IeCo = "IE-CO",
  IeDl = "IE-DL",
  IeD = "IE-D",
  IeG = "IE-G",
  IeKy = "IE-KY",
  IeKe = "IE-KE",
  IeKk = "IE-KK",
  IeLs = "IE-LS",
  IeLm = "IE-LM",
  IeLk = "IE-LK",
  IeLd = "IE-LD",
  IeLh = "IE-LH",
  IeMo = "IE-MO",
  IeMh = "IE-MH",
  IeMn = "IE-MN",
  IeOy = "IE-OY",
  IeRn = "IE-RN",
  IeSo = "IE-SO",
  IeTa = "IE-TA",
  IeWd = "IE-WD",
  IeWh = "IE-WH",
  IeWx = "IE-WX",
  IeWw = "IE-WW",
  IlD = "IL-D",
  IlM = "IL-M",
  IlZ = "IL-Z",
  IlHa = "IL-HA",
  IlTa = "IL-TA",
  IlJm = "IL-JM",
  ImXx1 = "IM-XX-1",
  InAn = "IN-AN",
  InAp = "IN-AP",
  InAr = "IN-AR",
  InAs = "IN-AS",
  InBr = "IN-BR",
  InCh = "IN-CH",
  InCt = "IN-CT",
  InDn = "IN-DN",
  InDh = "IN-DH",
  InDl = "IN-DL",
  InGa = "IN-GA",
  InGj = "IN-GJ",
  InHr = "IN-HR",
  InHp = "IN-HP",
  InJk = "IN-JK",
  InJh = "IN-JH",
  InKa = "IN-KA",
  InKl = "IN-KL",
  InLd = "IN-LD",
  InMp = "IN-MP",
  InMh = "IN-MH",
  InMn = "IN-MN",
  InMl = "IN-ML",
  InMz = "IN-MZ",
  InNl = "IN-NL",
  InOr = "IN-OR",
  InPy = "IN-PY",
  InPb = "IN-PB",
  InRj = "IN-RJ",
  InSk = "IN-SK",
  InTn = "IN-TN",
  InTg = "IN-TG",
  InTr = "IN-TR",
  InUp = "IN-UP",
  InUt = "IN-UT",
  InWb = "IN-WB",
  IoXx1 = "IO-XX-1",
  IqAn = "IQ-AN",
  IqBa = "IQ-BA",
  IqMu = "IQ-MU",
  IqQa = "IQ-QA",
  IqNa = "IQ-NA",
  IqAr = "IQ-AR",
  IqSu = "IQ-SU",
  IqBb = "IQ-BB",
  IqBg = "IQ-BG",
  IqDa = "IQ-DA",
  IqDq = "IQ-DQ",
  IqDi = "IQ-DI",
  IqKa = "IQ-KA",
  IqKi = "IQ-KI",
  IqMa = "IQ-MA",
  IqNi = "IQ-NI",
  IqSd = "IQ-SD",
  IqWa = "IQ-WA",
  Ir30 = "IR-30",
  Ir24 = "IR-24",
  Ir04 = "IR-04",
  Ir03 = "IR-03",
  Ir18 = "IR-18",
  Ir14 = "IR-14",
  Ir10 = "IR-10",
  Ir07 = "IR-07",
  Ir01 = "IR-01",
  Ir27 = "IR-27",
  Ir13 = "IR-13",
  Ir22 = "IR-22",
  Ir16 = "IR-16",
  Ir08 = "IR-08",
  Ir05 = "IR-05",
  Ir29 = "IR-29",
  Ir09 = "IR-09",
  Ir28 = "IR-28",
  Ir06 = "IR-06",
  Ir17 = "IR-17",
  Ir12 = "IR-12",
  Ir15 = "IR-15",
  Ir00 = "IR-00",
  Ir02 = "IR-02",
  Ir26 = "IR-26",
  Ir25 = "IR-25",
  Ir20 = "IR-20",
  Ir11 = "IR-11",
  Ir23 = "IR-23",
  Ir21 = "IR-21",
  Ir19 = "IR-19",
  Is7 = "IS-7",
  Is1 = "IS-1",
  Is6 = "IS-6",
  Is5 = "IS-5",
  Is8 = "IS-8",
  Is2 = "IS-2",
  Is4 = "IS-4",
  Is3 = "IS-3",
  It65 = "IT-65",
  It77 = "IT-77",
  It78 = "IT-78",
  It72 = "IT-72",
  It45 = "IT-45",
  It36 = "IT-36",
  It62 = "IT-62",
  It42 = "IT-42",
  It25 = "IT-25",
  It57 = "IT-57",
  It67 = "IT-67",
  It21 = "IT-21",
  It75 = "IT-75",
  It88 = "IT-88",
  It82 = "IT-82",
  It52 = "IT-52",
  It32 = "IT-32",
  It55 = "IT-55",
  It23 = "IT-23",
  It34 = "IT-34",
  JeXx1 = "JE-XX-1",
  Jm13 = "JM-13",
  Jm09 = "JM-09",
  Jm01 = "JM-01",
  Jm12 = "JM-12",
  Jm04 = "JM-04",
  Jm02 = "JM-02",
  Jm06 = "JM-06",
  Jm14 = "JM-14",
  Jm11 = "JM-11",
  Jm08 = "JM-08",
  Jm05 = "JM-05",
  Jm03 = "JM-03",
  Jm07 = "JM-07",
  Jm10 = "JM-10",
  JoAj = "JO-AJ",
  JoAq = "JO-AQ",
  JoAm = "JO-AM",
  JoBa = "JO-BA",
  JoKa = "JO-KA",
  JoMa = "JO-MA",
  JoAt = "JO-AT",
  JoAz = "JO-AZ",
  JoIr = "JO-IR",
  JoJa = "JO-JA",
  JoMn = "JO-MN",
  JoMd = "JO-MD",
  Jp23 = "JP-23",
  Jp05 = "JP-05",
  Jp02 = "JP-02",
  Jp12 = "JP-12",
  Jp38 = "JP-38",
  Jp18 = "JP-18",
  Jp40 = "JP-40",
  Jp07 = "JP-07",
  Jp21 = "JP-21",
  Jp10 = "JP-10",
  Jp34 = "JP-34",
  Jp01 = "JP-01",
  Jp28 = "JP-28",
  Jp08 = "JP-08",
  Jp17 = "JP-17",
  Jp03 = "JP-03",
  Jp37 = "JP-37",
  Jp46 = "JP-46",
  Jp14 = "JP-14",
  Jp39 = "JP-39",
  Jp43 = "JP-43",
  Jp26 = "JP-26",
  Jp24 = "JP-24",
  Jp04 = "JP-04",
  Jp45 = "JP-45",
  Jp20 = "JP-20",
  Jp42 = "JP-42",
  Jp29 = "JP-29",
  Jp15 = "JP-15",
  Jp44 = "JP-44",
  Jp33 = "JP-33",
  Jp47 = "JP-47",
  Jp27 = "JP-27",
  Jp41 = "JP-41",
  Jp11 = "JP-11",
  Jp25 = "JP-25",
  Jp32 = "JP-32",
  Jp22 = "JP-22",
  Jp09 = "JP-09",
  Jp36 = "JP-36",
  Jp13 = "JP-13",
  Jp31 = "JP-31",
  Jp16 = "JP-16",
  Jp30 = "JP-30",
  Jp06 = "JP-06",
  Jp35 = "JP-35",
  Jp19 = "JP-19",
  Ke01 = "KE-01",
  Ke02 = "KE-02",
  Ke03 = "KE-03",
  Ke04 = "KE-04",
  Ke05 = "KE-05",
  Ke06 = "KE-06",
  Ke07 = "KE-07",
  Ke08 = "KE-08",
  Ke09 = "KE-09",
  Ke10 = "KE-10",
  Ke11 = "KE-11",
  Ke12 = "KE-12",
  Ke13 = "KE-13",
  Ke14 = "KE-14",
  Ke15 = "KE-15",
  Ke16 = "KE-16",
  Ke17 = "KE-17",
  Ke18 = "KE-18",
  Ke19 = "KE-19",
  Ke20 = "KE-20",
  Ke21 = "KE-21",
  Ke22 = "KE-22",
  Ke23 = "KE-23",
  Ke24 = "KE-24",
  Ke25 = "KE-25",
  Ke26 = "KE-26",
  Ke27 = "KE-27",
  Ke28 = "KE-28",
  Ke29 = "KE-29",
  Ke30 = "KE-30",
  Ke31 = "KE-31",
  Ke32 = "KE-32",
  Ke33 = "KE-33",
  Ke34 = "KE-34",
  Ke35 = "KE-35",
  Ke36 = "KE-36",
  Ke37 = "KE-37",
  Ke38 = "KE-38",
  Ke39 = "KE-39",
  Ke40 = "KE-40",
  Ke41 = "KE-41",
  Ke42 = "KE-42",
  Ke43 = "KE-43",
  Ke44 = "KE-44",
  Ke45 = "KE-45",
  Ke46 = "KE-46",
  Ke47 = "KE-47",
  KgB = "KG-B",
  KgGb = "KG-GB",
  KgC = "KG-C",
  KgJ = "KG-J",
  KgN = "KG-N",
  KgGo = "KG-GO",
  KgT = "KG-T",
  KgY = "KG-Y",
  Kh2 = "KH-2",
  Kh1 = "KH-1",
  Kh23 = "KH-23",
  Kh3 = "KH-3",
  Kh4 = "KH-4",
  Kh5 = "KH-5",
  Kh6 = "KH-6",
  Kh7 = "KH-7",
  Kh8 = "KH-8",
  Kh10 = "KH-10",
  Kh11 = "KH-11",
  Kh24 = "KH-24",
  Kh12 = "KH-12",
  Kh15 = "KH-15",
  Kh18 = "KH-18",
  Kh14 = "KH-14",
  Kh16 = "KH-16",
  Kh17 = "KH-17",
  Kh19 = "KH-19",
  Kh20 = "KH-20",
  Kh21 = "KH-21",
  KiG = "KI-G",
  KmG = "KM-G",
  KmM = "KM-M",
  Kn01 = "KN-01",
  Kn02 = "KN-02",
  Kn03 = "KN-03",
  Kn05 = "KN-05",
  Kn06 = "KN-06",
  Kn07 = "KN-07",
  Kn08 = "KN-08",
  Kn09 = "KN-09",
  Kn10 = "KN-10",
  Kn11 = "KN-11",
  Kn12 = "KN-12",
  Kn13 = "KN-13",
  Kn15 = "KN-15",
  Kp01 = "KP-01",
  Kr26 = "KR-26",
  Kr43 = "KR-43",
  Kr44 = "KR-44",
  Kr27 = "KR-27",
  Kr30 = "KR-30",
  Kr42 = "KR-42",
  Kr29 = "KR-29",
  Kr41 = "KR-41",
  Kr47 = "KR-47",
  Kr48 = "KR-48",
  Kr28 = "KR-28",
  Kr49 = "KR-49",
  Kr45 = "KR-45",
  Kr46 = "KR-46",
  Kr11 = "KR-11",
  Kr31 = "KR-31",
  KwKu = "KW-KU",
  KwAh = "KW-AH",
  KwFa = "KW-FA",
  KwJa = "KW-JA",
  KwHa = "KW-HA",
  KwMu = "KW-MU",
  KyXx1 = "KY-XX-1",
  KzAla = "KZ-ALA",
  KzAlm = "KZ-ALM",
  KzAkm = "KZ-AKM",
  KzAkt = "KZ-AKT",
  KzAty = "KZ-ATY",
  KzZap = "KZ-ZAP",
  KzMan = "KZ-MAN",
  KzAst = "KZ-AST",
  KzYuz = "KZ-YUZ",
  KzPav = "KZ-PAV",
  KzKar = "KZ-KAR",
  KzKus = "KZ-KUS",
  KzKzy = "KZ-KZY",
  KzVos = "KZ-VOS",
  KzShy = "KZ-SHY",
  KzSev = "KZ-SEV",
  KzZha = "KZ-ZHA",
  LaAt = "LA-AT",
  LaBl = "LA-BL",
  LaCh = "LA-CH",
  LaHo = "LA-HO",
  LaKh = "LA-KH",
  LaOu = "LA-OU",
  LaPh = "LA-PH",
  LaSv = "LA-SV",
  LaVi = "LA-VI",
  LaXa = "LA-XA",
  LaXe = "LA-XE",
  LaXi = "LA-XI",
  LbAk = "LB-AK",
  LbBh = "LB-BH",
  LbBi = "LB-BI",
  LbBa = "LB-BA",
  LbAs = "LB-AS",
  LbJa = "LB-JA",
  LbJl = "LB-JL",
  LbNa = "LB-NA",
  Lc01 = "LC-01",
  Lc02 = "LC-02",
  Lc03 = "LC-03",
  Lc05 = "LC-05",
  Lc06 = "LC-06",
  Lc07 = "LC-07",
  Lc08 = "LC-08",
  Lc10 = "LC-10",
  Lc11 = "LC-11",
  Li01 = "LI-01",
  Li02 = "LI-02",
  Li03 = "LI-03",
  Li04 = "LI-04",
  Li05 = "LI-05",
  Li06 = "LI-06",
  Li07 = "LI-07",
  Li09 = "LI-09",
  Li10 = "LI-10",
  Li11 = "LI-11",
  Lk2 = "LK-2",
  Lk5 = "LK-5",
  Lk7 = "LK-7",
  Lk6 = "LK-6",
  Lk4 = "LK-4",
  Lk9 = "LK-9",
  Lk3 = "LK-3",
  Lk8 = "LK-8",
  Lk1 = "LK-1",
  LrBm = "LR-BM",
  LrGb = "LR-GB",
  LrGg = "LR-GG",
  LrMg = "LR-MG",
  LrMo = "LR-MO",
  LrNi = "LR-NI",
  LrSi = "LR-SI",
  LsD = "LS-D",
  LsB = "LS-B",
  LsC = "LS-C",
  LsE = "LS-E",
  LsA = "LS-A",
  LsF = "LS-F",
  LsJ = "LS-J",
  LsH = "LS-H",
  LsG = "LS-G",
  LsK = "LS-K",
  LtAl = "LT-AL",
  LtKu = "LT-KU",
  LtKl = "LT-KL",
  LtMr = "LT-MR",
  LtPn = "LT-PN",
  LtSa = "LT-SA",
  LtTa = "LT-TA",
  LtTe = "LT-TE",
  LtUt = "LT-UT",
  LtVl = "LT-VL",
  LuCa = "LU-CA",
  LuCl = "LU-CL",
  LuDi = "LU-DI",
  LuEc = "LU-EC",
  LuEs = "LU-ES",
  LuGr = "LU-GR",
  LuLu = "LU-LU",
  LuMe = "LU-ME",
  LuRd = "LU-RD",
  LuRm = "LU-RM",
  LuVd = "LU-VD",
  LuWi = "LU-WI",
  Lv011 = "LV-011",
  Lv002 = "LV-002",
  Lv007 = "LV-007",
  Lv111 = "LV-111",
  Lv015 = "LV-015",
  Lv016 = "LV-016",
  Lv022 = "LV-022",
  LvDgv = "LV-DGV",
  Lv112 = "LV-112",
  Lv026 = "LV-026",
  Lv033 = "LV-033",
  Lv042 = "LV-042",
  LvJel = "LV-JEL",
  Lv041 = "LV-041",
  LvJur = "LV-JUR",
  Lv052 = "LV-052",
  Lv047 = "LV-047",
  Lv050 = "LV-050",
  LvLpx = "LV-LPX",
  Lv054 = "LV-054",
  Lv056 = "LV-056",
  Lv058 = "LV-058",
  Lv059 = "LV-059",
  Lv062 = "LV-062",
  Lv067 = "LV-067",
  Lv068 = "LV-068",
  Lv073 = "LV-073",
  Lv077 = "LV-077",
  LvRix = "LV-RIX",
  Lv080 = "LV-080",
  Lv087 = "LV-087",
  Lv088 = "LV-088",
  Lv089 = "LV-089",
  Lv091 = "LV-091",
  Lv094 = "LV-094",
  Lv097 = "LV-097",
  Lv099 = "LV-099",
  Lv101 = "LV-101",
  Lv113 = "LV-113",
  Lv102 = "LV-102",
  Lv106 = "LV-106",
  LyBu = "LY-BU",
  LyJa = "LY-JA",
  LyJg = "LY-JG",
  LyJi = "LY-JI",
  LyJu = "LY-JU",
  LyKf = "LY-KF",
  LyMj = "LY-MJ",
  LyMb = "LY-MB",
  LyWa = "LY-WA",
  LyNq = "LY-NQ",
  LyZa = "LY-ZA",
  LyBa = "LY-BA",
  LyDr = "LY-DR",
  LyMi = "LY-MI",
  LyNl = "LY-NL",
  LySb = "LY-SB",
  LySr = "LY-SR",
  LyTb = "LY-TB",
  LyWs = "LY-WS",
  Ma05 = "MA-05",
  Ma06 = "MA-06",
  Ma08 = "MA-08",
  Ma03 = "MA-03",
  Ma10 = "MA-10",
  Ma02 = "MA-02",
  Ma11 = "MA-11",
  Ma07 = "MA-07",
  Ma04 = "MA-04",
  Ma09 = "MA-09",
  Ma01 = "MA-01",
  McFo = "MC-FO",
  McCo = "MC-CO",
  McMo = "MC-MO",
  McMc = "MC-MC",
  McSr = "MC-SR",
  MdAn = "MD-AN",
  MdBa = "MD-BA",
  MdBs = "MD-BS",
  MdBd = "MD-BD",
  MdBr = "MD-BR",
  MdCa = "MD-CA",
  MdCl = "MD-CL",
  MdCt = "MD-CT",
  MdCs = "MD-CS",
  MdCu = "MD-CU",
  MdCm = "MD-CM",
  MdCr = "MD-CR",
  MdDo = "MD-DO",
  MdDr = "MD-DR",
  MdDu = "MD-DU",
  MdEd = "MD-ED",
  MdFa = "MD-FA",
  MdFl = "MD-FL",
  MdGa = "MD-GA",
  MdGl = "MD-GL",
  MdHi = "MD-HI",
  MdIa = "MD-IA",
  MdLe = "MD-LE",
  MdNi = "MD-NI",
  MdOc = "MD-OC",
  MdOr = "MD-OR",
  MdRe = "MD-RE",
  MdRi = "MD-RI",
  MdSi = "MD-SI",
  MdSd = "MD-SD",
  MdSo = "MD-SO",
  MdSv = "MD-SV",
  MdSn = "MD-SN",
  MdSt = "MD-ST",
  MdTa = "MD-TA",
  MdTe = "MD-TE",
  MdUn = "MD-UN",
  Me01 = "ME-01",
  Me02 = "ME-02",
  Me03 = "ME-03",
  Me04 = "ME-04",
  Me05 = "ME-05",
  Me06 = "ME-06",
  Me07 = "ME-07",
  Me08 = "ME-08",
  Me10 = "ME-10",
  Me12 = "ME-12",
  Me13 = "ME-13",
  Me14 = "ME-14",
  Me15 = "ME-15",
  Me16 = "ME-16",
  Me17 = "ME-17",
  Me19 = "ME-19",
  Me24 = "ME-24",
  Me20 = "ME-20",
  Me21 = "ME-21",
  MfXx1 = "MF-XX-1",
  MgT = "MG-T",
  MgD = "MG-D",
  MgF = "MG-F",
  MgM = "MG-M",
  MgA = "MG-A",
  MgU = "MG-U",
  MhKwa = "MH-KWA",
  MhMaj = "MH-MAJ",
  Mk802 = "MK-802",
  Mk201 = "MK-201",
  Mk501 = "MK-501",
  Mk401 = "MK-401",
  Mk601 = "MK-601",
  Mk402 = "MK-402",
  Mk602 = "MK-602",
  Mk803 = "MK-803",
  Mk109 = "MK-109",
  Mk814 = "MK-814",
  Mk210 = "MK-210",
  Mk816 = "MK-816",
  Mk303 = "MK-303",
  Mk203 = "MK-203",
  Mk502 = "MK-502",
  Mk406 = "MK-406",
  Mk503 = "MK-503",
  Mk804 = "MK-804",
  Mk405 = "MK-405",
  Mk604 = "MK-604",
  Mk102 = "MK-102",
  Mk807 = "MK-807",
  Mk606 = "MK-606",
  Mk205 = "MK-205",
  Mk104 = "MK-104",
  Mk307 = "MK-307",
  Mk809 = "MK-809",
  Mk206 = "MK-206",
  Mk701 = "MK-701",
  Mk702 = "MK-702",
  Mk505 = "MK-505",
  Mk703 = "MK-703",
  Mk704 = "MK-704",
  Mk105 = "MK-105",
  Mk207 = "MK-207",
  Mk308 = "MK-308",
  Mk607 = "MK-607",
  Mk506 = "MK-506",
  Mk106 = "MK-106",
  Mk507 = "MK-507",
  Mk408 = "MK-408",
  Mk310 = "MK-310",
  Mk208 = "MK-208",
  Mk810 = "MK-810",
  Mk311 = "MK-311",
  Mk508 = "MK-508",
  Mk209 = "MK-209",
  Mk409 = "MK-409",
  Mk705 = "MK-705",
  Mk509 = "MK-509",
  Mk107 = "MK-107",
  Mk811 = "MK-811",
  Mk812 = "MK-812",
  Mk211 = "MK-211",
  Mk312 = "MK-312",
  Mk410 = "MK-410",
  Mk813 = "MK-813",
  Mk108 = "MK-108",
  Mk608 = "MK-608",
  Mk609 = "MK-609",
  Mk403 = "MK-403",
  Mk404 = "MK-404",
  Mk101 = "MK-101",
  Mk301 = "MK-301",
  Mk202 = "MK-202",
  Mk603 = "MK-603",
  Mk806 = "MK-806",
  Mk605 = "MK-605",
  MlBko = "ML-BKO",
  Ml7 = "ML-7",
  Ml1 = "ML-1",
  Ml8 = "ML-8",
  Ml2 = "ML-2",
  Ml5 = "ML-5",
  Ml4 = "ML-4",
  Ml3 = "ML-3",
  Ml6 = "ML-6",
  Mm07 = "MM-07",
  Mm02 = "MM-02",
  Mm14 = "MM-14",
  Mm11 = "MM-11",
  Mm12 = "MM-12",
  Mm13 = "MM-13",
  Mm03 = "MM-03",
  Mm04 = "MM-04",
  Mm15 = "MM-15",
  Mm18 = "MM-18",
  Mm16 = "MM-16",
  Mm01 = "MM-01",
  Mm17 = "MM-17",
  Mm05 = "MM-05",
  Mm06 = "MM-06",
  Mn071 = "MN-071",
  Mn037 = "MN-037",
  Mn061 = "MN-061",
  Mn063 = "MN-063",
  Mn065 = "MN-065",
  Mn043 = "MN-043",
  Mn035 = "MN-035",
  Mn055 = "MN-055",
  Mn049 = "MN-049",
  Mn047 = "MN-047",
  Mn1 = "MN-1",
  MoXx1 = "MO-XX-1",
  MpXx1 = "MP-XX-1",
  MqXx1 = "MQ-XX-1",
  Mr07 = "MR-07",
  Mr03 = "MR-03",
  Mr05 = "MR-05",
  Mr08 = "MR-08",
  Mr04 = "MR-04",
  Mr10 = "MR-10",
  Mr01 = "MR-01",
  Mr02 = "MR-02",
  Mr12 = "MR-12",
  Mr13 = "MR-13",
  Mr09 = "MR-09",
  Mr11 = "MR-11",
  Mr06 = "MR-06",
  MsXx1 = "MS-XX-1",
  MsXx2 = "MS-XX-2",
  Mt01 = "MT-01",
  Mt02 = "MT-02",
  Mt03 = "MT-03",
  Mt04 = "MT-04",
  Mt05 = "MT-05",
  Mt06 = "MT-06",
  Mt07 = "MT-07",
  Mt08 = "MT-08",
  Mt09 = "MT-09",
  Mt10 = "MT-10",
  Mt14 = "MT-14",
  Mt15 = "MT-15",
  Mt16 = "MT-16",
  Mt17 = "MT-17",
  Mt11 = "MT-11",
  Mt12 = "MT-12",
  Mt18 = "MT-18",
  Mt19 = "MT-19",
  Mt20 = "MT-20",
  Mt21 = "MT-21",
  Mt22 = "MT-22",
  Mt23 = "MT-23",
  Mt24 = "MT-24",
  Mt25 = "MT-25",
  Mt26 = "MT-26",
  Mt27 = "MT-27",
  Mt28 = "MT-28",
  Mt29 = "MT-29",
  Mt30 = "MT-30",
  Mt31 = "MT-31",
  Mt32 = "MT-32",
  Mt33 = "MT-33",
  Mt34 = "MT-34",
  Mt35 = "MT-35",
  Mt36 = "MT-36",
  Mt37 = "MT-37",
  Mt38 = "MT-38",
  Mt39 = "MT-39",
  Mt40 = "MT-40",
  Mt41 = "MT-41",
  Mt42 = "MT-42",
  Mt43 = "MT-43",
  Mt45 = "MT-45",
  Mt46 = "MT-46",
  Mt49 = "MT-49",
  Mt48 = "MT-48",
  Mt53 = "MT-53",
  Mt51 = "MT-51",
  Mt52 = "MT-52",
  Mt54 = "MT-54",
  Mt55 = "MT-55",
  Mt56 = "MT-56",
  Mt57 = "MT-57",
  Mt58 = "MT-58",
  Mt59 = "MT-59",
  Mt60 = "MT-60",
  Mt61 = "MT-61",
  Mt62 = "MT-62",
  Mt63 = "MT-63",
  Mt64 = "MT-64",
  Mt65 = "MT-65",
  Mt67 = "MT-67",
  Mt68 = "MT-68",
  MuBl = "MU-BL",
  MuFl = "MU-FL",
  MuGp = "MU-GP",
  MuMo = "MU-MO",
  MuPa = "MU-PA",
  MuPw = "MU-PW",
  MuPl = "MU-PL",
  MuRr = "MU-RR",
  MuRo = "MU-RO",
  MuSa = "MU-SA",
  Mv01 = "MV-01",
  Mv03 = "MV-03",
  Mv04 = "MV-04",
  Mv05 = "MV-05",
  MvMle = "MV-MLE",
  Mv12 = "MV-12",
  Mv13 = "MV-13",
  Mv00 = "MV-00",
  Mv28 = "MV-28",
  Mv20 = "MV-20",
  Mv25 = "MV-25",
  Mv17 = "MV-17",
  MwBa = "MW-BA",
  MwBl = "MW-BL",
  MwCk = "MW-CK",
  MwCr = "MW-CR",
  MwDe = "MW-DE",
  MwDo = "MW-DO",
  MwKr = "MW-KR",
  MwLi = "MW-LI",
  MwMh = "MW-MH",
  MwMg = "MW-MG",
  MwMw = "MW-MW",
  MwMz = "MW-MZ",
  MwNe = "MW-NE",
  MwNk = "MW-NK",
  MwPh = "MW-PH",
  MwSa = "MW-SA",
  MwTh = "MW-TH",
  MwZo = "MW-ZO",
  MxAgu = "MX-AGU",
  MxBcn = "MX-BCN",
  MxBcs = "MX-BCS",
  MxCam = "MX-CAM",
  MxChp = "MX-CHP",
  MxChh = "MX-CHH",
  MxCmx = "MX-CMX",
  MxCoa = "MX-COA",
  MxCol = "MX-COL",
  MxDur = "MX-DUR",
  MxGua = "MX-GUA",
  MxGro = "MX-GRO",
  MxHid = "MX-HID",
  MxJal = "MX-JAL",
  MxMex = "MX-MEX",
  MxMic = "MX-MIC",
  MxMor = "MX-MOR",
  MxNay = "MX-NAY",
  MxNle = "MX-NLE",
  MxOax = "MX-OAX",
  MxPue = "MX-PUE",
  MxQue = "MX-QUE",
  MxRoo = "MX-ROO",
  MxSlp = "MX-SLP",
  MxSin = "MX-SIN",
  MxSon = "MX-SON",
  MxTab = "MX-TAB",
  MxTam = "MX-TAM",
  MxTla = "MX-TLA",
  MxVer = "MX-VER",
  MxYuc = "MX-YUC",
  MxZac = "MX-ZAC",
  My01 = "MY-01",
  My02 = "MY-02",
  My03 = "MY-03",
  My04 = "MY-04",
  My05 = "MY-05",
  My06 = "MY-06",
  My08 = "MY-08",
  My09 = "MY-09",
  My07 = "MY-07",
  My12 = "MY-12",
  My13 = "MY-13",
  My10 = "MY-10",
  My11 = "MY-11",
  My14 = "MY-14",
  My15 = "MY-15",
  My16 = "MY-16",
  MzP = "MZ-P",
  MzG = "MZ-G",
  MzI = "MZ-I",
  MzB = "MZ-B",
  MzL = "MZ-L",
  MzN = "MZ-N",
  MzA = "MZ-A",
  MzS = "MZ-S",
  MzT = "MZ-T",
  MzQ = "MZ-Q",
  NaEr = "NA-ER",
  NaHa = "NA-HA",
  NaKa = "NA-KA",
  NaKe = "NA-KE",
  NaKw = "NA-KW",
  NaKh = "NA-KH",
  NaKu = "NA-KU",
  NaOw = "NA-OW",
  NaOh = "NA-OH",
  NaOs = "NA-OS",
  NaOn = "NA-ON",
  NaOt = "NA-OT",
  NaOd = "NA-OD",
  NaCa = "NA-CA",
  NcXx1 = "NC-XX-1",
  NcXx2 = "NC-XX-2",
  Ne1 = "NE-1",
  Ne2 = "NE-2",
  Ne3 = "NE-3",
  Ne8 = "NE-8",
  Ne5 = "NE-5",
  Ne6 = "NE-6",
  Ne7 = "NE-7",
  NfXx1 = "NF-XX-1",
  NgAb = "NG-AB",
  NgFc = "NG-FC",
  NgAd = "NG-AD",
  NgAk = "NG-AK",
  NgAn = "NG-AN",
  NgBa = "NG-BA",
  NgBy = "NG-BY",
  NgBe = "NG-BE",
  NgBo = "NG-BO",
  NgCr = "NG-CR",
  NgDe = "NG-DE",
  NgEb = "NG-EB",
  NgEd = "NG-ED",
  NgEk = "NG-EK",
  NgEn = "NG-EN",
  NgGo = "NG-GO",
  NgIm = "NG-IM",
  NgJi = "NG-JI",
  NgKd = "NG-KD",
  NgKn = "NG-KN",
  NgKt = "NG-KT",
  NgKe = "NG-KE",
  NgKo = "NG-KO",
  NgKw = "NG-KW",
  NgLa = "NG-LA",
  NgNa = "NG-NA",
  NgNi = "NG-NI",
  NgOg = "NG-OG",
  NgOn = "NG-ON",
  NgOs = "NG-OS",
  NgOy = "NG-OY",
  NgPl = "NG-PL",
  NgRi = "NG-RI",
  NgSo = "NG-SO",
  NgTa = "NG-TA",
  NgYo = "NG-YO",
  NgZa = "NG-ZA",
  NiBo = "NI-BO",
  NiCa = "NI-CA",
  NiCi = "NI-CI",
  NiCo = "NI-CO",
  NiAn = "NI-AN",
  NiAs = "NI-AS",
  NiEs = "NI-ES",
  NiGr = "NI-GR",
  NiJi = "NI-JI",
  NiLe = "NI-LE",
  NiMd = "NI-MD",
  NiMn = "NI-MN",
  NiMs = "NI-MS",
  NiMt = "NI-MT",
  NiNs = "NI-NS",
  NiSj = "NI-SJ",
  NiRi = "NI-RI",
  NlDr = "NL-DR",
  NlFl = "NL-FL",
  NlFr = "NL-FR",
  NlGe = "NL-GE",
  NlGr = "NL-GR",
  NlLi = "NL-LI",
  NlNb = "NL-NB",
  NlNh = "NL-NH",
  NlOv = "NL-OV",
  NlUt = "NL-UT",
  NlZe = "NL-ZE",
  NlZh = "NL-ZH",
  No42 = "NO-42",
  No34 = "NO-34",
  No15 = "NO-15",
  No18 = "NO-18",
  No03 = "NO-03",
  No11 = "NO-11",
  No54 = "NO-54",
  No50 = "NO-50",
  No38 = "NO-38",
  No46 = "NO-46",
  No30 = "NO-30",
  NpBa = "NP-BA",
  NpBh = "NP-BH",
  NpDh = "NP-DH",
  NpGa = "NP-GA",
  NpJa = "NP-JA",
  NpKa = "NP-KA",
  NpKo = "NP-KO",
  NpLu = "NP-LU",
  NpMa = "NP-MA",
  NpMe = "NP-ME",
  NpNa = "NP-NA",
  NpRa = "NP-RA",
  NpSa = "NP-SA",
  NpSe = "NP-SE",
  Nr01 = "NR-01",
  Nr03 = "NR-03",
  Nr14 = "NR-14",
  NuXx1 = "NU-XX-1",
  NzAuk = "NZ-AUK",
  NzBop = "NZ-BOP",
  NzCan = "NZ-CAN",
  NzCit = "NZ-CIT",
  NzGis = "NZ-GIS",
  NzHkb = "NZ-HKB",
  NzMwt = "NZ-MWT",
  NzMbh = "NZ-MBH",
  NzNsn = "NZ-NSN",
  NzNtl = "NZ-NTL",
  NzOta = "NZ-OTA",
  NzStl = "NZ-STL",
  NzTki = "NZ-TKI",
  NzTas = "NZ-TAS",
  NzWko = "NZ-WKO",
  NzWgn = "NZ-WGN",
  NzWtc = "NZ-WTC",
  OmDa = "OM-DA",
  OmBu = "OM-BU",
  OmWu = "OM-WU",
  OmZa = "OM-ZA",
  OmBj = "OM-BJ",
  OmSj = "OM-SJ",
  OmMa = "OM-MA",
  OmMu = "OM-MU",
  OmBs = "OM-BS",
  OmSs = "OM-SS",
  OmZu = "OM-ZU",
  Pa1 = "PA-1",
  Pa4 = "PA-4",
  Pa2 = "PA-2",
  Pa3 = "PA-3",
  Pa5 = "PA-5",
  PaKy = "PA-KY",
  Pa6 = "PA-6",
  Pa7 = "PA-7",
  PaNb = "PA-NB",
  Pa8 = "PA-8",
  Pa9 = "PA-9",
  PeAma = "PE-AMA",
  PeAnc = "PE-ANC",
  PeApu = "PE-APU",
  PeAre = "PE-ARE",
  PeAya = "PE-AYA",
  PeCaj = "PE-CAJ",
  PeCus = "PE-CUS",
  PeCal = "PE-CAL",
  PeHuv = "PE-HUV",
  PeHuc = "PE-HUC",
  PeIca = "PE-ICA",
  PeJun = "PE-JUN",
  PeLal = "PE-LAL",
  PeLam = "PE-LAM",
  PeLim = "PE-LIM",
  PeLor = "PE-LOR",
  PeMdd = "PE-MDD",
  PeMoq = "PE-MOQ",
  PePas = "PE-PAS",
  PePiu = "PE-PIU",
  PePun = "PE-PUN",
  PeSam = "PE-SAM",
  PeTac = "PE-TAC",
  PeTum = "PE-TUM",
  PeUca = "PE-UCA",
  PfXx1 = "PF-XX-1",
  PfXx2 = "PF-XX-2",
  PfXx3 = "PF-XX-3",
  PfXx4 = "PF-XX-4",
  PfXx5 = "PF-XX-5",
  PgNsb = "PG-NSB",
  PgCpm = "PG-CPM",
  PgCpk = "PG-CPK",
  PgEbr = "PG-EBR",
  PgEhg = "PG-EHG",
  PgEsw = "PG-ESW",
  PgMpm = "PG-MPM",
  PgMrl = "PG-MRL",
  PgMba = "PG-MBA",
  PgMpl = "PG-MPL",
  PgNcd = "PG-NCD",
  PgShm = "PG-SHM",
  PgWbk = "PG-WBK",
  PgSan = "PG-SAN",
  PgWpd = "PG-WPD",
  PgWhm = "PG-WHM",
  PhAbr = "PH-ABR",
  PhAgn = "PH-AGN",
  PhAgs = "PH-AGS",
  PhAkl = "PH-AKL",
  PhAlb = "PH-ALB",
  PhAnt = "PH-ANT",
  PhApa = "PH-APA",
  PhAur = "PH-AUR",
  PhBas = "PH-BAS",
  PhBan = "PH-BAN",
  PhBtn = "PH-BTN",
  PhBtg = "PH-BTG",
  PhBen = "PH-BEN",
  PhBil = "PH-BIL",
  PhBoh = "PH-BOH",
  PhBuk = "PH-BUK",
  PhBul = "PH-BUL",
  PhCag = "PH-CAG",
  PhCan = "PH-CAN",
  PhCas = "PH-CAS",
  PhCam = "PH-CAM",
  PhCap = "PH-CAP",
  PhCat = "PH-CAT",
  PhCav = "PH-CAV",
  PhCeb = "PH-CEB",
  PhNco = "PH-NCO",
  PhDao = "PH-DAO",
  PhCom = "PH-COM",
  PhDav = "PH-DAV",
  PhDas = "PH-DAS",
  PhDin = "PH-DIN",
  PhEas = "PH-EAS",
  PhGui = "PH-GUI",
  PhIfu = "PH-IFU",
  PhIln = "PH-ILN",
  PhIls = "PH-ILS",
  PhIli = "PH-ILI",
  PhIsa = "PH-ISA",
  PhKal = "PH-KAL",
  PhLun = "PH-LUN",
  PhLag = "PH-LAG",
  PhLan = "PH-LAN",
  PhLas = "PH-LAS",
  PhLey = "PH-LEY",
  PhMag = "PH-MAG",
  PhMad = "PH-MAD",
  PhMas = "PH-MAS",
  PhMdc = "PH-MDC",
  PhMdr = "PH-MDR",
  PhMsc = "PH-MSC",
  PhMsr = "PH-MSR",
  PhMou = "PH-MOU",
  Ph00 = "PH-00",
  PhNec = "PH-NEC",
  PhNer = "PH-NER",
  PhNsa = "PH-NSA",
  PhNue = "PH-NUE",
  PhNuv = "PH-NUV",
  PhPlw = "PH-PLW",
  PhPam = "PH-PAM",
  PhPan = "PH-PAN",
  PhQue = "PH-QUE",
  PhQui = "PH-QUI",
  PhRiz = "PH-RIZ",
  PhRom = "PH-ROM",
  PhWsa = "PH-WSA",
  PhSar = "PH-SAR",
  PhSig = "PH-SIG",
  PhSor = "PH-SOR",
  PhSco = "PH-SCO",
  PhSle = "PH-SLE",
  PhSuk = "PH-SUK",
  PhSlu = "PH-SLU",
  PhSun = "PH-SUN",
  PhSur = "PH-SUR",
  PhTar = "PH-TAR",
  PhTaw = "PH-TAW",
  PhZmb = "PH-ZMB",
  PhZsi = "PH-ZSI",
  PhZan = "PH-ZAN",
  PhZas = "PH-ZAS",
  PkJk = "PK-JK",
  PkBa = "PK-BA",
  PkGb = "PK-GB",
  PkIs = "PK-IS",
  PkKp = "PK-KP",
  PkPb = "PK-PB",
  PkSd = "PK-SD",
  Pl02 = "PL-02",
  Pl04 = "PL-04",
  Pl10 = "PL-10",
  Pl06 = "PL-06",
  Pl08 = "PL-08",
  Pl12 = "PL-12",
  Pl14 = "PL-14",
  Pl16 = "PL-16",
  Pl18 = "PL-18",
  Pl20 = "PL-20",
  Pl22 = "PL-22",
  Pl24 = "PL-24",
  Pl26 = "PL-26",
  Pl28 = "PL-28",
  Pl30 = "PL-30",
  Pl32 = "PL-32",
  PmXx1 = "PM-XX-1",
  PnXx1 = "PN-XX-1",
  PrXx1 = "PR-XX-1",
  PrXx2 = "PR-XX-2",
  PrXx3 = "PR-XX-3",
  PrXx4 = "PR-XX-4",
  PrXx5 = "PR-XX-5",
  PrXx6 = "PR-XX-6",
  PrXx7 = "PR-XX-7",
  PrXx8 = "PR-XX-8",
  PrXx9 = "PR-XX-9",
  PrXx10 = "PR-XX-10",
  PrXx11 = "PR-XX-11",
  PrXx12 = "PR-XX-12",
  PrXx13 = "PR-XX-13",
  PrXx14 = "PR-XX-14",
  PrXx15 = "PR-XX-15",
  PrXx16 = "PR-XX-16",
  PrXx17 = "PR-XX-17",
  PrXx18 = "PR-XX-18",
  PrXx19 = "PR-XX-19",
  PrXx20 = "PR-XX-20",
  PrXx21 = "PR-XX-21",
  PrXx22 = "PR-XX-22",
  PrXx23 = "PR-XX-23",
  PrXx24 = "PR-XX-24",
  PrXx25 = "PR-XX-25",
  PrXx26 = "PR-XX-26",
  PrXx27 = "PR-XX-27",
  PrXx28 = "PR-XX-28",
  PrXx29 = "PR-XX-29",
  PrXx30 = "PR-XX-30",
  PrXx31 = "PR-XX-31",
  PrXx32 = "PR-XX-32",
  PrXx33 = "PR-XX-33",
  PrXx34 = "PR-XX-34",
  PrXx35 = "PR-XX-35",
  PrXx36 = "PR-XX-36",
  PrXx37 = "PR-XX-37",
  PrXx38 = "PR-XX-38",
  PrXx39 = "PR-XX-39",
  PrXx40 = "PR-XX-40",
  PrXx41 = "PR-XX-41",
  PrXx42 = "PR-XX-42",
  PrXx43 = "PR-XX-43",
  PrXx44 = "PR-XX-44",
  PrXx45 = "PR-XX-45",
  PrXx46 = "PR-XX-46",
  PrXx47 = "PR-XX-47",
  PrXx48 = "PR-XX-48",
  PrXx49 = "PR-XX-49",
  PrXx50 = "PR-XX-50",
  PrXx51 = "PR-XX-51",
  PrXx52 = "PR-XX-52",
  PrXx53 = "PR-XX-53",
  PrXx54 = "PR-XX-54",
  PrXx55 = "PR-XX-55",
  PrXx56 = "PR-XX-56",
  PrXx57 = "PR-XX-57",
  PrXx58 = "PR-XX-58",
  PrXx59 = "PR-XX-59",
  PrXx60 = "PR-XX-60",
  PrXx61 = "PR-XX-61",
  PrXx62 = "PR-XX-62",
  PrXx63 = "PR-XX-63",
  PrXx64 = "PR-XX-64",
  PrXx65 = "PR-XX-65",
  PrXx66 = "PR-XX-66",
  PrXx67 = "PR-XX-67",
  PrXx68 = "PR-XX-68",
  PrXx69 = "PR-XX-69",
  PrXx70 = "PR-XX-70",
  PrXx71 = "PR-XX-71",
  PrXx72 = "PR-XX-72",
  PrXx73 = "PR-XX-73",
  PrXx74 = "PR-XX-74",
  PrXx75 = "PR-XX-75",
  PrXx76 = "PR-XX-76",
  PsBth = "PS-BTH",
  PsDeb = "PS-DEB",
  PsGza = "PS-GZA",
  PsHbn = "PS-HBN",
  PsJen = "PS-JEN",
  PsJrh = "PS-JRH",
  PsJem = "PS-JEM",
  PsKys = "PS-KYS",
  PsNbs = "PS-NBS",
  PsQqa = "PS-QQA",
  PsRfh = "PS-RFH",
  PsRbh = "PS-RBH",
  PsSlt = "PS-SLT",
  PsTbs = "PS-TBS",
  PsTkm = "PS-TKM",
  Pt01 = "PT-01",
  Pt02 = "PT-02",
  Pt03 = "PT-03",
  Pt04 = "PT-04",
  Pt05 = "PT-05",
  Pt06 = "PT-06",
  Pt07 = "PT-07",
  Pt08 = "PT-08",
  Pt09 = "PT-09",
  Pt10 = "PT-10",
  Pt11 = "PT-11",
  Pt12 = "PT-12",
  Pt13 = "PT-13",
  Pt30 = "PT-30",
  Pt20 = "PT-20",
  Pt14 = "PT-14",
  Pt15 = "PT-15",
  Pt16 = "PT-16",
  Pt17 = "PT-17",
  Pt18 = "PT-18",
  Pw004 = "PW-004",
  Pw100 = "PW-100",
  Pw150 = "PW-150",
  Pw212 = "PW-212",
  Pw214 = "PW-214",
  Pw222 = "PW-222",
  Py10 = "PY-10",
  Py13 = "PY-13",
  PyAsu = "PY-ASU",
  Py19 = "PY-19",
  Py5 = "PY-5",
  Py6 = "PY-6",
  Py14 = "PY-14",
  Py11 = "PY-11",
  Py1 = "PY-1",
  Py3 = "PY-3",
  Py4 = "PY-4",
  Py7 = "PY-7",
  Py8 = "PY-8",
  Py12 = "PY-12",
  Py9 = "PY-9",
  Py15 = "PY-15",
  Py2 = "PY-2",
  QaDa = "QA-DA",
  QaKh = "QA-KH",
  QaWa = "QA-WA",
  QaRa = "QA-RA",
  QaMs = "QA-MS",
  QaZa = "QA-ZA",
  QaUs = "QA-US",
  ReXx1 = "RE-XX-1",
  RoAb = "RO-AB",
  RoAr = "RO-AR",
  RoAg = "RO-AG",
  RoBc = "RO-BC",
  RoBh = "RO-BH",
  RoBn = "RO-BN",
  RoBt = "RO-BT",
  RoBr = "RO-BR",
  RoBv = "RO-BV",
  RoB = "RO-B",
  RoBz = "RO-BZ",
  RoCl = "RO-CL",
  RoCs = "RO-CS",
  RoCj = "RO-CJ",
  RoCt = "RO-CT",
  RoCv = "RO-CV",
  RoDb = "RO-DB",
  RoDj = "RO-DJ",
  RoGl = "RO-GL",
  RoGr = "RO-GR",
  RoGj = "RO-GJ",
  RoHr = "RO-HR",
  RoHd = "RO-HD",
  RoIl = "RO-IL",
  RoIs = "RO-IS",
  RoIf = "RO-IF",
  RoMm = "RO-MM",
  RoMh = "RO-MH",
  RoMs = "RO-MS",
  RoNt = "RO-NT",
  RoOt = "RO-OT",
  RoPh = "RO-PH",
  RoSj = "RO-SJ",
  RoSm = "RO-SM",
  RoSb = "RO-SB",
  RoSv = "RO-SV",
  RoTr = "RO-TR",
  RoTm = "RO-TM",
  RoTl = "RO-TL",
  RoVl = "RO-VL",
  RoVs = "RO-VS",
  RoVn = "RO-VN",
  Rs00 = "RS-00",
  Rs14 = "RS-14",
  Rs11 = "RS-11",
  Rs23 = "RS-23",
  Rs06 = "RS-06",
  Rs04 = "RS-04",
  Rs09 = "RS-09",
  Rs28 = "RS-28",
  Rs08 = "RS-08",
  Rs17 = "RS-17",
  Rs20 = "RS-20",
  Rs24 = "RS-24",
  Rs26 = "RS-26",
  Rs22 = "RS-22",
  Rs10 = "RS-10",
  Rs13 = "RS-13",
  Rs27 = "RS-27",
  Rs19 = "RS-19",
  Rs18 = "RS-18",
  Rs01 = "RS-01",
  Rs03 = "RS-03",
  Rs02 = "RS-02",
  Rs07 = "RS-07",
  Rs12 = "RS-12",
  Rs21 = "RS-21",
  Rs15 = "RS-15",
  Rs05 = "RS-05",
  Rs16 = "RS-16",
  RuAd = "RU-AD",
  RuAl = "RU-AL",
  RuAlt = "RU-ALT",
  RuAmu = "RU-AMU",
  RuArk = "RU-ARK",
  RuAst = "RU-AST",
  RuBa = "RU-BA",
  RuBel = "RU-BEL",
  RuBry = "RU-BRY",
  RuBu = "RU-BU",
  RuCe = "RU-CE",
  RuChe = "RU-CHE",
  RuChu = "RU-CHU",
  RuCu = "RU-CU",
  RuDa = "RU-DA",
  RuIn = "RU-IN",
  RuIrk = "RU-IRK",
  RuIva = "RU-IVA",
  RuKb = "RU-KB",
  RuKgd = "RU-KGD",
  RuKl = "RU-KL",
  RuKlu = "RU-KLU",
  RuKam = "RU-KAM",
  RuKc = "RU-KC",
  RuKr = "RU-KR",
  RuKem = "RU-KEM",
  RuKha = "RU-KHA",
  RuKk = "RU-KK",
  RuKhm = "RU-KHM",
  RuKir = "RU-KIR",
  RuKo = "RU-KO",
  RuKos = "RU-KOS",
  RuKda = "RU-KDA",
  RuKya = "RU-KYA",
  RuKgn = "RU-KGN",
  RuKrs = "RU-KRS",
  RuLen = "RU-LEN",
  RuLip = "RU-LIP",
  RuMag = "RU-MAG",
  RuMe = "RU-ME",
  RuMo = "RU-MO",
  RuMos = "RU-MOS",
  RuMow = "RU-MOW",
  RuMur = "RU-MUR",
  RuNen = "RU-NEN",
  RuNiz = "RU-NIZ",
  RuNgr = "RU-NGR",
  RuNvs = "RU-NVS",
  RuOms = "RU-OMS",
  RuOre = "RU-ORE",
  RuOrl = "RU-ORL",
  RuPnz = "RU-PNZ",
  RuPer = "RU-PER",
  RuPri = "RU-PRI",
  RuPsk = "RU-PSK",
  RuRos = "RU-ROS",
  RuRya = "RU-RYA",
  RuSa = "RU-SA",
  RuSak = "RU-SAK",
  RuSam = "RU-SAM",
  RuSpe = "RU-SPE",
  RuSar = "RU-SAR",
  RuSe = "RU-SE",
  RuSmo = "RU-SMO",
  RuSta = "RU-STA",
  RuSve = "RU-SVE",
  RuTam = "RU-TAM",
  RuTa = "RU-TA",
  RuTom = "RU-TOM",
  RuTul = "RU-TUL",
  RuTve = "RU-TVE",
  RuTyu = "RU-TYU",
  RuTy = "RU-TY",
  RuUd = "RU-UD",
  RuUly = "RU-ULY",
  RuVla = "RU-VLA",
  RuVgg = "RU-VGG",
  RuVlg = "RU-VLG",
  RuVor = "RU-VOR",
  RuYan = "RU-YAN",
  RuYar = "RU-YAR",
  RuYev = "RU-YEV",
  RuZab = "RU-ZAB",
  Rw02 = "RW-02",
  Rw03 = "RW-03",
  Rw04 = "RW-04",
  Rw05 = "RW-05",
  Rw01 = "RW-01",
  Sa14 = "SA-14",
  Sa11 = "SA-11",
  Sa08 = "SA-08",
  Sa12 = "SA-12",
  Sa03 = "SA-03",
  Sa05 = "SA-05",
  Sa01 = "SA-01",
  Sa04 = "SA-04",
  Sa06 = "SA-06",
  Sa09 = "SA-09",
  Sa02 = "SA-02",
  Sa10 = "SA-10",
  Sa07 = "SA-07",
  SbCh = "SB-CH",
  SbGu = "SB-GU",
  SbWe = "SB-WE",
  Sc02 = "SC-02",
  Sc05 = "SC-05",
  Sc01 = "SC-01",
  Sc06 = "SC-06",
  Sc07 = "SC-07",
  Sc08 = "SC-08",
  Sc10 = "SC-10",
  Sc11 = "SC-11",
  Sc16 = "SC-16",
  Sc13 = "SC-13",
  Sc14 = "SC-14",
  Sc15 = "SC-15",
  Sc20 = "SC-20",
  Sc23 = "SC-23",
  SdNb = "SD-NB",
  SdDc = "SD-DC",
  SdGd = "SD-GD",
  SdGz = "SD-GZ",
  SdKa = "SD-KA",
  SdKh = "SD-KH",
  SdDn = "SD-DN",
  SdKn = "SD-KN",
  SdNo = "SD-NO",
  SdRs = "SD-RS",
  SdNr = "SD-NR",
  SdSi = "SD-SI",
  SdDs = "SD-DS",
  SdKs = "SD-KS",
  SdDw = "SD-DW",
  SdGk = "SD-GK",
  SdNw = "SD-NW",
  SeK = "SE-K",
  SeW = "SE-W",
  SeX = "SE-X",
  SeI = "SE-I",
  SeN = "SE-N",
  SeZ = "SE-Z",
  SeF = "SE-F",
  SeH = "SE-H",
  SeG = "SE-G",
  SeBd = "SE-BD",
  SeT = "SE-T",
  SeE = "SE-E",
  SeM = "SE-M",
  SeD = "SE-D",
  SeAb = "SE-AB",
  SeC = "SE-C",
  SeS = "SE-S",
  SeAc = "SE-AC",
  SeY = "SE-Y",
  SeU = "SE-U",
  SeO = "SE-O",
  SgXx1 = "SG-XX-1",
  ShHl = "SH-HL",
  Si001 = "SI-001",
  Si213 = "SI-213",
  Si195 = "SI-195",
  Si002 = "SI-002",
  Si148 = "SI-148",
  Si149 = "SI-149",
  Si003 = "SI-003",
  Si150 = "SI-150",
  Si004 = "SI-004",
  Si005 = "SI-005",
  Si006 = "SI-006",
  Si151 = "SI-151",
  Si007 = "SI-007",
  Si009 = "SI-009",
  Si008 = "SI-008",
  Si152 = "SI-152",
  Si011 = "SI-011",
  Si012 = "SI-012",
  Si013 = "SI-013",
  Si014 = "SI-014",
  Si196 = "SI-196",
  Si015 = "SI-015",
  Si017 = "SI-017",
  Si018 = "SI-018",
  Si019 = "SI-019",
  Si154 = "SI-154",
  Si020 = "SI-020",
  Si155 = "SI-155",
  Si021 = "SI-021",
  Si156 = "SI-156",
  Si023 = "SI-023",
  Si024 = "SI-024",
  Si025 = "SI-025",
  Si026 = "SI-026",
  Si207 = "SI-207",
  Si029 = "SI-029",
  Si031 = "SI-031",
  Si158 = "SI-158",
  Si032 = "SI-032",
  Si159 = "SI-159",
  Si160 = "SI-160",
  Si161 = "SI-161",
  Si162 = "SI-162",
  Si034 = "SI-034",
  Si035 = "SI-035",
  Si036 = "SI-036",
  Si037 = "SI-037",
  Si038 = "SI-038",
  Si039 = "SI-039",
  Si040 = "SI-040",
  Si041 = "SI-041",
  Si042 = "SI-042",
  Si043 = "SI-043",
  Si044 = "SI-044",
  Si045 = "SI-045",
  Si046 = "SI-046",
  Si047 = "SI-047",
  Si048 = "SI-048",
  Si049 = "SI-049",
  Si164 = "SI-164",
  Si050 = "SI-050",
  Si197 = "SI-197",
  Si165 = "SI-165",
  Si052 = "SI-052",
  Si053 = "SI-053",
  Si166 = "SI-166",
  Si054 = "SI-054",
  Si055 = "SI-055",
  Si056 = "SI-056",
  Si057 = "SI-057",
  Si058 = "SI-058",
  Si059 = "SI-059",
  Si060 = "SI-060",
  Si061 = "SI-061",
  Si063 = "SI-063",
  Si208 = "SI-208",
  Si064 = "SI-064",
  Si065 = "SI-065",
  Si066 = "SI-066",
  Si167 = "SI-167",
  Si067 = "SI-067",
  Si068 = "SI-068",
  Si069 = "SI-069",
  Si198 = "SI-198",
  Si070 = "SI-070",
  Si168 = "SI-168",
  Si071 = "SI-071",
  Si072 = "SI-072",
  Si073 = "SI-073",
  Si074 = "SI-074",
  Si169 = "SI-169",
  Si075 = "SI-075",
  Si212 = "SI-212",
  Si170 = "SI-170",
  Si076 = "SI-076",
  Si199 = "SI-199",
  Si077 = "SI-077",
  Si079 = "SI-079",
  Si080 = "SI-080",
  Si081 = "SI-081",
  Si082 = "SI-082",
  Si083 = "SI-083",
  Si084 = "SI-084",
  Si085 = "SI-085",
  Si086 = "SI-086",
  Si171 = "SI-171",
  Si087 = "SI-087",
  Si090 = "SI-090",
  Si091 = "SI-091",
  Si092 = "SI-092",
  Si172 = "SI-172",
  Si200 = "SI-200",
  Si173 = "SI-173",
  Si094 = "SI-094",
  Si174 = "SI-174",
  Si095 = "SI-095",
  Si175 = "SI-175",
  Si096 = "SI-096",
  Si097 = "SI-097",
  Si098 = "SI-098",
  Si099 = "SI-099",
  Si100 = "SI-100",
  Si101 = "SI-101",
  Si102 = "SI-102",
  Si103 = "SI-103",
  Si176 = "SI-176",
  Si209 = "SI-209",
  Si201 = "SI-201",
  Si104 = "SI-104",
  Si106 = "SI-106",
  Si105 = "SI-105",
  Si108 = "SI-108",
  Si033 = "SI-033",
  Si109 = "SI-109",
  Si183 = "SI-183",
  Si117 = "SI-117",
  Si118 = "SI-118",
  Si119 = "SI-119",
  Si120 = "SI-120",
  Si211 = "SI-211",
  Si110 = "SI-110",
  Si111 = "SI-111",
  Si121 = "SI-121",
  Si122 = "SI-122",
  Si123 = "SI-123",
  Si112 = "SI-112",
  Si113 = "SI-113",
  Si114 = "SI-114",
  Si124 = "SI-124",
  Si206 = "SI-206",
  Si125 = "SI-125",
  Si194 = "SI-194",
  Si179 = "SI-179",
  Si180 = "SI-180",
  Si126 = "SI-126",
  Si115 = "SI-115",
  Si127 = "SI-127",
  Si203 = "SI-203",
  Si204 = "SI-204",
  Si182 = "SI-182",
  Si116 = "SI-116",
  Si210 = "SI-210",
  Si205 = "SI-205",
  Si184 = "SI-184",
  Si010 = "SI-010",
  Si128 = "SI-128",
  Si129 = "SI-129",
  Si130 = "SI-130",
  Si185 = "SI-185",
  Si131 = "SI-131",
  Si186 = "SI-186",
  Si132 = "SI-132",
  Si133 = "SI-133",
  Si187 = "SI-187",
  Si134 = "SI-134",
  Si188 = "SI-188",
  Si135 = "SI-135",
  Si136 = "SI-136",
  Si137 = "SI-137",
  Si138 = "SI-138",
  Si139 = "SI-139",
  Si189 = "SI-189",
  Si140 = "SI-140",
  Si141 = "SI-141",
  Si142 = "SI-142",
  Si190 = "SI-190",
  Si143 = "SI-143",
  Si146 = "SI-146",
  Si191 = "SI-191",
  Si147 = "SI-147",
  Si144 = "SI-144",
  Si193 = "SI-193",
  SjXx1 = "SJ-XX-1",
  SkBc = "SK-BC",
  SkBl = "SK-BL",
  SkKi = "SK-KI",
  SkNi = "SK-NI",
  SkPv = "SK-PV",
  SkTc = "SK-TC",
  SkTa = "SK-TA",
  SkZi = "SK-ZI",
  SlE = "SL-E",
  SlN = "SL-N",
  SlS = "SL-S",
  SlW = "SL-W",
  Sm07 = "SM-07",
  Sm03 = "SM-03",
  Sm04 = "SM-04",
  Sm09 = "SM-09",
  SnDk = "SN-DK",
  SnDb = "SN-DB",
  SnFk = "SN-FK",
  SnKa = "SN-KA",
  SnKl = "SN-KL",
  SnKe = "SN-KE",
  SnKd = "SN-KD",
  SnLg = "SN-LG",
  SnMt = "SN-MT",
  SnSl = "SN-SL",
  SnSe = "SN-SE",
  SnTc = "SN-TC",
  SnTh = "SN-TH",
  SnZg = "SN-ZG",
  SoAw = "SO-AW",
  SoBn = "SO-BN",
  SoBr = "SO-BR",
  SoGa = "SO-GA",
  SoJh = "SO-JH",
  SoMu = "SO-MU",
  SoNu = "SO-NU",
  SoSh = "SO-SH",
  SoTo = "SO-TO",
  SoWo = "SO-WO",
  SrBr = "SR-BR",
  SrCm = "SR-CM",
  SrNi = "SR-NI",
  SrPr = "SR-PR",
  SrPm = "SR-PM",
  SrSi = "SR-SI",
  SrWa = "SR-WA",
  SsEc = "SS-EC",
  SsEe = "SS-EE",
  SsJg = "SS-JG",
  SsLk = "SS-LK",
  SsBn = "SS-BN",
  SsNu = "SS-NU",
  SsEw = "SS-EW",
  St01 = "ST-01",
  SvAh = "SV-AH",
  SvCa = "SV-CA",
  SvCh = "SV-CH",
  SvCu = "SV-CU",
  SvLi = "SV-LI",
  SvPa = "SV-PA",
  SvUn = "SV-UN",
  SvMo = "SV-MO",
  SvSm = "SV-SM",
  SvSs = "SV-SS",
  SvSv = "SV-SV",
  SvSa = "SV-SA",
  SvSo = "SV-SO",
  SvUs = "SV-US",
  SxXx1 = "SX-XX-1",
  SyHa = "SY-HA",
  SyLa = "SY-LA",
  SyQu = "SY-QU",
  SyRa = "SY-RA",
  SySu = "SY-SU",
  SyDr = "SY-DR",
  SyDy = "SY-DY",
  SyDi = "SY-DI",
  SyHl = "SY-HL",
  SyHm = "SY-HM",
  SyHi = "SY-HI",
  SyId = "SY-ID",
  SyRd = "SY-RD",
  SyTa = "SY-TA",
  SzHh = "SZ-HH",
  SzLu = "SZ-LU",
  SzMa = "SZ-MA",
  TcXx1 = "TC-XX-1",
  TdBg = "TD-BG",
  TdCb = "TD-CB",
  TdGr = "TD-GR",
  TdLo = "TD-LO",
  TdMe = "TD-ME",
  TdOd = "TD-OD",
  TdNd = "TD-ND",
  TfXx1 = "TF-XX-1",
  TgC = "TG-C",
  TgK = "TG-K",
  TgM = "TG-M",
  TgP = "TG-P",
  Th37 = "TH-37",
  Th15 = "TH-15",
  Th38 = "TH-38",
  Th31 = "TH-31",
  Th24 = "TH-24",
  Th18 = "TH-18",
  Th36 = "TH-36",
  Th22 = "TH-22",
  Th50 = "TH-50",
  Th57 = "TH-57",
  Th20 = "TH-20",
  Th86 = "TH-86",
  Th46 = "TH-46",
  Th62 = "TH-62",
  Th71 = "TH-71",
  Th40 = "TH-40",
  Th81 = "TH-81",
  Th10 = "TH-10",
  Th52 = "TH-52",
  Th51 = "TH-51",
  Th42 = "TH-42",
  Th16 = "TH-16",
  Th58 = "TH-58",
  Th44 = "TH-44",
  Th49 = "TH-49",
  Th26 = "TH-26",
  Th73 = "TH-73",
  Th48 = "TH-48",
  Th30 = "TH-30",
  Th60 = "TH-60",
  Th80 = "TH-80",
  Th55 = "TH-55",
  Th96 = "TH-96",
  Th39 = "TH-39",
  Th43 = "TH-43",
  Th12 = "TH-12",
  Th13 = "TH-13",
  Th94 = "TH-94",
  Th82 = "TH-82",
  Th93 = "TH-93",
  Th56 = "TH-56",
  Th67 = "TH-67",
  Th76 = "TH-76",
  Th66 = "TH-66",
  Th65 = "TH-65",
  Th14 = "TH-14",
  Th54 = "TH-54",
  Th83 = "TH-83",
  Th25 = "TH-25",
  Th77 = "TH-77",
  Th85 = "TH-85",
  Th70 = "TH-70",
  Th21 = "TH-21",
  Th45 = "TH-45",
  Th27 = "TH-27",
  Th47 = "TH-47",
  Th11 = "TH-11",
  Th74 = "TH-74",
  Th75 = "TH-75",
  Th19 = "TH-19",
  Th91 = "TH-91",
  Th33 = "TH-33",
  Th17 = "TH-17",
  Th90 = "TH-90",
  Th64 = "TH-64",
  Th72 = "TH-72",
  Th84 = "TH-84",
  Th32 = "TH-32",
  Th63 = "TH-63",
  Th92 = "TH-92",
  Th23 = "TH-23",
  Th34 = "TH-34",
  Th41 = "TH-41",
  Th61 = "TH-61",
  Th53 = "TH-53",
  Th95 = "TH-95",
  Th35 = "TH-35",
  TjDu = "TJ-DU",
  TjKt = "TJ-KT",
  TjRa = "TJ-RA",
  TjSu = "TJ-SU",
  TkXx1 = "TK-XX-1",
  TlAn = "TL-AN",
  TlBo = "TL-BO",
  TlCo = "TL-CO",
  TlDi = "TL-DI",
  TlLi = "TL-LI",
  TmA = "TM-A",
  TmB = "TM-B",
  TmD = "TM-D",
  TmL = "TM-L",
  TmM = "TM-M",
  Tn31 = "TN-31",
  Tn13 = "TN-13",
  Tn23 = "TN-23",
  Tn81 = "TN-81",
  Tn71 = "TN-71",
  Tn32 = "TN-32",
  Tn41 = "TN-41",
  Tn42 = "TN-42",
  Tn73 = "TN-73",
  Tn12 = "TN-12",
  Tn14 = "TN-14",
  Tn33 = "TN-33",
  Tn53 = "TN-53",
  Tn82 = "TN-82",
  Tn52 = "TN-52",
  Tn21 = "TN-21",
  Tn61 = "TN-61",
  Tn43 = "TN-43",
  Tn34 = "TN-34",
  Tn51 = "TN-51",
  Tn83 = "TN-83",
  Tn72 = "TN-72",
  Tn11 = "TN-11",
  Tn22 = "TN-22",
  To02 = "TO-02",
  To03 = "TO-03",
  To04 = "TO-04",
  Tr01 = "TR-01",
  Tr02 = "TR-02",
  Tr03 = "TR-03",
  Tr04 = "TR-04",
  Tr68 = "TR-68",
  Tr05 = "TR-05",
  Tr06 = "TR-06",
  Tr07 = "TR-07",
  Tr75 = "TR-75",
  Tr08 = "TR-08",
  Tr09 = "TR-09",
  Tr10 = "TR-10",
  Tr74 = "TR-74",
  Tr72 = "TR-72",
  Tr69 = "TR-69",
  Tr11 = "TR-11",
  Tr12 = "TR-12",
  Tr13 = "TR-13",
  Tr14 = "TR-14",
  Tr15 = "TR-15",
  Tr16 = "TR-16",
  Tr17 = "TR-17",
  Tr18 = "TR-18",
  Tr19 = "TR-19",
  Tr20 = "TR-20",
  Tr21 = "TR-21",
  Tr81 = "TR-81",
  Tr22 = "TR-22",
  Tr23 = "TR-23",
  Tr24 = "TR-24",
  Tr25 = "TR-25",
  Tr26 = "TR-26",
  Tr27 = "TR-27",
  Tr28 = "TR-28",
  Tr29 = "TR-29",
  Tr30 = "TR-30",
  Tr31 = "TR-31",
  Tr76 = "TR-76",
  Tr32 = "TR-32",
  Tr34 = "TR-34",
  Tr35 = "TR-35",
  Tr46 = "TR-46",
  Tr78 = "TR-78",
  Tr70 = "TR-70",
  Tr36 = "TR-36",
  Tr37 = "TR-37",
  Tr38 = "TR-38",
  Tr79 = "TR-79",
  Tr71 = "TR-71",
  Tr39 = "TR-39",
  Tr40 = "TR-40",
  Tr41 = "TR-41",
  Tr42 = "TR-42",
  Tr43 = "TR-43",
  Tr44 = "TR-44",
  Tr45 = "TR-45",
  Tr47 = "TR-47",
  Tr33 = "TR-33",
  Tr48 = "TR-48",
  Tr49 = "TR-49",
  Tr50 = "TR-50",
  Tr51 = "TR-51",
  Tr52 = "TR-52",
  Tr80 = "TR-80",
  Tr53 = "TR-53",
  Tr54 = "TR-54",
  Tr55 = "TR-55",
  Tr63 = "TR-63",
  Tr56 = "TR-56",
  Tr57 = "TR-57",
  Tr73 = "TR-73",
  Tr58 = "TR-58",
  Tr59 = "TR-59",
  Tr60 = "TR-60",
  Tr61 = "TR-61",
  Tr62 = "TR-62",
  Tr64 = "TR-64",
  Tr65 = "TR-65",
  Tr77 = "TR-77",
  Tr66 = "TR-66",
  Tr67 = "TR-67",
  TtAri = "TT-ARI",
  TtCha = "TT-CHA",
  TtCtt = "TT-CTT",
  TtDmn = "TT-DMN",
  TtMrc = "TT-MRC",
  TtPed = "TT-PED",
  TtPtf = "TT-PTF",
  TtPos = "TT-POS",
  TtPrt = "TT-PRT",
  TtSfo = "TT-SFO",
  TtSjl = "TT-SJL",
  TtSge = "TT-SGE",
  TtSip = "TT-SIP",
  TtTob = "TT-TOB",
  TtTup = "TT-TUP",
  TvFun = "TV-FUN",
  TwCha = "TW-CHA",
  TwCyq = "TW-CYQ",
  TwHsq = "TW-HSQ",
  TwHua = "TW-HUA",
  TwKhh = "TW-KHH",
  TwKee = "TW-KEE",
  TwKin = "TW-KIN",
  TwLie = "TW-LIE",
  TwMia = "TW-MIA",
  TwNan = "TW-NAN",
  TwNwt = "TW-NWT",
  TwPen = "TW-PEN",
  TwPif = "TW-PIF",
  TwTxg = "TW-TXG",
  TwTnn = "TW-TNN",
  TwTpe = "TW-TPE",
  TwTtt = "TW-TTT",
  TwTao = "TW-TAO",
  TwIla = "TW-ILA",
  TwYun = "TW-YUN",
  Tz01 = "TZ-01",
  Tz02 = "TZ-02",
  Tz03 = "TZ-03",
  Tz27 = "TZ-27",
  Tz04 = "TZ-04",
  Tz05 = "TZ-05",
  Tz06 = "TZ-06",
  Tz07 = "TZ-07",
  Tz28 = "TZ-28",
  Tz08 = "TZ-08",
  Tz09 = "TZ-09",
  Tz11 = "TZ-11",
  Tz12 = "TZ-12",
  Tz26 = "TZ-26",
  Tz13 = "TZ-13",
  Tz14 = "TZ-14",
  Tz15 = "TZ-15",
  Tz16 = "TZ-16",
  Tz17 = "TZ-17",
  Tz18 = "TZ-18",
  Tz29 = "TZ-29",
  Tz19 = "TZ-19",
  Tz20 = "TZ-20",
  Tz21 = "TZ-21",
  Tz22 = "TZ-22",
  Tz30 = "TZ-30",
  Tz23 = "TZ-23",
  Tz31 = "TZ-31",
  Tz24 = "TZ-24",
  Tz25 = "TZ-25",
  Ua43 = "UA-43",
  Ua71 = "UA-71",
  Ua74 = "UA-74",
  Ua77 = "UA-77",
  Ua12 = "UA-12",
  Ua14 = "UA-14",
  Ua26 = "UA-26",
  Ua63 = "UA-63",
  Ua65 = "UA-65",
  Ua68 = "UA-68",
  Ua35 = "UA-35",
  Ua30 = "UA-30",
  Ua32 = "UA-32",
  Ua09 = "UA-09",
  Ua46 = "UA-46",
  Ua48 = "UA-48",
  Ua51 = "UA-51",
  Ua53 = "UA-53",
  Ua56 = "UA-56",
  Ua40 = "UA-40",
  Ua59 = "UA-59",
  Ua61 = "UA-61",
  Ua05 = "UA-05",
  Ua07 = "UA-07",
  Ua21 = "UA-21",
  Ua23 = "UA-23",
  Ua18 = "UA-18",
  Ug314 = "UG-314",
  Ug301 = "UG-301",
  Ug322 = "UG-322",
  Ug323 = "UG-323",
  Ug315 = "UG-315",
  Ug324 = "UG-324",
  Ug216 = "UG-216",
  Ug316 = "UG-316",
  Ug302 = "UG-302",
  Ug303 = "UG-303",
  Ug217 = "UG-217",
  Ug218 = "UG-218",
  Ug201 = "UG-201",
  Ug420 = "UG-420",
  Ug117 = "UG-117",
  Ug219 = "UG-219",
  Ug118 = "UG-118",
  Ug220 = "UG-220",
  Ug225 = "UG-225",
  Ug401 = "UG-401",
  Ug402 = "UG-402",
  Ug202 = "UG-202",
  Ug221 = "UG-221",
  Ug120 = "UG-120",
  Ug226 = "UG-226",
  Ug317 = "UG-317",
  Ug121 = "UG-121",
  Ug304 = "UG-304",
  Ug403 = "UG-403",
  Ug417 = "UG-417",
  Ug203 = "UG-203",
  Ug418 = "UG-418",
  Ug204 = "UG-204",
  Ug318 = "UG-318",
  Ug404 = "UG-404",
  Ug405 = "UG-405",
  Ug213 = "UG-213",
  Ug101 = "UG-101",
  Ug222 = "UG-222",
  Ug122 = "UG-122",
  Ug102 = "UG-102",
  Ug205 = "UG-205",
  Ug413 = "UG-413",
  Ug206 = "UG-206",
  Ug406 = "UG-406",
  Ug207 = "UG-207",
  Ug112 = "UG-112",
  Ug407 = "UG-407",
  Ug103 = "UG-103",
  Ug227 = "UG-227",
  Ug419 = "UG-419",
  Ug421 = "UG-421",
  Ug408 = "UG-408",
  Ug305 = "UG-305",
  Ug319 = "UG-319",
  Ug306 = "UG-306",
  Ug208 = "UG-208",
  Ug228 = "UG-228",
  Ug123 = "UG-123",
  Ug422 = "UG-422",
  Ug415 = "UG-415",
  Ug326 = "UG-326",
  Ug307 = "UG-307",
  Ug229 = "UG-229",
  Ug104 = "UG-104",
  Ug124 = "UG-124",
  Ug114 = "UG-114",
  Ug223 = "UG-223",
  Ug105 = "UG-105",
  Ug409 = "UG-409",
  Ug214 = "UG-214",
  Ug209 = "UG-209",
  Ug410 = "UG-410",
  Ug423 = "UG-423",
  Ug115 = "UG-115",
  Ug308 = "UG-308",
  Ug309 = "UG-309",
  Ug106 = "UG-106",
  Ug107 = "UG-107",
  Ug108 = "UG-108",
  Ug311 = "UG-311",
  Ug116 = "UG-116",
  Ug109 = "UG-109",
  Ug230 = "UG-230",
  Ug224 = "UG-224",
  Ug327 = "UG-327",
  Ug310 = "UG-310",
  Ug231 = "UG-231",
  Ug411 = "UG-411",
  Ug328 = "UG-328",
  Ug321 = "UG-321",
  Ug312 = "UG-312",
  Ug210 = "UG-210",
  Ug110 = "UG-110",
  Ug425 = "UG-425",
  Ug412 = "UG-412",
  Ug111 = "UG-111",
  Ug232 = "UG-232",
  Ug426 = "UG-426",
  Ug215 = "UG-215",
  Ug211 = "UG-211",
  Ug212 = "UG-212",
  Ug113 = "UG-113",
  Ug313 = "UG-313",
  Ug330 = "UG-330",
  Um95 = "UM-95",
  UsAl = "US-AL",
  UsAk = "US-AK",
  UsAz = "US-AZ",
  UsAr = "US-AR",
  UsCa = "US-CA",
  UsCo = "US-CO",
  UsCt = "US-CT",
  UsDe = "US-DE",
  UsDc = "US-DC",
  UsFl = "US-FL",
  UsGa = "US-GA",
  UsHi = "US-HI",
  UsId = "US-ID",
  UsIl = "US-IL",
  UsIn = "US-IN",
  UsIa = "US-IA",
  UsKs = "US-KS",
  UsKy = "US-KY",
  UsLa = "US-LA",
  UsMe = "US-ME",
  UsMd = "US-MD",
  UsMa = "US-MA",
  UsMi = "US-MI",
  UsMn = "US-MN",
  UsMs = "US-MS",
  UsMo = "US-MO",
  UsMt = "US-MT",
  UsNe = "US-NE",
  UsNv = "US-NV",
  UsNh = "US-NH",
  UsNj = "US-NJ",
  UsNm = "US-NM",
  UsNy = "US-NY",
  UsNc = "US-NC",
  UsNd = "US-ND",
  UsOh = "US-OH",
  UsOk = "US-OK",
  UsOr = "US-OR",
  UsPa = "US-PA",
  UsRi = "US-RI",
  UsSc = "US-SC",
  UsSd = "US-SD",
  UsTn = "US-TN",
  UsTx = "US-TX",
  UsUt = "US-UT",
  UsVt = "US-VT",
  UsVa = "US-VA",
  UsWa = "US-WA",
  UsWv = "US-WV",
  UsWi = "US-WI",
  UsWy = "US-WY",
  UyAr = "UY-AR",
  UyCa = "UY-CA",
  UyCl = "UY-CL",
  UyCo = "UY-CO",
  UyDu = "UY-DU",
  UyFs = "UY-FS",
  UyFd = "UY-FD",
  UyLa = "UY-LA",
  UyMa = "UY-MA",
  UyMo = "UY-MO",
  UyPa = "UY-PA",
  UyRn = "UY-RN",
  UyRv = "UY-RV",
  UyRo = "UY-RO",
  UySa = "UY-SA",
  UySj = "UY-SJ",
  UySo = "UY-SO",
  UyTa = "UY-TA",
  UyTt = "UY-TT",
  UzAn = "UZ-AN",
  UzBu = "UZ-BU",
  UzFa = "UZ-FA",
  UzJi = "UZ-JI",
  UzNg = "UZ-NG",
  UzNw = "UZ-NW",
  UzQa = "UZ-QA",
  UzQr = "UZ-QR",
  UzSa = "UZ-SA",
  UzSi = "UZ-SI",
  UzSu = "UZ-SU",
  UzTk = "UZ-TK",
  UzXo = "UZ-XO",
  VaXx1 = "VA-XX-1",
  Vc01 = "VC-01",
  Vc06 = "VC-06",
  Vc04 = "VC-04",
  Vc05 = "VC-05",
  VeZ = "VE-Z",
  VeB = "VE-B",
  VeC = "VE-C",
  VeD = "VE-D",
  VeE = "VE-E",
  VeF = "VE-F",
  VeG = "VE-G",
  VeH = "VE-H",
  VeY = "VE-Y",
  VeA = "VE-A",
  VeI = "VE-I",
  VeJ = "VE-J",
  VeX = "VE-X",
  VeK = "VE-K",
  VeL = "VE-L",
  VeM = "VE-M",
  VeN = "VE-N",
  VeO = "VE-O",
  VeP = "VE-P",
  VeR = "VE-R",
  VeS = "VE-S",
  VeT = "VE-T",
  VeU = "VE-U",
  VeV = "VE-V",
  VgXx1 = "VG-XX-1",
  ViXx1 = "VI-XX-1",
  Vn44 = "VN-44",
  Vn43 = "VN-43",
  Vn54 = "VN-54",
  Vn53 = "VN-53",
  Vn55 = "VN-55",
  Vn56 = "VN-56",
  Vn50 = "VN-50",
  Vn31 = "VN-31",
  Vn57 = "VN-57",
  Vn58 = "VN-58",
  Vn40 = "VN-40",
  Vn59 = "VN-59",
  VnCt = "VN-CT",
  Vn04 = "VN-04",
  VnDn = "VN-DN",
  Vn33 = "VN-33",
  Vn72 = "VN-72",
  Vn71 = "VN-71",
  Vn39 = "VN-39",
  Vn45 = "VN-45",
  Vn30 = "VN-30",
  Vn03 = "VN-03",
  Vn63 = "VN-63",
  VnHn = "VN-HN",
  Vn23 = "VN-23",
  Vn61 = "VN-61",
  VnHp = "VN-HP",
  Vn73 = "VN-73",
  VnSg = "VN-SG",
  Vn14 = "VN-14",
  Vn66 = "VN-66",
  Vn34 = "VN-34",
  Vn47 = "VN-47",
  Vn28 = "VN-28",
  Vn01 = "VN-01",
  Vn35 = "VN-35",
  Vn09 = "VN-09",
  Vn02 = "VN-02",
  Vn41 = "VN-41",
  Vn67 = "VN-67",
  Vn22 = "VN-22",
  Vn18 = "VN-18",
  Vn36 = "VN-36",
  Vn68 = "VN-68",
  Vn32 = "VN-32",
  Vn24 = "VN-24",
  Vn27 = "VN-27",
  Vn29 = "VN-29",
  Vn13 = "VN-13",
  Vn25 = "VN-25",
  Vn52 = "VN-52",
  Vn05 = "VN-05",
  Vn37 = "VN-37",
  Vn20 = "VN-20",
  Vn69 = "VN-69",
  Vn21 = "VN-21",
  Vn26 = "VN-26",
  Vn46 = "VN-46",
  Vn51 = "VN-51",
  Vn07 = "VN-07",
  Vn49 = "VN-49",
  Vn70 = "VN-70",
  Vn06 = "VN-06",
  VuSee = "VU-SEE",
  VuTae = "VU-TAE",
  VuTob = "VU-TOB",
  WfSg = "WF-SG",
  WfUv = "WF-UV",
  WsAt = "WS-AT",
  WsFa = "WS-FA",
  WsTu = "WS-TU",
  YeAd = "YE-AD",
  YeAm = "YE-AM",
  YeAb = "YE-AB",
  YeDa = "YE-DA",
  YeBa = "YE-BA",
  YeHu = "YE-HU",
  YeSa = "YE-SA",
  YeDh = "YE-DH",
  YeHd = "YE-HD",
  YeHj = "YE-HJ",
  YeIb = "YE-IB",
  YeLa = "YE-LA",
  YeMa = "YE-MA",
  YeSd = "YE-SD",
  YeSn = "YE-SN",
  YeSh = "YE-SH",
  YeTa = "YE-TA",
  YtXx1 = "YT-XX-1",
  YtXx2 = "YT-XX-2",
  YtXx3 = "YT-XX-3",
  YtXx4 = "YT-XX-4",
  YtXx5 = "YT-XX-5",
  YtXx6 = "YT-XX-6",
  ZaEc = "ZA-EC",
  ZaFs = "ZA-FS",
  ZaGp = "ZA-GP",
  ZaKzn = "ZA-KZN",
  ZaLp = "ZA-LP",
  ZaMp = "ZA-MP",
  ZaNw = "ZA-NW",
  ZaNc = "ZA-NC",
  ZaWc = "ZA-WC",
  Zm02 = "ZM-02",
  Zm08 = "ZM-08",
  Zm03 = "ZM-03",
  Zm04 = "ZM-04",
  Zm09 = "ZM-09",
  Zm10 = "ZM-10",
  Zm06 = "ZM-06",
  Zm05 = "ZM-05",
  Zm07 = "ZM-07",
  Zm01 = "ZM-01",
  ZwBu = "ZW-BU",
  ZwHa = "ZW-HA",
  ZwMa = "ZW-MA",
  ZwMc = "ZW-MC",
  ZwMe = "ZW-ME",
  ZwMw = "ZW-MW",
  ZwMv = "ZW-MV",
  ZwMn = "ZW-MN",
  ZwMs = "ZW-MS",
  ZwMi = "ZW-MI",
}
export type UpdateEmployeeApiModelSchemasHomeLocationStateValueOpen = OpenEnum<
  typeof UpdateEmployeeApiModelSchemasHomeLocationStateValue
>;

/**
 * The ISO3166-2 sub division where the location is situated
 */
export type UpdateEmployeeApiModelState = {
  sourceValue?:
    | UpdateEmployeeApiModelSchemasHomeLocationState4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?:
    | UpdateEmployeeApiModelSchemasHomeLocationStateValueOpen
    | null
    | undefined;
};

/**
 * The employee home location
 */
export type UpdateEmployeeApiModelHomeLocation = {
  /**
   * The city where the location is situated
   */
  city?: string | null | undefined;
  /**
   * The country code
   */
  country?: UpdateEmployeeApiModelCountry | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The name of the location
   */
  name?: string | null | undefined;
  /**
   * Value to pass through to the provider
   */
  passthrough?: { [k: string]: any } | null | undefined;
  /**
   * The phone number of the location
   */
  phoneNumber?: string | null | undefined;
  /**
   * The ISO3166-2 sub division where the location is situated
   */
  state?: UpdateEmployeeApiModelState | null | undefined;
  /**
   * The first line of the address
   */
  street1?: string | null | undefined;
  /**
   * The second line of the address
   */
  street2?: string | null | undefined;
  /**
   * The ZIP code/Postal code of the location
   */
  zipCode?: string | null | undefined;
};

export type UpdateEmployeeApiModelSchemasMaritalStatus4 = {};

export type UpdateEmployeeApiModelSchemasMaritalStatusSourceValue =
  | UpdateEmployeeApiModelSchemasMaritalStatus4
  | string
  | number
  | boolean
  | Array<any>;

export enum UpdateEmployeeApiModelSchemasMaritalStatusValue {
  Single = "single",
  Married = "married",
  CommonLaw = "common_law",
  Divorced = "divorced",
  Widowed = "widowed",
  DomesticPartnership = "domestic_partnership",
  Separated = "separated",
  Other = "other",
  NotDisclosed = "not_disclosed",
  UnmappedValue = "unmapped_value",
}
export type UpdateEmployeeApiModelSchemasMaritalStatusValueOpen = OpenEnum<
  typeof UpdateEmployeeApiModelSchemasMaritalStatusValue
>;

/**
 * The employee marital status
 */
export type UpdateEmployeeApiModelMaritalStatus = {
  sourceValue?:
    | UpdateEmployeeApiModelSchemasMaritalStatus4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?:
    | UpdateEmployeeApiModelSchemasMaritalStatusValueOpen
    | null
    | undefined;
};

export type UpdateEmployeeApiModelSchemasNationalIdentityNumber4 = {};

export type UpdateEmployeeApiModelSchemasNationalIdentityNumberSourceValue =
  | UpdateEmployeeApiModelSchemasNationalIdentityNumber4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The ISO3166-1 Alpha2 Code of the Country
 */
export enum UpdateEmployeeApiModelSchemasNationalIdentityNumberValue {
  Af = "AF",
  Al = "AL",
  Dz = "DZ",
  As = "AS",
  Ad = "AD",
  Ao = "AO",
  Ai = "AI",
  Aq = "AQ",
  Ag = "AG",
  Ar = "AR",
  Am = "AM",
  Aw = "AW",
  Au = "AU",
  At = "AT",
  Az = "AZ",
  Bs = "BS",
  Bh = "BH",
  Bd = "BD",
  Bb = "BB",
  By = "BY",
  Be = "BE",
  Bz = "BZ",
  Bj = "BJ",
  Bm = "BM",
  Bt = "BT",
  Bo = "BO",
  Bq = "BQ",
  Ba = "BA",
  Bw = "BW",
  Bv = "BV",
  Br = "BR",
  Io = "IO",
  Bn = "BN",
  Bg = "BG",
  Bf = "BF",
  Bi = "BI",
  Kh = "KH",
  Cm = "CM",
  Ca = "CA",
  Cv = "CV",
  Ky = "KY",
  Cf = "CF",
  Td = "TD",
  Cl = "CL",
  Cn = "CN",
  Cx = "CX",
  Cc = "CC",
  Co = "CO",
  Km = "KM",
  Cg = "CG",
  Cd = "CD",
  Ck = "CK",
  Cr = "CR",
  Hr = "HR",
  Cu = "CU",
  Cw = "CW",
  Cy = "CY",
  Cz = "CZ",
  Ci = "CI",
  Dk = "DK",
  Dj = "DJ",
  Dm = "DM",
  Do = "DO",
  Ec = "EC",
  Eg = "EG",
  Sv = "SV",
  Gq = "GQ",
  Er = "ER",
  Ee = "EE",
  Et = "ET",
  Fk = "FK",
  Fo = "FO",
  Fj = "FJ",
  Fi = "FI",
  Fr = "FR",
  Gf = "GF",
  Pf = "PF",
  Tf = "TF",
  Ga = "GA",
  Gm = "GM",
  Ge = "GE",
  De = "DE",
  Gh = "GH",
  Gi = "GI",
  Gr = "GR",
  Gl = "GL",
  Gd = "GD",
  Gp = "GP",
  Gu = "GU",
  Gt = "GT",
  Gg = "GG",
  Gn = "GN",
  Gw = "GW",
  Gy = "GY",
  Ht = "HT",
  Hm = "HM",
  Va = "VA",
  Hn = "HN",
  Hk = "HK",
  Hu = "HU",
  Is = "IS",
  In = "IN",
  Id = "ID",
  Ir = "IR",
  Iq = "IQ",
  Ie = "IE",
  Im = "IM",
  Il = "IL",
  It = "IT",
  Jm = "JM",
  Jp = "JP",
  Je = "JE",
  Jo = "JO",
  Kz = "KZ",
  Ke = "KE",
  Ki = "KI",
  Kp = "KP",
  Kr = "KR",
  Kw = "KW",
  Kg = "KG",
  La = "LA",
  Lv = "LV",
  Lb = "LB",
  Ls = "LS",
  Lr = "LR",
  Ly = "LY",
  Li = "LI",
  Lt = "LT",
  Lu = "LU",
  Mo = "MO",
  Mk = "MK",
  Mg = "MG",
  Mw = "MW",
  My = "MY",
  Mv = "MV",
  Ml = "ML",
  Mt = "MT",
  Mh = "MH",
  Mq = "MQ",
  Mr = "MR",
  Mu = "MU",
  Yt = "YT",
  Mx = "MX",
  Fm = "FM",
  Md = "MD",
  Mc = "MC",
  Mn = "MN",
  Me = "ME",
  Ms = "MS",
  Ma = "MA",
  Mz = "MZ",
  Mm = "MM",
  Na = "NA",
  Nr = "NR",
  Np = "NP",
  Nl = "NL",
  Nc = "NC",
  Nz = "NZ",
  Ni = "NI",
  Ne = "NE",
  Ng = "NG",
  Nu = "NU",
  Nf = "NF",
  Mp = "MP",
  No = "NO",
  Om = "OM",
  Pk = "PK",
  Pw = "PW",
  Ps = "PS",
  Pa = "PA",
  Pg = "PG",
  Py = "PY",
  Pe = "PE",
  Ph = "PH",
  Pn = "PN",
  Pl = "PL",
  Pt = "PT",
  Pr = "PR",
  Qa = "QA",
  Ro = "RO",
  Ru = "RU",
  Rw = "RW",
  Re = "RE",
  Bl = "BL",
  Sh = "SH",
  Kn = "KN",
  Lc = "LC",
  Mf = "MF",
  Pm = "PM",
  Vc = "VC",
  Ws = "WS",
  Sm = "SM",
  St = "ST",
  Sa = "SA",
  Sn = "SN",
  Rs = "RS",
  Sc = "SC",
  Sl = "SL",
  Sg = "SG",
  Sx = "SX",
  Sk = "SK",
  Si = "SI",
  Sb = "SB",
  So = "SO",
  Za = "ZA",
  Gs = "GS",
  Ss = "SS",
  Es = "ES",
  Lk = "LK",
  Sd = "SD",
  Sr = "SR",
  Sj = "SJ",
  Sz = "SZ",
  Se = "SE",
  Ch = "CH",
  Sy = "SY",
  Tw = "TW",
  Tj = "TJ",
  Tz = "TZ",
  Th = "TH",
  Tl = "TL",
  Tg = "TG",
  Tk = "TK",
  To = "TO",
  Tt = "TT",
  Tn = "TN",
  Tr = "TR",
  Tm = "TM",
  Tc = "TC",
  Tv = "TV",
  Ug = "UG",
  Ua = "UA",
  Ae = "AE",
  Gb = "GB",
  Us = "US",
  Um = "UM",
  Uy = "UY",
  Uz = "UZ",
  Vu = "VU",
  Ve = "VE",
  Vn = "VN",
  Vg = "VG",
  Vi = "VI",
  Wf = "WF",
  Eh = "EH",
  Ye = "YE",
  Zm = "ZM",
  Zw = "ZW",
  UnmappedValue = "unmapped_value",
}
/**
 * The ISO3166-1 Alpha2 Code of the Country
 */
export type UpdateEmployeeApiModelSchemasNationalIdentityNumberValueOpen =
  OpenEnum<typeof UpdateEmployeeApiModelSchemasNationalIdentityNumberValue>;

/**
 * The country code
 */
export type UpdateEmployeeApiModelSchemasCountry = {
  sourceValue?:
    | UpdateEmployeeApiModelSchemasNationalIdentityNumber4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The ISO3166-1 Alpha2 Code of the Country
   */
  value?:
    | UpdateEmployeeApiModelSchemasNationalIdentityNumberValueOpen
    | null
    | undefined;
};

export type UpdateEmployeeApiModelSchemasNationalIdentityNumberType4 = {};

export type UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeSourceValue =
  | UpdateEmployeeApiModelSchemasNationalIdentityNumberType4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The type of the national identity number
 */
export enum UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeValue {
  Ssn = "ssn",
  Nin = "nin",
  Sin = "sin",
  Nid = "nid",
  Pin = "pin",
  Pn = "pn",
  Umcn = "umcn",
  Pic = "pic",
  Ric = "ric",
  Idnum = "idnum",
  Cid = "cid",
  Nidnr = "nidnr",
  Pan = "pan",
  Aadhaar = "aadhaar",
  Epic = "epic",
  Ptn = "ptn",
  Itin = "itin",
  Tin = "tin",
  Uprc = "uprc",
  Pcode = "pcode",
  Ssi = "ssi",
  Cedula = "cedula",
  Passport = "passport",
  Voterid = "voterid",
  Ntin = "ntin",
  Bn = "bn",
  Fnr = "fnr",
  Mva = "mva",
  CivilId = "civil_id",
  Cnic = "cnic",
  Nric = "nric",
  Fin = "fin",
  Uen = "uen",
  Registrationnumber = "registrationnumber",
  Nic = "nic",
  Personnummer = "personnummer",
  Ahv = "ahv",
  Id = "id",
  Eid = "eid",
  Va = "va",
  Pid = "pid",
  Nrt = "nrt",
  Nipt = "nipt",
  Cbu = "cbu",
  Cuit = "cuit",
  Dni = "dni",
  Businessid = "businessid",
  Vnr = "vnr",
  Abn = "abn",
  Acn = "acn",
  Tfn = "tfn",
  Jmbg = "jmbg",
  Bis = "bis",
  Insz = "insz",
  Nn = "nn",
  Egn = "egn",
  Pnf = "pnf",
  Vat = "vat",
  Cnpj = "cnpj",
  Unp = "unp",
  Gst = "gst",
  Pst = "pst",
  Qst = "qst",
  Ni = "ni",
  Dic = "dic",
  Rc = "rc",
  Uid = "uid",
  Rut = "rut",
  Uscc = "uscc",
  Cpf = "cpf",
  Cpj = "cpj",
  Cr = "cr",
  Stnr = "stnr",
  Svnr = "svnr",
  Ncf = "ncf",
  Rnc = "rnc",
  Nif = "nif",
  Ci = "ci",
  Ik = "ik",
  Kmkr = "kmkr",
  Registrikood = "registrikood",
  Tn = "tn",
  Ruc = "ruc",
  Nit = "nit",
  Alv = "alv",
  Hetu = "hetu",
  Ytunnus = "ytunnus",
  Vn = "vn",
  Utr = "utr",
  Nifp = "nifp",
  Amka = "amka",
  Cui = "cui",
  Nir = "nir",
  Siren = "siren",
  Siret = "siret",
  Tva = "tva",
  Oib = "oib",
  Hkid = "hkid",
  Anum = "anum",
  Kennitala = "kennitala",
  Vsk = "vsk",
  Npwp = "npwp",
  Pps = "pps",
  Gstin = "gstin",
  Idnr = "idnr",
  Hr = "hr",
  Aic = "aic",
  Codicefiscale = "codicefiscale",
  Iva = "iva",
  Peid = "peid",
  Asmens = "asmens",
  Pvm = "pvm",
  Ctps = "ctps",
  Vrn = "vrn",
  Vtk = "vtk",
  Int = "int",
  Tk = "tk",
  Pas = "pas",
  Rne = "rne",
  Rg = "rg",
  Nci = "nci",
  Crnm = "crnm",
  Pis = "pis",
  Insee = "insee",
  Tax = "tax",
  Mpf = "mpf",
  Epfo = "epfo",
  Esi = "esi",
  Pran = "pran",
  Uan = "uan",
  Idk = "idk",
  Bsn = "bsn",
  Mid = "mid",
  Sss = "sss",
  Nie = "nie",
  Nss = "nss",
  Arc = "arc",
  Curp = "curp",
  Imss = "imss",
  Rfc = "rfc",
  Ein = "ein",
  Other = "other",
  Unknown = "unknown",
}
/**
 * The type of the national identity number
 */
export type UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeValueOpen =
  OpenEnum<typeof UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeValue>;

export type UpdateEmployeeApiModelType = {
  sourceValue?:
    | UpdateEmployeeApiModelSchemasNationalIdentityNumberType4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The type of the national identity number
   */
  value?:
    | UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeValueOpen
    | null
    | undefined;
};

/**
 * The national identity number
 */
export type UpdateEmployeeApiModelNationalIdentityNumber = {
  /**
   * The country code
   */
  country?: UpdateEmployeeApiModelSchemasCountry | null | undefined;
  type?: UpdateEmployeeApiModelType | null | undefined;
  value?: string | null | undefined;
};

export type UpdateEmployeeApiModelSchemasPreferredLanguage4 = {};

export type UpdateEmployeeApiModelSchemasPreferredLanguageSourceValue =
  | UpdateEmployeeApiModelSchemasPreferredLanguage4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The ISO639-2 Code of the language
 */
export enum UpdateEmployeeApiModelSchemasPreferredLanguageValue {
  Aar = "aar",
  Afr = "afr",
  Amh = "amh",
  Ara = "ara",
  Aym = "aym",
  Aze = "aze",
  Bel = "bel",
  Bul = "bul",
  Bis = "bis",
  Ben = "ben",
  Bos = "bos",
  Byn = "byn",
  Cat = "cat",
  Cha = "cha",
  Ces = "ces",
  Deu = "deu",
  Div = "div",
  Dzo = "dzo",
  Ell = "ell",
  Eng = "eng",
  Spa = "spa",
  Est = "est",
  Fas = "fas",
  Fan = "fan",
  Ful = "ful",
  Fin = "fin",
  Fij = "fij",
  Fao = "fao",
  Fra = "fra",
  Gle = "gle",
  Grn = "grn",
  Glv = "glv",
  Heb = "heb",
  Hin = "hin",
  Hrv = "hrv",
  Hat = "hat",
  Hun = "hun",
  Hye = "hye",
  Ind = "ind",
  Isl = "isl",
  Ita = "ita",
  Jpn = "jpn",
  Kat = "kat",
  Kon = "kon",
  Kaz = "kaz",
  Kal = "kal",
  Khm = "khm",
  Kor = "kor",
  Kur = "kur",
  Kir = "kir",
  Lat = "lat",
  Ltz = "ltz",
  Lin = "lin",
  Lao = "lao",
  Lit = "lit",
  Lub = "lub",
  Lav = "lav",
  Mlg = "mlg",
  Mah = "mah",
  Mri = "mri",
  Mkd = "mkd",
  Msa = "msa",
  Mlt = "mlt",
  Mya = "mya",
  Nob = "nob",
  Nep = "nep",
  Nld = "nld",
  Nno = "nno",
  Nor = "nor",
  Nbl = "nbl",
  Nya = "nya",
  Pan = "pan",
  Pol = "pol",
  Pus = "pus",
  Por = "por",
  Rar = "rar",
  Roh = "roh",
  Rup = "rup",
  Ron = "ron",
  Rus = "rus",
  Kin = "kin",
  Sag = "sag",
  Sin = "sin",
  Slk = "slk",
  Smo = "smo",
  Sna = "sna",
  Som = "som",
  Sqi = "sqi",
  Srp = "srp",
  Ssw = "ssw",
  Swe = "swe",
  Swa = "swa",
  Tam = "tam",
  Tgk = "tgk",
  Tha = "tha",
  Tir = "tir",
  Tig = "tig",
  UnmappedValue = "unmapped_value",
}
/**
 * The ISO639-2 Code of the language
 */
export type UpdateEmployeeApiModelSchemasPreferredLanguageValueOpen = OpenEnum<
  typeof UpdateEmployeeApiModelSchemasPreferredLanguageValue
>;

/**
 * The employee preferred language
 */
export type UpdateEmployeeApiModelPreferredLanguage = {
  sourceValue?:
    | UpdateEmployeeApiModelSchemasPreferredLanguage4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The ISO639-2 Code of the language
   */
  value?:
    | UpdateEmployeeApiModelSchemasPreferredLanguageValueOpen
    | null
    | undefined;
};

export type UpdateEmployeeApiModelSchemasWorkLocation4 = {};

export type UpdateEmployeeApiModelSchemasWorkLocationSourceValue =
  | UpdateEmployeeApiModelSchemasWorkLocation4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The ISO3166-1 Alpha2 Code of the Country
 */
export enum UpdateEmployeeApiModelSchemasWorkLocationValue {
  Af = "AF",
  Al = "AL",
  Dz = "DZ",
  As = "AS",
  Ad = "AD",
  Ao = "AO",
  Ai = "AI",
  Aq = "AQ",
  Ag = "AG",
  Ar = "AR",
  Am = "AM",
  Aw = "AW",
  Au = "AU",
  At = "AT",
  Az = "AZ",
  Bs = "BS",
  Bh = "BH",
  Bd = "BD",
  Bb = "BB",
  By = "BY",
  Be = "BE",
  Bz = "BZ",
  Bj = "BJ",
  Bm = "BM",
  Bt = "BT",
  Bo = "BO",
  Bq = "BQ",
  Ba = "BA",
  Bw = "BW",
  Bv = "BV",
  Br = "BR",
  Io = "IO",
  Bn = "BN",
  Bg = "BG",
  Bf = "BF",
  Bi = "BI",
  Kh = "KH",
  Cm = "CM",
  Ca = "CA",
  Cv = "CV",
  Ky = "KY",
  Cf = "CF",
  Td = "TD",
  Cl = "CL",
  Cn = "CN",
  Cx = "CX",
  Cc = "CC",
  Co = "CO",
  Km = "KM",
  Cg = "CG",
  Cd = "CD",
  Ck = "CK",
  Cr = "CR",
  Hr = "HR",
  Cu = "CU",
  Cw = "CW",
  Cy = "CY",
  Cz = "CZ",
  Ci = "CI",
  Dk = "DK",
  Dj = "DJ",
  Dm = "DM",
  Do = "DO",
  Ec = "EC",
  Eg = "EG",
  Sv = "SV",
  Gq = "GQ",
  Er = "ER",
  Ee = "EE",
  Et = "ET",
  Fk = "FK",
  Fo = "FO",
  Fj = "FJ",
  Fi = "FI",
  Fr = "FR",
  Gf = "GF",
  Pf = "PF",
  Tf = "TF",
  Ga = "GA",
  Gm = "GM",
  Ge = "GE",
  De = "DE",
  Gh = "GH",
  Gi = "GI",
  Gr = "GR",
  Gl = "GL",
  Gd = "GD",
  Gp = "GP",
  Gu = "GU",
  Gt = "GT",
  Gg = "GG",
  Gn = "GN",
  Gw = "GW",
  Gy = "GY",
  Ht = "HT",
  Hm = "HM",
  Va = "VA",
  Hn = "HN",
  Hk = "HK",
  Hu = "HU",
  Is = "IS",
  In = "IN",
  Id = "ID",
  Ir = "IR",
  Iq = "IQ",
  Ie = "IE",
  Im = "IM",
  Il = "IL",
  It = "IT",
  Jm = "JM",
  Jp = "JP",
  Je = "JE",
  Jo = "JO",
  Kz = "KZ",
  Ke = "KE",
  Ki = "KI",
  Kp = "KP",
  Kr = "KR",
  Kw = "KW",
  Kg = "KG",
  La = "LA",
  Lv = "LV",
  Lb = "LB",
  Ls = "LS",
  Lr = "LR",
  Ly = "LY",
  Li = "LI",
  Lt = "LT",
  Lu = "LU",
  Mo = "MO",
  Mk = "MK",
  Mg = "MG",
  Mw = "MW",
  My = "MY",
  Mv = "MV",
  Ml = "ML",
  Mt = "MT",
  Mh = "MH",
  Mq = "MQ",
  Mr = "MR",
  Mu = "MU",
  Yt = "YT",
  Mx = "MX",
  Fm = "FM",
  Md = "MD",
  Mc = "MC",
  Mn = "MN",
  Me = "ME",
  Ms = "MS",
  Ma = "MA",
  Mz = "MZ",
  Mm = "MM",
  Na = "NA",
  Nr = "NR",
  Np = "NP",
  Nl = "NL",
  Nc = "NC",
  Nz = "NZ",
  Ni = "NI",
  Ne = "NE",
  Ng = "NG",
  Nu = "NU",
  Nf = "NF",
  Mp = "MP",
  No = "NO",
  Om = "OM",
  Pk = "PK",
  Pw = "PW",
  Ps = "PS",
  Pa = "PA",
  Pg = "PG",
  Py = "PY",
  Pe = "PE",
  Ph = "PH",
  Pn = "PN",
  Pl = "PL",
  Pt = "PT",
  Pr = "PR",
  Qa = "QA",
  Ro = "RO",
  Ru = "RU",
  Rw = "RW",
  Re = "RE",
  Bl = "BL",
  Sh = "SH",
  Kn = "KN",
  Lc = "LC",
  Mf = "MF",
  Pm = "PM",
  Vc = "VC",
  Ws = "WS",
  Sm = "SM",
  St = "ST",
  Sa = "SA",
  Sn = "SN",
  Rs = "RS",
  Sc = "SC",
  Sl = "SL",
  Sg = "SG",
  Sx = "SX",
  Sk = "SK",
  Si = "SI",
  Sb = "SB",
  So = "SO",
  Za = "ZA",
  Gs = "GS",
  Ss = "SS",
  Es = "ES",
  Lk = "LK",
  Sd = "SD",
  Sr = "SR",
  Sj = "SJ",
  Sz = "SZ",
  Se = "SE",
  Ch = "CH",
  Sy = "SY",
  Tw = "TW",
  Tj = "TJ",
  Tz = "TZ",
  Th = "TH",
  Tl = "TL",
  Tg = "TG",
  Tk = "TK",
  To = "TO",
  Tt = "TT",
  Tn = "TN",
  Tr = "TR",
  Tm = "TM",
  Tc = "TC",
  Tv = "TV",
  Ug = "UG",
  Ua = "UA",
  Ae = "AE",
  Gb = "GB",
  Us = "US",
  Um = "UM",
  Uy = "UY",
  Uz = "UZ",
  Vu = "VU",
  Ve = "VE",
  Vn = "VN",
  Vg = "VG",
  Vi = "VI",
  Wf = "WF",
  Eh = "EH",
  Ye = "YE",
  Zm = "ZM",
  Zw = "ZW",
  UnmappedValue = "unmapped_value",
}
/**
 * The ISO3166-1 Alpha2 Code of the Country
 */
export type UpdateEmployeeApiModelSchemasWorkLocationValueOpen = OpenEnum<
  typeof UpdateEmployeeApiModelSchemasWorkLocationValue
>;

/**
 * The country code
 */
export type UpdateEmployeeApiModelSchemasWorkLocationCountry = {
  sourceValue?:
    | UpdateEmployeeApiModelSchemasWorkLocation4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The ISO3166-1 Alpha2 Code of the Country
   */
  value?: UpdateEmployeeApiModelSchemasWorkLocationValueOpen | null | undefined;
};

export type UpdateEmployeeApiModelSchemasWorkLocationState4 = {};

export type UpdateEmployeeApiModelSchemasWorkLocationStateSourceValue =
  | UpdateEmployeeApiModelSchemasWorkLocationState4
  | string
  | number
  | boolean
  | Array<any>;

export enum UpdateEmployeeApiModelSchemasWorkLocationStateValue {
  Ad07 = "AD-07",
  Ad02 = "AD-02",
  Ad03 = "AD-03",
  Ad08 = "AD-08",
  Ad04 = "AD-04",
  Ad05 = "AD-05",
  Ad06 = "AD-06",
  AeAj = "AE-AJ",
  AeAz = "AE-AZ",
  AeFu = "AE-FU",
  AeSh = "AE-SH",
  AeDu = "AE-DU",
  AeRk = "AE-RK",
  AeUq = "AE-UQ",
  AfBds = "AF-BDS",
  AfBdg = "AF-BDG",
  AfBgl = "AF-BGL",
  AfBal = "AF-BAL",
  AfBam = "AF-BAM",
  AfDay = "AF-DAY",
  AfFra = "AF-FRA",
  AfFyb = "AF-FYB",
  AfGha = "AF-GHA",
  AfGho = "AF-GHO",
  AfHel = "AF-HEL",
  AfHer = "AF-HER",
  AfJow = "AF-JOW",
  AfKab = "AF-KAB",
  AfKan = "AF-KAN",
  AfKap = "AF-KAP",
  AfKho = "AF-KHO",
  AfKdz = "AF-KDZ",
  AfLag = "AF-LAG",
  AfLog = "AF-LOG",
  AfNan = "AF-NAN",
  AfNim = "AF-NIM",
  AfPia = "AF-PIA",
  AfPar = "AF-PAR",
  AfSar = "AF-SAR",
  AfTak = "AF-TAK",
  AfUru = "AF-URU",
  Ag11 = "AG-11",
  Ag03 = "AG-03",
  Ag04 = "AG-04",
  Ag06 = "AG-06",
  Ag07 = "AG-07",
  Ag08 = "AG-08",
  AiXx1 = "AI-XX-1",
  Al01 = "AL-01",
  Al09 = "AL-09",
  Al02 = "AL-02",
  Al03 = "AL-03",
  Al04 = "AL-04",
  Al05 = "AL-05",
  Al06 = "AL-06",
  Al07 = "AL-07",
  Al08 = "AL-08",
  Al10 = "AL-10",
  Al11 = "AL-11",
  Al12 = "AL-12",
  AmAg = "AM-AG",
  AmAr = "AM-AR",
  AmAv = "AM-AV",
  AmEr = "AM-ER",
  AmGr = "AM-GR",
  AmKt = "AM-KT",
  AmLo = "AM-LO",
  AmSh = "AM-SH",
  AmSu = "AM-SU",
  AmTv = "AM-TV",
  AmVd = "AM-VD",
  AoBgo = "AO-BGO",
  AoBgu = "AO-BGU",
  AoBie = "AO-BIE",
  AoCab = "AO-CAB",
  AoCcu = "AO-CCU",
  AoCno = "AO-CNO",
  AoCus = "AO-CUS",
  AoCnn = "AO-CNN",
  AoHua = "AO-HUA",
  AoHui = "AO-HUI",
  AoLua = "AO-LUA",
  AoLno = "AO-LNO",
  AoLsu = "AO-LSU",
  AoMal = "AO-MAL",
  AoMox = "AO-MOX",
  AoNam = "AO-NAM",
  AoUig = "AO-UIG",
  AoZai = "AO-ZAI",
  AqXx1 = "AQ-XX-1",
  ArB = "AR-B",
  ArK = "AR-K",
  ArH = "AR-H",
  ArU = "AR-U",
  ArC = "AR-C",
  ArX = "AR-X",
  ArW = "AR-W",
  ArE = "AR-E",
  ArP = "AR-P",
  ArY = "AR-Y",
  ArL = "AR-L",
  ArF = "AR-F",
  ArM = "AR-M",
  ArN = "AR-N",
  ArQ = "AR-Q",
  ArR = "AR-R",
  ArA = "AR-A",
  ArJ = "AR-J",
  ArD = "AR-D",
  ArZ = "AR-Z",
  ArS = "AR-S",
  ArG = "AR-G",
  ArV = "AR-V",
  ArT = "AR-T",
  AsXx1 = "AS-XX-1",
  AsXx2 = "AS-XX-2",
  At1 = "AT-1",
  At2 = "AT-2",
  At3 = "AT-3",
  At4 = "AT-4",
  At5 = "AT-5",
  At6 = "AT-6",
  At7 = "AT-7",
  At8 = "AT-8",
  At9 = "AT-9",
  AuAct = "AU-ACT",
  AuNsw = "AU-NSW",
  AuNt = "AU-NT",
  AuQld = "AU-QLD",
  AuSa = "AU-SA",
  AuTas = "AU-TAS",
  AuVic = "AU-VIC",
  AuWa = "AU-WA",
  AwXx1 = "AW-XX-1",
  AxXx1 = "AX-XX-1",
  AxXx2 = "AX-XX-2",
  AxXx3 = "AX-XX-3",
  AxXx4 = "AX-XX-4",
  AxXx5 = "AX-XX-5",
  AxXx6 = "AX-XX-6",
  AxXx7 = "AX-XX-7",
  AxXx8 = "AX-XX-8",
  AzAbs = "AZ-ABS",
  AzAgc = "AZ-AGC",
  AzAgu = "AZ-AGU",
  AzAst = "AZ-AST",
  AzBa = "AZ-BA",
  AzBal = "AZ-BAL",
  AzBar = "AZ-BAR",
  AzBey = "AZ-BEY",
  AzBil = "AZ-BIL",
  AzCal = "AZ-CAL",
  AzFuz = "AZ-FUZ",
  AzGad = "AZ-GAD",
  AzGa = "AZ-GA",
  AzGor = "AZ-GOR",
  AzGoy = "AZ-GOY",
  AzGyg = "AZ-GYG",
  AzImi = "AZ-IMI",
  AzIsm = "AZ-ISM",
  AzKur = "AZ-KUR",
  AzLa = "AZ-LA",
  AzMas = "AZ-MAS",
  AzMi = "AZ-MI",
  AzNa = "AZ-NA",
  AzNx = "AZ-NX",
  AzNef = "AZ-NEF",
  AzOgu = "AZ-OGU",
  AzQab = "AZ-QAB",
  AzQax = "AZ-QAX",
  AzQaz = "AZ-QAZ",
  AzQba = "AZ-QBA",
  AzQus = "AZ-QUS",
  AzSat = "AZ-SAT",
  AzSab = "AZ-SAB",
  AzSak = "AZ-SAK",
  AzSal = "AZ-SAL",
  AzSmi = "AZ-SMI",
  AzSkr = "AZ-SKR",
  AzSmx = "AZ-SMX",
  AzSr = "AZ-SR",
  AzSm = "AZ-SM",
  AzTar = "AZ-TAR",
  AzUca = "AZ-UCA",
  AzXac = "AZ-XAC",
  AzXvd = "AZ-XVD",
  AzYar = "AZ-YAR",
  AzYev = "AZ-YEV",
  AzZaq = "AZ-ZAQ",
  AzZar = "AZ-ZAR",
  BaBrc = "BA-BRC",
  BaBih = "BA-BIH",
  BaSrp = "BA-SRP",
  Bb01 = "BB-01",
  Bb02 = "BB-02",
  Bb03 = "BB-03",
  Bb04 = "BB-04",
  Bb05 = "BB-05",
  Bb07 = "BB-07",
  Bb08 = "BB-08",
  Bb09 = "BB-09",
  Bb10 = "BB-10",
  Bb11 = "BB-11",
  BdA = "BD-A",
  BdB = "BD-B",
  BdC = "BD-C",
  BdD = "BD-D",
  BdE = "BD-E",
  BdF = "BD-F",
  BdG = "BD-G",
  BeVan = "BE-VAN",
  BeWbr = "BE-WBR",
  BeBru = "BE-BRU",
  BeWht = "BE-WHT",
  BeWlg = "BE-WLG",
  BeVli = "BE-VLI",
  BeWlx = "BE-WLX",
  BeWna = "BE-WNA",
  BeVov = "BE-VOV",
  BeVbr = "BE-VBR",
  BeVwv = "BE-VWV",
  BfBam = "BF-BAM",
  BfBaz = "BF-BAZ",
  BfBlg = "BF-BLG",
  BfBlk = "BF-BLK",
  BfCom = "BF-COM",
  BfGan = "BF-GAN",
  BfGna = "BF-GNA",
  BfGou = "BF-GOU",
  BfHou = "BF-HOU",
  BfIob = "BF-IOB",
  BfKad = "BF-KAD",
  BfKen = "BF-KEN",
  BfKmp = "BF-KMP",
  BfKos = "BF-KOS",
  BfKot = "BF-KOT",
  BfKow = "BF-KOW",
  BfLer = "BF-LER",
  BfLor = "BF-LOR",
  BfMou = "BF-MOU",
  BfNao = "BF-NAO",
  BfNam = "BF-NAM",
  BfNay = "BF-NAY",
  BfOub = "BF-OUB",
  BfOud = "BF-OUD",
  BfPas = "BF-PAS",
  BfPon = "BF-PON",
  BfSng = "BF-SNG",
  BfSmt = "BF-SMT",
  BfSen = "BF-SEN",
  BfSis = "BF-SIS",
  BfSom = "BF-SOM",
  BfSor = "BF-SOR",
  BfTap = "BF-TAP",
  BfTui = "BF-TUI",
  BfYat = "BF-YAT",
  BfZir = "BF-ZIR",
  BfZon = "BF-ZON",
  BfZou = "BF-ZOU",
  Bg01 = "BG-01",
  Bg02 = "BG-02",
  Bg08 = "BG-08",
  Bg07 = "BG-07",
  Bg26 = "BG-26",
  Bg09 = "BG-09",
  Bg10 = "BG-10",
  Bg11 = "BG-11",
  Bg12 = "BG-12",
  Bg13 = "BG-13",
  Bg14 = "BG-14",
  Bg15 = "BG-15",
  Bg16 = "BG-16",
  Bg17 = "BG-17",
  Bg18 = "BG-18",
  Bg27 = "BG-27",
  Bg19 = "BG-19",
  Bg20 = "BG-20",
  Bg21 = "BG-21",
  Bg23 = "BG-23",
  Bg22 = "BG-22",
  Bg24 = "BG-24",
  Bg25 = "BG-25",
  Bg03 = "BG-03",
  Bg04 = "BG-04",
  Bg05 = "BG-05",
  Bg06 = "BG-06",
  Bg28 = "BG-28",
  Bh13 = "BH-13",
  Bh14 = "BH-14",
  Bh15 = "BH-15",
  Bh17 = "BH-17",
  BiBm = "BI-BM",
  BiCi = "BI-CI",
  BiGi = "BI-GI",
  BiKr = "BI-KR",
  BiKi = "BI-KI",
  BiMw = "BI-MW",
  BiNg = "BI-NG",
  BiRm = "BI-RM",
  BiRt = "BI-RT",
  BiRy = "BI-RY",
  BjAk = "BJ-AK",
  BjAq = "BJ-AQ",
  BjBo = "BJ-BO",
  BjCo = "BJ-CO",
  BjDo = "BJ-DO",
  BjLi = "BJ-LI",
  BjMo = "BJ-MO",
  BjOu = "BJ-OU",
  BjPl = "BJ-PL",
  BjZo = "BJ-ZO",
  BlXx1 = "BL-XX-1",
  BmXx1 = "BM-XX-1",
  BmXx2 = "BM-XX-2",
  BnBe = "BN-BE",
  BnBm = "BN-BM",
  BnTe = "BN-TE",
  BnTu = "BN-TU",
  BoH = "BO-H",
  BoC = "BO-C",
  BoB = "BO-B",
  BoL = "BO-L",
  BoO = "BO-O",
  BoN = "BO-N",
  BoP = "BO-P",
  BoS = "BO-S",
  BoT = "BO-T",
  BqBo = "BQ-BO",
  BqSa = "BQ-SA",
  BqSe = "BQ-SE",
  BrAc = "BR-AC",
  BrAl = "BR-AL",
  BrAp = "BR-AP",
  BrAm = "BR-AM",
  BrBa = "BR-BA",
  BrCe = "BR-CE",
  BrDf = "BR-DF",
  BrEs = "BR-ES",
  BrGo = "BR-GO",
  BrMa = "BR-MA",
  BrMt = "BR-MT",
  BrMs = "BR-MS",
  BrMg = "BR-MG",
  BrPa = "BR-PA",
  BrPb = "BR-PB",
  BrPr = "BR-PR",
  BrPe = "BR-PE",
  BrPi = "BR-PI",
  BrRn = "BR-RN",
  BrRs = "BR-RS",
  BrRj = "BR-RJ",
  BrRo = "BR-RO",
  BrRr = "BR-RR",
  BrSc = "BR-SC",
  BrSp = "BR-SP",
  BrSe = "BR-SE",
  BrTo = "BR-TO",
  BsBp = "BS-BP",
  BsCo = "BS-CO",
  BsFp = "BS-FP",
  BsEg = "BS-EG",
  BsHi = "BS-HI",
  BsLi = "BS-LI",
  BsNp = "BS-NP",
  BsNo = "BS-NO",
  BsNs = "BS-NS",
  BsNe = "BS-NE",
  BsSe = "BS-SE",
  BsWg = "BS-WG",
  Bt33 = "BT-33",
  Bt12 = "BT-12",
  Bt22 = "BT-22",
  BtGa = "BT-GA",
  Bt44 = "BT-44",
  Bt42 = "BT-42",
  Bt11 = "BT-11",
  Bt43 = "BT-43",
  Bt23 = "BT-23",
  Bt45 = "BT-45",
  Bt14 = "BT-14",
  Bt31 = "BT-31",
  Bt15 = "BT-15",
  Bt41 = "BT-41",
  Bt32 = "BT-32",
  Bt21 = "BT-21",
  Bt24 = "BT-24",
  BvXx1 = "BV-XX-1",
  BwCe = "BW-CE",
  BwCh = "BW-CH",
  BwGh = "BW-GH",
  BwKg = "BW-KG",
  BwKl = "BW-KL",
  BwKw = "BW-KW",
  BwNe = "BW-NE",
  BwNw = "BW-NW",
  BwSe = "BW-SE",
  BwSo = "BW-SO",
  ByBr = "BY-BR",
  ByHo = "BY-HO",
  ByHm = "BY-HM",
  ByHr = "BY-HR",
  ByMa = "BY-MA",
  ByMi = "BY-MI",
  ByVi = "BY-VI",
  BzBz = "BZ-BZ",
  BzCy = "BZ-CY",
  BzCzl = "BZ-CZL",
  BzOw = "BZ-OW",
  BzSc = "BZ-SC",
  BzTol = "BZ-TOL",
  CaAb = "CA-AB",
  CaBc = "CA-BC",
  CaMb = "CA-MB",
  CaNb = "CA-NB",
  CaNl = "CA-NL",
  CaNt = "CA-NT",
  CaNs = "CA-NS",
  CaNu = "CA-NU",
  CaOn = "CA-ON",
  CaPe = "CA-PE",
  CaQc = "CA-QC",
  CaSk = "CA-SK",
  CaYt = "CA-YT",
  CcXx1 = "CC-XX-1",
  CdEq = "CD-EQ",
  CdHk = "CD-HK",
  CdHl = "CD-HL",
  CdIt = "CD-IT",
  CdKc = "CD-KC",
  CdKe = "CD-KE",
  CdKn = "CD-KN",
  CdBc = "CD-BC",
  CdKg = "CD-KG",
  CdKl = "CD-KL",
  CdLu = "CD-LU",
  CdNk = "CD-NK",
  CdSa = "CD-SA",
  CdSk = "CD-SK",
  CdTa = "CD-TA",
  CdTo = "CD-TO",
  CdTu = "CD-TU",
  CfBb = "CF-BB",
  CfBgf = "CF-BGF",
  CfKb = "CF-KB",
  CfHm = "CF-HM",
  CfKg = "CF-KG",
  CfNm = "CF-NM",
  CfUk = "CF-UK",
  CfAc = "CF-AC",
  CfOp = "CF-OP",
  CfVk = "CF-VK",
  Cg11 = "CG-11",
  CgBzv = "CG-BZV",
  Cg8 = "CG-8",
  Cg9 = "CG-9",
  Cg16 = "CG-16",
  Cg13 = "CG-13",
  ChAg = "CH-AG",
  ChAr = "CH-AR",
  ChAi = "CH-AI",
  ChBl = "CH-BL",
  ChBs = "CH-BS",
  ChBe = "CH-BE",
  ChFr = "CH-FR",
  ChGe = "CH-GE",
  ChGl = "CH-GL",
  ChGr = "CH-GR",
  ChJu = "CH-JU",
  ChLu = "CH-LU",
  ChNe = "CH-NE",
  ChNw = "CH-NW",
  ChOw = "CH-OW",
  ChSg = "CH-SG",
  ChSh = "CH-SH",
  ChSz = "CH-SZ",
  ChSo = "CH-SO",
  ChTg = "CH-TG",
  ChTi = "CH-TI",
  ChUr = "CH-UR",
  ChVs = "CH-VS",
  ChVd = "CH-VD",
  ChZg = "CH-ZG",
  ChZh = "CH-ZH",
  CiAb = "CI-AB",
  CiBs = "CI-BS",
  CiCm = "CI-CM",
  CiDn = "CI-DN",
  CiGd = "CI-GD",
  CiLc = "CI-LC",
  CiLg = "CI-LG",
  CiMg = "CI-MG",
  CiSm = "CI-SM",
  CiSv = "CI-SV",
  CiVb = "CI-VB",
  CiWr = "CI-WR",
  CiYm = "CI-YM",
  CiZz = "CI-ZZ",
  CkXx1 = "CK-XX-1",
  ClAi = "CL-AI",
  ClAn = "CL-AN",
  ClAp = "CL-AP",
  ClAt = "CL-AT",
  ClBi = "CL-BI",
  ClCo = "CL-CO",
  ClAr = "CL-AR",
  ClLi = "CL-LI",
  ClLl = "CL-LL",
  ClLr = "CL-LR",
  ClMa = "CL-MA",
  ClMl = "CL-ML",
  ClNb = "CL-NB",
  ClRm = "CL-RM",
  ClTa = "CL-TA",
  ClVs = "CL-VS",
  CmAd = "CM-AD",
  CmCe = "CM-CE",
  CmEs = "CM-ES",
  CmEn = "CM-EN",
  CmLt = "CM-LT",
  CmNo = "CM-NO",
  CmNw = "CM-NW",
  CmOu = "CM-OU",
  CmSu = "CM-SU",
  CmSw = "CM-SW",
  CnAh = "CN-AH",
  CnBj = "CN-BJ",
  CnCq = "CN-CQ",
  CnFj = "CN-FJ",
  CnGs = "CN-GS",
  CnGd = "CN-GD",
  CnGx = "CN-GX",
  CnGz = "CN-GZ",
  CnHi = "CN-HI",
  CnHe = "CN-HE",
  CnHl = "CN-HL",
  CnHa = "CN-HA",
  CnHb = "CN-HB",
  CnHn = "CN-HN",
  CnJs = "CN-JS",
  CnJx = "CN-JX",
  CnJl = "CN-JL",
  CnLn = "CN-LN",
  CnNm = "CN-NM",
  CnNx = "CN-NX",
  CnQh = "CN-QH",
  CnSn = "CN-SN",
  CnSd = "CN-SD",
  CnSh = "CN-SH",
  CnSx = "CN-SX",
  CnSc = "CN-SC",
  CnTj = "CN-TJ",
  CnXj = "CN-XJ",
  CnXz = "CN-XZ",
  CnYn = "CN-YN",
  CnZj = "CN-ZJ",
  CoAma = "CO-AMA",
  CoAnt = "CO-ANT",
  CoAra = "CO-ARA",
  CoAtl = "CO-ATL",
  CoBol = "CO-BOL",
  CoBoy = "CO-BOY",
  CoCal = "CO-CAL",
  CoCaq = "CO-CAQ",
  CoCas = "CO-CAS",
  CoCau = "CO-CAU",
  CoCes = "CO-CES",
  CoCho = "CO-CHO",
  CoCor = "CO-COR",
  CoCun = "CO-CUN",
  CoDc = "CO-DC",
  CoGua = "CO-GUA",
  CoGuv = "CO-GUV",
  CoHui = "CO-HUI",
  CoLag = "CO-LAG",
  CoMag = "CO-MAG",
  CoMet = "CO-MET",
  CoNar = "CO-NAR",
  CoNsa = "CO-NSA",
  CoPut = "CO-PUT",
  CoQui = "CO-QUI",
  CoRis = "CO-RIS",
  CoSap = "CO-SAP",
  CoSan = "CO-SAN",
  CoSuc = "CO-SUC",
  CoTol = "CO-TOL",
  CoVac = "CO-VAC",
  CoVid = "CO-VID",
  CrA = "CR-A",
  CrC = "CR-C",
  CrG = "CR-G",
  CrH = "CR-H",
  CrL = "CR-L",
  CrP = "CR-P",
  CrSj = "CR-SJ",
  Cu15 = "CU-15",
  Cu09 = "CU-09",
  Cu08 = "CU-08",
  Cu06 = "CU-06",
  Cu12 = "CU-12",
  Cu14 = "CU-14",
  Cu11 = "CU-11",
  Cu03 = "CU-03",
  Cu10 = "CU-10",
  Cu04 = "CU-04",
  Cu16 = "CU-16",
  Cu01 = "CU-01",
  Cu07 = "CU-07",
  Cu13 = "CU-13",
  Cu05 = "CU-05",
  CvBv = "CV-BV",
  CvBr = "CV-BR",
  CvMo = "CV-MO",
  CvPn = "CV-PN",
  CvPr = "CV-PR",
  CvRs = "CV-RS",
  CvSl = "CV-SL",
  CvCr = "CV-CR",
  CvSd = "CV-SD",
  CvSo = "CV-SO",
  CvSv = "CV-SV",
  CvTa = "CV-TA",
  CvTs = "CV-TS",
  CwXx1 = "CW-XX-1",
  CxXx1 = "CX-XX-1",
  Cy04 = "CY-04",
  Cy06 = "CY-06",
  Cy03 = "CY-03",
  Cy01 = "CY-01",
  Cy02 = "CY-02",
  Cy05 = "CY-05",
  Cz31 = "CZ-31",
  Cz64 = "CZ-64",
  Cz41 = "CZ-41",
  Cz63 = "CZ-63",
  Cz52 = "CZ-52",
  Cz51 = "CZ-51",
  Cz80 = "CZ-80",
  Cz71 = "CZ-71",
  Cz53 = "CZ-53",
  Cz32 = "CZ-32",
  Cz10 = "CZ-10",
  Cz20 = "CZ-20",
  Cz42 = "CZ-42",
  Cz72 = "CZ-72",
  DeBw = "DE-BW",
  DeBy = "DE-BY",
  DeBe = "DE-BE",
  DeBb = "DE-BB",
  DeHb = "DE-HB",
  DeHh = "DE-HH",
  DeHe = "DE-HE",
  DeMv = "DE-MV",
  DeNi = "DE-NI",
  DeNw = "DE-NW",
  DeRp = "DE-RP",
  DeSl = "DE-SL",
  DeSn = "DE-SN",
  DeSt = "DE-ST",
  DeSh = "DE-SH",
  DeTh = "DE-TH",
  DjAr = "DJ-AR",
  DjDj = "DJ-DJ",
  Dk84 = "DK-84",
  Dk82 = "DK-82",
  Dk81 = "DK-81",
  Dk85 = "DK-85",
  Dk83 = "DK-83",
  Dm02 = "DM-02",
  Dm04 = "DM-04",
  Dm05 = "DM-05",
  Dm06 = "DM-06",
  Dm07 = "DM-07",
  Dm09 = "DM-09",
  Dm10 = "DM-10",
  Do02 = "DO-02",
  Do03 = "DO-03",
  Do04 = "DO-04",
  Do05 = "DO-05",
  Do01 = "DO-01",
  Do06 = "DO-06",
  Do08 = "DO-08",
  Do07 = "DO-07",
  Do09 = "DO-09",
  Do30 = "DO-30",
  Do19 = "DO-19",
  Do10 = "DO-10",
  Do11 = "DO-11",
  Do12 = "DO-12",
  Do13 = "DO-13",
  Do14 = "DO-14",
  Do28 = "DO-28",
  Do15 = "DO-15",
  Do29 = "DO-29",
  Do17 = "DO-17",
  Do18 = "DO-18",
  Do20 = "DO-20",
  Do21 = "DO-21",
  Do31 = "DO-31",
  Do22 = "DO-22",
  Do23 = "DO-23",
  Do24 = "DO-24",
  Do25 = "DO-25",
  Do26 = "DO-26",
  Do27 = "DO-27",
  Dz01 = "DZ-01",
  Dz44 = "DZ-44",
  Dz46 = "DZ-46",
  Dz16 = "DZ-16",
  Dz23 = "DZ-23",
  Dz05 = "DZ-05",
  Dz08 = "DZ-08",
  Dz06 = "DZ-06",
  Dz07 = "DZ-07",
  Dz09 = "DZ-09",
  Dz34 = "DZ-34",
  Dz10 = "DZ-10",
  Dz35 = "DZ-35",
  Dz02 = "DZ-02",
  Dz25 = "DZ-25",
  Dz17 = "DZ-17",
  Dz32 = "DZ-32",
  Dz39 = "DZ-39",
  Dz36 = "DZ-36",
  Dz47 = "DZ-47",
  Dz24 = "DZ-24",
  Dz33 = "DZ-33",
  Dz18 = "DZ-18",
  Dz40 = "DZ-40",
  Dz03 = "DZ-03",
  Dz28 = "DZ-28",
  Dz29 = "DZ-29",
  Dz26 = "DZ-26",
  Dz43 = "DZ-43",
  Dz27 = "DZ-27",
  Dz45 = "DZ-45",
  Dz31 = "DZ-31",
  Dz30 = "DZ-30",
  Dz04 = "DZ-04",
  Dz48 = "DZ-48",
  Dz20 = "DZ-20",
  Dz19 = "DZ-19",
  Dz22 = "DZ-22",
  Dz21 = "DZ-21",
  Dz41 = "DZ-41",
  Dz11 = "DZ-11",
  Dz12 = "DZ-12",
  Dz14 = "DZ-14",
  Dz37 = "DZ-37",
  Dz42 = "DZ-42",
  Dz38 = "DZ-38",
  Dz15 = "DZ-15",
  Dz13 = "DZ-13",
  EcA = "EC-A",
  EcB = "EC-B",
  EcF = "EC-F",
  EcC = "EC-C",
  EcH = "EC-H",
  EcX = "EC-X",
  EcO = "EC-O",
  EcE = "EC-E",
  EcW = "EC-W",
  EcG = "EC-G",
  EcI = "EC-I",
  EcL = "EC-L",
  EcR = "EC-R",
  EcM = "EC-M",
  EcS = "EC-S",
  EcN = "EC-N",
  EcD = "EC-D",
  EcY = "EC-Y",
  EcP = "EC-P",
  EcSe = "EC-SE",
  EcSd = "EC-SD",
  EcU = "EC-U",
  EcT = "EC-T",
  EcZ = "EC-Z",
  Ee37 = "EE-37",
  Ee39 = "EE-39",
  Ee45 = "EE-45",
  Ee52 = "EE-52",
  Ee50 = "EE-50",
  Ee60 = "EE-60",
  Ee56 = "EE-56",
  Ee68 = "EE-68",
  Ee64 = "EE-64",
  Ee71 = "EE-71",
  Ee74 = "EE-74",
  Ee79 = "EE-79",
  Ee81 = "EE-81",
  Ee84 = "EE-84",
  Ee87 = "EE-87",
  EgDk = "EG-DK",
  EgBa = "EG-BA",
  EgBh = "EG-BH",
  EgFym = "EG-FYM",
  EgGh = "EG-GH",
  EgAlx = "EG-ALX",
  EgIs = "EG-IS",
  EgGz = "EG-GZ",
  EgMnf = "EG-MNF",
  EgMn = "EG-MN",
  EgC = "EG-C",
  EgKb = "EG-KB",
  EgLx = "EG-LX",
  EgWad = "EG-WAD",
  EgSuz = "EG-SUZ",
  EgShr = "EG-SHR",
  EgAsn = "EG-ASN",
  EgAst = "EG-AST",
  EgBns = "EG-BNS",
  EgPts = "EG-PTS",
  EgDt = "EG-DT",
  EgJs = "EG-JS",
  EgKfs = "EG-KFS",
  EgMt = "EG-MT",
  EgKn = "EG-KN",
  EgSin = "EG-SIN",
  EgShg = "EG-SHG",
  EhXx1 = "EH-XX-1",
  ErMa = "ER-MA",
  ErDk = "ER-DK",
  ErSk = "ER-SK",
  EsAn = "ES-AN",
  EsAr = "ES-AR",
  EsAs = "ES-AS",
  EsCn = "ES-CN",
  EsCb = "ES-CB",
  EsCl = "ES-CL",
  EsCm = "ES-CM",
  EsCt = "ES-CT",
  EsCe = "ES-CE",
  EsEx = "ES-EX",
  EsGa = "ES-GA",
  EsIb = "ES-IB",
  EsRi = "ES-RI",
  EsMd = "ES-MD",
  EsMl = "ES-ML",
  EsMc = "ES-MC",
  EsNc = "ES-NC",
  EsPv = "ES-PV",
  EsVc = "ES-VC",
  EtAa = "ET-AA",
  EtAf = "ET-AF",
  EtAm = "ET-AM",
  EtBe = "ET-BE",
  EtDd = "ET-DD",
  EtGa = "ET-GA",
  EtHa = "ET-HA",
  EtOr = "ET-OR",
  EtSo = "ET-SO",
  EtTi = "ET-TI",
  EtSn = "ET-SN",
  Fi02 = "FI-02",
  Fi03 = "FI-03",
  Fi04 = "FI-04",
  Fi05 = "FI-05",
  Fi06 = "FI-06",
  Fi07 = "FI-07",
  Fi08 = "FI-08",
  Fi09 = "FI-09",
  Fi10 = "FI-10",
  Fi16 = "FI-16",
  Fi11 = "FI-11",
  Fi12 = "FI-12",
  Fi13 = "FI-13",
  Fi14 = "FI-14",
  Fi15 = "FI-15",
  Fi17 = "FI-17",
  Fi18 = "FI-18",
  Fi19 = "FI-19",
  FjC = "FJ-C",
  FjE = "FJ-E",
  FjN = "FJ-N",
  FjR = "FJ-R",
  FjW = "FJ-W",
  FkXx1 = "FK-XX-1",
  FmTrk = "FM-TRK",
  FmKsa = "FM-KSA",
  FmPni = "FM-PNI",
  FmYap = "FM-YAP",
  FoXx1 = "FO-XX-1",
  FoXx2 = "FO-XX-2",
  FoXx3 = "FO-XX-3",
  FoXx4 = "FO-XX-4",
  FoXx5 = "FO-XX-5",
  FrAra = "FR-ARA",
  FrBfc = "FR-BFC",
  FrBre = "FR-BRE",
  FrCvl = "FR-CVL",
  Fr20R = "FR-20R",
  FrGes = "FR-GES",
  FrHdf = "FR-HDF",
  FrIdf = "FR-IDF",
  FrNor = "FR-NOR",
  FrNaq = "FR-NAQ",
  FrOcc = "FR-OCC",
  FrPdl = "FR-PDL",
  FrPac = "FR-PAC",
  Ga1 = "GA-1",
  Ga2 = "GA-2",
  Ga4 = "GA-4",
  Ga5 = "GA-5",
  Ga8 = "GA-8",
  Ga9 = "GA-9",
  GbEng = "GB-ENG",
  GbNir = "GB-NIR",
  GbSct = "GB-SCT",
  GbWls = "GB-WLS",
  GbCam = "GB-CAM",
  GbCma = "GB-CMA",
  GbDby = "GB-DBY",
  GbDev = "GB-DEV",
  GbDor = "GB-DOR",
  GbEsx = "GB-ESX",
  GbEss = "GB-ESS",
  GbGls = "GB-GLS",
  GbHam = "GB-HAM",
  GbHrt = "GB-HRT",
  GbKen = "GB-KEN",
  GbLan = "GB-LAN",
  GbLec = "GB-LEC",
  GbLin = "GB-LIN",
  GbNfk = "GB-NFK",
  GbNyk = "GB-NYK",
  GbNtt = "GB-NTT",
  GbOxf = "GB-OXF",
  GbSom = "GB-SOM",
  GbSts = "GB-STS",
  GbSfk = "GB-SFK",
  GbSry = "GB-SRY",
  GbWar = "GB-WAR",
  GbWsx = "GB-WSX",
  GbWor = "GB-WOR",
  GbLnd = "GB-LND",
  GbBdg = "GB-BDG",
  GbBne = "GB-BNE",
  GbBex = "GB-BEX",
  GbBen = "GB-BEN",
  GbBry = "GB-BRY",
  GbCmd = "GB-CMD",
  GbCry = "GB-CRY",
  GbEal = "GB-EAL",
  GbEnf = "GB-ENF",
  GbGre = "GB-GRE",
  GbHck = "GB-HCK",
  GbHmf = "GB-HMF",
  GbHry = "GB-HRY",
  GbHrw = "GB-HRW",
  GbHav = "GB-HAV",
  GbHil = "GB-HIL",
  GbHns = "GB-HNS",
  GbIsl = "GB-ISL",
  GbKec = "GB-KEC",
  GbKtt = "GB-KTT",
  GbLbh = "GB-LBH",
  GbLew = "GB-LEW",
  GbMrt = "GB-MRT",
  GbNwm = "GB-NWM",
  GbRdb = "GB-RDB",
  GbRic = "GB-RIC",
  GbSwk = "GB-SWK",
  GbStn = "GB-STN",
  GbTwh = "GB-TWH",
  GbWft = "GB-WFT",
  GbWnd = "GB-WND",
  GbWsm = "GB-WSM",
  GbBns = "GB-BNS",
  GbBir = "GB-BIR",
  GbBol = "GB-BOL",
  GbBrd = "GB-BRD",
  GbBur = "GB-BUR",
  GbCld = "GB-CLD",
  GbCov = "GB-COV",
  GbDnc = "GB-DNC",
  GbDud = "GB-DUD",
  GbGat = "GB-GAT",
  GbKir = "GB-KIR",
  GbKwl = "GB-KWL",
  GbLds = "GB-LDS",
  GbLiv = "GB-LIV",
  GbMan = "GB-MAN",
  GbNet = "GB-NET",
  GbNty = "GB-NTY",
  GbOld = "GB-OLD",
  GbRch = "GB-RCH",
  GbRot = "GB-ROT",
  GbShn = "GB-SHN",
  GbSlf = "GB-SLF",
  GbSaw = "GB-SAW",
  GbSft = "GB-SFT",
  GbShf = "GB-SHF",
  GbSol = "GB-SOL",
  GbSty = "GB-STY",
  GbSkp = "GB-SKP",
  GbSnd = "GB-SND",
  GbTam = "GB-TAM",
  GbTrf = "GB-TRF",
  GbWkf = "GB-WKF",
  GbWll = "GB-WLL",
  GbWgn = "GB-WGN",
  GbWrl = "GB-WRL",
  GbWlv = "GB-WLV",
  GbBas = "GB-BAS",
  GbBdf = "GB-BDF",
  GbBbd = "GB-BBD",
  GbBpl = "GB-BPL",
  GbBcp = "GB-BCP",
  GbBrc = "GB-BRC",
  GbBnh = "GB-BNH",
  GbBst = "GB-BST",
  GbBkm = "GB-BKM",
  GbCbf = "GB-CBF",
  GbChe = "GB-CHE",
  GbChw = "GB-CHW",
  GbCon = "GB-CON",
  GbDal = "GB-DAL",
  GbDer = "GB-DER",
  GbDur = "GB-DUR",
  GbEry = "GB-ERY",
  GbHal = "GB-HAL",
  GbHpl = "GB-HPL",
  GbHef = "GB-HEF",
  GbIow = "GB-IOW",
  GbIos = "GB-IOS",
  GbKhl = "GB-KHL",
  GbLce = "GB-LCE",
  GbLut = "GB-LUT",
  GbMdw = "GB-MDW",
  GbMdb = "GB-MDB",
  GbMik = "GB-MIK",
  GbNel = "GB-NEL",
  GbNln = "GB-NLN",
  GbNnh = "GB-NNH",
  GbNsm = "GB-NSM",
  GbNbl = "GB-NBL",
  GbNgm = "GB-NGM",
  GbPte = "GB-PTE",
  GbPly = "GB-PLY",
  GbPor = "GB-POR",
  GbRdg = "GB-RDG",
  GbRcc = "GB-RCC",
  GbRut = "GB-RUT",
  GbShr = "GB-SHR",
  GbSlg = "GB-SLG",
  GbSgc = "GB-SGC",
  GbSth = "GB-STH",
  GbSos = "GB-SOS",
  GbStt = "GB-STT",
  GbSte = "GB-STE",
  GbSwd = "GB-SWD",
  GbTfw = "GB-TFW",
  GbThr = "GB-THR",
  GbTob = "GB-TOB",
  GbWrt = "GB-WRT",
  GbWbk = "GB-WBK",
  GbWnh = "GB-WNH",
  GbWil = "GB-WIL",
  GbWnm = "GB-WNM",
  GbWok = "GB-WOK",
  GbYor = "GB-YOR",
  GbAnn = "GB-ANN",
  GbAnd = "GB-AND",
  GbAbc = "GB-ABC",
  GbBfs = "GB-BFS",
  GbCcg = "GB-CCG",
  GbDrs = "GB-DRS",
  GbFmo = "GB-FMO",
  GbLbc = "GB-LBC",
  GbMea = "GB-MEA",
  GbMul = "GB-MUL",
  GbNmd = "GB-NMD",
  GbAbe = "GB-ABE",
  GbAbd = "GB-ABD",
  GbAns = "GB-ANS",
  GbAgb = "GB-AGB",
  GbClk = "GB-CLK",
  GbDgy = "GB-DGY",
  GbDnd = "GB-DND",
  GbEay = "GB-EAY",
  GbEdu = "GB-EDU",
  GbEln = "GB-ELN",
  GbErw = "GB-ERW",
  GbEdh = "GB-EDH",
  GbEls = "GB-ELS",
  GbFal = "GB-FAL",
  GbFif = "GB-FIF",
  GbGlg = "GB-GLG",
  GbHld = "GB-HLD",
  GbIvc = "GB-IVC",
  GbMln = "GB-MLN",
  GbMry = "GB-MRY",
  GbNay = "GB-NAY",
  GbNlk = "GB-NLK",
  GbOrk = "GB-ORK",
  GbPkn = "GB-PKN",
  GbRfw = "GB-RFW",
  GbScb = "GB-SCB",
  GbZet = "GB-ZET",
  GbSay = "GB-SAY",
  GbSlk = "GB-SLK",
  GbStg = "GB-STG",
  GbWdu = "GB-WDU",
  GbWln = "GB-WLN",
  GbBgw = "GB-BGW",
  GbBge = "GB-BGE",
  GbCay = "GB-CAY",
  GbCrf = "GB-CRF",
  GbCmn = "GB-CMN",
  GbCgn = "GB-CGN",
  GbCwy = "GB-CWY",
  GbDen = "GB-DEN",
  GbFln = "GB-FLN",
  GbGwn = "GB-GWN",
  GbAgy = "GB-AGY",
  GbMty = "GB-MTY",
  GbMon = "GB-MON",
  GbNtl = "GB-NTL",
  GbNwp = "GB-NWP",
  GbPem = "GB-PEM",
  GbPow = "GB-POW",
  GbRct = "GB-RCT",
  GbSwa = "GB-SWA",
  GbTof = "GB-TOF",
  GbVgl = "GB-VGL",
  GbWrx = "GB-WRX",
  Gd01 = "GD-01",
  Gd02 = "GD-02",
  Gd03 = "GD-03",
  Gd04 = "GD-04",
  Gd05 = "GD-05",
  Gd06 = "GD-06",
  Gd10 = "GD-10",
  GeAb = "GE-AB",
  GeAj = "GE-AJ",
  GeGu = "GE-GU",
  GeIm = "GE-IM",
  GeKa = "GE-KA",
  GeKk = "GE-KK",
  GeMm = "GE-MM",
  GeRl = "GE-RL",
  GeSz = "GE-SZ",
  GeSj = "GE-SJ",
  GeSk = "GE-SK",
  GeTb = "GE-TB",
  GfXx1 = "GF-XX-1",
  GgXx1 = "GG-XX-1",
  GhAf = "GH-AF",
  GhAh = "GH-AH",
  GhBo = "GH-BO",
  GhBe = "GH-BE",
  GhCp = "GH-CP",
  GhEp = "GH-EP",
  GhAa = "GH-AA",
  GhNp = "GH-NP",
  GhUe = "GH-UE",
  GhUw = "GH-UW",
  GhTv = "GH-TV",
  GhWp = "GH-WP",
  GiXx1 = "GI-XX-1",
  GlAv = "GL-AV",
  GlKu = "GL-KU",
  GlQt = "GL-QT",
  GlSm = "GL-SM",
  GlQe = "GL-QE",
  GmB = "GM-B",
  GmM = "GM-M",
  GmL = "GM-L",
  GmN = "GM-N",
  GmU = "GM-U",
  GmW = "GM-W",
  GnBf = "GN-BF",
  GnB = "GN-B",
  GnC = "GN-C",
  GnCo = "GN-CO",
  GnDb = "GN-DB",
  GnDu = "GN-DU",
  GnK = "GN-K",
  GnL = "GN-L",
  GnLa = "GN-LA",
  GnMc = "GN-MC",
  GnN = "GN-N",
  GnSi = "GN-SI",
  GpXx1 = "GP-XX-1",
  GqBn = "GQ-BN",
  GqKn = "GQ-KN",
  GqLi = "GQ-LI",
  GqWn = "GQ-WN",
  GrA = "GR-A",
  GrI = "GR-I",
  GrG = "GR-G",
  GrC = "GR-C",
  GrF = "GR-F",
  GrD = "GR-D",
  GrB = "GR-B",
  GrM = "GR-M",
  GrL = "GR-L",
  GrJ = "GR-J",
  GrH = "GR-H",
  GrE = "GR-E",
  GrK = "GR-K",
  GsXx1 = "GS-XX-1",
  Gt16 = "GT-16",
  Gt15 = "GT-15",
  Gt04 = "GT-04",
  Gt20 = "GT-20",
  Gt02 = "GT-02",
  Gt05 = "GT-05",
  Gt01 = "GT-01",
  Gt13 = "GT-13",
  Gt18 = "GT-18",
  Gt21 = "GT-21",
  Gt22 = "GT-22",
  Gt17 = "GT-17",
  Gt09 = "GT-09",
  Gt14 = "GT-14",
  Gt11 = "GT-11",
  Gt03 = "GT-03",
  Gt12 = "GT-12",
  Gt06 = "GT-06",
  Gt07 = "GT-07",
  Gt10 = "GT-10",
  Gt08 = "GT-08",
  Gt19 = "GT-19",
  GuXx1 = "GU-XX-1",
  GuXx2 = "GU-XX-2",
  GuXx3 = "GU-XX-3",
  GuXx4 = "GU-XX-4",
  GuXx5 = "GU-XX-5",
  GuXx6 = "GU-XX-6",
  GuXx7 = "GU-XX-7",
  GuXx8 = "GU-XX-8",
  GuXx9 = "GU-XX-9",
  GuXx10 = "GU-XX-10",
  GuXx11 = "GU-XX-11",
  GuXx12 = "GU-XX-12",
  GuXx13 = "GU-XX-13",
  GuXx14 = "GU-XX-14",
  GuXx15 = "GU-XX-15",
  GuXx16 = "GU-XX-16",
  GwBs = "GW-BS",
  GwGa = "GW-GA",
  GyCu = "GY-CU",
  GyDe = "GY-DE",
  GyEb = "GY-EB",
  GyEs = "GY-ES",
  GyMa = "GY-MA",
  GyPt = "GY-PT",
  GyUd = "GY-UD",
  HkXx1 = "HK-XX-1",
  HmXx1 = "HM-XX-1",
  HnAt = "HN-AT",
  HnCh = "HN-CH",
  HnCl = "HN-CL",
  HnCm = "HN-CM",
  HnCp = "HN-CP",
  HnCr = "HN-CR",
  HnEp = "HN-EP",
  HnFm = "HN-FM",
  HnGd = "HN-GD",
  HnIn = "HN-IN",
  HnIb = "HN-IB",
  HnLp = "HN-LP",
  HnLe = "HN-LE",
  HnOc = "HN-OC",
  HnOl = "HN-OL",
  HnSb = "HN-SB",
  HnVa = "HN-VA",
  HnYo = "HN-YO",
  Hr07 = "HR-07",
  Hr12 = "HR-12",
  Hr19 = "HR-19",
  Hr21 = "HR-21",
  Hr18 = "HR-18",
  Hr04 = "HR-04",
  Hr06 = "HR-06",
  Hr02 = "HR-02",
  Hr09 = "HR-09",
  Hr20 = "HR-20",
  Hr14 = "HR-14",
  Hr11 = "HR-11",
  Hr08 = "HR-08",
  Hr15 = "HR-15",
  Hr03 = "HR-03",
  Hr17 = "HR-17",
  Hr05 = "HR-05",
  Hr10 = "HR-10",
  Hr16 = "HR-16",
  Hr13 = "HR-13",
  Hr01 = "HR-01",
  HtAr = "HT-AR",
  HtCe = "HT-CE",
  HtGa = "HT-GA",
  HtNi = "HT-NI",
  HtNd = "HT-ND",
  HtOu = "HT-OU",
  HtSd = "HT-SD",
  HtSe = "HT-SE",
  HuBk = "HU-BK",
  HuBa = "HU-BA",
  HuBe = "HU-BE",
  HuBz = "HU-BZ",
  HuBu = "HU-BU",
  HuCs = "HU-CS",
  HuFe = "HU-FE",
  HuGs = "HU-GS",
  HuHb = "HU-HB",
  HuHe = "HU-HE",
  HuJn = "HU-JN",
  HuKe = "HU-KE",
  HuNo = "HU-NO",
  HuPe = "HU-PE",
  HuSo = "HU-SO",
  HuSz = "HU-SZ",
  HuTo = "HU-TO",
  HuVa = "HU-VA",
  HuVe = "HU-VE",
  HuZa = "HU-ZA",
  IdAc = "ID-AC",
  IdBa = "ID-BA",
  IdBt = "ID-BT",
  IdBe = "ID-BE",
  IdGo = "ID-GO",
  IdJk = "ID-JK",
  IdJa = "ID-JA",
  IdJb = "ID-JB",
  IdJt = "ID-JT",
  IdJi = "ID-JI",
  IdKb = "ID-KB",
  IdKs = "ID-KS",
  IdKt = "ID-KT",
  IdKi = "ID-KI",
  IdKu = "ID-KU",
  IdBb = "ID-BB",
  IdKr = "ID-KR",
  IdLa = "ID-LA",
  IdMl = "ID-ML",
  IdMu = "ID-MU",
  IdNb = "ID-NB",
  IdNt = "ID-NT",
  IdPp = "ID-PP",
  IdPb = "ID-PB",
  IdRi = "ID-RI",
  IdSr = "ID-SR",
  IdSn = "ID-SN",
  IdSt = "ID-ST",
  IdSg = "ID-SG",
  IdSa = "ID-SA",
  IdSb = "ID-SB",
  IdSs = "ID-SS",
  IdSu = "ID-SU",
  IdYo = "ID-YO",
  IeCw = "IE-CW",
  IeCn = "IE-CN",
  IeCe = "IE-CE",
  IeCo = "IE-CO",
  IeDl = "IE-DL",
  IeD = "IE-D",
  IeG = "IE-G",
  IeKy = "IE-KY",
  IeKe = "IE-KE",
  IeKk = "IE-KK",
  IeLs = "IE-LS",
  IeLm = "IE-LM",
  IeLk = "IE-LK",
  IeLd = "IE-LD",
  IeLh = "IE-LH",
  IeMo = "IE-MO",
  IeMh = "IE-MH",
  IeMn = "IE-MN",
  IeOy = "IE-OY",
  IeRn = "IE-RN",
  IeSo = "IE-SO",
  IeTa = "IE-TA",
  IeWd = "IE-WD",
  IeWh = "IE-WH",
  IeWx = "IE-WX",
  IeWw = "IE-WW",
  IlD = "IL-D",
  IlM = "IL-M",
  IlZ = "IL-Z",
  IlHa = "IL-HA",
  IlTa = "IL-TA",
  IlJm = "IL-JM",
  ImXx1 = "IM-XX-1",
  InAn = "IN-AN",
  InAp = "IN-AP",
  InAr = "IN-AR",
  InAs = "IN-AS",
  InBr = "IN-BR",
  InCh = "IN-CH",
  InCt = "IN-CT",
  InDn = "IN-DN",
  InDh = "IN-DH",
  InDl = "IN-DL",
  InGa = "IN-GA",
  InGj = "IN-GJ",
  InHr = "IN-HR",
  InHp = "IN-HP",
  InJk = "IN-JK",
  InJh = "IN-JH",
  InKa = "IN-KA",
  InKl = "IN-KL",
  InLd = "IN-LD",
  InMp = "IN-MP",
  InMh = "IN-MH",
  InMn = "IN-MN",
  InMl = "IN-ML",
  InMz = "IN-MZ",
  InNl = "IN-NL",
  InOr = "IN-OR",
  InPy = "IN-PY",
  InPb = "IN-PB",
  InRj = "IN-RJ",
  InSk = "IN-SK",
  InTn = "IN-TN",
  InTg = "IN-TG",
  InTr = "IN-TR",
  InUp = "IN-UP",
  InUt = "IN-UT",
  InWb = "IN-WB",
  IoXx1 = "IO-XX-1",
  IqAn = "IQ-AN",
  IqBa = "IQ-BA",
  IqMu = "IQ-MU",
  IqQa = "IQ-QA",
  IqNa = "IQ-NA",
  IqAr = "IQ-AR",
  IqSu = "IQ-SU",
  IqBb = "IQ-BB",
  IqBg = "IQ-BG",
  IqDa = "IQ-DA",
  IqDq = "IQ-DQ",
  IqDi = "IQ-DI",
  IqKa = "IQ-KA",
  IqKi = "IQ-KI",
  IqMa = "IQ-MA",
  IqNi = "IQ-NI",
  IqSd = "IQ-SD",
  IqWa = "IQ-WA",
  Ir30 = "IR-30",
  Ir24 = "IR-24",
  Ir04 = "IR-04",
  Ir03 = "IR-03",
  Ir18 = "IR-18",
  Ir14 = "IR-14",
  Ir10 = "IR-10",
  Ir07 = "IR-07",
  Ir01 = "IR-01",
  Ir27 = "IR-27",
  Ir13 = "IR-13",
  Ir22 = "IR-22",
  Ir16 = "IR-16",
  Ir08 = "IR-08",
  Ir05 = "IR-05",
  Ir29 = "IR-29",
  Ir09 = "IR-09",
  Ir28 = "IR-28",
  Ir06 = "IR-06",
  Ir17 = "IR-17",
  Ir12 = "IR-12",
  Ir15 = "IR-15",
  Ir00 = "IR-00",
  Ir02 = "IR-02",
  Ir26 = "IR-26",
  Ir25 = "IR-25",
  Ir20 = "IR-20",
  Ir11 = "IR-11",
  Ir23 = "IR-23",
  Ir21 = "IR-21",
  Ir19 = "IR-19",
  Is7 = "IS-7",
  Is1 = "IS-1",
  Is6 = "IS-6",
  Is5 = "IS-5",
  Is8 = "IS-8",
  Is2 = "IS-2",
  Is4 = "IS-4",
  Is3 = "IS-3",
  It65 = "IT-65",
  It77 = "IT-77",
  It78 = "IT-78",
  It72 = "IT-72",
  It45 = "IT-45",
  It36 = "IT-36",
  It62 = "IT-62",
  It42 = "IT-42",
  It25 = "IT-25",
  It57 = "IT-57",
  It67 = "IT-67",
  It21 = "IT-21",
  It75 = "IT-75",
  It88 = "IT-88",
  It82 = "IT-82",
  It52 = "IT-52",
  It32 = "IT-32",
  It55 = "IT-55",
  It23 = "IT-23",
  It34 = "IT-34",
  JeXx1 = "JE-XX-1",
  Jm13 = "JM-13",
  Jm09 = "JM-09",
  Jm01 = "JM-01",
  Jm12 = "JM-12",
  Jm04 = "JM-04",
  Jm02 = "JM-02",
  Jm06 = "JM-06",
  Jm14 = "JM-14",
  Jm11 = "JM-11",
  Jm08 = "JM-08",
  Jm05 = "JM-05",
  Jm03 = "JM-03",
  Jm07 = "JM-07",
  Jm10 = "JM-10",
  JoAj = "JO-AJ",
  JoAq = "JO-AQ",
  JoAm = "JO-AM",
  JoBa = "JO-BA",
  JoKa = "JO-KA",
  JoMa = "JO-MA",
  JoAt = "JO-AT",
  JoAz = "JO-AZ",
  JoIr = "JO-IR",
  JoJa = "JO-JA",
  JoMn = "JO-MN",
  JoMd = "JO-MD",
  Jp23 = "JP-23",
  Jp05 = "JP-05",
  Jp02 = "JP-02",
  Jp12 = "JP-12",
  Jp38 = "JP-38",
  Jp18 = "JP-18",
  Jp40 = "JP-40",
  Jp07 = "JP-07",
  Jp21 = "JP-21",
  Jp10 = "JP-10",
  Jp34 = "JP-34",
  Jp01 = "JP-01",
  Jp28 = "JP-28",
  Jp08 = "JP-08",
  Jp17 = "JP-17",
  Jp03 = "JP-03",
  Jp37 = "JP-37",
  Jp46 = "JP-46",
  Jp14 = "JP-14",
  Jp39 = "JP-39",
  Jp43 = "JP-43",
  Jp26 = "JP-26",
  Jp24 = "JP-24",
  Jp04 = "JP-04",
  Jp45 = "JP-45",
  Jp20 = "JP-20",
  Jp42 = "JP-42",
  Jp29 = "JP-29",
  Jp15 = "JP-15",
  Jp44 = "JP-44",
  Jp33 = "JP-33",
  Jp47 = "JP-47",
  Jp27 = "JP-27",
  Jp41 = "JP-41",
  Jp11 = "JP-11",
  Jp25 = "JP-25",
  Jp32 = "JP-32",
  Jp22 = "JP-22",
  Jp09 = "JP-09",
  Jp36 = "JP-36",
  Jp13 = "JP-13",
  Jp31 = "JP-31",
  Jp16 = "JP-16",
  Jp30 = "JP-30",
  Jp06 = "JP-06",
  Jp35 = "JP-35",
  Jp19 = "JP-19",
  Ke01 = "KE-01",
  Ke02 = "KE-02",
  Ke03 = "KE-03",
  Ke04 = "KE-04",
  Ke05 = "KE-05",
  Ke06 = "KE-06",
  Ke07 = "KE-07",
  Ke08 = "KE-08",
  Ke09 = "KE-09",
  Ke10 = "KE-10",
  Ke11 = "KE-11",
  Ke12 = "KE-12",
  Ke13 = "KE-13",
  Ke14 = "KE-14",
  Ke15 = "KE-15",
  Ke16 = "KE-16",
  Ke17 = "KE-17",
  Ke18 = "KE-18",
  Ke19 = "KE-19",
  Ke20 = "KE-20",
  Ke21 = "KE-21",
  Ke22 = "KE-22",
  Ke23 = "KE-23",
  Ke24 = "KE-24",
  Ke25 = "KE-25",
  Ke26 = "KE-26",
  Ke27 = "KE-27",
  Ke28 = "KE-28",
  Ke29 = "KE-29",
  Ke30 = "KE-30",
  Ke31 = "KE-31",
  Ke32 = "KE-32",
  Ke33 = "KE-33",
  Ke34 = "KE-34",
  Ke35 = "KE-35",
  Ke36 = "KE-36",
  Ke37 = "KE-37",
  Ke38 = "KE-38",
  Ke39 = "KE-39",
  Ke40 = "KE-40",
  Ke41 = "KE-41",
  Ke42 = "KE-42",
  Ke43 = "KE-43",
  Ke44 = "KE-44",
  Ke45 = "KE-45",
  Ke46 = "KE-46",
  Ke47 = "KE-47",
  KgB = "KG-B",
  KgGb = "KG-GB",
  KgC = "KG-C",
  KgJ = "KG-J",
  KgN = "KG-N",
  KgGo = "KG-GO",
  KgT = "KG-T",
  KgY = "KG-Y",
  Kh2 = "KH-2",
  Kh1 = "KH-1",
  Kh23 = "KH-23",
  Kh3 = "KH-3",
  Kh4 = "KH-4",
  Kh5 = "KH-5",
  Kh6 = "KH-6",
  Kh7 = "KH-7",
  Kh8 = "KH-8",
  Kh10 = "KH-10",
  Kh11 = "KH-11",
  Kh24 = "KH-24",
  Kh12 = "KH-12",
  Kh15 = "KH-15",
  Kh18 = "KH-18",
  Kh14 = "KH-14",
  Kh16 = "KH-16",
  Kh17 = "KH-17",
  Kh19 = "KH-19",
  Kh20 = "KH-20",
  Kh21 = "KH-21",
  KiG = "KI-G",
  KmG = "KM-G",
  KmM = "KM-M",
  Kn01 = "KN-01",
  Kn02 = "KN-02",
  Kn03 = "KN-03",
  Kn05 = "KN-05",
  Kn06 = "KN-06",
  Kn07 = "KN-07",
  Kn08 = "KN-08",
  Kn09 = "KN-09",
  Kn10 = "KN-10",
  Kn11 = "KN-11",
  Kn12 = "KN-12",
  Kn13 = "KN-13",
  Kn15 = "KN-15",
  Kp01 = "KP-01",
  Kr26 = "KR-26",
  Kr43 = "KR-43",
  Kr44 = "KR-44",
  Kr27 = "KR-27",
  Kr30 = "KR-30",
  Kr42 = "KR-42",
  Kr29 = "KR-29",
  Kr41 = "KR-41",
  Kr47 = "KR-47",
  Kr48 = "KR-48",
  Kr28 = "KR-28",
  Kr49 = "KR-49",
  Kr45 = "KR-45",
  Kr46 = "KR-46",
  Kr11 = "KR-11",
  Kr31 = "KR-31",
  KwKu = "KW-KU",
  KwAh = "KW-AH",
  KwFa = "KW-FA",
  KwJa = "KW-JA",
  KwHa = "KW-HA",
  KwMu = "KW-MU",
  KyXx1 = "KY-XX-1",
  KzAla = "KZ-ALA",
  KzAlm = "KZ-ALM",
  KzAkm = "KZ-AKM",
  KzAkt = "KZ-AKT",
  KzAty = "KZ-ATY",
  KzZap = "KZ-ZAP",
  KzMan = "KZ-MAN",
  KzAst = "KZ-AST",
  KzYuz = "KZ-YUZ",
  KzPav = "KZ-PAV",
  KzKar = "KZ-KAR",
  KzKus = "KZ-KUS",
  KzKzy = "KZ-KZY",
  KzVos = "KZ-VOS",
  KzShy = "KZ-SHY",
  KzSev = "KZ-SEV",
  KzZha = "KZ-ZHA",
  LaAt = "LA-AT",
  LaBl = "LA-BL",
  LaCh = "LA-CH",
  LaHo = "LA-HO",
  LaKh = "LA-KH",
  LaOu = "LA-OU",
  LaPh = "LA-PH",
  LaSv = "LA-SV",
  LaVi = "LA-VI",
  LaXa = "LA-XA",
  LaXe = "LA-XE",
  LaXi = "LA-XI",
  LbAk = "LB-AK",
  LbBh = "LB-BH",
  LbBi = "LB-BI",
  LbBa = "LB-BA",
  LbAs = "LB-AS",
  LbJa = "LB-JA",
  LbJl = "LB-JL",
  LbNa = "LB-NA",
  Lc01 = "LC-01",
  Lc02 = "LC-02",
  Lc03 = "LC-03",
  Lc05 = "LC-05",
  Lc06 = "LC-06",
  Lc07 = "LC-07",
  Lc08 = "LC-08",
  Lc10 = "LC-10",
  Lc11 = "LC-11",
  Li01 = "LI-01",
  Li02 = "LI-02",
  Li03 = "LI-03",
  Li04 = "LI-04",
  Li05 = "LI-05",
  Li06 = "LI-06",
  Li07 = "LI-07",
  Li09 = "LI-09",
  Li10 = "LI-10",
  Li11 = "LI-11",
  Lk2 = "LK-2",
  Lk5 = "LK-5",
  Lk7 = "LK-7",
  Lk6 = "LK-6",
  Lk4 = "LK-4",
  Lk9 = "LK-9",
  Lk3 = "LK-3",
  Lk8 = "LK-8",
  Lk1 = "LK-1",
  LrBm = "LR-BM",
  LrGb = "LR-GB",
  LrGg = "LR-GG",
  LrMg = "LR-MG",
  LrMo = "LR-MO",
  LrNi = "LR-NI",
  LrSi = "LR-SI",
  LsD = "LS-D",
  LsB = "LS-B",
  LsC = "LS-C",
  LsE = "LS-E",
  LsA = "LS-A",
  LsF = "LS-F",
  LsJ = "LS-J",
  LsH = "LS-H",
  LsG = "LS-G",
  LsK = "LS-K",
  LtAl = "LT-AL",
  LtKu = "LT-KU",
  LtKl = "LT-KL",
  LtMr = "LT-MR",
  LtPn = "LT-PN",
  LtSa = "LT-SA",
  LtTa = "LT-TA",
  LtTe = "LT-TE",
  LtUt = "LT-UT",
  LtVl = "LT-VL",
  LuCa = "LU-CA",
  LuCl = "LU-CL",
  LuDi = "LU-DI",
  LuEc = "LU-EC",
  LuEs = "LU-ES",
  LuGr = "LU-GR",
  LuLu = "LU-LU",
  LuMe = "LU-ME",
  LuRd = "LU-RD",
  LuRm = "LU-RM",
  LuVd = "LU-VD",
  LuWi = "LU-WI",
  Lv011 = "LV-011",
  Lv002 = "LV-002",
  Lv007 = "LV-007",
  Lv111 = "LV-111",
  Lv015 = "LV-015",
  Lv016 = "LV-016",
  Lv022 = "LV-022",
  LvDgv = "LV-DGV",
  Lv112 = "LV-112",
  Lv026 = "LV-026",
  Lv033 = "LV-033",
  Lv042 = "LV-042",
  LvJel = "LV-JEL",
  Lv041 = "LV-041",
  LvJur = "LV-JUR",
  Lv052 = "LV-052",
  Lv047 = "LV-047",
  Lv050 = "LV-050",
  LvLpx = "LV-LPX",
  Lv054 = "LV-054",
  Lv056 = "LV-056",
  Lv058 = "LV-058",
  Lv059 = "LV-059",
  Lv062 = "LV-062",
  Lv067 = "LV-067",
  Lv068 = "LV-068",
  Lv073 = "LV-073",
  Lv077 = "LV-077",
  LvRix = "LV-RIX",
  Lv080 = "LV-080",
  Lv087 = "LV-087",
  Lv088 = "LV-088",
  Lv089 = "LV-089",
  Lv091 = "LV-091",
  Lv094 = "LV-094",
  Lv097 = "LV-097",
  Lv099 = "LV-099",
  Lv101 = "LV-101",
  Lv113 = "LV-113",
  Lv102 = "LV-102",
  Lv106 = "LV-106",
  LyBu = "LY-BU",
  LyJa = "LY-JA",
  LyJg = "LY-JG",
  LyJi = "LY-JI",
  LyJu = "LY-JU",
  LyKf = "LY-KF",
  LyMj = "LY-MJ",
  LyMb = "LY-MB",
  LyWa = "LY-WA",
  LyNq = "LY-NQ",
  LyZa = "LY-ZA",
  LyBa = "LY-BA",
  LyDr = "LY-DR",
  LyMi = "LY-MI",
  LyNl = "LY-NL",
  LySb = "LY-SB",
  LySr = "LY-SR",
  LyTb = "LY-TB",
  LyWs = "LY-WS",
  Ma05 = "MA-05",
  Ma06 = "MA-06",
  Ma08 = "MA-08",
  Ma03 = "MA-03",
  Ma10 = "MA-10",
  Ma02 = "MA-02",
  Ma11 = "MA-11",
  Ma07 = "MA-07",
  Ma04 = "MA-04",
  Ma09 = "MA-09",
  Ma01 = "MA-01",
  McFo = "MC-FO",
  McCo = "MC-CO",
  McMo = "MC-MO",
  McMc = "MC-MC",
  McSr = "MC-SR",
  MdAn = "MD-AN",
  MdBa = "MD-BA",
  MdBs = "MD-BS",
  MdBd = "MD-BD",
  MdBr = "MD-BR",
  MdCa = "MD-CA",
  MdCl = "MD-CL",
  MdCt = "MD-CT",
  MdCs = "MD-CS",
  MdCu = "MD-CU",
  MdCm = "MD-CM",
  MdCr = "MD-CR",
  MdDo = "MD-DO",
  MdDr = "MD-DR",
  MdDu = "MD-DU",
  MdEd = "MD-ED",
  MdFa = "MD-FA",
  MdFl = "MD-FL",
  MdGa = "MD-GA",
  MdGl = "MD-GL",
  MdHi = "MD-HI",
  MdIa = "MD-IA",
  MdLe = "MD-LE",
  MdNi = "MD-NI",
  MdOc = "MD-OC",
  MdOr = "MD-OR",
  MdRe = "MD-RE",
  MdRi = "MD-RI",
  MdSi = "MD-SI",
  MdSd = "MD-SD",
  MdSo = "MD-SO",
  MdSv = "MD-SV",
  MdSn = "MD-SN",
  MdSt = "MD-ST",
  MdTa = "MD-TA",
  MdTe = "MD-TE",
  MdUn = "MD-UN",
  Me01 = "ME-01",
  Me02 = "ME-02",
  Me03 = "ME-03",
  Me04 = "ME-04",
  Me05 = "ME-05",
  Me06 = "ME-06",
  Me07 = "ME-07",
  Me08 = "ME-08",
  Me10 = "ME-10",
  Me12 = "ME-12",
  Me13 = "ME-13",
  Me14 = "ME-14",
  Me15 = "ME-15",
  Me16 = "ME-16",
  Me17 = "ME-17",
  Me19 = "ME-19",
  Me24 = "ME-24",
  Me20 = "ME-20",
  Me21 = "ME-21",
  MfXx1 = "MF-XX-1",
  MgT = "MG-T",
  MgD = "MG-D",
  MgF = "MG-F",
  MgM = "MG-M",
  MgA = "MG-A",
  MgU = "MG-U",
  MhKwa = "MH-KWA",
  MhMaj = "MH-MAJ",
  Mk802 = "MK-802",
  Mk201 = "MK-201",
  Mk501 = "MK-501",
  Mk401 = "MK-401",
  Mk601 = "MK-601",
  Mk402 = "MK-402",
  Mk602 = "MK-602",
  Mk803 = "MK-803",
  Mk109 = "MK-109",
  Mk814 = "MK-814",
  Mk210 = "MK-210",
  Mk816 = "MK-816",
  Mk303 = "MK-303",
  Mk203 = "MK-203",
  Mk502 = "MK-502",
  Mk406 = "MK-406",
  Mk503 = "MK-503",
  Mk804 = "MK-804",
  Mk405 = "MK-405",
  Mk604 = "MK-604",
  Mk102 = "MK-102",
  Mk807 = "MK-807",
  Mk606 = "MK-606",
  Mk205 = "MK-205",
  Mk104 = "MK-104",
  Mk307 = "MK-307",
  Mk809 = "MK-809",
  Mk206 = "MK-206",
  Mk701 = "MK-701",
  Mk702 = "MK-702",
  Mk505 = "MK-505",
  Mk703 = "MK-703",
  Mk704 = "MK-704",
  Mk105 = "MK-105",
  Mk207 = "MK-207",
  Mk308 = "MK-308",
  Mk607 = "MK-607",
  Mk506 = "MK-506",
  Mk106 = "MK-106",
  Mk507 = "MK-507",
  Mk408 = "MK-408",
  Mk310 = "MK-310",
  Mk208 = "MK-208",
  Mk810 = "MK-810",
  Mk311 = "MK-311",
  Mk508 = "MK-508",
  Mk209 = "MK-209",
  Mk409 = "MK-409",
  Mk705 = "MK-705",
  Mk509 = "MK-509",
  Mk107 = "MK-107",
  Mk811 = "MK-811",
  Mk812 = "MK-812",
  Mk211 = "MK-211",
  Mk312 = "MK-312",
  Mk410 = "MK-410",
  Mk813 = "MK-813",
  Mk108 = "MK-108",
  Mk608 = "MK-608",
  Mk609 = "MK-609",
  Mk403 = "MK-403",
  Mk404 = "MK-404",
  Mk101 = "MK-101",
  Mk301 = "MK-301",
  Mk202 = "MK-202",
  Mk603 = "MK-603",
  Mk806 = "MK-806",
  Mk605 = "MK-605",
  MlBko = "ML-BKO",
  Ml7 = "ML-7",
  Ml1 = "ML-1",
  Ml8 = "ML-8",
  Ml2 = "ML-2",
  Ml5 = "ML-5",
  Ml4 = "ML-4",
  Ml3 = "ML-3",
  Ml6 = "ML-6",
  Mm07 = "MM-07",
  Mm02 = "MM-02",
  Mm14 = "MM-14",
  Mm11 = "MM-11",
  Mm12 = "MM-12",
  Mm13 = "MM-13",
  Mm03 = "MM-03",
  Mm04 = "MM-04",
  Mm15 = "MM-15",
  Mm18 = "MM-18",
  Mm16 = "MM-16",
  Mm01 = "MM-01",
  Mm17 = "MM-17",
  Mm05 = "MM-05",
  Mm06 = "MM-06",
  Mn071 = "MN-071",
  Mn037 = "MN-037",
  Mn061 = "MN-061",
  Mn063 = "MN-063",
  Mn065 = "MN-065",
  Mn043 = "MN-043",
  Mn035 = "MN-035",
  Mn055 = "MN-055",
  Mn049 = "MN-049",
  Mn047 = "MN-047",
  Mn1 = "MN-1",
  MoXx1 = "MO-XX-1",
  MpXx1 = "MP-XX-1",
  MqXx1 = "MQ-XX-1",
  Mr07 = "MR-07",
  Mr03 = "MR-03",
  Mr05 = "MR-05",
  Mr08 = "MR-08",
  Mr04 = "MR-04",
  Mr10 = "MR-10",
  Mr01 = "MR-01",
  Mr02 = "MR-02",
  Mr12 = "MR-12",
  Mr13 = "MR-13",
  Mr09 = "MR-09",
  Mr11 = "MR-11",
  Mr06 = "MR-06",
  MsXx1 = "MS-XX-1",
  MsXx2 = "MS-XX-2",
  Mt01 = "MT-01",
  Mt02 = "MT-02",
  Mt03 = "MT-03",
  Mt04 = "MT-04",
  Mt05 = "MT-05",
  Mt06 = "MT-06",
  Mt07 = "MT-07",
  Mt08 = "MT-08",
  Mt09 = "MT-09",
  Mt10 = "MT-10",
  Mt14 = "MT-14",
  Mt15 = "MT-15",
  Mt16 = "MT-16",
  Mt17 = "MT-17",
  Mt11 = "MT-11",
  Mt12 = "MT-12",
  Mt18 = "MT-18",
  Mt19 = "MT-19",
  Mt20 = "MT-20",
  Mt21 = "MT-21",
  Mt22 = "MT-22",
  Mt23 = "MT-23",
  Mt24 = "MT-24",
  Mt25 = "MT-25",
  Mt26 = "MT-26",
  Mt27 = "MT-27",
  Mt28 = "MT-28",
  Mt29 = "MT-29",
  Mt30 = "MT-30",
  Mt31 = "MT-31",
  Mt32 = "MT-32",
  Mt33 = "MT-33",
  Mt34 = "MT-34",
  Mt35 = "MT-35",
  Mt36 = "MT-36",
  Mt37 = "MT-37",
  Mt38 = "MT-38",
  Mt39 = "MT-39",
  Mt40 = "MT-40",
  Mt41 = "MT-41",
  Mt42 = "MT-42",
  Mt43 = "MT-43",
  Mt45 = "MT-45",
  Mt46 = "MT-46",
  Mt49 = "MT-49",
  Mt48 = "MT-48",
  Mt53 = "MT-53",
  Mt51 = "MT-51",
  Mt52 = "MT-52",
  Mt54 = "MT-54",
  Mt55 = "MT-55",
  Mt56 = "MT-56",
  Mt57 = "MT-57",
  Mt58 = "MT-58",
  Mt59 = "MT-59",
  Mt60 = "MT-60",
  Mt61 = "MT-61",
  Mt62 = "MT-62",
  Mt63 = "MT-63",
  Mt64 = "MT-64",
  Mt65 = "MT-65",
  Mt67 = "MT-67",
  Mt68 = "MT-68",
  MuBl = "MU-BL",
  MuFl = "MU-FL",
  MuGp = "MU-GP",
  MuMo = "MU-MO",
  MuPa = "MU-PA",
  MuPw = "MU-PW",
  MuPl = "MU-PL",
  MuRr = "MU-RR",
  MuRo = "MU-RO",
  MuSa = "MU-SA",
  Mv01 = "MV-01",
  Mv03 = "MV-03",
  Mv04 = "MV-04",
  Mv05 = "MV-05",
  MvMle = "MV-MLE",
  Mv12 = "MV-12",
  Mv13 = "MV-13",
  Mv00 = "MV-00",
  Mv28 = "MV-28",
  Mv20 = "MV-20",
  Mv25 = "MV-25",
  Mv17 = "MV-17",
  MwBa = "MW-BA",
  MwBl = "MW-BL",
  MwCk = "MW-CK",
  MwCr = "MW-CR",
  MwDe = "MW-DE",
  MwDo = "MW-DO",
  MwKr = "MW-KR",
  MwLi = "MW-LI",
  MwMh = "MW-MH",
  MwMg = "MW-MG",
  MwMw = "MW-MW",
  MwMz = "MW-MZ",
  MwNe = "MW-NE",
  MwNk = "MW-NK",
  MwPh = "MW-PH",
  MwSa = "MW-SA",
  MwTh = "MW-TH",
  MwZo = "MW-ZO",
  MxAgu = "MX-AGU",
  MxBcn = "MX-BCN",
  MxBcs = "MX-BCS",
  MxCam = "MX-CAM",
  MxChp = "MX-CHP",
  MxChh = "MX-CHH",
  MxCmx = "MX-CMX",
  MxCoa = "MX-COA",
  MxCol = "MX-COL",
  MxDur = "MX-DUR",
  MxGua = "MX-GUA",
  MxGro = "MX-GRO",
  MxHid = "MX-HID",
  MxJal = "MX-JAL",
  MxMex = "MX-MEX",
  MxMic = "MX-MIC",
  MxMor = "MX-MOR",
  MxNay = "MX-NAY",
  MxNle = "MX-NLE",
  MxOax = "MX-OAX",
  MxPue = "MX-PUE",
  MxQue = "MX-QUE",
  MxRoo = "MX-ROO",
  MxSlp = "MX-SLP",
  MxSin = "MX-SIN",
  MxSon = "MX-SON",
  MxTab = "MX-TAB",
  MxTam = "MX-TAM",
  MxTla = "MX-TLA",
  MxVer = "MX-VER",
  MxYuc = "MX-YUC",
  MxZac = "MX-ZAC",
  My01 = "MY-01",
  My02 = "MY-02",
  My03 = "MY-03",
  My04 = "MY-04",
  My05 = "MY-05",
  My06 = "MY-06",
  My08 = "MY-08",
  My09 = "MY-09",
  My07 = "MY-07",
  My12 = "MY-12",
  My13 = "MY-13",
  My10 = "MY-10",
  My11 = "MY-11",
  My14 = "MY-14",
  My15 = "MY-15",
  My16 = "MY-16",
  MzP = "MZ-P",
  MzG = "MZ-G",
  MzI = "MZ-I",
  MzB = "MZ-B",
  MzL = "MZ-L",
  MzN = "MZ-N",
  MzA = "MZ-A",
  MzS = "MZ-S",
  MzT = "MZ-T",
  MzQ = "MZ-Q",
  NaEr = "NA-ER",
  NaHa = "NA-HA",
  NaKa = "NA-KA",
  NaKe = "NA-KE",
  NaKw = "NA-KW",
  NaKh = "NA-KH",
  NaKu = "NA-KU",
  NaOw = "NA-OW",
  NaOh = "NA-OH",
  NaOs = "NA-OS",
  NaOn = "NA-ON",
  NaOt = "NA-OT",
  NaOd = "NA-OD",
  NaCa = "NA-CA",
  NcXx1 = "NC-XX-1",
  NcXx2 = "NC-XX-2",
  Ne1 = "NE-1",
  Ne2 = "NE-2",
  Ne3 = "NE-3",
  Ne8 = "NE-8",
  Ne5 = "NE-5",
  Ne6 = "NE-6",
  Ne7 = "NE-7",
  NfXx1 = "NF-XX-1",
  NgAb = "NG-AB",
  NgFc = "NG-FC",
  NgAd = "NG-AD",
  NgAk = "NG-AK",
  NgAn = "NG-AN",
  NgBa = "NG-BA",
  NgBy = "NG-BY",
  NgBe = "NG-BE",
  NgBo = "NG-BO",
  NgCr = "NG-CR",
  NgDe = "NG-DE",
  NgEb = "NG-EB",
  NgEd = "NG-ED",
  NgEk = "NG-EK",
  NgEn = "NG-EN",
  NgGo = "NG-GO",
  NgIm = "NG-IM",
  NgJi = "NG-JI",
  NgKd = "NG-KD",
  NgKn = "NG-KN",
  NgKt = "NG-KT",
  NgKe = "NG-KE",
  NgKo = "NG-KO",
  NgKw = "NG-KW",
  NgLa = "NG-LA",
  NgNa = "NG-NA",
  NgNi = "NG-NI",
  NgOg = "NG-OG",
  NgOn = "NG-ON",
  NgOs = "NG-OS",
  NgOy = "NG-OY",
  NgPl = "NG-PL",
  NgRi = "NG-RI",
  NgSo = "NG-SO",
  NgTa = "NG-TA",
  NgYo = "NG-YO",
  NgZa = "NG-ZA",
  NiBo = "NI-BO",
  NiCa = "NI-CA",
  NiCi = "NI-CI",
  NiCo = "NI-CO",
  NiAn = "NI-AN",
  NiAs = "NI-AS",
  NiEs = "NI-ES",
  NiGr = "NI-GR",
  NiJi = "NI-JI",
  NiLe = "NI-LE",
  NiMd = "NI-MD",
  NiMn = "NI-MN",
  NiMs = "NI-MS",
  NiMt = "NI-MT",
  NiNs = "NI-NS",
  NiSj = "NI-SJ",
  NiRi = "NI-RI",
  NlDr = "NL-DR",
  NlFl = "NL-FL",
  NlFr = "NL-FR",
  NlGe = "NL-GE",
  NlGr = "NL-GR",
  NlLi = "NL-LI",
  NlNb = "NL-NB",
  NlNh = "NL-NH",
  NlOv = "NL-OV",
  NlUt = "NL-UT",
  NlZe = "NL-ZE",
  NlZh = "NL-ZH",
  No42 = "NO-42",
  No34 = "NO-34",
  No15 = "NO-15",
  No18 = "NO-18",
  No03 = "NO-03",
  No11 = "NO-11",
  No54 = "NO-54",
  No50 = "NO-50",
  No38 = "NO-38",
  No46 = "NO-46",
  No30 = "NO-30",
  NpBa = "NP-BA",
  NpBh = "NP-BH",
  NpDh = "NP-DH",
  NpGa = "NP-GA",
  NpJa = "NP-JA",
  NpKa = "NP-KA",
  NpKo = "NP-KO",
  NpLu = "NP-LU",
  NpMa = "NP-MA",
  NpMe = "NP-ME",
  NpNa = "NP-NA",
  NpRa = "NP-RA",
  NpSa = "NP-SA",
  NpSe = "NP-SE",
  Nr01 = "NR-01",
  Nr03 = "NR-03",
  Nr14 = "NR-14",
  NuXx1 = "NU-XX-1",
  NzAuk = "NZ-AUK",
  NzBop = "NZ-BOP",
  NzCan = "NZ-CAN",
  NzCit = "NZ-CIT",
  NzGis = "NZ-GIS",
  NzHkb = "NZ-HKB",
  NzMwt = "NZ-MWT",
  NzMbh = "NZ-MBH",
  NzNsn = "NZ-NSN",
  NzNtl = "NZ-NTL",
  NzOta = "NZ-OTA",
  NzStl = "NZ-STL",
  NzTki = "NZ-TKI",
  NzTas = "NZ-TAS",
  NzWko = "NZ-WKO",
  NzWgn = "NZ-WGN",
  NzWtc = "NZ-WTC",
  OmDa = "OM-DA",
  OmBu = "OM-BU",
  OmWu = "OM-WU",
  OmZa = "OM-ZA",
  OmBj = "OM-BJ",
  OmSj = "OM-SJ",
  OmMa = "OM-MA",
  OmMu = "OM-MU",
  OmBs = "OM-BS",
  OmSs = "OM-SS",
  OmZu = "OM-ZU",
  Pa1 = "PA-1",
  Pa4 = "PA-4",
  Pa2 = "PA-2",
  Pa3 = "PA-3",
  Pa5 = "PA-5",
  PaKy = "PA-KY",
  Pa6 = "PA-6",
  Pa7 = "PA-7",
  PaNb = "PA-NB",
  Pa8 = "PA-8",
  Pa9 = "PA-9",
  PeAma = "PE-AMA",
  PeAnc = "PE-ANC",
  PeApu = "PE-APU",
  PeAre = "PE-ARE",
  PeAya = "PE-AYA",
  PeCaj = "PE-CAJ",
  PeCus = "PE-CUS",
  PeCal = "PE-CAL",
  PeHuv = "PE-HUV",
  PeHuc = "PE-HUC",
  PeIca = "PE-ICA",
  PeJun = "PE-JUN",
  PeLal = "PE-LAL",
  PeLam = "PE-LAM",
  PeLim = "PE-LIM",
  PeLor = "PE-LOR",
  PeMdd = "PE-MDD",
  PeMoq = "PE-MOQ",
  PePas = "PE-PAS",
  PePiu = "PE-PIU",
  PePun = "PE-PUN",
  PeSam = "PE-SAM",
  PeTac = "PE-TAC",
  PeTum = "PE-TUM",
  PeUca = "PE-UCA",
  PfXx1 = "PF-XX-1",
  PfXx2 = "PF-XX-2",
  PfXx3 = "PF-XX-3",
  PfXx4 = "PF-XX-4",
  PfXx5 = "PF-XX-5",
  PgNsb = "PG-NSB",
  PgCpm = "PG-CPM",
  PgCpk = "PG-CPK",
  PgEbr = "PG-EBR",
  PgEhg = "PG-EHG",
  PgEsw = "PG-ESW",
  PgMpm = "PG-MPM",
  PgMrl = "PG-MRL",
  PgMba = "PG-MBA",
  PgMpl = "PG-MPL",
  PgNcd = "PG-NCD",
  PgShm = "PG-SHM",
  PgWbk = "PG-WBK",
  PgSan = "PG-SAN",
  PgWpd = "PG-WPD",
  PgWhm = "PG-WHM",
  PhAbr = "PH-ABR",
  PhAgn = "PH-AGN",
  PhAgs = "PH-AGS",
  PhAkl = "PH-AKL",
  PhAlb = "PH-ALB",
  PhAnt = "PH-ANT",
  PhApa = "PH-APA",
  PhAur = "PH-AUR",
  PhBas = "PH-BAS",
  PhBan = "PH-BAN",
  PhBtn = "PH-BTN",
  PhBtg = "PH-BTG",
  PhBen = "PH-BEN",
  PhBil = "PH-BIL",
  PhBoh = "PH-BOH",
  PhBuk = "PH-BUK",
  PhBul = "PH-BUL",
  PhCag = "PH-CAG",
  PhCan = "PH-CAN",
  PhCas = "PH-CAS",
  PhCam = "PH-CAM",
  PhCap = "PH-CAP",
  PhCat = "PH-CAT",
  PhCav = "PH-CAV",
  PhCeb = "PH-CEB",
  PhNco = "PH-NCO",
  PhDao = "PH-DAO",
  PhCom = "PH-COM",
  PhDav = "PH-DAV",
  PhDas = "PH-DAS",
  PhDin = "PH-DIN",
  PhEas = "PH-EAS",
  PhGui = "PH-GUI",
  PhIfu = "PH-IFU",
  PhIln = "PH-ILN",
  PhIls = "PH-ILS",
  PhIli = "PH-ILI",
  PhIsa = "PH-ISA",
  PhKal = "PH-KAL",
  PhLun = "PH-LUN",
  PhLag = "PH-LAG",
  PhLan = "PH-LAN",
  PhLas = "PH-LAS",
  PhLey = "PH-LEY",
  PhMag = "PH-MAG",
  PhMad = "PH-MAD",
  PhMas = "PH-MAS",
  PhMdc = "PH-MDC",
  PhMdr = "PH-MDR",
  PhMsc = "PH-MSC",
  PhMsr = "PH-MSR",
  PhMou = "PH-MOU",
  Ph00 = "PH-00",
  PhNec = "PH-NEC",
  PhNer = "PH-NER",
  PhNsa = "PH-NSA",
  PhNue = "PH-NUE",
  PhNuv = "PH-NUV",
  PhPlw = "PH-PLW",
  PhPam = "PH-PAM",
  PhPan = "PH-PAN",
  PhQue = "PH-QUE",
  PhQui = "PH-QUI",
  PhRiz = "PH-RIZ",
  PhRom = "PH-ROM",
  PhWsa = "PH-WSA",
  PhSar = "PH-SAR",
  PhSig = "PH-SIG",
  PhSor = "PH-SOR",
  PhSco = "PH-SCO",
  PhSle = "PH-SLE",
  PhSuk = "PH-SUK",
  PhSlu = "PH-SLU",
  PhSun = "PH-SUN",
  PhSur = "PH-SUR",
  PhTar = "PH-TAR",
  PhTaw = "PH-TAW",
  PhZmb = "PH-ZMB",
  PhZsi = "PH-ZSI",
  PhZan = "PH-ZAN",
  PhZas = "PH-ZAS",
  PkJk = "PK-JK",
  PkBa = "PK-BA",
  PkGb = "PK-GB",
  PkIs = "PK-IS",
  PkKp = "PK-KP",
  PkPb = "PK-PB",
  PkSd = "PK-SD",
  Pl02 = "PL-02",
  Pl04 = "PL-04",
  Pl10 = "PL-10",
  Pl06 = "PL-06",
  Pl08 = "PL-08",
  Pl12 = "PL-12",
  Pl14 = "PL-14",
  Pl16 = "PL-16",
  Pl18 = "PL-18",
  Pl20 = "PL-20",
  Pl22 = "PL-22",
  Pl24 = "PL-24",
  Pl26 = "PL-26",
  Pl28 = "PL-28",
  Pl30 = "PL-30",
  Pl32 = "PL-32",
  PmXx1 = "PM-XX-1",
  PnXx1 = "PN-XX-1",
  PrXx1 = "PR-XX-1",
  PrXx2 = "PR-XX-2",
  PrXx3 = "PR-XX-3",
  PrXx4 = "PR-XX-4",
  PrXx5 = "PR-XX-5",
  PrXx6 = "PR-XX-6",
  PrXx7 = "PR-XX-7",
  PrXx8 = "PR-XX-8",
  PrXx9 = "PR-XX-9",
  PrXx10 = "PR-XX-10",
  PrXx11 = "PR-XX-11",
  PrXx12 = "PR-XX-12",
  PrXx13 = "PR-XX-13",
  PrXx14 = "PR-XX-14",
  PrXx15 = "PR-XX-15",
  PrXx16 = "PR-XX-16",
  PrXx17 = "PR-XX-17",
  PrXx18 = "PR-XX-18",
  PrXx19 = "PR-XX-19",
  PrXx20 = "PR-XX-20",
  PrXx21 = "PR-XX-21",
  PrXx22 = "PR-XX-22",
  PrXx23 = "PR-XX-23",
  PrXx24 = "PR-XX-24",
  PrXx25 = "PR-XX-25",
  PrXx26 = "PR-XX-26",
  PrXx27 = "PR-XX-27",
  PrXx28 = "PR-XX-28",
  PrXx29 = "PR-XX-29",
  PrXx30 = "PR-XX-30",
  PrXx31 = "PR-XX-31",
  PrXx32 = "PR-XX-32",
  PrXx33 = "PR-XX-33",
  PrXx34 = "PR-XX-34",
  PrXx35 = "PR-XX-35",
  PrXx36 = "PR-XX-36",
  PrXx37 = "PR-XX-37",
  PrXx38 = "PR-XX-38",
  PrXx39 = "PR-XX-39",
  PrXx40 = "PR-XX-40",
  PrXx41 = "PR-XX-41",
  PrXx42 = "PR-XX-42",
  PrXx43 = "PR-XX-43",
  PrXx44 = "PR-XX-44",
  PrXx45 = "PR-XX-45",
  PrXx46 = "PR-XX-46",
  PrXx47 = "PR-XX-47",
  PrXx48 = "PR-XX-48",
  PrXx49 = "PR-XX-49",
  PrXx50 = "PR-XX-50",
  PrXx51 = "PR-XX-51",
  PrXx52 = "PR-XX-52",
  PrXx53 = "PR-XX-53",
  PrXx54 = "PR-XX-54",
  PrXx55 = "PR-XX-55",
  PrXx56 = "PR-XX-56",
  PrXx57 = "PR-XX-57",
  PrXx58 = "PR-XX-58",
  PrXx59 = "PR-XX-59",
  PrXx60 = "PR-XX-60",
  PrXx61 = "PR-XX-61",
  PrXx62 = "PR-XX-62",
  PrXx63 = "PR-XX-63",
  PrXx64 = "PR-XX-64",
  PrXx65 = "PR-XX-65",
  PrXx66 = "PR-XX-66",
  PrXx67 = "PR-XX-67",
  PrXx68 = "PR-XX-68",
  PrXx69 = "PR-XX-69",
  PrXx70 = "PR-XX-70",
  PrXx71 = "PR-XX-71",
  PrXx72 = "PR-XX-72",
  PrXx73 = "PR-XX-73",
  PrXx74 = "PR-XX-74",
  PrXx75 = "PR-XX-75",
  PrXx76 = "PR-XX-76",
  PsBth = "PS-BTH",
  PsDeb = "PS-DEB",
  PsGza = "PS-GZA",
  PsHbn = "PS-HBN",
  PsJen = "PS-JEN",
  PsJrh = "PS-JRH",
  PsJem = "PS-JEM",
  PsKys = "PS-KYS",
  PsNbs = "PS-NBS",
  PsQqa = "PS-QQA",
  PsRfh = "PS-RFH",
  PsRbh = "PS-RBH",
  PsSlt = "PS-SLT",
  PsTbs = "PS-TBS",
  PsTkm = "PS-TKM",
  Pt01 = "PT-01",
  Pt02 = "PT-02",
  Pt03 = "PT-03",
  Pt04 = "PT-04",
  Pt05 = "PT-05",
  Pt06 = "PT-06",
  Pt07 = "PT-07",
  Pt08 = "PT-08",
  Pt09 = "PT-09",
  Pt10 = "PT-10",
  Pt11 = "PT-11",
  Pt12 = "PT-12",
  Pt13 = "PT-13",
  Pt30 = "PT-30",
  Pt20 = "PT-20",
  Pt14 = "PT-14",
  Pt15 = "PT-15",
  Pt16 = "PT-16",
  Pt17 = "PT-17",
  Pt18 = "PT-18",
  Pw004 = "PW-004",
  Pw100 = "PW-100",
  Pw150 = "PW-150",
  Pw212 = "PW-212",
  Pw214 = "PW-214",
  Pw222 = "PW-222",
  Py10 = "PY-10",
  Py13 = "PY-13",
  PyAsu = "PY-ASU",
  Py19 = "PY-19",
  Py5 = "PY-5",
  Py6 = "PY-6",
  Py14 = "PY-14",
  Py11 = "PY-11",
  Py1 = "PY-1",
  Py3 = "PY-3",
  Py4 = "PY-4",
  Py7 = "PY-7",
  Py8 = "PY-8",
  Py12 = "PY-12",
  Py9 = "PY-9",
  Py15 = "PY-15",
  Py2 = "PY-2",
  QaDa = "QA-DA",
  QaKh = "QA-KH",
  QaWa = "QA-WA",
  QaRa = "QA-RA",
  QaMs = "QA-MS",
  QaZa = "QA-ZA",
  QaUs = "QA-US",
  ReXx1 = "RE-XX-1",
  RoAb = "RO-AB",
  RoAr = "RO-AR",
  RoAg = "RO-AG",
  RoBc = "RO-BC",
  RoBh = "RO-BH",
  RoBn = "RO-BN",
  RoBt = "RO-BT",
  RoBr = "RO-BR",
  RoBv = "RO-BV",
  RoB = "RO-B",
  RoBz = "RO-BZ",
  RoCl = "RO-CL",
  RoCs = "RO-CS",
  RoCj = "RO-CJ",
  RoCt = "RO-CT",
  RoCv = "RO-CV",
  RoDb = "RO-DB",
  RoDj = "RO-DJ",
  RoGl = "RO-GL",
  RoGr = "RO-GR",
  RoGj = "RO-GJ",
  RoHr = "RO-HR",
  RoHd = "RO-HD",
  RoIl = "RO-IL",
  RoIs = "RO-IS",
  RoIf = "RO-IF",
  RoMm = "RO-MM",
  RoMh = "RO-MH",
  RoMs = "RO-MS",
  RoNt = "RO-NT",
  RoOt = "RO-OT",
  RoPh = "RO-PH",
  RoSj = "RO-SJ",
  RoSm = "RO-SM",
  RoSb = "RO-SB",
  RoSv = "RO-SV",
  RoTr = "RO-TR",
  RoTm = "RO-TM",
  RoTl = "RO-TL",
  RoVl = "RO-VL",
  RoVs = "RO-VS",
  RoVn = "RO-VN",
  Rs00 = "RS-00",
  Rs14 = "RS-14",
  Rs11 = "RS-11",
  Rs23 = "RS-23",
  Rs06 = "RS-06",
  Rs04 = "RS-04",
  Rs09 = "RS-09",
  Rs28 = "RS-28",
  Rs08 = "RS-08",
  Rs17 = "RS-17",
  Rs20 = "RS-20",
  Rs24 = "RS-24",
  Rs26 = "RS-26",
  Rs22 = "RS-22",
  Rs10 = "RS-10",
  Rs13 = "RS-13",
  Rs27 = "RS-27",
  Rs19 = "RS-19",
  Rs18 = "RS-18",
  Rs01 = "RS-01",
  Rs03 = "RS-03",
  Rs02 = "RS-02",
  Rs07 = "RS-07",
  Rs12 = "RS-12",
  Rs21 = "RS-21",
  Rs15 = "RS-15",
  Rs05 = "RS-05",
  Rs16 = "RS-16",
  RuAd = "RU-AD",
  RuAl = "RU-AL",
  RuAlt = "RU-ALT",
  RuAmu = "RU-AMU",
  RuArk = "RU-ARK",
  RuAst = "RU-AST",
  RuBa = "RU-BA",
  RuBel = "RU-BEL",
  RuBry = "RU-BRY",
  RuBu = "RU-BU",
  RuCe = "RU-CE",
  RuChe = "RU-CHE",
  RuChu = "RU-CHU",
  RuCu = "RU-CU",
  RuDa = "RU-DA",
  RuIn = "RU-IN",
  RuIrk = "RU-IRK",
  RuIva = "RU-IVA",
  RuKb = "RU-KB",
  RuKgd = "RU-KGD",
  RuKl = "RU-KL",
  RuKlu = "RU-KLU",
  RuKam = "RU-KAM",
  RuKc = "RU-KC",
  RuKr = "RU-KR",
  RuKem = "RU-KEM",
  RuKha = "RU-KHA",
  RuKk = "RU-KK",
  RuKhm = "RU-KHM",
  RuKir = "RU-KIR",
  RuKo = "RU-KO",
  RuKos = "RU-KOS",
  RuKda = "RU-KDA",
  RuKya = "RU-KYA",
  RuKgn = "RU-KGN",
  RuKrs = "RU-KRS",
  RuLen = "RU-LEN",
  RuLip = "RU-LIP",
  RuMag = "RU-MAG",
  RuMe = "RU-ME",
  RuMo = "RU-MO",
  RuMos = "RU-MOS",
  RuMow = "RU-MOW",
  RuMur = "RU-MUR",
  RuNen = "RU-NEN",
  RuNiz = "RU-NIZ",
  RuNgr = "RU-NGR",
  RuNvs = "RU-NVS",
  RuOms = "RU-OMS",
  RuOre = "RU-ORE",
  RuOrl = "RU-ORL",
  RuPnz = "RU-PNZ",
  RuPer = "RU-PER",
  RuPri = "RU-PRI",
  RuPsk = "RU-PSK",
  RuRos = "RU-ROS",
  RuRya = "RU-RYA",
  RuSa = "RU-SA",
  RuSak = "RU-SAK",
  RuSam = "RU-SAM",
  RuSpe = "RU-SPE",
  RuSar = "RU-SAR",
  RuSe = "RU-SE",
  RuSmo = "RU-SMO",
  RuSta = "RU-STA",
  RuSve = "RU-SVE",
  RuTam = "RU-TAM",
  RuTa = "RU-TA",
  RuTom = "RU-TOM",
  RuTul = "RU-TUL",
  RuTve = "RU-TVE",
  RuTyu = "RU-TYU",
  RuTy = "RU-TY",
  RuUd = "RU-UD",
  RuUly = "RU-ULY",
  RuVla = "RU-VLA",
  RuVgg = "RU-VGG",
  RuVlg = "RU-VLG",
  RuVor = "RU-VOR",
  RuYan = "RU-YAN",
  RuYar = "RU-YAR",
  RuYev = "RU-YEV",
  RuZab = "RU-ZAB",
  Rw02 = "RW-02",
  Rw03 = "RW-03",
  Rw04 = "RW-04",
  Rw05 = "RW-05",
  Rw01 = "RW-01",
  Sa14 = "SA-14",
  Sa11 = "SA-11",
  Sa08 = "SA-08",
  Sa12 = "SA-12",
  Sa03 = "SA-03",
  Sa05 = "SA-05",
  Sa01 = "SA-01",
  Sa04 = "SA-04",
  Sa06 = "SA-06",
  Sa09 = "SA-09",
  Sa02 = "SA-02",
  Sa10 = "SA-10",
  Sa07 = "SA-07",
  SbCh = "SB-CH",
  SbGu = "SB-GU",
  SbWe = "SB-WE",
  Sc02 = "SC-02",
  Sc05 = "SC-05",
  Sc01 = "SC-01",
  Sc06 = "SC-06",
  Sc07 = "SC-07",
  Sc08 = "SC-08",
  Sc10 = "SC-10",
  Sc11 = "SC-11",
  Sc16 = "SC-16",
  Sc13 = "SC-13",
  Sc14 = "SC-14",
  Sc15 = "SC-15",
  Sc20 = "SC-20",
  Sc23 = "SC-23",
  SdNb = "SD-NB",
  SdDc = "SD-DC",
  SdGd = "SD-GD",
  SdGz = "SD-GZ",
  SdKa = "SD-KA",
  SdKh = "SD-KH",
  SdDn = "SD-DN",
  SdKn = "SD-KN",
  SdNo = "SD-NO",
  SdRs = "SD-RS",
  SdNr = "SD-NR",
  SdSi = "SD-SI",
  SdDs = "SD-DS",
  SdKs = "SD-KS",
  SdDw = "SD-DW",
  SdGk = "SD-GK",
  SdNw = "SD-NW",
  SeK = "SE-K",
  SeW = "SE-W",
  SeX = "SE-X",
  SeI = "SE-I",
  SeN = "SE-N",
  SeZ = "SE-Z",
  SeF = "SE-F",
  SeH = "SE-H",
  SeG = "SE-G",
  SeBd = "SE-BD",
  SeT = "SE-T",
  SeE = "SE-E",
  SeM = "SE-M",
  SeD = "SE-D",
  SeAb = "SE-AB",
  SeC = "SE-C",
  SeS = "SE-S",
  SeAc = "SE-AC",
  SeY = "SE-Y",
  SeU = "SE-U",
  SeO = "SE-O",
  SgXx1 = "SG-XX-1",
  ShHl = "SH-HL",
  Si001 = "SI-001",
  Si213 = "SI-213",
  Si195 = "SI-195",
  Si002 = "SI-002",
  Si148 = "SI-148",
  Si149 = "SI-149",
  Si003 = "SI-003",
  Si150 = "SI-150",
  Si004 = "SI-004",
  Si005 = "SI-005",
  Si006 = "SI-006",
  Si151 = "SI-151",
  Si007 = "SI-007",
  Si009 = "SI-009",
  Si008 = "SI-008",
  Si152 = "SI-152",
  Si011 = "SI-011",
  Si012 = "SI-012",
  Si013 = "SI-013",
  Si014 = "SI-014",
  Si196 = "SI-196",
  Si015 = "SI-015",
  Si017 = "SI-017",
  Si018 = "SI-018",
  Si019 = "SI-019",
  Si154 = "SI-154",
  Si020 = "SI-020",
  Si155 = "SI-155",
  Si021 = "SI-021",
  Si156 = "SI-156",
  Si023 = "SI-023",
  Si024 = "SI-024",
  Si025 = "SI-025",
  Si026 = "SI-026",
  Si207 = "SI-207",
  Si029 = "SI-029",
  Si031 = "SI-031",
  Si158 = "SI-158",
  Si032 = "SI-032",
  Si159 = "SI-159",
  Si160 = "SI-160",
  Si161 = "SI-161",
  Si162 = "SI-162",
  Si034 = "SI-034",
  Si035 = "SI-035",
  Si036 = "SI-036",
  Si037 = "SI-037",
  Si038 = "SI-038",
  Si039 = "SI-039",
  Si040 = "SI-040",
  Si041 = "SI-041",
  Si042 = "SI-042",
  Si043 = "SI-043",
  Si044 = "SI-044",
  Si045 = "SI-045",
  Si046 = "SI-046",
  Si047 = "SI-047",
  Si048 = "SI-048",
  Si049 = "SI-049",
  Si164 = "SI-164",
  Si050 = "SI-050",
  Si197 = "SI-197",
  Si165 = "SI-165",
  Si052 = "SI-052",
  Si053 = "SI-053",
  Si166 = "SI-166",
  Si054 = "SI-054",
  Si055 = "SI-055",
  Si056 = "SI-056",
  Si057 = "SI-057",
  Si058 = "SI-058",
  Si059 = "SI-059",
  Si060 = "SI-060",
  Si061 = "SI-061",
  Si063 = "SI-063",
  Si208 = "SI-208",
  Si064 = "SI-064",
  Si065 = "SI-065",
  Si066 = "SI-066",
  Si167 = "SI-167",
  Si067 = "SI-067",
  Si068 = "SI-068",
  Si069 = "SI-069",
  Si198 = "SI-198",
  Si070 = "SI-070",
  Si168 = "SI-168",
  Si071 = "SI-071",
  Si072 = "SI-072",
  Si073 = "SI-073",
  Si074 = "SI-074",
  Si169 = "SI-169",
  Si075 = "SI-075",
  Si212 = "SI-212",
  Si170 = "SI-170",
  Si076 = "SI-076",
  Si199 = "SI-199",
  Si077 = "SI-077",
  Si079 = "SI-079",
  Si080 = "SI-080",
  Si081 = "SI-081",
  Si082 = "SI-082",
  Si083 = "SI-083",
  Si084 = "SI-084",
  Si085 = "SI-085",
  Si086 = "SI-086",
  Si171 = "SI-171",
  Si087 = "SI-087",
  Si090 = "SI-090",
  Si091 = "SI-091",
  Si092 = "SI-092",
  Si172 = "SI-172",
  Si200 = "SI-200",
  Si173 = "SI-173",
  Si094 = "SI-094",
  Si174 = "SI-174",
  Si095 = "SI-095",
  Si175 = "SI-175",
  Si096 = "SI-096",
  Si097 = "SI-097",
  Si098 = "SI-098",
  Si099 = "SI-099",
  Si100 = "SI-100",
  Si101 = "SI-101",
  Si102 = "SI-102",
  Si103 = "SI-103",
  Si176 = "SI-176",
  Si209 = "SI-209",
  Si201 = "SI-201",
  Si104 = "SI-104",
  Si106 = "SI-106",
  Si105 = "SI-105",
  Si108 = "SI-108",
  Si033 = "SI-033",
  Si109 = "SI-109",
  Si183 = "SI-183",
  Si117 = "SI-117",
  Si118 = "SI-118",
  Si119 = "SI-119",
  Si120 = "SI-120",
  Si211 = "SI-211",
  Si110 = "SI-110",
  Si111 = "SI-111",
  Si121 = "SI-121",
  Si122 = "SI-122",
  Si123 = "SI-123",
  Si112 = "SI-112",
  Si113 = "SI-113",
  Si114 = "SI-114",
  Si124 = "SI-124",
  Si206 = "SI-206",
  Si125 = "SI-125",
  Si194 = "SI-194",
  Si179 = "SI-179",
  Si180 = "SI-180",
  Si126 = "SI-126",
  Si115 = "SI-115",
  Si127 = "SI-127",
  Si203 = "SI-203",
  Si204 = "SI-204",
  Si182 = "SI-182",
  Si116 = "SI-116",
  Si210 = "SI-210",
  Si205 = "SI-205",
  Si184 = "SI-184",
  Si010 = "SI-010",
  Si128 = "SI-128",
  Si129 = "SI-129",
  Si130 = "SI-130",
  Si185 = "SI-185",
  Si131 = "SI-131",
  Si186 = "SI-186",
  Si132 = "SI-132",
  Si133 = "SI-133",
  Si187 = "SI-187",
  Si134 = "SI-134",
  Si188 = "SI-188",
  Si135 = "SI-135",
  Si136 = "SI-136",
  Si137 = "SI-137",
  Si138 = "SI-138",
  Si139 = "SI-139",
  Si189 = "SI-189",
  Si140 = "SI-140",
  Si141 = "SI-141",
  Si142 = "SI-142",
  Si190 = "SI-190",
  Si143 = "SI-143",
  Si146 = "SI-146",
  Si191 = "SI-191",
  Si147 = "SI-147",
  Si144 = "SI-144",
  Si193 = "SI-193",
  SjXx1 = "SJ-XX-1",
  SkBc = "SK-BC",
  SkBl = "SK-BL",
  SkKi = "SK-KI",
  SkNi = "SK-NI",
  SkPv = "SK-PV",
  SkTc = "SK-TC",
  SkTa = "SK-TA",
  SkZi = "SK-ZI",
  SlE = "SL-E",
  SlN = "SL-N",
  SlS = "SL-S",
  SlW = "SL-W",
  Sm07 = "SM-07",
  Sm03 = "SM-03",
  Sm04 = "SM-04",
  Sm09 = "SM-09",
  SnDk = "SN-DK",
  SnDb = "SN-DB",
  SnFk = "SN-FK",
  SnKa = "SN-KA",
  SnKl = "SN-KL",
  SnKe = "SN-KE",
  SnKd = "SN-KD",
  SnLg = "SN-LG",
  SnMt = "SN-MT",
  SnSl = "SN-SL",
  SnSe = "SN-SE",
  SnTc = "SN-TC",
  SnTh = "SN-TH",
  SnZg = "SN-ZG",
  SoAw = "SO-AW",
  SoBn = "SO-BN",
  SoBr = "SO-BR",
  SoGa = "SO-GA",
  SoJh = "SO-JH",
  SoMu = "SO-MU",
  SoNu = "SO-NU",
  SoSh = "SO-SH",
  SoTo = "SO-TO",
  SoWo = "SO-WO",
  SrBr = "SR-BR",
  SrCm = "SR-CM",
  SrNi = "SR-NI",
  SrPr = "SR-PR",
  SrPm = "SR-PM",
  SrSi = "SR-SI",
  SrWa = "SR-WA",
  SsEc = "SS-EC",
  SsEe = "SS-EE",
  SsJg = "SS-JG",
  SsLk = "SS-LK",
  SsBn = "SS-BN",
  SsNu = "SS-NU",
  SsEw = "SS-EW",
  St01 = "ST-01",
  SvAh = "SV-AH",
  SvCa = "SV-CA",
  SvCh = "SV-CH",
  SvCu = "SV-CU",
  SvLi = "SV-LI",
  SvPa = "SV-PA",
  SvUn = "SV-UN",
  SvMo = "SV-MO",
  SvSm = "SV-SM",
  SvSs = "SV-SS",
  SvSv = "SV-SV",
  SvSa = "SV-SA",
  SvSo = "SV-SO",
  SvUs = "SV-US",
  SxXx1 = "SX-XX-1",
  SyHa = "SY-HA",
  SyLa = "SY-LA",
  SyQu = "SY-QU",
  SyRa = "SY-RA",
  SySu = "SY-SU",
  SyDr = "SY-DR",
  SyDy = "SY-DY",
  SyDi = "SY-DI",
  SyHl = "SY-HL",
  SyHm = "SY-HM",
  SyHi = "SY-HI",
  SyId = "SY-ID",
  SyRd = "SY-RD",
  SyTa = "SY-TA",
  SzHh = "SZ-HH",
  SzLu = "SZ-LU",
  SzMa = "SZ-MA",
  TcXx1 = "TC-XX-1",
  TdBg = "TD-BG",
  TdCb = "TD-CB",
  TdGr = "TD-GR",
  TdLo = "TD-LO",
  TdMe = "TD-ME",
  TdOd = "TD-OD",
  TdNd = "TD-ND",
  TfXx1 = "TF-XX-1",
  TgC = "TG-C",
  TgK = "TG-K",
  TgM = "TG-M",
  TgP = "TG-P",
  Th37 = "TH-37",
  Th15 = "TH-15",
  Th38 = "TH-38",
  Th31 = "TH-31",
  Th24 = "TH-24",
  Th18 = "TH-18",
  Th36 = "TH-36",
  Th22 = "TH-22",
  Th50 = "TH-50",
  Th57 = "TH-57",
  Th20 = "TH-20",
  Th86 = "TH-86",
  Th46 = "TH-46",
  Th62 = "TH-62",
  Th71 = "TH-71",
  Th40 = "TH-40",
  Th81 = "TH-81",
  Th10 = "TH-10",
  Th52 = "TH-52",
  Th51 = "TH-51",
  Th42 = "TH-42",
  Th16 = "TH-16",
  Th58 = "TH-58",
  Th44 = "TH-44",
  Th49 = "TH-49",
  Th26 = "TH-26",
  Th73 = "TH-73",
  Th48 = "TH-48",
  Th30 = "TH-30",
  Th60 = "TH-60",
  Th80 = "TH-80",
  Th55 = "TH-55",
  Th96 = "TH-96",
  Th39 = "TH-39",
  Th43 = "TH-43",
  Th12 = "TH-12",
  Th13 = "TH-13",
  Th94 = "TH-94",
  Th82 = "TH-82",
  Th93 = "TH-93",
  Th56 = "TH-56",
  Th67 = "TH-67",
  Th76 = "TH-76",
  Th66 = "TH-66",
  Th65 = "TH-65",
  Th14 = "TH-14",
  Th54 = "TH-54",
  Th83 = "TH-83",
  Th25 = "TH-25",
  Th77 = "TH-77",
  Th85 = "TH-85",
  Th70 = "TH-70",
  Th21 = "TH-21",
  Th45 = "TH-45",
  Th27 = "TH-27",
  Th47 = "TH-47",
  Th11 = "TH-11",
  Th74 = "TH-74",
  Th75 = "TH-75",
  Th19 = "TH-19",
  Th91 = "TH-91",
  Th33 = "TH-33",
  Th17 = "TH-17",
  Th90 = "TH-90",
  Th64 = "TH-64",
  Th72 = "TH-72",
  Th84 = "TH-84",
  Th32 = "TH-32",
  Th63 = "TH-63",
  Th92 = "TH-92",
  Th23 = "TH-23",
  Th34 = "TH-34",
  Th41 = "TH-41",
  Th61 = "TH-61",
  Th53 = "TH-53",
  Th95 = "TH-95",
  Th35 = "TH-35",
  TjDu = "TJ-DU",
  TjKt = "TJ-KT",
  TjRa = "TJ-RA",
  TjSu = "TJ-SU",
  TkXx1 = "TK-XX-1",
  TlAn = "TL-AN",
  TlBo = "TL-BO",
  TlCo = "TL-CO",
  TlDi = "TL-DI",
  TlLi = "TL-LI",
  TmA = "TM-A",
  TmB = "TM-B",
  TmD = "TM-D",
  TmL = "TM-L",
  TmM = "TM-M",
  Tn31 = "TN-31",
  Tn13 = "TN-13",
  Tn23 = "TN-23",
  Tn81 = "TN-81",
  Tn71 = "TN-71",
  Tn32 = "TN-32",
  Tn41 = "TN-41",
  Tn42 = "TN-42",
  Tn73 = "TN-73",
  Tn12 = "TN-12",
  Tn14 = "TN-14",
  Tn33 = "TN-33",
  Tn53 = "TN-53",
  Tn82 = "TN-82",
  Tn52 = "TN-52",
  Tn21 = "TN-21",
  Tn61 = "TN-61",
  Tn43 = "TN-43",
  Tn34 = "TN-34",
  Tn51 = "TN-51",
  Tn83 = "TN-83",
  Tn72 = "TN-72",
  Tn11 = "TN-11",
  Tn22 = "TN-22",
  To02 = "TO-02",
  To03 = "TO-03",
  To04 = "TO-04",
  Tr01 = "TR-01",
  Tr02 = "TR-02",
  Tr03 = "TR-03",
  Tr04 = "TR-04",
  Tr68 = "TR-68",
  Tr05 = "TR-05",
  Tr06 = "TR-06",
  Tr07 = "TR-07",
  Tr75 = "TR-75",
  Tr08 = "TR-08",
  Tr09 = "TR-09",
  Tr10 = "TR-10",
  Tr74 = "TR-74",
  Tr72 = "TR-72",
  Tr69 = "TR-69",
  Tr11 = "TR-11",
  Tr12 = "TR-12",
  Tr13 = "TR-13",
  Tr14 = "TR-14",
  Tr15 = "TR-15",
  Tr16 = "TR-16",
  Tr17 = "TR-17",
  Tr18 = "TR-18",
  Tr19 = "TR-19",
  Tr20 = "TR-20",
  Tr21 = "TR-21",
  Tr81 = "TR-81",
  Tr22 = "TR-22",
  Tr23 = "TR-23",
  Tr24 = "TR-24",
  Tr25 = "TR-25",
  Tr26 = "TR-26",
  Tr27 = "TR-27",
  Tr28 = "TR-28",
  Tr29 = "TR-29",
  Tr30 = "TR-30",
  Tr31 = "TR-31",
  Tr76 = "TR-76",
  Tr32 = "TR-32",
  Tr34 = "TR-34",
  Tr35 = "TR-35",
  Tr46 = "TR-46",
  Tr78 = "TR-78",
  Tr70 = "TR-70",
  Tr36 = "TR-36",
  Tr37 = "TR-37",
  Tr38 = "TR-38",
  Tr79 = "TR-79",
  Tr71 = "TR-71",
  Tr39 = "TR-39",
  Tr40 = "TR-40",
  Tr41 = "TR-41",
  Tr42 = "TR-42",
  Tr43 = "TR-43",
  Tr44 = "TR-44",
  Tr45 = "TR-45",
  Tr47 = "TR-47",
  Tr33 = "TR-33",
  Tr48 = "TR-48",
  Tr49 = "TR-49",
  Tr50 = "TR-50",
  Tr51 = "TR-51",
  Tr52 = "TR-52",
  Tr80 = "TR-80",
  Tr53 = "TR-53",
  Tr54 = "TR-54",
  Tr55 = "TR-55",
  Tr63 = "TR-63",
  Tr56 = "TR-56",
  Tr57 = "TR-57",
  Tr73 = "TR-73",
  Tr58 = "TR-58",
  Tr59 = "TR-59",
  Tr60 = "TR-60",
  Tr61 = "TR-61",
  Tr62 = "TR-62",
  Tr64 = "TR-64",
  Tr65 = "TR-65",
  Tr77 = "TR-77",
  Tr66 = "TR-66",
  Tr67 = "TR-67",
  TtAri = "TT-ARI",
  TtCha = "TT-CHA",
  TtCtt = "TT-CTT",
  TtDmn = "TT-DMN",
  TtMrc = "TT-MRC",
  TtPed = "TT-PED",
  TtPtf = "TT-PTF",
  TtPos = "TT-POS",
  TtPrt = "TT-PRT",
  TtSfo = "TT-SFO",
  TtSjl = "TT-SJL",
  TtSge = "TT-SGE",
  TtSip = "TT-SIP",
  TtTob = "TT-TOB",
  TtTup = "TT-TUP",
  TvFun = "TV-FUN",
  TwCha = "TW-CHA",
  TwCyq = "TW-CYQ",
  TwHsq = "TW-HSQ",
  TwHua = "TW-HUA",
  TwKhh = "TW-KHH",
  TwKee = "TW-KEE",
  TwKin = "TW-KIN",
  TwLie = "TW-LIE",
  TwMia = "TW-MIA",
  TwNan = "TW-NAN",
  TwNwt = "TW-NWT",
  TwPen = "TW-PEN",
  TwPif = "TW-PIF",
  TwTxg = "TW-TXG",
  TwTnn = "TW-TNN",
  TwTpe = "TW-TPE",
  TwTtt = "TW-TTT",
  TwTao = "TW-TAO",
  TwIla = "TW-ILA",
  TwYun = "TW-YUN",
  Tz01 = "TZ-01",
  Tz02 = "TZ-02",
  Tz03 = "TZ-03",
  Tz27 = "TZ-27",
  Tz04 = "TZ-04",
  Tz05 = "TZ-05",
  Tz06 = "TZ-06",
  Tz07 = "TZ-07",
  Tz28 = "TZ-28",
  Tz08 = "TZ-08",
  Tz09 = "TZ-09",
  Tz11 = "TZ-11",
  Tz12 = "TZ-12",
  Tz26 = "TZ-26",
  Tz13 = "TZ-13",
  Tz14 = "TZ-14",
  Tz15 = "TZ-15",
  Tz16 = "TZ-16",
  Tz17 = "TZ-17",
  Tz18 = "TZ-18",
  Tz29 = "TZ-29",
  Tz19 = "TZ-19",
  Tz20 = "TZ-20",
  Tz21 = "TZ-21",
  Tz22 = "TZ-22",
  Tz30 = "TZ-30",
  Tz23 = "TZ-23",
  Tz31 = "TZ-31",
  Tz24 = "TZ-24",
  Tz25 = "TZ-25",
  Ua43 = "UA-43",
  Ua71 = "UA-71",
  Ua74 = "UA-74",
  Ua77 = "UA-77",
  Ua12 = "UA-12",
  Ua14 = "UA-14",
  Ua26 = "UA-26",
  Ua63 = "UA-63",
  Ua65 = "UA-65",
  Ua68 = "UA-68",
  Ua35 = "UA-35",
  Ua30 = "UA-30",
  Ua32 = "UA-32",
  Ua09 = "UA-09",
  Ua46 = "UA-46",
  Ua48 = "UA-48",
  Ua51 = "UA-51",
  Ua53 = "UA-53",
  Ua56 = "UA-56",
  Ua40 = "UA-40",
  Ua59 = "UA-59",
  Ua61 = "UA-61",
  Ua05 = "UA-05",
  Ua07 = "UA-07",
  Ua21 = "UA-21",
  Ua23 = "UA-23",
  Ua18 = "UA-18",
  Ug314 = "UG-314",
  Ug301 = "UG-301",
  Ug322 = "UG-322",
  Ug323 = "UG-323",
  Ug315 = "UG-315",
  Ug324 = "UG-324",
  Ug216 = "UG-216",
  Ug316 = "UG-316",
  Ug302 = "UG-302",
  Ug303 = "UG-303",
  Ug217 = "UG-217",
  Ug218 = "UG-218",
  Ug201 = "UG-201",
  Ug420 = "UG-420",
  Ug117 = "UG-117",
  Ug219 = "UG-219",
  Ug118 = "UG-118",
  Ug220 = "UG-220",
  Ug225 = "UG-225",
  Ug401 = "UG-401",
  Ug402 = "UG-402",
  Ug202 = "UG-202",
  Ug221 = "UG-221",
  Ug120 = "UG-120",
  Ug226 = "UG-226",
  Ug317 = "UG-317",
  Ug121 = "UG-121",
  Ug304 = "UG-304",
  Ug403 = "UG-403",
  Ug417 = "UG-417",
  Ug203 = "UG-203",
  Ug418 = "UG-418",
  Ug204 = "UG-204",
  Ug318 = "UG-318",
  Ug404 = "UG-404",
  Ug405 = "UG-405",
  Ug213 = "UG-213",
  Ug101 = "UG-101",
  Ug222 = "UG-222",
  Ug122 = "UG-122",
  Ug102 = "UG-102",
  Ug205 = "UG-205",
  Ug413 = "UG-413",
  Ug206 = "UG-206",
  Ug406 = "UG-406",
  Ug207 = "UG-207",
  Ug112 = "UG-112",
  Ug407 = "UG-407",
  Ug103 = "UG-103",
  Ug227 = "UG-227",
  Ug419 = "UG-419",
  Ug421 = "UG-421",
  Ug408 = "UG-408",
  Ug305 = "UG-305",
  Ug319 = "UG-319",
  Ug306 = "UG-306",
  Ug208 = "UG-208",
  Ug228 = "UG-228",
  Ug123 = "UG-123",
  Ug422 = "UG-422",
  Ug415 = "UG-415",
  Ug326 = "UG-326",
  Ug307 = "UG-307",
  Ug229 = "UG-229",
  Ug104 = "UG-104",
  Ug124 = "UG-124",
  Ug114 = "UG-114",
  Ug223 = "UG-223",
  Ug105 = "UG-105",
  Ug409 = "UG-409",
  Ug214 = "UG-214",
  Ug209 = "UG-209",
  Ug410 = "UG-410",
  Ug423 = "UG-423",
  Ug115 = "UG-115",
  Ug308 = "UG-308",
  Ug309 = "UG-309",
  Ug106 = "UG-106",
  Ug107 = "UG-107",
  Ug108 = "UG-108",
  Ug311 = "UG-311",
  Ug116 = "UG-116",
  Ug109 = "UG-109",
  Ug230 = "UG-230",
  Ug224 = "UG-224",
  Ug327 = "UG-327",
  Ug310 = "UG-310",
  Ug231 = "UG-231",
  Ug411 = "UG-411",
  Ug328 = "UG-328",
  Ug321 = "UG-321",
  Ug312 = "UG-312",
  Ug210 = "UG-210",
  Ug110 = "UG-110",
  Ug425 = "UG-425",
  Ug412 = "UG-412",
  Ug111 = "UG-111",
  Ug232 = "UG-232",
  Ug426 = "UG-426",
  Ug215 = "UG-215",
  Ug211 = "UG-211",
  Ug212 = "UG-212",
  Ug113 = "UG-113",
  Ug313 = "UG-313",
  Ug330 = "UG-330",
  Um95 = "UM-95",
  UsAl = "US-AL",
  UsAk = "US-AK",
  UsAz = "US-AZ",
  UsAr = "US-AR",
  UsCa = "US-CA",
  UsCo = "US-CO",
  UsCt = "US-CT",
  UsDe = "US-DE",
  UsDc = "US-DC",
  UsFl = "US-FL",
  UsGa = "US-GA",
  UsHi = "US-HI",
  UsId = "US-ID",
  UsIl = "US-IL",
  UsIn = "US-IN",
  UsIa = "US-IA",
  UsKs = "US-KS",
  UsKy = "US-KY",
  UsLa = "US-LA",
  UsMe = "US-ME",
  UsMd = "US-MD",
  UsMa = "US-MA",
  UsMi = "US-MI",
  UsMn = "US-MN",
  UsMs = "US-MS",
  UsMo = "US-MO",
  UsMt = "US-MT",
  UsNe = "US-NE",
  UsNv = "US-NV",
  UsNh = "US-NH",
  UsNj = "US-NJ",
  UsNm = "US-NM",
  UsNy = "US-NY",
  UsNc = "US-NC",
  UsNd = "US-ND",
  UsOh = "US-OH",
  UsOk = "US-OK",
  UsOr = "US-OR",
  UsPa = "US-PA",
  UsRi = "US-RI",
  UsSc = "US-SC",
  UsSd = "US-SD",
  UsTn = "US-TN",
  UsTx = "US-TX",
  UsUt = "US-UT",
  UsVt = "US-VT",
  UsVa = "US-VA",
  UsWa = "US-WA",
  UsWv = "US-WV",
  UsWi = "US-WI",
  UsWy = "US-WY",
  UyAr = "UY-AR",
  UyCa = "UY-CA",
  UyCl = "UY-CL",
  UyCo = "UY-CO",
  UyDu = "UY-DU",
  UyFs = "UY-FS",
  UyFd = "UY-FD",
  UyLa = "UY-LA",
  UyMa = "UY-MA",
  UyMo = "UY-MO",
  UyPa = "UY-PA",
  UyRn = "UY-RN",
  UyRv = "UY-RV",
  UyRo = "UY-RO",
  UySa = "UY-SA",
  UySj = "UY-SJ",
  UySo = "UY-SO",
  UyTa = "UY-TA",
  UyTt = "UY-TT",
  UzAn = "UZ-AN",
  UzBu = "UZ-BU",
  UzFa = "UZ-FA",
  UzJi = "UZ-JI",
  UzNg = "UZ-NG",
  UzNw = "UZ-NW",
  UzQa = "UZ-QA",
  UzQr = "UZ-QR",
  UzSa = "UZ-SA",
  UzSi = "UZ-SI",
  UzSu = "UZ-SU",
  UzTk = "UZ-TK",
  UzXo = "UZ-XO",
  VaXx1 = "VA-XX-1",
  Vc01 = "VC-01",
  Vc06 = "VC-06",
  Vc04 = "VC-04",
  Vc05 = "VC-05",
  VeZ = "VE-Z",
  VeB = "VE-B",
  VeC = "VE-C",
  VeD = "VE-D",
  VeE = "VE-E",
  VeF = "VE-F",
  VeG = "VE-G",
  VeH = "VE-H",
  VeY = "VE-Y",
  VeA = "VE-A",
  VeI = "VE-I",
  VeJ = "VE-J",
  VeX = "VE-X",
  VeK = "VE-K",
  VeL = "VE-L",
  VeM = "VE-M",
  VeN = "VE-N",
  VeO = "VE-O",
  VeP = "VE-P",
  VeR = "VE-R",
  VeS = "VE-S",
  VeT = "VE-T",
  VeU = "VE-U",
  VeV = "VE-V",
  VgXx1 = "VG-XX-1",
  ViXx1 = "VI-XX-1",
  Vn44 = "VN-44",
  Vn43 = "VN-43",
  Vn54 = "VN-54",
  Vn53 = "VN-53",
  Vn55 = "VN-55",
  Vn56 = "VN-56",
  Vn50 = "VN-50",
  Vn31 = "VN-31",
  Vn57 = "VN-57",
  Vn58 = "VN-58",
  Vn40 = "VN-40",
  Vn59 = "VN-59",
  VnCt = "VN-CT",
  Vn04 = "VN-04",
  VnDn = "VN-DN",
  Vn33 = "VN-33",
  Vn72 = "VN-72",
  Vn71 = "VN-71",
  Vn39 = "VN-39",
  Vn45 = "VN-45",
  Vn30 = "VN-30",
  Vn03 = "VN-03",
  Vn63 = "VN-63",
  VnHn = "VN-HN",
  Vn23 = "VN-23",
  Vn61 = "VN-61",
  VnHp = "VN-HP",
  Vn73 = "VN-73",
  VnSg = "VN-SG",
  Vn14 = "VN-14",
  Vn66 = "VN-66",
  Vn34 = "VN-34",
  Vn47 = "VN-47",
  Vn28 = "VN-28",
  Vn01 = "VN-01",
  Vn35 = "VN-35",
  Vn09 = "VN-09",
  Vn02 = "VN-02",
  Vn41 = "VN-41",
  Vn67 = "VN-67",
  Vn22 = "VN-22",
  Vn18 = "VN-18",
  Vn36 = "VN-36",
  Vn68 = "VN-68",
  Vn32 = "VN-32",
  Vn24 = "VN-24",
  Vn27 = "VN-27",
  Vn29 = "VN-29",
  Vn13 = "VN-13",
  Vn25 = "VN-25",
  Vn52 = "VN-52",
  Vn05 = "VN-05",
  Vn37 = "VN-37",
  Vn20 = "VN-20",
  Vn69 = "VN-69",
  Vn21 = "VN-21",
  Vn26 = "VN-26",
  Vn46 = "VN-46",
  Vn51 = "VN-51",
  Vn07 = "VN-07",
  Vn49 = "VN-49",
  Vn70 = "VN-70",
  Vn06 = "VN-06",
  VuSee = "VU-SEE",
  VuTae = "VU-TAE",
  VuTob = "VU-TOB",
  WfSg = "WF-SG",
  WfUv = "WF-UV",
  WsAt = "WS-AT",
  WsFa = "WS-FA",
  WsTu = "WS-TU",
  YeAd = "YE-AD",
  YeAm = "YE-AM",
  YeAb = "YE-AB",
  YeDa = "YE-DA",
  YeBa = "YE-BA",
  YeHu = "YE-HU",
  YeSa = "YE-SA",
  YeDh = "YE-DH",
  YeHd = "YE-HD",
  YeHj = "YE-HJ",
  YeIb = "YE-IB",
  YeLa = "YE-LA",
  YeMa = "YE-MA",
  YeSd = "YE-SD",
  YeSn = "YE-SN",
  YeSh = "YE-SH",
  YeTa = "YE-TA",
  YtXx1 = "YT-XX-1",
  YtXx2 = "YT-XX-2",
  YtXx3 = "YT-XX-3",
  YtXx4 = "YT-XX-4",
  YtXx5 = "YT-XX-5",
  YtXx6 = "YT-XX-6",
  ZaEc = "ZA-EC",
  ZaFs = "ZA-FS",
  ZaGp = "ZA-GP",
  ZaKzn = "ZA-KZN",
  ZaLp = "ZA-LP",
  ZaMp = "ZA-MP",
  ZaNw = "ZA-NW",
  ZaNc = "ZA-NC",
  ZaWc = "ZA-WC",
  Zm02 = "ZM-02",
  Zm08 = "ZM-08",
  Zm03 = "ZM-03",
  Zm04 = "ZM-04",
  Zm09 = "ZM-09",
  Zm10 = "ZM-10",
  Zm06 = "ZM-06",
  Zm05 = "ZM-05",
  Zm07 = "ZM-07",
  Zm01 = "ZM-01",
  ZwBu = "ZW-BU",
  ZwHa = "ZW-HA",
  ZwMa = "ZW-MA",
  ZwMc = "ZW-MC",
  ZwMe = "ZW-ME",
  ZwMw = "ZW-MW",
  ZwMv = "ZW-MV",
  ZwMn = "ZW-MN",
  ZwMs = "ZW-MS",
  ZwMi = "ZW-MI",
}
export type UpdateEmployeeApiModelSchemasWorkLocationStateValueOpen = OpenEnum<
  typeof UpdateEmployeeApiModelSchemasWorkLocationStateValue
>;

/**
 * The ISO3166-2 sub division where the location is situated
 */
export type UpdateEmployeeApiModelSchemasState = {
  sourceValue?:
    | UpdateEmployeeApiModelSchemasWorkLocationState4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?:
    | UpdateEmployeeApiModelSchemasWorkLocationStateValueOpen
    | null
    | undefined;
};

/**
 * The employee work location
 */
export type UpdateEmployeeApiModelWorkLocation = {
  /**
   * The city where the location is situated
   */
  city?: string | null | undefined;
  /**
   * The country code
   */
  country?: UpdateEmployeeApiModelSchemasWorkLocationCountry | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The name of the location
   */
  name?: string | null | undefined;
  /**
   * Value to pass through to the provider
   */
  passthrough?: { [k: string]: any } | null | undefined;
  /**
   * The phone number of the location
   */
  phoneNumber?: string | null | undefined;
  /**
   * The ISO3166-2 sub division where the location is situated
   */
  state?: UpdateEmployeeApiModelSchemasState | null | undefined;
  /**
   * The first line of the address
   */
  street1?: string | null | undefined;
  /**
   * The second line of the address
   */
  street2?: string | null | undefined;
  /**
   * The ZIP code/Postal code of the location
   */
  zipCode?: string | null | undefined;
};

export type UpdateEmployeeApiModel = {
  /**
   * The employee avatar
   */
  avatar?: UpdateEmployeeApiModelAvatar | null | undefined;
  /**
   * The employee avatar Url
   */
  avatarUrl?: string | null | undefined;
  /**
   * Current benefits of the employee
   */
  benefits?: Array<CreateHRISBenefit> | null | undefined;
  /**
   * The employee birthday
   */
  birthday?: Date | null | undefined;
  /**
   * The citizenships of the Employee
   */
  citizenships?: Array<CountryCodeEnum> | null | undefined;
  /**
   * The employee company id
   */
  companyId?: string | null | undefined;
  /**
   * The employee company name
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  companyName?: string | null | undefined;
  /**
   * The employee custom fields
   */
  customFields?: Array<CustomFields> | null | undefined;
  /**
   * The employee date_of_birth
   */
  dateOfBirth?: Date | null | undefined;
  /**
   * The employee department
   */
  department?: string | null | undefined;
  /**
   * The employee department id
   */
  departmentId?: string | null | undefined;
  /**
   * The employee display name
   */
  displayName?: string | null | undefined;
  /**
   * The assigned employee number
   */
  employeeNumber?: string | null | undefined;
  /**
   * The employment work schedule type (e.g., full-time, part-time)
   */
  employmentContractType?:
    | UpdateEmployeeApiModelEmploymentContractType
    | null
    | undefined;
  /**
   * The employee employment status
   */
  employmentStatus?: UpdateEmployeeApiModelEmploymentStatus | null | undefined;
  /**
   * The employee employment type
   */
  employmentType?: UpdateEmployeeApiModelEmploymentType | null | undefined;
  /**
   * The employee ethnicity
   */
  ethnicity?: UpdateEmployeeApiModelEthnicity | null | undefined;
  /**
   * The employee first name
   */
  firstName?: string | null | undefined;
  /**
   * The employee gender
   */
  gender?: UpdateEmployeeApiModelGender | null | undefined;
  /**
   * The employee hire date
   */
  hireDate?: Date | null | undefined;
  /**
   * The employee home location
   */
  homeLocation?: UpdateEmployeeApiModelHomeLocation | null | undefined;
  /**
   * The employee job id
   */
  jobId?: string | null | undefined;
  /**
   * The employee job title
   */
  jobTitle?: string | null | undefined;
  /**
   * The employee last name
   */
  lastName?: string | null | undefined;
  /**
   * The employee manager ID
   */
  managerId?: string | null | undefined;
  /**
   * The employee marital status
   */
  maritalStatus?: UpdateEmployeeApiModelMaritalStatus | null | undefined;
  /**
   * The employee name
   */
  name?: string | null | undefined;
  /**
   * The national identity number
   */
  nationalIdentityNumber?:
    | UpdateEmployeeApiModelNationalIdentityNumber
    | null
    | undefined;
  /**
   * The employee personal email
   */
  personalEmail?: string | null | undefined;
  /**
   * The employee personal phone number
   */
  personalPhoneNumber?: string | null | undefined;
  /**
   * The employee preferred language
   */
  preferredLanguage?:
    | UpdateEmployeeApiModelPreferredLanguage
    | null
    | undefined;
  /**
   * The employee start date
   */
  startDate?: Date | null | undefined;
  /**
   * The employee tenure
   */
  tenure?: number | null | undefined;
  /**
   * The employee termination date
   */
  terminationDate?: Date | null | undefined;
  /**
   * The employee work anniversary
   */
  workAnniversary?: Date | null | undefined;
  /**
   * The employee work email
   */
  workEmail?: string | null | undefined;
  /**
   * The employee work location
   */
  workLocation?: UpdateEmployeeApiModelWorkLocation | null | undefined;
  /**
   * The employee work phone number
   */
  workPhoneNumber?: string | null | undefined;
};

/** @internal */
export const UpdateEmployeeApiModelAvatar$inboundSchema: z.ZodType<
  UpdateEmployeeApiModelAvatar,
  z.ZodTypeDef,
  unknown
> = z.object({
  base64: z.nullable(z.string()).optional(),
  url: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateEmployeeApiModelAvatar$Outbound = {
  base64?: string | null | undefined;
  url?: string | null | undefined;
};

/** @internal */
export const UpdateEmployeeApiModelAvatar$outboundSchema: z.ZodType<
  UpdateEmployeeApiModelAvatar$Outbound,
  z.ZodTypeDef,
  UpdateEmployeeApiModelAvatar
> = z.object({
  base64: z.nullable(z.string()).optional(),
  url: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelAvatar$ {
  /** @deprecated use `UpdateEmployeeApiModelAvatar$inboundSchema` instead. */
  export const inboundSchema = UpdateEmployeeApiModelAvatar$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelAvatar$outboundSchema` instead. */
  export const outboundSchema = UpdateEmployeeApiModelAvatar$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelAvatar$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModelAvatar$Outbound;
}

export function updateEmployeeApiModelAvatarToJSON(
  updateEmployeeApiModelAvatar: UpdateEmployeeApiModelAvatar,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelAvatar$outboundSchema.parse(
      updateEmployeeApiModelAvatar,
    ),
  );
}

export function updateEmployeeApiModelAvatarFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEmployeeApiModelAvatar, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEmployeeApiModelAvatar$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmployeeApiModelAvatar' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModel4$inboundSchema: z.ZodType<
  UpdateEmployeeApiModel4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateEmployeeApiModel4$Outbound = {};

/** @internal */
export const UpdateEmployeeApiModel4$outboundSchema: z.ZodType<
  UpdateEmployeeApiModel4$Outbound,
  z.ZodTypeDef,
  UpdateEmployeeApiModel4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModel4$ {
  /** @deprecated use `UpdateEmployeeApiModel4$inboundSchema` instead. */
  export const inboundSchema = UpdateEmployeeApiModel4$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModel4$outboundSchema` instead. */
  export const outboundSchema = UpdateEmployeeApiModel4$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModel4$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModel4$Outbound;
}

export function updateEmployeeApiModel4ToJSON(
  updateEmployeeApiModel4: UpdateEmployeeApiModel4,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModel4$outboundSchema.parse(updateEmployeeApiModel4),
  );
}

export function updateEmployeeApiModel4FromJSON(
  jsonString: string,
): SafeParseResult<UpdateEmployeeApiModel4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEmployeeApiModel4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmployeeApiModel4' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSourceValue$inboundSchema: z.ZodType<
  UpdateEmployeeApiModelSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateEmployeeApiModel4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type UpdateEmployeeApiModelSourceValue$Outbound =
  | UpdateEmployeeApiModel4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const UpdateEmployeeApiModelSourceValue$outboundSchema: z.ZodType<
  UpdateEmployeeApiModelSourceValue$Outbound,
  z.ZodTypeDef,
  UpdateEmployeeApiModelSourceValue
> = z.union([
  z.lazy(() => UpdateEmployeeApiModel4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSourceValue$ {
  /** @deprecated use `UpdateEmployeeApiModelSourceValue$inboundSchema` instead. */
  export const inboundSchema = UpdateEmployeeApiModelSourceValue$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSourceValue$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSourceValue$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModelSourceValue$Outbound;
}

export function updateEmployeeApiModelSourceValueToJSON(
  updateEmployeeApiModelSourceValue: UpdateEmployeeApiModelSourceValue,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSourceValue$outboundSchema.parse(
      updateEmployeeApiModelSourceValue,
    ),
  );
}

export function updateEmployeeApiModelSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEmployeeApiModelSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEmployeeApiModelSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmployeeApiModelSourceValue' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelValue$inboundSchema: z.ZodType<
  UpdateEmployeeApiModelValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(UpdateEmployeeApiModelValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const UpdateEmployeeApiModelValue$outboundSchema: z.ZodType<
  UpdateEmployeeApiModelValueOpen,
  z.ZodTypeDef,
  UpdateEmployeeApiModelValueOpen
> = z.union([
  z.nativeEnum(UpdateEmployeeApiModelValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelValue$ {
  /** @deprecated use `UpdateEmployeeApiModelValue$inboundSchema` instead. */
  export const inboundSchema = UpdateEmployeeApiModelValue$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelValue$outboundSchema` instead. */
  export const outboundSchema = UpdateEmployeeApiModelValue$outboundSchema;
}

/** @internal */
export const UpdateEmployeeApiModelEmploymentContractType$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelEmploymentContractType,
    z.ZodTypeDef,
    unknown
  > = z.object({
    source_value: z.nullable(
      z.union([
        z.lazy(() => UpdateEmployeeApiModel4$inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
        z.array(z.any()),
      ]),
    ).optional(),
    value: z.nullable(UpdateEmployeeApiModelValue$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "source_value": "sourceValue",
    });
  });

/** @internal */
export type UpdateEmployeeApiModelEmploymentContractType$Outbound = {
  source_value?:
    | UpdateEmployeeApiModel4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const UpdateEmployeeApiModelEmploymentContractType$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelEmploymentContractType$Outbound,
    z.ZodTypeDef,
    UpdateEmployeeApiModelEmploymentContractType
  > = z.object({
    sourceValue: z.nullable(
      z.union([
        z.lazy(() => UpdateEmployeeApiModel4$outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
        z.array(z.any()),
      ]),
    ).optional(),
    value: z.nullable(UpdateEmployeeApiModelValue$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      sourceValue: "source_value",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelEmploymentContractType$ {
  /** @deprecated use `UpdateEmployeeApiModelEmploymentContractType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelEmploymentContractType$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelEmploymentContractType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelEmploymentContractType$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelEmploymentContractType$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModelEmploymentContractType$Outbound;
}

export function updateEmployeeApiModelEmploymentContractTypeToJSON(
  updateEmployeeApiModelEmploymentContractType:
    UpdateEmployeeApiModelEmploymentContractType,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelEmploymentContractType$outboundSchema.parse(
      updateEmployeeApiModelEmploymentContractType,
    ),
  );
}

export function updateEmployeeApiModelEmploymentContractTypeFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEmployeeApiModelEmploymentContractType,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelEmploymentContractType$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateEmployeeApiModelEmploymentContractType' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemas4$inboundSchema: z.ZodType<
  UpdateEmployeeApiModelSchemas4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateEmployeeApiModelSchemas4$Outbound = {};

/** @internal */
export const UpdateEmployeeApiModelSchemas4$outboundSchema: z.ZodType<
  UpdateEmployeeApiModelSchemas4$Outbound,
  z.ZodTypeDef,
  UpdateEmployeeApiModelSchemas4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemas4$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemas4$inboundSchema` instead. */
  export const inboundSchema = UpdateEmployeeApiModelSchemas4$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemas4$outboundSchema` instead. */
  export const outboundSchema = UpdateEmployeeApiModelSchemas4$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemas4$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModelSchemas4$Outbound;
}

export function updateEmployeeApiModelSchemas4ToJSON(
  updateEmployeeApiModelSchemas4: UpdateEmployeeApiModelSchemas4,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemas4$outboundSchema.parse(
      updateEmployeeApiModelSchemas4,
    ),
  );
}

export function updateEmployeeApiModelSchemas4FromJSON(
  jsonString: string,
): SafeParseResult<UpdateEmployeeApiModelSchemas4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEmployeeApiModelSchemas4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmployeeApiModelSchemas4' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasSourceValue$inboundSchema: z.ZodType<
  UpdateEmployeeApiModelSchemasSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateEmployeeApiModelSchemas4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type UpdateEmployeeApiModelSchemasSourceValue$Outbound =
  | UpdateEmployeeApiModelSchemas4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const UpdateEmployeeApiModelSchemasSourceValue$outboundSchema: z.ZodType<
  UpdateEmployeeApiModelSchemasSourceValue$Outbound,
  z.ZodTypeDef,
  UpdateEmployeeApiModelSchemasSourceValue
> = z.union([
  z.lazy(() => UpdateEmployeeApiModelSchemas4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasSourceValue$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasSourceValue$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasSourceValue$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasSourceValue$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModelSchemasSourceValue$Outbound;
}

export function updateEmployeeApiModelSchemasSourceValueToJSON(
  updateEmployeeApiModelSchemasSourceValue:
    UpdateEmployeeApiModelSchemasSourceValue,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemasSourceValue$outboundSchema.parse(
      updateEmployeeApiModelSchemasSourceValue,
    ),
  );
}

export function updateEmployeeApiModelSchemasSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEmployeeApiModelSchemasSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelSchemasSourceValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateEmployeeApiModelSchemasSourceValue' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasValue$inboundSchema: z.ZodType<
  UpdateEmployeeApiModelSchemasValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(UpdateEmployeeApiModelSchemasValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const UpdateEmployeeApiModelSchemasValue$outboundSchema: z.ZodType<
  UpdateEmployeeApiModelSchemasValueOpen,
  z.ZodTypeDef,
  UpdateEmployeeApiModelSchemasValueOpen
> = z.union([
  z.nativeEnum(UpdateEmployeeApiModelSchemasValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasValue$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasValue$inboundSchema` instead. */
  export const inboundSchema = UpdateEmployeeApiModelSchemasValue$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasValue$outboundSchema;
}

/** @internal */
export const UpdateEmployeeApiModelEmploymentStatus$inboundSchema: z.ZodType<
  UpdateEmployeeApiModelEmploymentStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => UpdateEmployeeApiModelSchemas4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(UpdateEmployeeApiModelSchemasValue$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type UpdateEmployeeApiModelEmploymentStatus$Outbound = {
  source_value?:
    | UpdateEmployeeApiModelSchemas4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const UpdateEmployeeApiModelEmploymentStatus$outboundSchema: z.ZodType<
  UpdateEmployeeApiModelEmploymentStatus$Outbound,
  z.ZodTypeDef,
  UpdateEmployeeApiModelEmploymentStatus
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => UpdateEmployeeApiModelSchemas4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(UpdateEmployeeApiModelSchemasValue$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelEmploymentStatus$ {
  /** @deprecated use `UpdateEmployeeApiModelEmploymentStatus$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelEmploymentStatus$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelEmploymentStatus$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelEmploymentStatus$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelEmploymentStatus$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModelEmploymentStatus$Outbound;
}

export function updateEmployeeApiModelEmploymentStatusToJSON(
  updateEmployeeApiModelEmploymentStatus:
    UpdateEmployeeApiModelEmploymentStatus,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelEmploymentStatus$outboundSchema.parse(
      updateEmployeeApiModelEmploymentStatus,
    ),
  );
}

export function updateEmployeeApiModelEmploymentStatusFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEmployeeApiModelEmploymentStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelEmploymentStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmployeeApiModelEmploymentStatus' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasEmploymentType4$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasEmploymentType4,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type UpdateEmployeeApiModelSchemasEmploymentType4$Outbound = {};

/** @internal */
export const UpdateEmployeeApiModelSchemasEmploymentType4$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasEmploymentType4$Outbound,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasEmploymentType4
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasEmploymentType4$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasEmploymentType4$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasEmploymentType4$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasEmploymentType4$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasEmploymentType4$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasEmploymentType4$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModelSchemasEmploymentType4$Outbound;
}

export function updateEmployeeApiModelSchemasEmploymentType4ToJSON(
  updateEmployeeApiModelSchemasEmploymentType4:
    UpdateEmployeeApiModelSchemasEmploymentType4,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemasEmploymentType4$outboundSchema.parse(
      updateEmployeeApiModelSchemasEmploymentType4,
    ),
  );
}

export function updateEmployeeApiModelSchemasEmploymentType4FromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEmployeeApiModelSchemasEmploymentType4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelSchemasEmploymentType4$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateEmployeeApiModelSchemasEmploymentType4' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasEmploymentTypeSourceValue$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasEmploymentTypeSourceValue,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => UpdateEmployeeApiModelSchemasEmploymentType4$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/** @internal */
export type UpdateEmployeeApiModelSchemasEmploymentTypeSourceValue$Outbound =
  | UpdateEmployeeApiModelSchemasEmploymentType4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const UpdateEmployeeApiModelSchemasEmploymentTypeSourceValue$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasEmploymentTypeSourceValue$Outbound,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasEmploymentTypeSourceValue
  > = z.union([
    z.lazy(() => UpdateEmployeeApiModelSchemasEmploymentType4$outboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasEmploymentTypeSourceValue$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasEmploymentTypeSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasEmploymentTypeSourceValue$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasEmploymentTypeSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasEmploymentTypeSourceValue$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasEmploymentTypeSourceValue$Outbound` instead. */
  export type Outbound =
    UpdateEmployeeApiModelSchemasEmploymentTypeSourceValue$Outbound;
}

export function updateEmployeeApiModelSchemasEmploymentTypeSourceValueToJSON(
  updateEmployeeApiModelSchemasEmploymentTypeSourceValue:
    UpdateEmployeeApiModelSchemasEmploymentTypeSourceValue,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemasEmploymentTypeSourceValue$outboundSchema.parse(
      updateEmployeeApiModelSchemasEmploymentTypeSourceValue,
    ),
  );
}

export function updateEmployeeApiModelSchemasEmploymentTypeSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEmployeeApiModelSchemasEmploymentTypeSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelSchemasEmploymentTypeSourceValue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmployeeApiModelSchemasEmploymentTypeSourceValue' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasEmploymentTypeValue$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasEmploymentTypeValueOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(UpdateEmployeeApiModelSchemasEmploymentTypeValue),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const UpdateEmployeeApiModelSchemasEmploymentTypeValue$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasEmploymentTypeValueOpen,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasEmploymentTypeValueOpen
  > = z.union([
    z.nativeEnum(UpdateEmployeeApiModelSchemasEmploymentTypeValue),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasEmploymentTypeValue$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasEmploymentTypeValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasEmploymentTypeValue$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasEmploymentTypeValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasEmploymentTypeValue$outboundSchema;
}

/** @internal */
export const UpdateEmployeeApiModelEmploymentType$inboundSchema: z.ZodType<
  UpdateEmployeeApiModelEmploymentType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => UpdateEmployeeApiModelSchemasEmploymentType4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(
    UpdateEmployeeApiModelSchemasEmploymentTypeValue$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type UpdateEmployeeApiModelEmploymentType$Outbound = {
  source_value?:
    | UpdateEmployeeApiModelSchemasEmploymentType4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const UpdateEmployeeApiModelEmploymentType$outboundSchema: z.ZodType<
  UpdateEmployeeApiModelEmploymentType$Outbound,
  z.ZodTypeDef,
  UpdateEmployeeApiModelEmploymentType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => UpdateEmployeeApiModelSchemasEmploymentType4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(
    UpdateEmployeeApiModelSchemasEmploymentTypeValue$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelEmploymentType$ {
  /** @deprecated use `UpdateEmployeeApiModelEmploymentType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelEmploymentType$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelEmploymentType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelEmploymentType$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelEmploymentType$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModelEmploymentType$Outbound;
}

export function updateEmployeeApiModelEmploymentTypeToJSON(
  updateEmployeeApiModelEmploymentType: UpdateEmployeeApiModelEmploymentType,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelEmploymentType$outboundSchema.parse(
      updateEmployeeApiModelEmploymentType,
    ),
  );
}

export function updateEmployeeApiModelEmploymentTypeFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEmployeeApiModelEmploymentType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelEmploymentType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmployeeApiModelEmploymentType' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasEthnicity4$inboundSchema: z.ZodType<
  UpdateEmployeeApiModelSchemasEthnicity4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateEmployeeApiModelSchemasEthnicity4$Outbound = {};

/** @internal */
export const UpdateEmployeeApiModelSchemasEthnicity4$outboundSchema: z.ZodType<
  UpdateEmployeeApiModelSchemasEthnicity4$Outbound,
  z.ZodTypeDef,
  UpdateEmployeeApiModelSchemasEthnicity4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasEthnicity4$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasEthnicity4$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasEthnicity4$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasEthnicity4$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasEthnicity4$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasEthnicity4$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModelSchemasEthnicity4$Outbound;
}

export function updateEmployeeApiModelSchemasEthnicity4ToJSON(
  updateEmployeeApiModelSchemasEthnicity4:
    UpdateEmployeeApiModelSchemasEthnicity4,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemasEthnicity4$outboundSchema.parse(
      updateEmployeeApiModelSchemasEthnicity4,
    ),
  );
}

export function updateEmployeeApiModelSchemasEthnicity4FromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEmployeeApiModelSchemasEthnicity4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelSchemasEthnicity4$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateEmployeeApiModelSchemasEthnicity4' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasEthnicitySourceValue$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasEthnicitySourceValue,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => UpdateEmployeeApiModelSchemasEthnicity4$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/** @internal */
export type UpdateEmployeeApiModelSchemasEthnicitySourceValue$Outbound =
  | UpdateEmployeeApiModelSchemasEthnicity4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const UpdateEmployeeApiModelSchemasEthnicitySourceValue$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasEthnicitySourceValue$Outbound,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasEthnicitySourceValue
  > = z.union([
    z.lazy(() => UpdateEmployeeApiModelSchemasEthnicity4$outboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasEthnicitySourceValue$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasEthnicitySourceValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasEthnicitySourceValue$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasEthnicitySourceValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasEthnicitySourceValue$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasEthnicitySourceValue$Outbound` instead. */
  export type Outbound =
    UpdateEmployeeApiModelSchemasEthnicitySourceValue$Outbound;
}

export function updateEmployeeApiModelSchemasEthnicitySourceValueToJSON(
  updateEmployeeApiModelSchemasEthnicitySourceValue:
    UpdateEmployeeApiModelSchemasEthnicitySourceValue,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemasEthnicitySourceValue$outboundSchema.parse(
      updateEmployeeApiModelSchemasEthnicitySourceValue,
    ),
  );
}

export function updateEmployeeApiModelSchemasEthnicitySourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEmployeeApiModelSchemasEthnicitySourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelSchemasEthnicitySourceValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateEmployeeApiModelSchemasEthnicitySourceValue' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasEthnicityValue$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasEthnicityValueOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(UpdateEmployeeApiModelSchemasEthnicityValue),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const UpdateEmployeeApiModelSchemasEthnicityValue$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasEthnicityValueOpen,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasEthnicityValueOpen
  > = z.union([
    z.nativeEnum(UpdateEmployeeApiModelSchemasEthnicityValue),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasEthnicityValue$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasEthnicityValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasEthnicityValue$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasEthnicityValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasEthnicityValue$outboundSchema;
}

/** @internal */
export const UpdateEmployeeApiModelEthnicity$inboundSchema: z.ZodType<
  UpdateEmployeeApiModelEthnicity,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => UpdateEmployeeApiModelSchemasEthnicity4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(UpdateEmployeeApiModelSchemasEthnicityValue$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type UpdateEmployeeApiModelEthnicity$Outbound = {
  source_value?:
    | UpdateEmployeeApiModelSchemasEthnicity4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const UpdateEmployeeApiModelEthnicity$outboundSchema: z.ZodType<
  UpdateEmployeeApiModelEthnicity$Outbound,
  z.ZodTypeDef,
  UpdateEmployeeApiModelEthnicity
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => UpdateEmployeeApiModelSchemasEthnicity4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(UpdateEmployeeApiModelSchemasEthnicityValue$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelEthnicity$ {
  /** @deprecated use `UpdateEmployeeApiModelEthnicity$inboundSchema` instead. */
  export const inboundSchema = UpdateEmployeeApiModelEthnicity$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelEthnicity$outboundSchema` instead. */
  export const outboundSchema = UpdateEmployeeApiModelEthnicity$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelEthnicity$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModelEthnicity$Outbound;
}

export function updateEmployeeApiModelEthnicityToJSON(
  updateEmployeeApiModelEthnicity: UpdateEmployeeApiModelEthnicity,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelEthnicity$outboundSchema.parse(
      updateEmployeeApiModelEthnicity,
    ),
  );
}

export function updateEmployeeApiModelEthnicityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEmployeeApiModelEthnicity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEmployeeApiModelEthnicity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmployeeApiModelEthnicity' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasGender4$inboundSchema: z.ZodType<
  UpdateEmployeeApiModelSchemasGender4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateEmployeeApiModelSchemasGender4$Outbound = {};

/** @internal */
export const UpdateEmployeeApiModelSchemasGender4$outboundSchema: z.ZodType<
  UpdateEmployeeApiModelSchemasGender4$Outbound,
  z.ZodTypeDef,
  UpdateEmployeeApiModelSchemasGender4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasGender4$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasGender4$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasGender4$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasGender4$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasGender4$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasGender4$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModelSchemasGender4$Outbound;
}

export function updateEmployeeApiModelSchemasGender4ToJSON(
  updateEmployeeApiModelSchemasGender4: UpdateEmployeeApiModelSchemasGender4,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemasGender4$outboundSchema.parse(
      updateEmployeeApiModelSchemasGender4,
    ),
  );
}

export function updateEmployeeApiModelSchemasGender4FromJSON(
  jsonString: string,
): SafeParseResult<UpdateEmployeeApiModelSchemasGender4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelSchemasGender4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmployeeApiModelSchemasGender4' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasGenderSourceValue$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasGenderSourceValue,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => UpdateEmployeeApiModelSchemasGender4$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/** @internal */
export type UpdateEmployeeApiModelSchemasGenderSourceValue$Outbound =
  | UpdateEmployeeApiModelSchemasGender4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const UpdateEmployeeApiModelSchemasGenderSourceValue$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasGenderSourceValue$Outbound,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasGenderSourceValue
  > = z.union([
    z.lazy(() => UpdateEmployeeApiModelSchemasGender4$outboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasGenderSourceValue$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasGenderSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasGenderSourceValue$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasGenderSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasGenderSourceValue$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasGenderSourceValue$Outbound` instead. */
  export type Outbound =
    UpdateEmployeeApiModelSchemasGenderSourceValue$Outbound;
}

export function updateEmployeeApiModelSchemasGenderSourceValueToJSON(
  updateEmployeeApiModelSchemasGenderSourceValue:
    UpdateEmployeeApiModelSchemasGenderSourceValue,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemasGenderSourceValue$outboundSchema.parse(
      updateEmployeeApiModelSchemasGenderSourceValue,
    ),
  );
}

export function updateEmployeeApiModelSchemasGenderSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEmployeeApiModelSchemasGenderSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelSchemasGenderSourceValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateEmployeeApiModelSchemasGenderSourceValue' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasGenderValue$inboundSchema: z.ZodType<
  UpdateEmployeeApiModelSchemasGenderValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(UpdateEmployeeApiModelSchemasGenderValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const UpdateEmployeeApiModelSchemasGenderValue$outboundSchema: z.ZodType<
  UpdateEmployeeApiModelSchemasGenderValueOpen,
  z.ZodTypeDef,
  UpdateEmployeeApiModelSchemasGenderValueOpen
> = z.union([
  z.nativeEnum(UpdateEmployeeApiModelSchemasGenderValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasGenderValue$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasGenderValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasGenderValue$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasGenderValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasGenderValue$outboundSchema;
}

/** @internal */
export const UpdateEmployeeApiModelGender$inboundSchema: z.ZodType<
  UpdateEmployeeApiModelGender,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => UpdateEmployeeApiModelSchemasGender4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(UpdateEmployeeApiModelSchemasGenderValue$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type UpdateEmployeeApiModelGender$Outbound = {
  source_value?:
    | UpdateEmployeeApiModelSchemasGender4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const UpdateEmployeeApiModelGender$outboundSchema: z.ZodType<
  UpdateEmployeeApiModelGender$Outbound,
  z.ZodTypeDef,
  UpdateEmployeeApiModelGender
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => UpdateEmployeeApiModelSchemasGender4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(UpdateEmployeeApiModelSchemasGenderValue$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelGender$ {
  /** @deprecated use `UpdateEmployeeApiModelGender$inboundSchema` instead. */
  export const inboundSchema = UpdateEmployeeApiModelGender$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelGender$outboundSchema` instead. */
  export const outboundSchema = UpdateEmployeeApiModelGender$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelGender$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModelGender$Outbound;
}

export function updateEmployeeApiModelGenderToJSON(
  updateEmployeeApiModelGender: UpdateEmployeeApiModelGender,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelGender$outboundSchema.parse(
      updateEmployeeApiModelGender,
    ),
  );
}

export function updateEmployeeApiModelGenderFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEmployeeApiModelGender, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEmployeeApiModelGender$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmployeeApiModelGender' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasHomeLocation4$inboundSchema:
  z.ZodType<UpdateEmployeeApiModelSchemasHomeLocation4, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type UpdateEmployeeApiModelSchemasHomeLocation4$Outbound = {};

/** @internal */
export const UpdateEmployeeApiModelSchemasHomeLocation4$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasHomeLocation4$Outbound,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasHomeLocation4
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasHomeLocation4$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasHomeLocation4$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasHomeLocation4$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasHomeLocation4$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasHomeLocation4$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasHomeLocation4$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModelSchemasHomeLocation4$Outbound;
}

export function updateEmployeeApiModelSchemasHomeLocation4ToJSON(
  updateEmployeeApiModelSchemasHomeLocation4:
    UpdateEmployeeApiModelSchemasHomeLocation4,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemasHomeLocation4$outboundSchema.parse(
      updateEmployeeApiModelSchemasHomeLocation4,
    ),
  );
}

export function updateEmployeeApiModelSchemasHomeLocation4FromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEmployeeApiModelSchemasHomeLocation4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelSchemasHomeLocation4$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateEmployeeApiModelSchemasHomeLocation4' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasHomeLocationSourceValue$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasHomeLocationSourceValue,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => UpdateEmployeeApiModelSchemasHomeLocation4$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/** @internal */
export type UpdateEmployeeApiModelSchemasHomeLocationSourceValue$Outbound =
  | UpdateEmployeeApiModelSchemasHomeLocation4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const UpdateEmployeeApiModelSchemasHomeLocationSourceValue$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasHomeLocationSourceValue$Outbound,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasHomeLocationSourceValue
  > = z.union([
    z.lazy(() => UpdateEmployeeApiModelSchemasHomeLocation4$outboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasHomeLocationSourceValue$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasHomeLocationSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasHomeLocationSourceValue$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasHomeLocationSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasHomeLocationSourceValue$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasHomeLocationSourceValue$Outbound` instead. */
  export type Outbound =
    UpdateEmployeeApiModelSchemasHomeLocationSourceValue$Outbound;
}

export function updateEmployeeApiModelSchemasHomeLocationSourceValueToJSON(
  updateEmployeeApiModelSchemasHomeLocationSourceValue:
    UpdateEmployeeApiModelSchemasHomeLocationSourceValue,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemasHomeLocationSourceValue$outboundSchema.parse(
      updateEmployeeApiModelSchemasHomeLocationSourceValue,
    ),
  );
}

export function updateEmployeeApiModelSchemasHomeLocationSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEmployeeApiModelSchemasHomeLocationSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelSchemasHomeLocationSourceValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateEmployeeApiModelSchemasHomeLocationSourceValue' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasHomeLocationValue$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasHomeLocationValueOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(UpdateEmployeeApiModelSchemasHomeLocationValue),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const UpdateEmployeeApiModelSchemasHomeLocationValue$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasHomeLocationValueOpen,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasHomeLocationValueOpen
  > = z.union([
    z.nativeEnum(UpdateEmployeeApiModelSchemasHomeLocationValue),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasHomeLocationValue$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasHomeLocationValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasHomeLocationValue$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasHomeLocationValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasHomeLocationValue$outboundSchema;
}

/** @internal */
export const UpdateEmployeeApiModelCountry$inboundSchema: z.ZodType<
  UpdateEmployeeApiModelCountry,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => UpdateEmployeeApiModelSchemasHomeLocation4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(
    UpdateEmployeeApiModelSchemasHomeLocationValue$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type UpdateEmployeeApiModelCountry$Outbound = {
  source_value?:
    | UpdateEmployeeApiModelSchemasHomeLocation4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const UpdateEmployeeApiModelCountry$outboundSchema: z.ZodType<
  UpdateEmployeeApiModelCountry$Outbound,
  z.ZodTypeDef,
  UpdateEmployeeApiModelCountry
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => UpdateEmployeeApiModelSchemasHomeLocation4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(
    UpdateEmployeeApiModelSchemasHomeLocationValue$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelCountry$ {
  /** @deprecated use `UpdateEmployeeApiModelCountry$inboundSchema` instead. */
  export const inboundSchema = UpdateEmployeeApiModelCountry$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelCountry$outboundSchema` instead. */
  export const outboundSchema = UpdateEmployeeApiModelCountry$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelCountry$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModelCountry$Outbound;
}

export function updateEmployeeApiModelCountryToJSON(
  updateEmployeeApiModelCountry: UpdateEmployeeApiModelCountry,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelCountry$outboundSchema.parse(
      updateEmployeeApiModelCountry,
    ),
  );
}

export function updateEmployeeApiModelCountryFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEmployeeApiModelCountry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEmployeeApiModelCountry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmployeeApiModelCountry' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasHomeLocationState4$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasHomeLocationState4,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type UpdateEmployeeApiModelSchemasHomeLocationState4$Outbound = {};

/** @internal */
export const UpdateEmployeeApiModelSchemasHomeLocationState4$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasHomeLocationState4$Outbound,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasHomeLocationState4
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasHomeLocationState4$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasHomeLocationState4$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasHomeLocationState4$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasHomeLocationState4$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasHomeLocationState4$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasHomeLocationState4$Outbound` instead. */
  export type Outbound =
    UpdateEmployeeApiModelSchemasHomeLocationState4$Outbound;
}

export function updateEmployeeApiModelSchemasHomeLocationState4ToJSON(
  updateEmployeeApiModelSchemasHomeLocationState4:
    UpdateEmployeeApiModelSchemasHomeLocationState4,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemasHomeLocationState4$outboundSchema.parse(
      updateEmployeeApiModelSchemasHomeLocationState4,
    ),
  );
}

export function updateEmployeeApiModelSchemasHomeLocationState4FromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEmployeeApiModelSchemasHomeLocationState4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelSchemasHomeLocationState4$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateEmployeeApiModelSchemasHomeLocationState4' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasHomeLocationStateSourceValue$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasHomeLocationStateSourceValue,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => UpdateEmployeeApiModelSchemasHomeLocationState4$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/** @internal */
export type UpdateEmployeeApiModelSchemasHomeLocationStateSourceValue$Outbound =
  | UpdateEmployeeApiModelSchemasHomeLocationState4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const UpdateEmployeeApiModelSchemasHomeLocationStateSourceValue$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasHomeLocationStateSourceValue$Outbound,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasHomeLocationStateSourceValue
  > = z.union([
    z.lazy(() =>
      UpdateEmployeeApiModelSchemasHomeLocationState4$outboundSchema
    ),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasHomeLocationStateSourceValue$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasHomeLocationStateSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasHomeLocationStateSourceValue$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasHomeLocationStateSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasHomeLocationStateSourceValue$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasHomeLocationStateSourceValue$Outbound` instead. */
  export type Outbound =
    UpdateEmployeeApiModelSchemasHomeLocationStateSourceValue$Outbound;
}

export function updateEmployeeApiModelSchemasHomeLocationStateSourceValueToJSON(
  updateEmployeeApiModelSchemasHomeLocationStateSourceValue:
    UpdateEmployeeApiModelSchemasHomeLocationStateSourceValue,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemasHomeLocationStateSourceValue$outboundSchema
      .parse(updateEmployeeApiModelSchemasHomeLocationStateSourceValue),
  );
}

export function updateEmployeeApiModelSchemasHomeLocationStateSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEmployeeApiModelSchemasHomeLocationStateSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelSchemasHomeLocationStateSourceValue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmployeeApiModelSchemasHomeLocationStateSourceValue' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasHomeLocationStateValue$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasHomeLocationStateValueOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(UpdateEmployeeApiModelSchemasHomeLocationStateValue),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const UpdateEmployeeApiModelSchemasHomeLocationStateValue$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasHomeLocationStateValueOpen,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasHomeLocationStateValueOpen
  > = z.union([
    z.nativeEnum(UpdateEmployeeApiModelSchemasHomeLocationStateValue),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasHomeLocationStateValue$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasHomeLocationStateValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasHomeLocationStateValue$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasHomeLocationStateValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasHomeLocationStateValue$outboundSchema;
}

/** @internal */
export const UpdateEmployeeApiModelState$inboundSchema: z.ZodType<
  UpdateEmployeeApiModelState,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() =>
        UpdateEmployeeApiModelSchemasHomeLocationState4$inboundSchema
      ),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(
    UpdateEmployeeApiModelSchemasHomeLocationStateValue$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type UpdateEmployeeApiModelState$Outbound = {
  source_value?:
    | UpdateEmployeeApiModelSchemasHomeLocationState4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const UpdateEmployeeApiModelState$outboundSchema: z.ZodType<
  UpdateEmployeeApiModelState$Outbound,
  z.ZodTypeDef,
  UpdateEmployeeApiModelState
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() =>
        UpdateEmployeeApiModelSchemasHomeLocationState4$outboundSchema
      ),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(
    UpdateEmployeeApiModelSchemasHomeLocationStateValue$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelState$ {
  /** @deprecated use `UpdateEmployeeApiModelState$inboundSchema` instead. */
  export const inboundSchema = UpdateEmployeeApiModelState$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelState$outboundSchema` instead. */
  export const outboundSchema = UpdateEmployeeApiModelState$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelState$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModelState$Outbound;
}

export function updateEmployeeApiModelStateToJSON(
  updateEmployeeApiModelState: UpdateEmployeeApiModelState,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelState$outboundSchema.parse(
      updateEmployeeApiModelState,
    ),
  );
}

export function updateEmployeeApiModelStateFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEmployeeApiModelState, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEmployeeApiModelState$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmployeeApiModelState' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelHomeLocation$inboundSchema: z.ZodType<
  UpdateEmployeeApiModelHomeLocation,
  z.ZodTypeDef,
  unknown
> = z.object({
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.lazy(() => UpdateEmployeeApiModelCountry$inboundSchema))
    .optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  passthrough: z.nullable(z.record(z.any())).optional(),
  phone_number: z.nullable(z.string()).optional(),
  state: z.nullable(z.lazy(() => UpdateEmployeeApiModelState$inboundSchema))
    .optional(),
  street_1: z.nullable(z.string()).optional(),
  street_2: z.nullable(z.string()).optional(),
  zip_code: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "phone_number": "phoneNumber",
    "street_1": "street1",
    "street_2": "street2",
    "zip_code": "zipCode",
  });
});

/** @internal */
export type UpdateEmployeeApiModelHomeLocation$Outbound = {
  city?: string | null | undefined;
  country?: UpdateEmployeeApiModelCountry$Outbound | null | undefined;
  id?: string | null | undefined;
  name?: string | null | undefined;
  passthrough?: { [k: string]: any } | null | undefined;
  phone_number?: string | null | undefined;
  state?: UpdateEmployeeApiModelState$Outbound | null | undefined;
  street_1?: string | null | undefined;
  street_2?: string | null | undefined;
  zip_code?: string | null | undefined;
};

/** @internal */
export const UpdateEmployeeApiModelHomeLocation$outboundSchema: z.ZodType<
  UpdateEmployeeApiModelHomeLocation$Outbound,
  z.ZodTypeDef,
  UpdateEmployeeApiModelHomeLocation
> = z.object({
  city: z.nullable(z.string()).optional(),
  country: z.nullable(
    z.lazy(() => UpdateEmployeeApiModelCountry$outboundSchema),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  passthrough: z.nullable(z.record(z.any())).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  state: z.nullable(z.lazy(() => UpdateEmployeeApiModelState$outboundSchema))
    .optional(),
  street1: z.nullable(z.string()).optional(),
  street2: z.nullable(z.string()).optional(),
  zipCode: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    phoneNumber: "phone_number",
    street1: "street_1",
    street2: "street_2",
    zipCode: "zip_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelHomeLocation$ {
  /** @deprecated use `UpdateEmployeeApiModelHomeLocation$inboundSchema` instead. */
  export const inboundSchema = UpdateEmployeeApiModelHomeLocation$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelHomeLocation$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelHomeLocation$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelHomeLocation$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModelHomeLocation$Outbound;
}

export function updateEmployeeApiModelHomeLocationToJSON(
  updateEmployeeApiModelHomeLocation: UpdateEmployeeApiModelHomeLocation,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelHomeLocation$outboundSchema.parse(
      updateEmployeeApiModelHomeLocation,
    ),
  );
}

export function updateEmployeeApiModelHomeLocationFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEmployeeApiModelHomeLocation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelHomeLocation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmployeeApiModelHomeLocation' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasMaritalStatus4$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasMaritalStatus4,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type UpdateEmployeeApiModelSchemasMaritalStatus4$Outbound = {};

/** @internal */
export const UpdateEmployeeApiModelSchemasMaritalStatus4$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasMaritalStatus4$Outbound,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasMaritalStatus4
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasMaritalStatus4$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasMaritalStatus4$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasMaritalStatus4$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasMaritalStatus4$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasMaritalStatus4$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasMaritalStatus4$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModelSchemasMaritalStatus4$Outbound;
}

export function updateEmployeeApiModelSchemasMaritalStatus4ToJSON(
  updateEmployeeApiModelSchemasMaritalStatus4:
    UpdateEmployeeApiModelSchemasMaritalStatus4,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemasMaritalStatus4$outboundSchema.parse(
      updateEmployeeApiModelSchemasMaritalStatus4,
    ),
  );
}

export function updateEmployeeApiModelSchemasMaritalStatus4FromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEmployeeApiModelSchemasMaritalStatus4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelSchemasMaritalStatus4$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateEmployeeApiModelSchemasMaritalStatus4' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasMaritalStatusSourceValue$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasMaritalStatusSourceValue,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => UpdateEmployeeApiModelSchemasMaritalStatus4$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/** @internal */
export type UpdateEmployeeApiModelSchemasMaritalStatusSourceValue$Outbound =
  | UpdateEmployeeApiModelSchemasMaritalStatus4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const UpdateEmployeeApiModelSchemasMaritalStatusSourceValue$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasMaritalStatusSourceValue$Outbound,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasMaritalStatusSourceValue
  > = z.union([
    z.lazy(() => UpdateEmployeeApiModelSchemasMaritalStatus4$outboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasMaritalStatusSourceValue$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasMaritalStatusSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasMaritalStatusSourceValue$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasMaritalStatusSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasMaritalStatusSourceValue$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasMaritalStatusSourceValue$Outbound` instead. */
  export type Outbound =
    UpdateEmployeeApiModelSchemasMaritalStatusSourceValue$Outbound;
}

export function updateEmployeeApiModelSchemasMaritalStatusSourceValueToJSON(
  updateEmployeeApiModelSchemasMaritalStatusSourceValue:
    UpdateEmployeeApiModelSchemasMaritalStatusSourceValue,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemasMaritalStatusSourceValue$outboundSchema.parse(
      updateEmployeeApiModelSchemasMaritalStatusSourceValue,
    ),
  );
}

export function updateEmployeeApiModelSchemasMaritalStatusSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEmployeeApiModelSchemasMaritalStatusSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelSchemasMaritalStatusSourceValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateEmployeeApiModelSchemasMaritalStatusSourceValue' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasMaritalStatusValue$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasMaritalStatusValueOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(UpdateEmployeeApiModelSchemasMaritalStatusValue),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const UpdateEmployeeApiModelSchemasMaritalStatusValue$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasMaritalStatusValueOpen,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasMaritalStatusValueOpen
  > = z.union([
    z.nativeEnum(UpdateEmployeeApiModelSchemasMaritalStatusValue),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasMaritalStatusValue$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasMaritalStatusValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasMaritalStatusValue$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasMaritalStatusValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasMaritalStatusValue$outboundSchema;
}

/** @internal */
export const UpdateEmployeeApiModelMaritalStatus$inboundSchema: z.ZodType<
  UpdateEmployeeApiModelMaritalStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => UpdateEmployeeApiModelSchemasMaritalStatus4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(
    UpdateEmployeeApiModelSchemasMaritalStatusValue$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type UpdateEmployeeApiModelMaritalStatus$Outbound = {
  source_value?:
    | UpdateEmployeeApiModelSchemasMaritalStatus4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const UpdateEmployeeApiModelMaritalStatus$outboundSchema: z.ZodType<
  UpdateEmployeeApiModelMaritalStatus$Outbound,
  z.ZodTypeDef,
  UpdateEmployeeApiModelMaritalStatus
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => UpdateEmployeeApiModelSchemasMaritalStatus4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(
    UpdateEmployeeApiModelSchemasMaritalStatusValue$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelMaritalStatus$ {
  /** @deprecated use `UpdateEmployeeApiModelMaritalStatus$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelMaritalStatus$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelMaritalStatus$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelMaritalStatus$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelMaritalStatus$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModelMaritalStatus$Outbound;
}

export function updateEmployeeApiModelMaritalStatusToJSON(
  updateEmployeeApiModelMaritalStatus: UpdateEmployeeApiModelMaritalStatus,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelMaritalStatus$outboundSchema.parse(
      updateEmployeeApiModelMaritalStatus,
    ),
  );
}

export function updateEmployeeApiModelMaritalStatusFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEmployeeApiModelMaritalStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelMaritalStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmployeeApiModelMaritalStatus' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasNationalIdentityNumber4$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasNationalIdentityNumber4,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type UpdateEmployeeApiModelSchemasNationalIdentityNumber4$Outbound = {};

/** @internal */
export const UpdateEmployeeApiModelSchemasNationalIdentityNumber4$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasNationalIdentityNumber4$Outbound,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasNationalIdentityNumber4
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasNationalIdentityNumber4$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasNationalIdentityNumber4$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasNationalIdentityNumber4$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasNationalIdentityNumber4$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasNationalIdentityNumber4$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasNationalIdentityNumber4$Outbound` instead. */
  export type Outbound =
    UpdateEmployeeApiModelSchemasNationalIdentityNumber4$Outbound;
}

export function updateEmployeeApiModelSchemasNationalIdentityNumber4ToJSON(
  updateEmployeeApiModelSchemasNationalIdentityNumber4:
    UpdateEmployeeApiModelSchemasNationalIdentityNumber4,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemasNationalIdentityNumber4$outboundSchema.parse(
      updateEmployeeApiModelSchemasNationalIdentityNumber4,
    ),
  );
}

export function updateEmployeeApiModelSchemasNationalIdentityNumber4FromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEmployeeApiModelSchemasNationalIdentityNumber4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelSchemasNationalIdentityNumber4$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateEmployeeApiModelSchemasNationalIdentityNumber4' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasNationalIdentityNumberSourceValue$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasNationalIdentityNumberSourceValue,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      UpdateEmployeeApiModelSchemasNationalIdentityNumber4$inboundSchema
    ),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/** @internal */
export type UpdateEmployeeApiModelSchemasNationalIdentityNumberSourceValue$Outbound =
  | UpdateEmployeeApiModelSchemasNationalIdentityNumber4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const UpdateEmployeeApiModelSchemasNationalIdentityNumberSourceValue$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasNationalIdentityNumberSourceValue$Outbound,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasNationalIdentityNumberSourceValue
  > = z.union([
    z.lazy(() =>
      UpdateEmployeeApiModelSchemasNationalIdentityNumber4$outboundSchema
    ),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasNationalIdentityNumberSourceValue$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasNationalIdentityNumberSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasNationalIdentityNumberSourceValue$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasNationalIdentityNumberSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasNationalIdentityNumberSourceValue$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasNationalIdentityNumberSourceValue$Outbound` instead. */
  export type Outbound =
    UpdateEmployeeApiModelSchemasNationalIdentityNumberSourceValue$Outbound;
}

export function updateEmployeeApiModelSchemasNationalIdentityNumberSourceValueToJSON(
  updateEmployeeApiModelSchemasNationalIdentityNumberSourceValue:
    UpdateEmployeeApiModelSchemasNationalIdentityNumberSourceValue,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemasNationalIdentityNumberSourceValue$outboundSchema
      .parse(updateEmployeeApiModelSchemasNationalIdentityNumberSourceValue),
  );
}

export function updateEmployeeApiModelSchemasNationalIdentityNumberSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEmployeeApiModelSchemasNationalIdentityNumberSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelSchemasNationalIdentityNumberSourceValue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmployeeApiModelSchemasNationalIdentityNumberSourceValue' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasNationalIdentityNumberValue$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasNationalIdentityNumberValueOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(UpdateEmployeeApiModelSchemasNationalIdentityNumberValue),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const UpdateEmployeeApiModelSchemasNationalIdentityNumberValue$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasNationalIdentityNumberValueOpen,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasNationalIdentityNumberValueOpen
  > = z.union([
    z.nativeEnum(UpdateEmployeeApiModelSchemasNationalIdentityNumberValue),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasNationalIdentityNumberValue$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasNationalIdentityNumberValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasNationalIdentityNumberValue$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasNationalIdentityNumberValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasNationalIdentityNumberValue$outboundSchema;
}

/** @internal */
export const UpdateEmployeeApiModelSchemasCountry$inboundSchema: z.ZodType<
  UpdateEmployeeApiModelSchemasCountry,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() =>
        UpdateEmployeeApiModelSchemasNationalIdentityNumber4$inboundSchema
      ),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(
    UpdateEmployeeApiModelSchemasNationalIdentityNumberValue$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type UpdateEmployeeApiModelSchemasCountry$Outbound = {
  source_value?:
    | UpdateEmployeeApiModelSchemasNationalIdentityNumber4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const UpdateEmployeeApiModelSchemasCountry$outboundSchema: z.ZodType<
  UpdateEmployeeApiModelSchemasCountry$Outbound,
  z.ZodTypeDef,
  UpdateEmployeeApiModelSchemasCountry
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() =>
        UpdateEmployeeApiModelSchemasNationalIdentityNumber4$outboundSchema
      ),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(
    UpdateEmployeeApiModelSchemasNationalIdentityNumberValue$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasCountry$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasCountry$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasCountry$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasCountry$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasCountry$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasCountry$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModelSchemasCountry$Outbound;
}

export function updateEmployeeApiModelSchemasCountryToJSON(
  updateEmployeeApiModelSchemasCountry: UpdateEmployeeApiModelSchemasCountry,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemasCountry$outboundSchema.parse(
      updateEmployeeApiModelSchemasCountry,
    ),
  );
}

export function updateEmployeeApiModelSchemasCountryFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEmployeeApiModelSchemasCountry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelSchemasCountry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmployeeApiModelSchemasCountry' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasNationalIdentityNumberType4$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasNationalIdentityNumberType4,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type UpdateEmployeeApiModelSchemasNationalIdentityNumberType4$Outbound =
  {};

/** @internal */
export const UpdateEmployeeApiModelSchemasNationalIdentityNumberType4$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasNationalIdentityNumberType4$Outbound,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasNationalIdentityNumberType4
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasNationalIdentityNumberType4$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasNationalIdentityNumberType4$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasNationalIdentityNumberType4$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasNationalIdentityNumberType4$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasNationalIdentityNumberType4$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasNationalIdentityNumberType4$Outbound` instead. */
  export type Outbound =
    UpdateEmployeeApiModelSchemasNationalIdentityNumberType4$Outbound;
}

export function updateEmployeeApiModelSchemasNationalIdentityNumberType4ToJSON(
  updateEmployeeApiModelSchemasNationalIdentityNumberType4:
    UpdateEmployeeApiModelSchemasNationalIdentityNumberType4,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemasNationalIdentityNumberType4$outboundSchema
      .parse(updateEmployeeApiModelSchemasNationalIdentityNumberType4),
  );
}

export function updateEmployeeApiModelSchemasNationalIdentityNumberType4FromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEmployeeApiModelSchemasNationalIdentityNumberType4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelSchemasNationalIdentityNumberType4$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmployeeApiModelSchemasNationalIdentityNumberType4' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeSourceValue$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeSourceValue,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      UpdateEmployeeApiModelSchemasNationalIdentityNumberType4$inboundSchema
    ),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/** @internal */
export type UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeSourceValue$Outbound =
  | UpdateEmployeeApiModelSchemasNationalIdentityNumberType4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeSourceValue$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeSourceValue$Outbound,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeSourceValue
  > = z.union([
    z.lazy(() =>
      UpdateEmployeeApiModelSchemasNationalIdentityNumberType4$outboundSchema
    ),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeSourceValue$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeSourceValue$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeSourceValue$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeSourceValue$Outbound` instead. */
  export type Outbound =
    UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeSourceValue$Outbound;
}

export function updateEmployeeApiModelSchemasNationalIdentityNumberTypeSourceValueToJSON(
  updateEmployeeApiModelSchemasNationalIdentityNumberTypeSourceValue:
    UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeSourceValue,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeSourceValue$outboundSchema
      .parse(
        updateEmployeeApiModelSchemasNationalIdentityNumberTypeSourceValue,
      ),
  );
}

export function updateEmployeeApiModelSchemasNationalIdentityNumberTypeSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeSourceValue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeSourceValue' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeValue$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeValueOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeValue,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeValue$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeValueOpen,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeValueOpen
  > = z.union([
    z.nativeEnum(UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeValue),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeValue$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeValue$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeValue$outboundSchema;
}

/** @internal */
export const UpdateEmployeeApiModelType$inboundSchema: z.ZodType<
  UpdateEmployeeApiModelType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() =>
        UpdateEmployeeApiModelSchemasNationalIdentityNumberType4$inboundSchema
      ),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(
    UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeValue$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type UpdateEmployeeApiModelType$Outbound = {
  source_value?:
    | UpdateEmployeeApiModelSchemasNationalIdentityNumberType4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const UpdateEmployeeApiModelType$outboundSchema: z.ZodType<
  UpdateEmployeeApiModelType$Outbound,
  z.ZodTypeDef,
  UpdateEmployeeApiModelType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() =>
        UpdateEmployeeApiModelSchemasNationalIdentityNumberType4$outboundSchema
      ),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(
    UpdateEmployeeApiModelSchemasNationalIdentityNumberTypeValue$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelType$ {
  /** @deprecated use `UpdateEmployeeApiModelType$inboundSchema` instead. */
  export const inboundSchema = UpdateEmployeeApiModelType$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelType$outboundSchema` instead. */
  export const outboundSchema = UpdateEmployeeApiModelType$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelType$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModelType$Outbound;
}

export function updateEmployeeApiModelTypeToJSON(
  updateEmployeeApiModelType: UpdateEmployeeApiModelType,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelType$outboundSchema.parse(updateEmployeeApiModelType),
  );
}

export function updateEmployeeApiModelTypeFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEmployeeApiModelType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEmployeeApiModelType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmployeeApiModelType' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelNationalIdentityNumber$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelNationalIdentityNumber,
    z.ZodTypeDef,
    unknown
  > = z.object({
    country: z.nullable(
      z.lazy(() => UpdateEmployeeApiModelSchemasCountry$inboundSchema),
    ).optional(),
    type: z.nullable(z.lazy(() => UpdateEmployeeApiModelType$inboundSchema))
      .optional(),
    value: z.nullable(z.string()).optional(),
  });

/** @internal */
export type UpdateEmployeeApiModelNationalIdentityNumber$Outbound = {
  country?: UpdateEmployeeApiModelSchemasCountry$Outbound | null | undefined;
  type?: UpdateEmployeeApiModelType$Outbound | null | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const UpdateEmployeeApiModelNationalIdentityNumber$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelNationalIdentityNumber$Outbound,
    z.ZodTypeDef,
    UpdateEmployeeApiModelNationalIdentityNumber
  > = z.object({
    country: z.nullable(
      z.lazy(() => UpdateEmployeeApiModelSchemasCountry$outboundSchema),
    ).optional(),
    type: z.nullable(z.lazy(() => UpdateEmployeeApiModelType$outboundSchema))
      .optional(),
    value: z.nullable(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelNationalIdentityNumber$ {
  /** @deprecated use `UpdateEmployeeApiModelNationalIdentityNumber$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelNationalIdentityNumber$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelNationalIdentityNumber$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelNationalIdentityNumber$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelNationalIdentityNumber$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModelNationalIdentityNumber$Outbound;
}

export function updateEmployeeApiModelNationalIdentityNumberToJSON(
  updateEmployeeApiModelNationalIdentityNumber:
    UpdateEmployeeApiModelNationalIdentityNumber,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelNationalIdentityNumber$outboundSchema.parse(
      updateEmployeeApiModelNationalIdentityNumber,
    ),
  );
}

export function updateEmployeeApiModelNationalIdentityNumberFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEmployeeApiModelNationalIdentityNumber,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelNationalIdentityNumber$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateEmployeeApiModelNationalIdentityNumber' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasPreferredLanguage4$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasPreferredLanguage4,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type UpdateEmployeeApiModelSchemasPreferredLanguage4$Outbound = {};

/** @internal */
export const UpdateEmployeeApiModelSchemasPreferredLanguage4$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasPreferredLanguage4$Outbound,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasPreferredLanguage4
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasPreferredLanguage4$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasPreferredLanguage4$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasPreferredLanguage4$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasPreferredLanguage4$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasPreferredLanguage4$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasPreferredLanguage4$Outbound` instead. */
  export type Outbound =
    UpdateEmployeeApiModelSchemasPreferredLanguage4$Outbound;
}

export function updateEmployeeApiModelSchemasPreferredLanguage4ToJSON(
  updateEmployeeApiModelSchemasPreferredLanguage4:
    UpdateEmployeeApiModelSchemasPreferredLanguage4,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemasPreferredLanguage4$outboundSchema.parse(
      updateEmployeeApiModelSchemasPreferredLanguage4,
    ),
  );
}

export function updateEmployeeApiModelSchemasPreferredLanguage4FromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEmployeeApiModelSchemasPreferredLanguage4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelSchemasPreferredLanguage4$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateEmployeeApiModelSchemasPreferredLanguage4' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasPreferredLanguageSourceValue$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasPreferredLanguageSourceValue,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => UpdateEmployeeApiModelSchemasPreferredLanguage4$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/** @internal */
export type UpdateEmployeeApiModelSchemasPreferredLanguageSourceValue$Outbound =
  | UpdateEmployeeApiModelSchemasPreferredLanguage4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const UpdateEmployeeApiModelSchemasPreferredLanguageSourceValue$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasPreferredLanguageSourceValue$Outbound,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasPreferredLanguageSourceValue
  > = z.union([
    z.lazy(() =>
      UpdateEmployeeApiModelSchemasPreferredLanguage4$outboundSchema
    ),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasPreferredLanguageSourceValue$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasPreferredLanguageSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasPreferredLanguageSourceValue$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasPreferredLanguageSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasPreferredLanguageSourceValue$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasPreferredLanguageSourceValue$Outbound` instead. */
  export type Outbound =
    UpdateEmployeeApiModelSchemasPreferredLanguageSourceValue$Outbound;
}

export function updateEmployeeApiModelSchemasPreferredLanguageSourceValueToJSON(
  updateEmployeeApiModelSchemasPreferredLanguageSourceValue:
    UpdateEmployeeApiModelSchemasPreferredLanguageSourceValue,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemasPreferredLanguageSourceValue$outboundSchema
      .parse(updateEmployeeApiModelSchemasPreferredLanguageSourceValue),
  );
}

export function updateEmployeeApiModelSchemasPreferredLanguageSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEmployeeApiModelSchemasPreferredLanguageSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelSchemasPreferredLanguageSourceValue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmployeeApiModelSchemasPreferredLanguageSourceValue' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasPreferredLanguageValue$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasPreferredLanguageValueOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(UpdateEmployeeApiModelSchemasPreferredLanguageValue),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const UpdateEmployeeApiModelSchemasPreferredLanguageValue$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasPreferredLanguageValueOpen,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasPreferredLanguageValueOpen
  > = z.union([
    z.nativeEnum(UpdateEmployeeApiModelSchemasPreferredLanguageValue),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasPreferredLanguageValue$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasPreferredLanguageValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasPreferredLanguageValue$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasPreferredLanguageValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasPreferredLanguageValue$outboundSchema;
}

/** @internal */
export const UpdateEmployeeApiModelPreferredLanguage$inboundSchema: z.ZodType<
  UpdateEmployeeApiModelPreferredLanguage,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() =>
        UpdateEmployeeApiModelSchemasPreferredLanguage4$inboundSchema
      ),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(
    UpdateEmployeeApiModelSchemasPreferredLanguageValue$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type UpdateEmployeeApiModelPreferredLanguage$Outbound = {
  source_value?:
    | UpdateEmployeeApiModelSchemasPreferredLanguage4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const UpdateEmployeeApiModelPreferredLanguage$outboundSchema: z.ZodType<
  UpdateEmployeeApiModelPreferredLanguage$Outbound,
  z.ZodTypeDef,
  UpdateEmployeeApiModelPreferredLanguage
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() =>
        UpdateEmployeeApiModelSchemasPreferredLanguage4$outboundSchema
      ),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(
    UpdateEmployeeApiModelSchemasPreferredLanguageValue$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelPreferredLanguage$ {
  /** @deprecated use `UpdateEmployeeApiModelPreferredLanguage$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelPreferredLanguage$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelPreferredLanguage$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelPreferredLanguage$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelPreferredLanguage$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModelPreferredLanguage$Outbound;
}

export function updateEmployeeApiModelPreferredLanguageToJSON(
  updateEmployeeApiModelPreferredLanguage:
    UpdateEmployeeApiModelPreferredLanguage,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelPreferredLanguage$outboundSchema.parse(
      updateEmployeeApiModelPreferredLanguage,
    ),
  );
}

export function updateEmployeeApiModelPreferredLanguageFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEmployeeApiModelPreferredLanguage,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelPreferredLanguage$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateEmployeeApiModelPreferredLanguage' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasWorkLocation4$inboundSchema:
  z.ZodType<UpdateEmployeeApiModelSchemasWorkLocation4, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type UpdateEmployeeApiModelSchemasWorkLocation4$Outbound = {};

/** @internal */
export const UpdateEmployeeApiModelSchemasWorkLocation4$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasWorkLocation4$Outbound,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasWorkLocation4
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasWorkLocation4$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasWorkLocation4$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasWorkLocation4$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasWorkLocation4$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasWorkLocation4$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasWorkLocation4$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModelSchemasWorkLocation4$Outbound;
}

export function updateEmployeeApiModelSchemasWorkLocation4ToJSON(
  updateEmployeeApiModelSchemasWorkLocation4:
    UpdateEmployeeApiModelSchemasWorkLocation4,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemasWorkLocation4$outboundSchema.parse(
      updateEmployeeApiModelSchemasWorkLocation4,
    ),
  );
}

export function updateEmployeeApiModelSchemasWorkLocation4FromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEmployeeApiModelSchemasWorkLocation4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelSchemasWorkLocation4$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateEmployeeApiModelSchemasWorkLocation4' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasWorkLocationSourceValue$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasWorkLocationSourceValue,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => UpdateEmployeeApiModelSchemasWorkLocation4$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/** @internal */
export type UpdateEmployeeApiModelSchemasWorkLocationSourceValue$Outbound =
  | UpdateEmployeeApiModelSchemasWorkLocation4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const UpdateEmployeeApiModelSchemasWorkLocationSourceValue$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasWorkLocationSourceValue$Outbound,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasWorkLocationSourceValue
  > = z.union([
    z.lazy(() => UpdateEmployeeApiModelSchemasWorkLocation4$outboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasWorkLocationSourceValue$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasWorkLocationSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasWorkLocationSourceValue$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasWorkLocationSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasWorkLocationSourceValue$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasWorkLocationSourceValue$Outbound` instead. */
  export type Outbound =
    UpdateEmployeeApiModelSchemasWorkLocationSourceValue$Outbound;
}

export function updateEmployeeApiModelSchemasWorkLocationSourceValueToJSON(
  updateEmployeeApiModelSchemasWorkLocationSourceValue:
    UpdateEmployeeApiModelSchemasWorkLocationSourceValue,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemasWorkLocationSourceValue$outboundSchema.parse(
      updateEmployeeApiModelSchemasWorkLocationSourceValue,
    ),
  );
}

export function updateEmployeeApiModelSchemasWorkLocationSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEmployeeApiModelSchemasWorkLocationSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelSchemasWorkLocationSourceValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateEmployeeApiModelSchemasWorkLocationSourceValue' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasWorkLocationValue$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasWorkLocationValueOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(UpdateEmployeeApiModelSchemasWorkLocationValue),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const UpdateEmployeeApiModelSchemasWorkLocationValue$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasWorkLocationValueOpen,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasWorkLocationValueOpen
  > = z.union([
    z.nativeEnum(UpdateEmployeeApiModelSchemasWorkLocationValue),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasWorkLocationValue$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasWorkLocationValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasWorkLocationValue$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasWorkLocationValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasWorkLocationValue$outboundSchema;
}

/** @internal */
export const UpdateEmployeeApiModelSchemasWorkLocationCountry$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasWorkLocationCountry,
    z.ZodTypeDef,
    unknown
  > = z.object({
    source_value: z.nullable(
      z.union([
        z.lazy(() => UpdateEmployeeApiModelSchemasWorkLocation4$inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
        z.array(z.any()),
      ]),
    ).optional(),
    value: z.nullable(
      UpdateEmployeeApiModelSchemasWorkLocationValue$inboundSchema,
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "source_value": "sourceValue",
    });
  });

/** @internal */
export type UpdateEmployeeApiModelSchemasWorkLocationCountry$Outbound = {
  source_value?:
    | UpdateEmployeeApiModelSchemasWorkLocation4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const UpdateEmployeeApiModelSchemasWorkLocationCountry$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasWorkLocationCountry$Outbound,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasWorkLocationCountry
  > = z.object({
    sourceValue: z.nullable(
      z.union([
        z.lazy(() => UpdateEmployeeApiModelSchemasWorkLocation4$outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
        z.array(z.any()),
      ]),
    ).optional(),
    value: z.nullable(
      UpdateEmployeeApiModelSchemasWorkLocationValue$outboundSchema,
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      sourceValue: "source_value",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasWorkLocationCountry$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasWorkLocationCountry$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasWorkLocationCountry$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasWorkLocationCountry$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasWorkLocationCountry$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasWorkLocationCountry$Outbound` instead. */
  export type Outbound =
    UpdateEmployeeApiModelSchemasWorkLocationCountry$Outbound;
}

export function updateEmployeeApiModelSchemasWorkLocationCountryToJSON(
  updateEmployeeApiModelSchemasWorkLocationCountry:
    UpdateEmployeeApiModelSchemasWorkLocationCountry,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemasWorkLocationCountry$outboundSchema.parse(
      updateEmployeeApiModelSchemasWorkLocationCountry,
    ),
  );
}

export function updateEmployeeApiModelSchemasWorkLocationCountryFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEmployeeApiModelSchemasWorkLocationCountry,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelSchemasWorkLocationCountry$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateEmployeeApiModelSchemasWorkLocationCountry' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasWorkLocationState4$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasWorkLocationState4,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type UpdateEmployeeApiModelSchemasWorkLocationState4$Outbound = {};

/** @internal */
export const UpdateEmployeeApiModelSchemasWorkLocationState4$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasWorkLocationState4$Outbound,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasWorkLocationState4
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasWorkLocationState4$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasWorkLocationState4$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasWorkLocationState4$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasWorkLocationState4$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasWorkLocationState4$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasWorkLocationState4$Outbound` instead. */
  export type Outbound =
    UpdateEmployeeApiModelSchemasWorkLocationState4$Outbound;
}

export function updateEmployeeApiModelSchemasWorkLocationState4ToJSON(
  updateEmployeeApiModelSchemasWorkLocationState4:
    UpdateEmployeeApiModelSchemasWorkLocationState4,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemasWorkLocationState4$outboundSchema.parse(
      updateEmployeeApiModelSchemasWorkLocationState4,
    ),
  );
}

export function updateEmployeeApiModelSchemasWorkLocationState4FromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEmployeeApiModelSchemasWorkLocationState4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelSchemasWorkLocationState4$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateEmployeeApiModelSchemasWorkLocationState4' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasWorkLocationStateSourceValue$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasWorkLocationStateSourceValue,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => UpdateEmployeeApiModelSchemasWorkLocationState4$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/** @internal */
export type UpdateEmployeeApiModelSchemasWorkLocationStateSourceValue$Outbound =
  | UpdateEmployeeApiModelSchemasWorkLocationState4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const UpdateEmployeeApiModelSchemasWorkLocationStateSourceValue$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasWorkLocationStateSourceValue$Outbound,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasWorkLocationStateSourceValue
  > = z.union([
    z.lazy(() =>
      UpdateEmployeeApiModelSchemasWorkLocationState4$outboundSchema
    ),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasWorkLocationStateSourceValue$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasWorkLocationStateSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasWorkLocationStateSourceValue$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasWorkLocationStateSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasWorkLocationStateSourceValue$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasWorkLocationStateSourceValue$Outbound` instead. */
  export type Outbound =
    UpdateEmployeeApiModelSchemasWorkLocationStateSourceValue$Outbound;
}

export function updateEmployeeApiModelSchemasWorkLocationStateSourceValueToJSON(
  updateEmployeeApiModelSchemasWorkLocationStateSourceValue:
    UpdateEmployeeApiModelSchemasWorkLocationStateSourceValue,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemasWorkLocationStateSourceValue$outboundSchema
      .parse(updateEmployeeApiModelSchemasWorkLocationStateSourceValue),
  );
}

export function updateEmployeeApiModelSchemasWorkLocationStateSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateEmployeeApiModelSchemasWorkLocationStateSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelSchemasWorkLocationStateSourceValue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmployeeApiModelSchemasWorkLocationStateSourceValue' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelSchemasWorkLocationStateValue$inboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasWorkLocationStateValueOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(UpdateEmployeeApiModelSchemasWorkLocationStateValue),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const UpdateEmployeeApiModelSchemasWorkLocationStateValue$outboundSchema:
  z.ZodType<
    UpdateEmployeeApiModelSchemasWorkLocationStateValueOpen,
    z.ZodTypeDef,
    UpdateEmployeeApiModelSchemasWorkLocationStateValueOpen
  > = z.union([
    z.nativeEnum(UpdateEmployeeApiModelSchemasWorkLocationStateValue),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasWorkLocationStateValue$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasWorkLocationStateValue$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEmployeeApiModelSchemasWorkLocationStateValue$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasWorkLocationStateValue$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasWorkLocationStateValue$outboundSchema;
}

/** @internal */
export const UpdateEmployeeApiModelSchemasState$inboundSchema: z.ZodType<
  UpdateEmployeeApiModelSchemasState,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() =>
        UpdateEmployeeApiModelSchemasWorkLocationState4$inboundSchema
      ),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(
    UpdateEmployeeApiModelSchemasWorkLocationStateValue$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type UpdateEmployeeApiModelSchemasState$Outbound = {
  source_value?:
    | UpdateEmployeeApiModelSchemasWorkLocationState4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const UpdateEmployeeApiModelSchemasState$outboundSchema: z.ZodType<
  UpdateEmployeeApiModelSchemasState$Outbound,
  z.ZodTypeDef,
  UpdateEmployeeApiModelSchemasState
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() =>
        UpdateEmployeeApiModelSchemasWorkLocationState4$outboundSchema
      ),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(
    UpdateEmployeeApiModelSchemasWorkLocationStateValue$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelSchemasState$ {
  /** @deprecated use `UpdateEmployeeApiModelSchemasState$inboundSchema` instead. */
  export const inboundSchema = UpdateEmployeeApiModelSchemasState$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasState$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelSchemasState$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelSchemasState$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModelSchemasState$Outbound;
}

export function updateEmployeeApiModelSchemasStateToJSON(
  updateEmployeeApiModelSchemasState: UpdateEmployeeApiModelSchemasState,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelSchemasState$outboundSchema.parse(
      updateEmployeeApiModelSchemasState,
    ),
  );
}

export function updateEmployeeApiModelSchemasStateFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEmployeeApiModelSchemasState, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelSchemasState$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmployeeApiModelSchemasState' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModelWorkLocation$inboundSchema: z.ZodType<
  UpdateEmployeeApiModelWorkLocation,
  z.ZodTypeDef,
  unknown
> = z.object({
  city: z.nullable(z.string()).optional(),
  country: z.nullable(
    z.lazy(() =>
      UpdateEmployeeApiModelSchemasWorkLocationCountry$inboundSchema
    ),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  passthrough: z.nullable(z.record(z.any())).optional(),
  phone_number: z.nullable(z.string()).optional(),
  state: z.nullable(
    z.lazy(() => UpdateEmployeeApiModelSchemasState$inboundSchema),
  ).optional(),
  street_1: z.nullable(z.string()).optional(),
  street_2: z.nullable(z.string()).optional(),
  zip_code: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "phone_number": "phoneNumber",
    "street_1": "street1",
    "street_2": "street2",
    "zip_code": "zipCode",
  });
});

/** @internal */
export type UpdateEmployeeApiModelWorkLocation$Outbound = {
  city?: string | null | undefined;
  country?:
    | UpdateEmployeeApiModelSchemasWorkLocationCountry$Outbound
    | null
    | undefined;
  id?: string | null | undefined;
  name?: string | null | undefined;
  passthrough?: { [k: string]: any } | null | undefined;
  phone_number?: string | null | undefined;
  state?: UpdateEmployeeApiModelSchemasState$Outbound | null | undefined;
  street_1?: string | null | undefined;
  street_2?: string | null | undefined;
  zip_code?: string | null | undefined;
};

/** @internal */
export const UpdateEmployeeApiModelWorkLocation$outboundSchema: z.ZodType<
  UpdateEmployeeApiModelWorkLocation$Outbound,
  z.ZodTypeDef,
  UpdateEmployeeApiModelWorkLocation
> = z.object({
  city: z.nullable(z.string()).optional(),
  country: z.nullable(
    z.lazy(() =>
      UpdateEmployeeApiModelSchemasWorkLocationCountry$outboundSchema
    ),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  passthrough: z.nullable(z.record(z.any())).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  state: z.nullable(
    z.lazy(() => UpdateEmployeeApiModelSchemasState$outboundSchema),
  ).optional(),
  street1: z.nullable(z.string()).optional(),
  street2: z.nullable(z.string()).optional(),
  zipCode: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    phoneNumber: "phone_number",
    street1: "street_1",
    street2: "street_2",
    zipCode: "zip_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModelWorkLocation$ {
  /** @deprecated use `UpdateEmployeeApiModelWorkLocation$inboundSchema` instead. */
  export const inboundSchema = UpdateEmployeeApiModelWorkLocation$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelWorkLocation$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEmployeeApiModelWorkLocation$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModelWorkLocation$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModelWorkLocation$Outbound;
}

export function updateEmployeeApiModelWorkLocationToJSON(
  updateEmployeeApiModelWorkLocation: UpdateEmployeeApiModelWorkLocation,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModelWorkLocation$outboundSchema.parse(
      updateEmployeeApiModelWorkLocation,
    ),
  );
}

export function updateEmployeeApiModelWorkLocationFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEmployeeApiModelWorkLocation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateEmployeeApiModelWorkLocation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmployeeApiModelWorkLocation' from JSON`,
  );
}

/** @internal */
export const UpdateEmployeeApiModel$inboundSchema: z.ZodType<
  UpdateEmployeeApiModel,
  z.ZodTypeDef,
  unknown
> = z.object({
  avatar: z.nullable(z.lazy(() => UpdateEmployeeApiModelAvatar$inboundSchema))
    .optional(),
  avatar_url: z.nullable(z.string()).optional(),
  benefits: z.nullable(z.array(CreateHRISBenefit$inboundSchema)).optional(),
  birthday: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  citizenships: z.nullable(z.array(CountryCodeEnum$inboundSchema)).optional(),
  company_id: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  custom_fields: z.nullable(z.array(CustomFields$inboundSchema)).optional(),
  date_of_birth: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  department: z.nullable(z.string()).optional(),
  department_id: z.nullable(z.string()).optional(),
  display_name: z.nullable(z.string()).optional(),
  employee_number: z.nullable(z.string()).optional(),
  employment_contract_type: z.nullable(
    z.lazy(() => UpdateEmployeeApiModelEmploymentContractType$inboundSchema),
  ).optional(),
  employment_status: z.nullable(
    z.lazy(() => UpdateEmployeeApiModelEmploymentStatus$inboundSchema),
  ).optional(),
  employment_type: z.nullable(
    z.lazy(() => UpdateEmployeeApiModelEmploymentType$inboundSchema),
  ).optional(),
  ethnicity: z.nullable(
    z.lazy(() => UpdateEmployeeApiModelEthnicity$inboundSchema),
  ).optional(),
  first_name: z.nullable(z.string()).optional(),
  gender: z.nullable(z.lazy(() => UpdateEmployeeApiModelGender$inboundSchema))
    .optional(),
  hire_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  home_location: z.nullable(
    z.lazy(() => UpdateEmployeeApiModelHomeLocation$inboundSchema),
  ).optional(),
  job_id: z.nullable(z.string()).optional(),
  job_title: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  manager_id: z.nullable(z.string()).optional(),
  marital_status: z.nullable(
    z.lazy(() => UpdateEmployeeApiModelMaritalStatus$inboundSchema),
  ).optional(),
  name: z.nullable(z.string()).optional(),
  national_identity_number: z.nullable(
    z.lazy(() => UpdateEmployeeApiModelNationalIdentityNumber$inboundSchema),
  ).optional(),
  personal_email: z.nullable(z.string()).optional(),
  personal_phone_number: z.nullable(z.string()).optional(),
  preferred_language: z.nullable(
    z.lazy(() => UpdateEmployeeApiModelPreferredLanguage$inboundSchema),
  ).optional(),
  start_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  tenure: z.nullable(z.number()).optional(),
  termination_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  work_anniversary: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  work_email: z.nullable(z.string()).optional(),
  work_location: z.nullable(
    z.lazy(() => UpdateEmployeeApiModelWorkLocation$inboundSchema),
  ).optional(),
  work_phone_number: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "avatar_url": "avatarUrl",
    "company_id": "companyId",
    "company_name": "companyName",
    "custom_fields": "customFields",
    "date_of_birth": "dateOfBirth",
    "department_id": "departmentId",
    "display_name": "displayName",
    "employee_number": "employeeNumber",
    "employment_contract_type": "employmentContractType",
    "employment_status": "employmentStatus",
    "employment_type": "employmentType",
    "first_name": "firstName",
    "hire_date": "hireDate",
    "home_location": "homeLocation",
    "job_id": "jobId",
    "job_title": "jobTitle",
    "last_name": "lastName",
    "manager_id": "managerId",
    "marital_status": "maritalStatus",
    "national_identity_number": "nationalIdentityNumber",
    "personal_email": "personalEmail",
    "personal_phone_number": "personalPhoneNumber",
    "preferred_language": "preferredLanguage",
    "start_date": "startDate",
    "termination_date": "terminationDate",
    "work_anniversary": "workAnniversary",
    "work_email": "workEmail",
    "work_location": "workLocation",
    "work_phone_number": "workPhoneNumber",
  });
});

/** @internal */
export type UpdateEmployeeApiModel$Outbound = {
  avatar?: UpdateEmployeeApiModelAvatar$Outbound | null | undefined;
  avatar_url?: string | null | undefined;
  benefits?: Array<CreateHRISBenefit$Outbound> | null | undefined;
  birthday?: string | null | undefined;
  citizenships?: Array<CountryCodeEnum$Outbound> | null | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  custom_fields?: Array<CustomFields$Outbound> | null | undefined;
  date_of_birth?: string | null | undefined;
  department?: string | null | undefined;
  department_id?: string | null | undefined;
  display_name?: string | null | undefined;
  employee_number?: string | null | undefined;
  employment_contract_type?:
    | UpdateEmployeeApiModelEmploymentContractType$Outbound
    | null
    | undefined;
  employment_status?:
    | UpdateEmployeeApiModelEmploymentStatus$Outbound
    | null
    | undefined;
  employment_type?:
    | UpdateEmployeeApiModelEmploymentType$Outbound
    | null
    | undefined;
  ethnicity?: UpdateEmployeeApiModelEthnicity$Outbound | null | undefined;
  first_name?: string | null | undefined;
  gender?: UpdateEmployeeApiModelGender$Outbound | null | undefined;
  hire_date?: string | null | undefined;
  home_location?:
    | UpdateEmployeeApiModelHomeLocation$Outbound
    | null
    | undefined;
  job_id?: string | null | undefined;
  job_title?: string | null | undefined;
  last_name?: string | null | undefined;
  manager_id?: string | null | undefined;
  marital_status?:
    | UpdateEmployeeApiModelMaritalStatus$Outbound
    | null
    | undefined;
  name?: string | null | undefined;
  national_identity_number?:
    | UpdateEmployeeApiModelNationalIdentityNumber$Outbound
    | null
    | undefined;
  personal_email?: string | null | undefined;
  personal_phone_number?: string | null | undefined;
  preferred_language?:
    | UpdateEmployeeApiModelPreferredLanguage$Outbound
    | null
    | undefined;
  start_date?: string | null | undefined;
  tenure?: number | null | undefined;
  termination_date?: string | null | undefined;
  work_anniversary?: string | null | undefined;
  work_email?: string | null | undefined;
  work_location?:
    | UpdateEmployeeApiModelWorkLocation$Outbound
    | null
    | undefined;
  work_phone_number?: string | null | undefined;
};

/** @internal */
export const UpdateEmployeeApiModel$outboundSchema: z.ZodType<
  UpdateEmployeeApiModel$Outbound,
  z.ZodTypeDef,
  UpdateEmployeeApiModel
> = z.object({
  avatar: z.nullable(z.lazy(() => UpdateEmployeeApiModelAvatar$outboundSchema))
    .optional(),
  avatarUrl: z.nullable(z.string()).optional(),
  benefits: z.nullable(z.array(CreateHRISBenefit$outboundSchema)).optional(),
  birthday: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  citizenships: z.nullable(z.array(CountryCodeEnum$outboundSchema)).optional(),
  companyId: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  customFields: z.nullable(z.array(CustomFields$outboundSchema)).optional(),
  dateOfBirth: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  department: z.nullable(z.string()).optional(),
  departmentId: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  employeeNumber: z.nullable(z.string()).optional(),
  employmentContractType: z.nullable(
    z.lazy(() => UpdateEmployeeApiModelEmploymentContractType$outboundSchema),
  ).optional(),
  employmentStatus: z.nullable(
    z.lazy(() => UpdateEmployeeApiModelEmploymentStatus$outboundSchema),
  ).optional(),
  employmentType: z.nullable(
    z.lazy(() => UpdateEmployeeApiModelEmploymentType$outboundSchema),
  ).optional(),
  ethnicity: z.nullable(
    z.lazy(() => UpdateEmployeeApiModelEthnicity$outboundSchema),
  ).optional(),
  firstName: z.nullable(z.string()).optional(),
  gender: z.nullable(z.lazy(() => UpdateEmployeeApiModelGender$outboundSchema))
    .optional(),
  hireDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  homeLocation: z.nullable(
    z.lazy(() => UpdateEmployeeApiModelHomeLocation$outboundSchema),
  ).optional(),
  jobId: z.nullable(z.string()).optional(),
  jobTitle: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  managerId: z.nullable(z.string()).optional(),
  maritalStatus: z.nullable(
    z.lazy(() => UpdateEmployeeApiModelMaritalStatus$outboundSchema),
  ).optional(),
  name: z.nullable(z.string()).optional(),
  nationalIdentityNumber: z.nullable(
    z.lazy(() => UpdateEmployeeApiModelNationalIdentityNumber$outboundSchema),
  ).optional(),
  personalEmail: z.nullable(z.string()).optional(),
  personalPhoneNumber: z.nullable(z.string()).optional(),
  preferredLanguage: z.nullable(
    z.lazy(() => UpdateEmployeeApiModelPreferredLanguage$outboundSchema),
  ).optional(),
  startDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  tenure: z.nullable(z.number()).optional(),
  terminationDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  workAnniversary: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  workEmail: z.nullable(z.string()).optional(),
  workLocation: z.nullable(
    z.lazy(() => UpdateEmployeeApiModelWorkLocation$outboundSchema),
  ).optional(),
  workPhoneNumber: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    avatarUrl: "avatar_url",
    companyId: "company_id",
    companyName: "company_name",
    customFields: "custom_fields",
    dateOfBirth: "date_of_birth",
    departmentId: "department_id",
    displayName: "display_name",
    employeeNumber: "employee_number",
    employmentContractType: "employment_contract_type",
    employmentStatus: "employment_status",
    employmentType: "employment_type",
    firstName: "first_name",
    hireDate: "hire_date",
    homeLocation: "home_location",
    jobId: "job_id",
    jobTitle: "job_title",
    lastName: "last_name",
    managerId: "manager_id",
    maritalStatus: "marital_status",
    nationalIdentityNumber: "national_identity_number",
    personalEmail: "personal_email",
    personalPhoneNumber: "personal_phone_number",
    preferredLanguage: "preferred_language",
    startDate: "start_date",
    terminationDate: "termination_date",
    workAnniversary: "work_anniversary",
    workEmail: "work_email",
    workLocation: "work_location",
    workPhoneNumber: "work_phone_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEmployeeApiModel$ {
  /** @deprecated use `UpdateEmployeeApiModel$inboundSchema` instead. */
  export const inboundSchema = UpdateEmployeeApiModel$inboundSchema;
  /** @deprecated use `UpdateEmployeeApiModel$outboundSchema` instead. */
  export const outboundSchema = UpdateEmployeeApiModel$outboundSchema;
  /** @deprecated use `UpdateEmployeeApiModel$Outbound` instead. */
  export type Outbound = UpdateEmployeeApiModel$Outbound;
}

export function updateEmployeeApiModelToJSON(
  updateEmployeeApiModel: UpdateEmployeeApiModel,
): string {
  return JSON.stringify(
    UpdateEmployeeApiModel$outboundSchema.parse(updateEmployeeApiModel),
  );
}

export function updateEmployeeApiModelFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEmployeeApiModel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEmployeeApiModel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEmployeeApiModel' from JSON`,
  );
}
