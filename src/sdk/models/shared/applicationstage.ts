/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ApplicationStage = {
  /**
   * Application Stage created date
   */
  createdAt?: Date | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Application Stage name
   */
  name?: string | null | undefined;
  /**
   * Application Stage order
   */
  order?: number | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * Custom Unified Fields configured in your StackOne project
   */
  unifiedCustomFields?: { [k: string]: any } | null | undefined;
  /**
   * Application Stage updated date
   */
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const ApplicationStage$inboundSchema: z.ZodType<
  ApplicationStage,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  order: z.nullable(z.number()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  unified_custom_fields: z.nullable(z.record(z.any())).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "remote_id": "remoteId",
    "unified_custom_fields": "unifiedCustomFields",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ApplicationStage$Outbound = {
  created_at?: string | null | undefined;
  id?: string | null | undefined;
  name?: string | null | undefined;
  order?: number | null | undefined;
  remote_id?: string | null | undefined;
  unified_custom_fields?: { [k: string]: any } | null | undefined;
  updated_at?: string | null | undefined;
};

/** @internal */
export const ApplicationStage$outboundSchema: z.ZodType<
  ApplicationStage$Outbound,
  z.ZodTypeDef,
  ApplicationStage
> = z.object({
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  order: z.nullable(z.number()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  unifiedCustomFields: z.nullable(z.record(z.any())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    remoteId: "remote_id",
    unifiedCustomFields: "unified_custom_fields",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationStage$ {
  /** @deprecated use `ApplicationStage$inboundSchema` instead. */
  export const inboundSchema = ApplicationStage$inboundSchema;
  /** @deprecated use `ApplicationStage$outboundSchema` instead. */
  export const outboundSchema = ApplicationStage$outboundSchema;
  /** @deprecated use `ApplicationStage$Outbound` instead. */
  export type Outbound = ApplicationStage$Outbound;
}

export function applicationStageToJSON(
  applicationStage: ApplicationStage,
): string {
  return JSON.stringify(
    ApplicationStage$outboundSchema.parse(applicationStage),
  );
}

export function applicationStageFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationStage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationStage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationStage' from JSON`,
  );
}
