/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RawResponse,
  RawResponse$inboundSchema,
  RawResponse$Outbound,
  RawResponse$outboundSchema,
} from "./rawresponse.js";

export enum MessagingUserResult2 {
  True = "true",
  False = "false",
}

/**
 * Whether the user is active
 */
export type MessagingUserResultActive = boolean | MessagingUserResult2;

export enum MessagingUserResultSchemas2 {
  True = "true",
  False = "false",
}

/**
 * Whether the user is a bot
 */
export type MessagingUserResultBot = boolean | MessagingUserResultSchemas2;

export type MessagingUserResultData = {
  /**
   * Whether the user is active
   */
  active?: boolean | MessagingUserResult2 | null | undefined;
  /**
   * Whether the user is a bot
   */
  bot?: boolean | MessagingUserResultSchemas2 | null | undefined;
  /**
   * Email address of the user
   */
  email?: string | null | undefined;
  /**
   * First name of the user
   */
  firstName?: string | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Last name of the user
   */
  lastName?: string | null | undefined;
  /**
   * Full name of the user
   */
  name?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * Username of the user
   */
  username?: string | null | undefined;
};

export type MessagingUserResult = {
  data?: MessagingUserResultData | null | undefined;
  raw?: Array<RawResponse> | null | undefined;
};

/** @internal */
export const MessagingUserResult2$inboundSchema: z.ZodNativeEnum<
  typeof MessagingUserResult2
> = z.nativeEnum(MessagingUserResult2);

/** @internal */
export const MessagingUserResult2$outboundSchema: z.ZodNativeEnum<
  typeof MessagingUserResult2
> = MessagingUserResult2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingUserResult2$ {
  /** @deprecated use `MessagingUserResult2$inboundSchema` instead. */
  export const inboundSchema = MessagingUserResult2$inboundSchema;
  /** @deprecated use `MessagingUserResult2$outboundSchema` instead. */
  export const outboundSchema = MessagingUserResult2$outboundSchema;
}

/** @internal */
export const MessagingUserResultActive$inboundSchema: z.ZodType<
  MessagingUserResultActive,
  z.ZodTypeDef,
  unknown
> = z.union([z.boolean(), MessagingUserResult2$inboundSchema]);

/** @internal */
export type MessagingUserResultActive$Outbound = boolean | string;

/** @internal */
export const MessagingUserResultActive$outboundSchema: z.ZodType<
  MessagingUserResultActive$Outbound,
  z.ZodTypeDef,
  MessagingUserResultActive
> = z.union([z.boolean(), MessagingUserResult2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingUserResultActive$ {
  /** @deprecated use `MessagingUserResultActive$inboundSchema` instead. */
  export const inboundSchema = MessagingUserResultActive$inboundSchema;
  /** @deprecated use `MessagingUserResultActive$outboundSchema` instead. */
  export const outboundSchema = MessagingUserResultActive$outboundSchema;
  /** @deprecated use `MessagingUserResultActive$Outbound` instead. */
  export type Outbound = MessagingUserResultActive$Outbound;
}

export function messagingUserResultActiveToJSON(
  messagingUserResultActive: MessagingUserResultActive,
): string {
  return JSON.stringify(
    MessagingUserResultActive$outboundSchema.parse(messagingUserResultActive),
  );
}

export function messagingUserResultActiveFromJSON(
  jsonString: string,
): SafeParseResult<MessagingUserResultActive, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessagingUserResultActive$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessagingUserResultActive' from JSON`,
  );
}

/** @internal */
export const MessagingUserResultSchemas2$inboundSchema: z.ZodNativeEnum<
  typeof MessagingUserResultSchemas2
> = z.nativeEnum(MessagingUserResultSchemas2);

/** @internal */
export const MessagingUserResultSchemas2$outboundSchema: z.ZodNativeEnum<
  typeof MessagingUserResultSchemas2
> = MessagingUserResultSchemas2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingUserResultSchemas2$ {
  /** @deprecated use `MessagingUserResultSchemas2$inboundSchema` instead. */
  export const inboundSchema = MessagingUserResultSchemas2$inboundSchema;
  /** @deprecated use `MessagingUserResultSchemas2$outboundSchema` instead. */
  export const outboundSchema = MessagingUserResultSchemas2$outboundSchema;
}

/** @internal */
export const MessagingUserResultBot$inboundSchema: z.ZodType<
  MessagingUserResultBot,
  z.ZodTypeDef,
  unknown
> = z.union([z.boolean(), MessagingUserResultSchemas2$inboundSchema]);

/** @internal */
export type MessagingUserResultBot$Outbound = boolean | string;

/** @internal */
export const MessagingUserResultBot$outboundSchema: z.ZodType<
  MessagingUserResultBot$Outbound,
  z.ZodTypeDef,
  MessagingUserResultBot
> = z.union([z.boolean(), MessagingUserResultSchemas2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingUserResultBot$ {
  /** @deprecated use `MessagingUserResultBot$inboundSchema` instead. */
  export const inboundSchema = MessagingUserResultBot$inboundSchema;
  /** @deprecated use `MessagingUserResultBot$outboundSchema` instead. */
  export const outboundSchema = MessagingUserResultBot$outboundSchema;
  /** @deprecated use `MessagingUserResultBot$Outbound` instead. */
  export type Outbound = MessagingUserResultBot$Outbound;
}

export function messagingUserResultBotToJSON(
  messagingUserResultBot: MessagingUserResultBot,
): string {
  return JSON.stringify(
    MessagingUserResultBot$outboundSchema.parse(messagingUserResultBot),
  );
}

export function messagingUserResultBotFromJSON(
  jsonString: string,
): SafeParseResult<MessagingUserResultBot, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessagingUserResultBot$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessagingUserResultBot' from JSON`,
  );
}

/** @internal */
export const MessagingUserResultData$inboundSchema: z.ZodType<
  MessagingUserResultData,
  z.ZodTypeDef,
  unknown
> = z.object({
  active: z.nullable(z.union([z.boolean(), MessagingUserResult2$inboundSchema]))
    .optional(),
  bot: z.nullable(
    z.union([z.boolean(), MessagingUserResultSchemas2$inboundSchema]),
  ).optional(),
  email: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "remote_id": "remoteId",
  });
});

/** @internal */
export type MessagingUserResultData$Outbound = {
  active?: boolean | string | null | undefined;
  bot?: boolean | string | null | undefined;
  email?: string | null | undefined;
  first_name?: string | null | undefined;
  id?: string | null | undefined;
  last_name?: string | null | undefined;
  name?: string | null | undefined;
  remote_id?: string | null | undefined;
  username?: string | null | undefined;
};

/** @internal */
export const MessagingUserResultData$outboundSchema: z.ZodType<
  MessagingUserResultData$Outbound,
  z.ZodTypeDef,
  MessagingUserResultData
> = z.object({
  active: z.nullable(
    z.union([z.boolean(), MessagingUserResult2$outboundSchema]),
  ).optional(),
  bot: z.nullable(
    z.union([z.boolean(), MessagingUserResultSchemas2$outboundSchema]),
  ).optional(),
  email: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingUserResultData$ {
  /** @deprecated use `MessagingUserResultData$inboundSchema` instead. */
  export const inboundSchema = MessagingUserResultData$inboundSchema;
  /** @deprecated use `MessagingUserResultData$outboundSchema` instead. */
  export const outboundSchema = MessagingUserResultData$outboundSchema;
  /** @deprecated use `MessagingUserResultData$Outbound` instead. */
  export type Outbound = MessagingUserResultData$Outbound;
}

export function messagingUserResultDataToJSON(
  messagingUserResultData: MessagingUserResultData,
): string {
  return JSON.stringify(
    MessagingUserResultData$outboundSchema.parse(messagingUserResultData),
  );
}

export function messagingUserResultDataFromJSON(
  jsonString: string,
): SafeParseResult<MessagingUserResultData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessagingUserResultData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessagingUserResultData' from JSON`,
  );
}

/** @internal */
export const MessagingUserResult$inboundSchema: z.ZodType<
  MessagingUserResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(z.lazy(() => MessagingUserResultData$inboundSchema))
    .optional(),
  raw: z.nullable(z.array(RawResponse$inboundSchema)).optional(),
});

/** @internal */
export type MessagingUserResult$Outbound = {
  data?: MessagingUserResultData$Outbound | null | undefined;
  raw?: Array<RawResponse$Outbound> | null | undefined;
};

/** @internal */
export const MessagingUserResult$outboundSchema: z.ZodType<
  MessagingUserResult$Outbound,
  z.ZodTypeDef,
  MessagingUserResult
> = z.object({
  data: z.nullable(z.lazy(() => MessagingUserResultData$outboundSchema))
    .optional(),
  raw: z.nullable(z.array(RawResponse$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingUserResult$ {
  /** @deprecated use `MessagingUserResult$inboundSchema` instead. */
  export const inboundSchema = MessagingUserResult$inboundSchema;
  /** @deprecated use `MessagingUserResult$outboundSchema` instead. */
  export const outboundSchema = MessagingUserResult$outboundSchema;
  /** @deprecated use `MessagingUserResult$Outbound` instead. */
  export type Outbound = MessagingUserResult$Outbound;
}

export function messagingUserResultToJSON(
  messagingUserResult: MessagingUserResult,
): string {
  return JSON.stringify(
    MessagingUserResult$outboundSchema.parse(messagingUserResult),
  );
}

export function messagingUserResultFromJSON(
  jsonString: string,
): SafeParseResult<MessagingUserResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessagingUserResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessagingUserResult' from JSON`,
  );
}
