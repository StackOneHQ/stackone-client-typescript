/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Company, Company$ } from "./company";
import { RawResponse, RawResponse$ } from "./rawresponse";
import * as z from "zod";

export type CompanyResult = {
    data: Company;
    raw?: Array<RawResponse> | null | undefined;
};

/** @internal */
export namespace CompanyResult$ {
    export const inboundSchema: z.ZodType<CompanyResult, z.ZodTypeDef, unknown> = z.object({
        data: Company$.inboundSchema,
        raw: z.nullable(z.array(RawResponse$.inboundSchema)).optional(),
    });

    export type Outbound = {
        data: Company$.Outbound;
        raw?: Array<RawResponse$.Outbound> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CompanyResult> = z.object({
        data: Company$.outboundSchema,
        raw: z.nullable(z.array(RawResponse$.outboundSchema)).optional(),
    });
}
