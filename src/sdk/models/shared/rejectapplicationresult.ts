/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CreateResultDataApiModel,
  CreateResultDataApiModel$inboundSchema,
  CreateResultDataApiModel$Outbound,
  CreateResultDataApiModel$outboundSchema,
} from "./createresultdataapimodel.js";

export type RejectApplicationResult = {
  data: CreateResultDataApiModel;
  message: string;
  statusCode: number;
  timestamp: Date;
};

/** @internal */
export const RejectApplicationResult$inboundSchema: z.ZodType<
  RejectApplicationResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: CreateResultDataApiModel$inboundSchema,
  message: z.string(),
  statusCode: z.number(),
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type RejectApplicationResult$Outbound = {
  data: CreateResultDataApiModel$Outbound;
  message: string;
  statusCode: number;
  timestamp: string;
};

/** @internal */
export const RejectApplicationResult$outboundSchema: z.ZodType<
  RejectApplicationResult$Outbound,
  z.ZodTypeDef,
  RejectApplicationResult
> = z.object({
  data: CreateResultDataApiModel$outboundSchema,
  message: z.string(),
  statusCode: z.number(),
  timestamp: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RejectApplicationResult$ {
  /** @deprecated use `RejectApplicationResult$inboundSchema` instead. */
  export const inboundSchema = RejectApplicationResult$inboundSchema;
  /** @deprecated use `RejectApplicationResult$outboundSchema` instead. */
  export const outboundSchema = RejectApplicationResult$outboundSchema;
  /** @deprecated use `RejectApplicationResult$Outbound` instead. */
  export type Outbound = RejectApplicationResult$Outbound;
}

export function rejectApplicationResultToJSON(
  rejectApplicationResult: RejectApplicationResult,
): string {
  return JSON.stringify(
    RejectApplicationResult$outboundSchema.parse(rejectApplicationResult),
  );
}

export function rejectApplicationResultFromJSON(
  jsonString: string,
): SafeParseResult<RejectApplicationResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RejectApplicationResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RejectApplicationResult' from JSON`,
  );
}
