/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AssessmentOrder,
  AssessmentOrder$inboundSchema,
  AssessmentOrder$Outbound,
  AssessmentOrder$outboundSchema,
} from "./assessmentorder.js";
import {
  RawResponse,
  RawResponse$inboundSchema,
  RawResponse$Outbound,
  RawResponse$outboundSchema,
} from "./rawresponse.js";

export type AssessmentOrderResult = {
  data: AssessmentOrder;
  raw?: Array<RawResponse> | null | undefined;
};

/** @internal */
export const AssessmentOrderResult$inboundSchema: z.ZodType<
  AssessmentOrderResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: AssessmentOrder$inboundSchema,
  raw: z.nullable(z.array(RawResponse$inboundSchema)).optional(),
});

/** @internal */
export type AssessmentOrderResult$Outbound = {
  data: AssessmentOrder$Outbound;
  raw?: Array<RawResponse$Outbound> | null | undefined;
};

/** @internal */
export const AssessmentOrderResult$outboundSchema: z.ZodType<
  AssessmentOrderResult$Outbound,
  z.ZodTypeDef,
  AssessmentOrderResult
> = z.object({
  data: AssessmentOrder$outboundSchema,
  raw: z.nullable(z.array(RawResponse$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentOrderResult$ {
  /** @deprecated use `AssessmentOrderResult$inboundSchema` instead. */
  export const inboundSchema = AssessmentOrderResult$inboundSchema;
  /** @deprecated use `AssessmentOrderResult$outboundSchema` instead. */
  export const outboundSchema = AssessmentOrderResult$outboundSchema;
  /** @deprecated use `AssessmentOrderResult$Outbound` instead. */
  export type Outbound = AssessmentOrderResult$Outbound;
}

export function assessmentOrderResultToJSON(
  assessmentOrderResult: AssessmentOrderResult,
): string {
  return JSON.stringify(
    AssessmentOrderResult$outboundSchema.parse(assessmentOrderResult),
  );
}

export function assessmentOrderResultFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentOrderResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentOrderResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentOrderResult' from JSON`,
  );
}
