/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Tag = {
  /**
   * Name of the tag
   */
  name?: string | null | undefined;
  /**
   * Remote ID of the tag
   */
  remoteId?: string | null | undefined;
};

/** @internal */
export const Tag$inboundSchema: z.ZodType<Tag, z.ZodTypeDef, unknown> = z
  .object({
    name: z.nullable(z.string()).optional(),
    remote_id: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "remote_id": "remoteId",
    });
  });

/** @internal */
export type Tag$Outbound = {
  name?: string | null | undefined;
  remote_id?: string | null | undefined;
};

/** @internal */
export const Tag$outboundSchema: z.ZodType<Tag$Outbound, z.ZodTypeDef, Tag> = z
  .object({
    name: z.nullable(z.string()).optional(),
    remoteId: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      remoteId: "remote_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tag$ {
  /** @deprecated use `Tag$inboundSchema` instead. */
  export const inboundSchema = Tag$inboundSchema;
  /** @deprecated use `Tag$outboundSchema` instead. */
  export const outboundSchema = Tag$outboundSchema;
  /** @deprecated use `Tag$Outbound` instead. */
  export type Outbound = Tag$Outbound;
}

export function tagToJSON(tag: Tag): string {
  return JSON.stringify(Tag$outboundSchema.parse(tag));
}

export function tagFromJSON(
  jsonString: string,
): SafeParseResult<Tag, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tag$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tag' from JSON`,
  );
}
