/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Files,
  Files$inboundSchema,
  Files$Outbound,
  Files$outboundSchema,
} from "./files.js";
import {
  RawResponse,
  RawResponse$inboundSchema,
  RawResponse$Outbound,
  RawResponse$outboundSchema,
} from "./rawresponse.js";

export type FilesSearchResponse = {
  data: Array<Files>;
  raw?: Array<RawResponse> | null | undefined;
};

/** @internal */
export const FilesSearchResponse$inboundSchema: z.ZodType<
  FilesSearchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(Files$inboundSchema),
  raw: z.nullable(z.array(RawResponse$inboundSchema)).optional(),
});

/** @internal */
export type FilesSearchResponse$Outbound = {
  data: Array<Files$Outbound>;
  raw?: Array<RawResponse$Outbound> | null | undefined;
};

/** @internal */
export const FilesSearchResponse$outboundSchema: z.ZodType<
  FilesSearchResponse$Outbound,
  z.ZodTypeDef,
  FilesSearchResponse
> = z.object({
  data: z.array(Files$outboundSchema),
  raw: z.nullable(z.array(RawResponse$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilesSearchResponse$ {
  /** @deprecated use `FilesSearchResponse$inboundSchema` instead. */
  export const inboundSchema = FilesSearchResponse$inboundSchema;
  /** @deprecated use `FilesSearchResponse$outboundSchema` instead. */
  export const outboundSchema = FilesSearchResponse$outboundSchema;
  /** @deprecated use `FilesSearchResponse$Outbound` instead. */
  export type Outbound = FilesSearchResponse$Outbound;
}

export function filesSearchResponseToJSON(
  filesSearchResponse: FilesSearchResponse,
): string {
  return JSON.stringify(
    FilesSearchResponse$outboundSchema.parse(filesSearchResponse),
  );
}

export function filesSearchResponseFromJSON(
  jsonString: string,
): SafeParseResult<FilesSearchResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FilesSearchResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FilesSearchResponse' from JSON`,
  );
}
