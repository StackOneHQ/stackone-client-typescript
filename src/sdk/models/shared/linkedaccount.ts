/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Credentials = {};

export type SetupInformation = {};

export type LinkedAccount = {
    active: boolean;
    createdAt: Date;
    credentials?: Credentials | null | undefined;
    id: string;
    originOwnerId: string;
    originOwnerName: string;
    originUsername?: string | null | undefined;
    provider: string;
    setupInformation?: SetupInformation | null | undefined;
    updatedAt: Date;
};

/** @internal */
export namespace Credentials$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Credentials, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Credentials> = z.object({});
}

/** @internal */
export namespace SetupInformation$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<SetupInformation, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SetupInformation> = z.object({});
}

/** @internal */
export namespace LinkedAccount$ {
    export type Inbound = {
        active: boolean;
        created_at: string;
        credentials?: Credentials$.Inbound | null | undefined;
        id: string;
        origin_owner_id: string;
        origin_owner_name: string;
        origin_username?: string | null | undefined;
        provider: string;
        setup_information?: SetupInformation$.Inbound | null | undefined;
        updated_at: string;
    };

    export const inboundSchema: z.ZodType<LinkedAccount, z.ZodTypeDef, Inbound> = z
        .object({
            active: z.boolean(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            credentials: z.nullable(z.lazy(() => Credentials$.inboundSchema)).optional(),
            id: z.string(),
            origin_owner_id: z.string(),
            origin_owner_name: z.string(),
            origin_username: z.nullable(z.string()).optional(),
            provider: z.string(),
            setup_information: z.nullable(z.lazy(() => SetupInformation$.inboundSchema)).optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
        })
        .transform((v) => {
            return {
                active: v.active,
                createdAt: v.created_at,
                ...(v.credentials === undefined ? null : { credentials: v.credentials }),
                id: v.id,
                originOwnerId: v.origin_owner_id,
                originOwnerName: v.origin_owner_name,
                ...(v.origin_username === undefined ? null : { originUsername: v.origin_username }),
                provider: v.provider,
                ...(v.setup_information === undefined
                    ? null
                    : { setupInformation: v.setup_information }),
                updatedAt: v.updated_at,
            };
        });

    export type Outbound = {
        active: boolean;
        created_at: string;
        credentials?: Credentials$.Outbound | null | undefined;
        id: string;
        origin_owner_id: string;
        origin_owner_name: string;
        origin_username?: string | null | undefined;
        provider: string;
        setup_information?: SetupInformation$.Outbound | null | undefined;
        updated_at: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LinkedAccount> = z
        .object({
            active: z.boolean(),
            createdAt: z.date().transform((v) => v.toISOString()),
            credentials: z.nullable(z.lazy(() => Credentials$.outboundSchema)).optional(),
            id: z.string(),
            originOwnerId: z.string(),
            originOwnerName: z.string(),
            originUsername: z.nullable(z.string()).optional(),
            provider: z.string(),
            setupInformation: z.nullable(z.lazy(() => SetupInformation$.outboundSchema)).optional(),
            updatedAt: z.date().transform((v) => v.toISOString()),
        })
        .transform((v) => {
            return {
                active: v.active,
                created_at: v.createdAt,
                ...(v.credentials === undefined ? null : { credentials: v.credentials }),
                id: v.id,
                origin_owner_id: v.originOwnerId,
                origin_owner_name: v.originOwnerName,
                ...(v.originUsername === undefined ? null : { origin_username: v.originUsername }),
                provider: v.provider,
                ...(v.setupInformation === undefined
                    ? null
                    : { setup_information: v.setupInformation }),
                updated_at: v.updatedAt,
            };
        });
}
