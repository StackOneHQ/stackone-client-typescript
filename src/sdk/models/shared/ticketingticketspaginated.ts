/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RawResponse,
  RawResponse$inboundSchema,
  RawResponse$Outbound,
  RawResponse$outboundSchema,
} from "./rawresponse.js";
import {
  TicketingReadTicket,
  TicketingReadTicket$inboundSchema,
  TicketingReadTicket$Outbound,
  TicketingReadTicket$outboundSchema,
} from "./ticketingreadticket.js";

export type TicketingTicketsPaginated = {
  data?: Array<TicketingReadTicket> | null | undefined;
  next?: string | null | undefined;
  raw?: Array<RawResponse> | null | undefined;
};

/** @internal */
export const TicketingTicketsPaginated$inboundSchema: z.ZodType<
  TicketingTicketsPaginated,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(z.array(TicketingReadTicket$inboundSchema)).optional(),
  next: z.nullable(z.string()).optional(),
  raw: z.nullable(z.array(RawResponse$inboundSchema)).optional(),
});

/** @internal */
export type TicketingTicketsPaginated$Outbound = {
  data?: Array<TicketingReadTicket$Outbound> | null | undefined;
  next?: string | null | undefined;
  raw?: Array<RawResponse$Outbound> | null | undefined;
};

/** @internal */
export const TicketingTicketsPaginated$outboundSchema: z.ZodType<
  TicketingTicketsPaginated$Outbound,
  z.ZodTypeDef,
  TicketingTicketsPaginated
> = z.object({
  data: z.nullable(z.array(TicketingReadTicket$outboundSchema)).optional(),
  next: z.nullable(z.string()).optional(),
  raw: z.nullable(z.array(RawResponse$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketsPaginated$ {
  /** @deprecated use `TicketingTicketsPaginated$inboundSchema` instead. */
  export const inboundSchema = TicketingTicketsPaginated$inboundSchema;
  /** @deprecated use `TicketingTicketsPaginated$outboundSchema` instead. */
  export const outboundSchema = TicketingTicketsPaginated$outboundSchema;
  /** @deprecated use `TicketingTicketsPaginated$Outbound` instead. */
  export type Outbound = TicketingTicketsPaginated$Outbound;
}

export function ticketingTicketsPaginatedToJSON(
  ticketingTicketsPaginated: TicketingTicketsPaginated,
): string {
  return JSON.stringify(
    TicketingTicketsPaginated$outboundSchema.parse(ticketingTicketsPaginated),
  );
}

export function ticketingTicketsPaginatedFromJSON(
  jsonString: string,
): SafeParseResult<TicketingTicketsPaginated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingTicketsPaginated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingTicketsPaginated' from JSON`,
  );
}
