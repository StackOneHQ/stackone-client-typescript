/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ContentBlock4 = {};

/**
 * The source value of the status.
 */
export type ContentBlockSourceValue =
  | string
  | number
  | boolean
  | ContentBlock4
  | Array<any>;

/**
 * The Status of the content blocks.
 */
export enum ContentBlockValue {
  Draft = "draft",
  Live = "live",
  Archived = "archived",
  UnmappedValue = "unmapped_value",
}
/**
 * The Status of the content blocks.
 */
export type ContentBlockValueOpen = OpenEnum<typeof ContentBlockValue>;

/**
 * Stackone enum identifying the status of content block.
 */
export type ContentBlockStatus = {
  /**
   * The source value of the status.
   */
  sourceValue?:
    | string
    | number
    | boolean
    | ContentBlock4
    | Array<any>
    | null
    | undefined;
  /**
   * The Status of the content blocks.
   */
  value?: ContentBlockValueOpen | null | undefined;
};

export type ContentBlockSchemas4 = {};

/**
 * The source value of the type.
 */
export type ContentBlockSchemasSourceValue =
  | string
  | number
  | boolean
  | ContentBlockSchemas4
  | Array<any>;

/**
 * The type of the content blocks.
 */
export enum ContentBlockSchemasValue {
  Text = "text",
  Html = "html",
  Image = "image",
  CodeSnippet = "code-snippet",
  UnmappedValue = "unmapped_value",
}
/**
 * The type of the content blocks.
 */
export type ContentBlockSchemasValueOpen = OpenEnum<
  typeof ContentBlockSchemasValue
>;

/**
 * Stackone enum identifying the type of content block.
 */
export type ContentBlockType = {
  /**
   * The source value of the type.
   */
  sourceValue?:
    | string
    | number
    | boolean
    | ContentBlockSchemas4
    | Array<any>
    | null
    | undefined;
  /**
   * The type of the content blocks.
   */
  value?: ContentBlockSchemasValueOpen | null | undefined;
};

export type ContentBlock = {
  content?: string | null | undefined;
  /**
   * Date of creation
   */
  createdAt?: Date | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  name?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * Stackone enum identifying the status of content block.
   */
  status?: ContentBlockStatus | null | undefined;
  tags?: Array<string> | null | undefined;
  /**
   * Stackone enum identifying the type of content block.
   */
  type?: ContentBlockType | null | undefined;
  /**
   * Date of last update
   */
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const ContentBlock4$inboundSchema: z.ZodType<
  ContentBlock4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ContentBlock4$Outbound = {};

/** @internal */
export const ContentBlock4$outboundSchema: z.ZodType<
  ContentBlock4$Outbound,
  z.ZodTypeDef,
  ContentBlock4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentBlock4$ {
  /** @deprecated use `ContentBlock4$inboundSchema` instead. */
  export const inboundSchema = ContentBlock4$inboundSchema;
  /** @deprecated use `ContentBlock4$outboundSchema` instead. */
  export const outboundSchema = ContentBlock4$outboundSchema;
  /** @deprecated use `ContentBlock4$Outbound` instead. */
  export type Outbound = ContentBlock4$Outbound;
}

export function contentBlock4ToJSON(contentBlock4: ContentBlock4): string {
  return JSON.stringify(ContentBlock4$outboundSchema.parse(contentBlock4));
}

export function contentBlock4FromJSON(
  jsonString: string,
): SafeParseResult<ContentBlock4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentBlock4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentBlock4' from JSON`,
  );
}

/** @internal */
export const ContentBlockSourceValue$inboundSchema: z.ZodType<
  ContentBlockSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => ContentBlock4$inboundSchema),
  z.array(z.any()),
]);

/** @internal */
export type ContentBlockSourceValue$Outbound =
  | string
  | number
  | boolean
  | ContentBlock4$Outbound
  | Array<any>;

/** @internal */
export const ContentBlockSourceValue$outboundSchema: z.ZodType<
  ContentBlockSourceValue$Outbound,
  z.ZodTypeDef,
  ContentBlockSourceValue
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => ContentBlock4$outboundSchema),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentBlockSourceValue$ {
  /** @deprecated use `ContentBlockSourceValue$inboundSchema` instead. */
  export const inboundSchema = ContentBlockSourceValue$inboundSchema;
  /** @deprecated use `ContentBlockSourceValue$outboundSchema` instead. */
  export const outboundSchema = ContentBlockSourceValue$outboundSchema;
  /** @deprecated use `ContentBlockSourceValue$Outbound` instead. */
  export type Outbound = ContentBlockSourceValue$Outbound;
}

export function contentBlockSourceValueToJSON(
  contentBlockSourceValue: ContentBlockSourceValue,
): string {
  return JSON.stringify(
    ContentBlockSourceValue$outboundSchema.parse(contentBlockSourceValue),
  );
}

export function contentBlockSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<ContentBlockSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentBlockSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentBlockSourceValue' from JSON`,
  );
}

/** @internal */
export const ContentBlockValue$inboundSchema: z.ZodType<
  ContentBlockValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ContentBlockValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ContentBlockValue$outboundSchema: z.ZodType<
  ContentBlockValueOpen,
  z.ZodTypeDef,
  ContentBlockValueOpen
> = z.union([
  z.nativeEnum(ContentBlockValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentBlockValue$ {
  /** @deprecated use `ContentBlockValue$inboundSchema` instead. */
  export const inboundSchema = ContentBlockValue$inboundSchema;
  /** @deprecated use `ContentBlockValue$outboundSchema` instead. */
  export const outboundSchema = ContentBlockValue$outboundSchema;
}

/** @internal */
export const ContentBlockStatus$inboundSchema: z.ZodType<
  ContentBlockStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => ContentBlock4$inboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(ContentBlockValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type ContentBlockStatus$Outbound = {
  source_value?:
    | string
    | number
    | boolean
    | ContentBlock4$Outbound
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const ContentBlockStatus$outboundSchema: z.ZodType<
  ContentBlockStatus$Outbound,
  z.ZodTypeDef,
  ContentBlockStatus
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => ContentBlock4$outboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(ContentBlockValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentBlockStatus$ {
  /** @deprecated use `ContentBlockStatus$inboundSchema` instead. */
  export const inboundSchema = ContentBlockStatus$inboundSchema;
  /** @deprecated use `ContentBlockStatus$outboundSchema` instead. */
  export const outboundSchema = ContentBlockStatus$outboundSchema;
  /** @deprecated use `ContentBlockStatus$Outbound` instead. */
  export type Outbound = ContentBlockStatus$Outbound;
}

export function contentBlockStatusToJSON(
  contentBlockStatus: ContentBlockStatus,
): string {
  return JSON.stringify(
    ContentBlockStatus$outboundSchema.parse(contentBlockStatus),
  );
}

export function contentBlockStatusFromJSON(
  jsonString: string,
): SafeParseResult<ContentBlockStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentBlockStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentBlockStatus' from JSON`,
  );
}

/** @internal */
export const ContentBlockSchemas4$inboundSchema: z.ZodType<
  ContentBlockSchemas4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ContentBlockSchemas4$Outbound = {};

/** @internal */
export const ContentBlockSchemas4$outboundSchema: z.ZodType<
  ContentBlockSchemas4$Outbound,
  z.ZodTypeDef,
  ContentBlockSchemas4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentBlockSchemas4$ {
  /** @deprecated use `ContentBlockSchemas4$inboundSchema` instead. */
  export const inboundSchema = ContentBlockSchemas4$inboundSchema;
  /** @deprecated use `ContentBlockSchemas4$outboundSchema` instead. */
  export const outboundSchema = ContentBlockSchemas4$outboundSchema;
  /** @deprecated use `ContentBlockSchemas4$Outbound` instead. */
  export type Outbound = ContentBlockSchemas4$Outbound;
}

export function contentBlockSchemas4ToJSON(
  contentBlockSchemas4: ContentBlockSchemas4,
): string {
  return JSON.stringify(
    ContentBlockSchemas4$outboundSchema.parse(contentBlockSchemas4),
  );
}

export function contentBlockSchemas4FromJSON(
  jsonString: string,
): SafeParseResult<ContentBlockSchemas4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentBlockSchemas4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentBlockSchemas4' from JSON`,
  );
}

/** @internal */
export const ContentBlockSchemasSourceValue$inboundSchema: z.ZodType<
  ContentBlockSchemasSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => ContentBlockSchemas4$inboundSchema),
  z.array(z.any()),
]);

/** @internal */
export type ContentBlockSchemasSourceValue$Outbound =
  | string
  | number
  | boolean
  | ContentBlockSchemas4$Outbound
  | Array<any>;

/** @internal */
export const ContentBlockSchemasSourceValue$outboundSchema: z.ZodType<
  ContentBlockSchemasSourceValue$Outbound,
  z.ZodTypeDef,
  ContentBlockSchemasSourceValue
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => ContentBlockSchemas4$outboundSchema),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentBlockSchemasSourceValue$ {
  /** @deprecated use `ContentBlockSchemasSourceValue$inboundSchema` instead. */
  export const inboundSchema = ContentBlockSchemasSourceValue$inboundSchema;
  /** @deprecated use `ContentBlockSchemasSourceValue$outboundSchema` instead. */
  export const outboundSchema = ContentBlockSchemasSourceValue$outboundSchema;
  /** @deprecated use `ContentBlockSchemasSourceValue$Outbound` instead. */
  export type Outbound = ContentBlockSchemasSourceValue$Outbound;
}

export function contentBlockSchemasSourceValueToJSON(
  contentBlockSchemasSourceValue: ContentBlockSchemasSourceValue,
): string {
  return JSON.stringify(
    ContentBlockSchemasSourceValue$outboundSchema.parse(
      contentBlockSchemasSourceValue,
    ),
  );
}

export function contentBlockSchemasSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<ContentBlockSchemasSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentBlockSchemasSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentBlockSchemasSourceValue' from JSON`,
  );
}

/** @internal */
export const ContentBlockSchemasValue$inboundSchema: z.ZodType<
  ContentBlockSchemasValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ContentBlockSchemasValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ContentBlockSchemasValue$outboundSchema: z.ZodType<
  ContentBlockSchemasValueOpen,
  z.ZodTypeDef,
  ContentBlockSchemasValueOpen
> = z.union([
  z.nativeEnum(ContentBlockSchemasValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentBlockSchemasValue$ {
  /** @deprecated use `ContentBlockSchemasValue$inboundSchema` instead. */
  export const inboundSchema = ContentBlockSchemasValue$inboundSchema;
  /** @deprecated use `ContentBlockSchemasValue$outboundSchema` instead. */
  export const outboundSchema = ContentBlockSchemasValue$outboundSchema;
}

/** @internal */
export const ContentBlockType$inboundSchema: z.ZodType<
  ContentBlockType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => ContentBlockSchemas4$inboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(ContentBlockSchemasValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type ContentBlockType$Outbound = {
  source_value?:
    | string
    | number
    | boolean
    | ContentBlockSchemas4$Outbound
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const ContentBlockType$outboundSchema: z.ZodType<
  ContentBlockType$Outbound,
  z.ZodTypeDef,
  ContentBlockType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => ContentBlockSchemas4$outboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(ContentBlockSchemasValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentBlockType$ {
  /** @deprecated use `ContentBlockType$inboundSchema` instead. */
  export const inboundSchema = ContentBlockType$inboundSchema;
  /** @deprecated use `ContentBlockType$outboundSchema` instead. */
  export const outboundSchema = ContentBlockType$outboundSchema;
  /** @deprecated use `ContentBlockType$Outbound` instead. */
  export type Outbound = ContentBlockType$Outbound;
}

export function contentBlockTypeToJSON(
  contentBlockType: ContentBlockType,
): string {
  return JSON.stringify(
    ContentBlockType$outboundSchema.parse(contentBlockType),
  );
}

export function contentBlockTypeFromJSON(
  jsonString: string,
): SafeParseResult<ContentBlockType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentBlockType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentBlockType' from JSON`,
  );
}

/** @internal */
export const ContentBlock$inboundSchema: z.ZodType<
  ContentBlock,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(z.string()).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  status: z.nullable(z.lazy(() => ContentBlockStatus$inboundSchema)).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  type: z.nullable(z.lazy(() => ContentBlockType$inboundSchema)).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "remote_id": "remoteId",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ContentBlock$Outbound = {
  content?: string | null | undefined;
  created_at?: string | null | undefined;
  id?: string | null | undefined;
  name?: string | null | undefined;
  remote_id?: string | null | undefined;
  status?: ContentBlockStatus$Outbound | null | undefined;
  tags?: Array<string> | null | undefined;
  type?: ContentBlockType$Outbound | null | undefined;
  updated_at?: string | null | undefined;
};

/** @internal */
export const ContentBlock$outboundSchema: z.ZodType<
  ContentBlock$Outbound,
  z.ZodTypeDef,
  ContentBlock
> = z.object({
  content: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  status: z.nullable(z.lazy(() => ContentBlockStatus$outboundSchema))
    .optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  type: z.nullable(z.lazy(() => ContentBlockType$outboundSchema)).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    remoteId: "remote_id",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentBlock$ {
  /** @deprecated use `ContentBlock$inboundSchema` instead. */
  export const inboundSchema = ContentBlock$inboundSchema;
  /** @deprecated use `ContentBlock$outboundSchema` instead. */
  export const outboundSchema = ContentBlock$outboundSchema;
  /** @deprecated use `ContentBlock$Outbound` instead. */
  export type Outbound = ContentBlock$Outbound;
}

export function contentBlockToJSON(contentBlock: ContentBlock): string {
  return JSON.stringify(ContentBlock$outboundSchema.parse(contentBlock));
}

export function contentBlockFromJSON(
  jsonString: string,
): SafeParseResult<ContentBlock, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentBlock$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentBlock' from JSON`,
  );
}
