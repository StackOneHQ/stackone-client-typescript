/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ActionsRpcResponse2 = {};

export type One = {};

/**
 * The response data from the action RPC call
 */
export type ActionsRpcResponseData = One | Array<ActionsRpcResponse2>;

export type ActionsRpcResponse = {
  /**
   * The response data from the action RPC call
   */
  data?: One | Array<ActionsRpcResponse2> | null | undefined;
  /**
   * Cursor for fetching the next page of results
   */
  next?: string | null | undefined;
};

/** @internal */
export const ActionsRpcResponse2$inboundSchema: z.ZodType<
  ActionsRpcResponse2,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ActionsRpcResponse2$Outbound = {};

/** @internal */
export const ActionsRpcResponse2$outboundSchema: z.ZodType<
  ActionsRpcResponse2$Outbound,
  z.ZodTypeDef,
  ActionsRpcResponse2
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActionsRpcResponse2$ {
  /** @deprecated use `ActionsRpcResponse2$inboundSchema` instead. */
  export const inboundSchema = ActionsRpcResponse2$inboundSchema;
  /** @deprecated use `ActionsRpcResponse2$outboundSchema` instead. */
  export const outboundSchema = ActionsRpcResponse2$outboundSchema;
  /** @deprecated use `ActionsRpcResponse2$Outbound` instead. */
  export type Outbound = ActionsRpcResponse2$Outbound;
}

export function actionsRpcResponse2ToJSON(
  actionsRpcResponse2: ActionsRpcResponse2,
): string {
  return JSON.stringify(
    ActionsRpcResponse2$outboundSchema.parse(actionsRpcResponse2),
  );
}

export function actionsRpcResponse2FromJSON(
  jsonString: string,
): SafeParseResult<ActionsRpcResponse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActionsRpcResponse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActionsRpcResponse2' from JSON`,
  );
}

/** @internal */
export const One$inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type One$Outbound = {};

/** @internal */
export const One$outboundSchema: z.ZodType<One$Outbound, z.ZodTypeDef, One> = z
  .object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One$ {
  /** @deprecated use `One$inboundSchema` instead. */
  export const inboundSchema = One$inboundSchema;
  /** @deprecated use `One$outboundSchema` instead. */
  export const outboundSchema = One$outboundSchema;
  /** @deprecated use `One$Outbound` instead. */
  export type Outbound = One$Outbound;
}

export function oneToJSON(one: One): string {
  return JSON.stringify(One$outboundSchema.parse(one));
}

export function oneFromJSON(
  jsonString: string,
): SafeParseResult<One, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => One$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'One' from JSON`,
  );
}

/** @internal */
export const ActionsRpcResponseData$inboundSchema: z.ZodType<
  ActionsRpcResponseData,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => One$inboundSchema),
  z.array(z.lazy(() => ActionsRpcResponse2$inboundSchema)),
]);

/** @internal */
export type ActionsRpcResponseData$Outbound =
  | One$Outbound
  | Array<ActionsRpcResponse2$Outbound>;

/** @internal */
export const ActionsRpcResponseData$outboundSchema: z.ZodType<
  ActionsRpcResponseData$Outbound,
  z.ZodTypeDef,
  ActionsRpcResponseData
> = z.union([
  z.lazy(() => One$outboundSchema),
  z.array(z.lazy(() => ActionsRpcResponse2$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActionsRpcResponseData$ {
  /** @deprecated use `ActionsRpcResponseData$inboundSchema` instead. */
  export const inboundSchema = ActionsRpcResponseData$inboundSchema;
  /** @deprecated use `ActionsRpcResponseData$outboundSchema` instead. */
  export const outboundSchema = ActionsRpcResponseData$outboundSchema;
  /** @deprecated use `ActionsRpcResponseData$Outbound` instead. */
  export type Outbound = ActionsRpcResponseData$Outbound;
}

export function actionsRpcResponseDataToJSON(
  actionsRpcResponseData: ActionsRpcResponseData,
): string {
  return JSON.stringify(
    ActionsRpcResponseData$outboundSchema.parse(actionsRpcResponseData),
  );
}

export function actionsRpcResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ActionsRpcResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActionsRpcResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActionsRpcResponseData' from JSON`,
  );
}

/** @internal */
export const ActionsRpcResponse$inboundSchema: z.ZodType<
  ActionsRpcResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(
    z.union([
      z.lazy(() => One$inboundSchema),
      z.array(z.lazy(() => ActionsRpcResponse2$inboundSchema)),
    ]),
  ).optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type ActionsRpcResponse$Outbound = {
  data?: One$Outbound | Array<ActionsRpcResponse2$Outbound> | null | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const ActionsRpcResponse$outboundSchema: z.ZodType<
  ActionsRpcResponse$Outbound,
  z.ZodTypeDef,
  ActionsRpcResponse
> = z.object({
  data: z.nullable(
    z.union([
      z.lazy(() => One$outboundSchema),
      z.array(z.lazy(() => ActionsRpcResponse2$outboundSchema)),
    ]),
  ).optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActionsRpcResponse$ {
  /** @deprecated use `ActionsRpcResponse$inboundSchema` instead. */
  export const inboundSchema = ActionsRpcResponse$inboundSchema;
  /** @deprecated use `ActionsRpcResponse$outboundSchema` instead. */
  export const outboundSchema = ActionsRpcResponse$outboundSchema;
  /** @deprecated use `ActionsRpcResponse$Outbound` instead. */
  export type Outbound = ActionsRpcResponse$Outbound;
}

export function actionsRpcResponseToJSON(
  actionsRpcResponse: ActionsRpcResponse,
): string {
  return JSON.stringify(
    ActionsRpcResponse$outboundSchema.parse(actionsRpcResponse),
  );
}

export function actionsRpcResponseFromJSON(
  jsonString: string,
): SafeParseResult<ActionsRpcResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActionsRpcResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActionsRpcResponse' from JSON`,
  );
}
