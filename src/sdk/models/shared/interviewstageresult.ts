/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { InterviewStage, InterviewStage$ } from "./interviewstage.js";
import { RawResponse, RawResponse$ } from "./rawresponse.js";
import * as z from "zod";

export type InterviewStageResult = {
    data: InterviewStage;
    raw?: Array<RawResponse> | null | undefined;
};

/** @internal */
export namespace InterviewStageResult$ {
    export const inboundSchema: z.ZodType<InterviewStageResult, z.ZodTypeDef, unknown> = z.object({
        data: InterviewStage$.inboundSchema,
        raw: z.nullable(z.array(RawResponse$.inboundSchema)).optional(),
    });

    export type Outbound = {
        data: InterviewStage$.Outbound;
        raw?: Array<RawResponse$.Outbound> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InterviewStageResult> = z.object(
        {
            data: InterviewStage$.outboundSchema,
            raw: z.nullable(z.array(RawResponse$.outboundSchema)).optional(),
        }
    );
}
