/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StepLogPartial,
  StepLogPartial$inboundSchema,
  StepLogPartial$Outbound,
  StepLogPartial$outboundSchema,
} from "./steplogpartial.js";

export type StepLogsPaginated = {
  data: Array<StepLogPartial>;
  next?: string | null | undefined;
};

/** @internal */
export const StepLogsPaginated$inboundSchema: z.ZodType<
  StepLogsPaginated,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(StepLogPartial$inboundSchema),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type StepLogsPaginated$Outbound = {
  data: Array<StepLogPartial$Outbound>;
  next?: string | null | undefined;
};

/** @internal */
export const StepLogsPaginated$outboundSchema: z.ZodType<
  StepLogsPaginated$Outbound,
  z.ZodTypeDef,
  StepLogsPaginated
> = z.object({
  data: z.array(StepLogPartial$outboundSchema),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StepLogsPaginated$ {
  /** @deprecated use `StepLogsPaginated$inboundSchema` instead. */
  export const inboundSchema = StepLogsPaginated$inboundSchema;
  /** @deprecated use `StepLogsPaginated$outboundSchema` instead. */
  export const outboundSchema = StepLogsPaginated$outboundSchema;
  /** @deprecated use `StepLogsPaginated$Outbound` instead. */
  export type Outbound = StepLogsPaginated$Outbound;
}

export function stepLogsPaginatedToJSON(
  stepLogsPaginated: StepLogsPaginated,
): string {
  return JSON.stringify(
    StepLogsPaginated$outboundSchema.parse(stepLogsPaginated),
  );
}

export function stepLogsPaginatedFromJSON(
  jsonString: string,
): SafeParseResult<StepLogsPaginated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StepLogsPaginated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StepLogsPaginated' from JSON`,
  );
}
