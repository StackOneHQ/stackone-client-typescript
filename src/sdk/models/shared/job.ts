/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { JobHiringTeam, JobHiringTeam$ } from "./jobhiringteam";
import { z } from "zod";

export enum Confidential {
    True = "true",
    False = "false",
}

/**
 * The status of the job.
 */
export enum JobValue {
    Published = "published",
    Draft = "draft",
    Pending = "pending",
    Internal = "internal",
    Archived = "archived",
    Closed = "closed",
    Open = "open",
    UnmappedValue = "unmapped_value",
}

export type JobStatus = {
    /**
     * The source value of the job status.
     */
    sourceValue?: string | null | undefined;
    /**
     * The status of the job.
     */
    value?: JobValue | null | undefined;
};

export type Job = {
    code?: string | null | undefined;
    companyId?: string | null | undefined;
    confidential?: Confidential | null | undefined;
    /**
     * Date of creation
     */
    createdAt?: Date | null | undefined;
    departmentIds?: Array<string> | null | undefined;
    hiringTeam?: Array<JobHiringTeam> | null | undefined;
    id?: string | null | undefined;
    jobStatus?: JobStatus | null | undefined;
    locationIds?: Array<string> | null | undefined;
    title?: string | null | undefined;
    /**
     * Date of last update
     */
    updatedAt?: Date | null | undefined;
};

/** @internal */
export const Confidential$ = z.nativeEnum(Confidential);

/** @internal */
export const JobValue$ = z.nativeEnum(JobValue);

/** @internal */
export namespace JobStatus$ {
    export type Inbound = {
        source_value?: string | null | undefined;
        value?: JobValue | null | undefined;
    };

    export const inboundSchema: z.ZodType<JobStatus, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z.nullable(z.string()).optional(),
            value: z.nullable(JobValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?: string | null | undefined;
        value?: JobValue | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobStatus> = z
        .object({
            sourceValue: z.nullable(z.string()).optional(),
            value: z.nullable(JobValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace Job$ {
    export type Inbound = {
        code?: string | null | undefined;
        company_id?: string | null | undefined;
        confidential?: Confidential | null | undefined;
        created_at?: string | null | undefined;
        department_ids?: Array<string> | null | undefined;
        hiring_team?: Array<JobHiringTeam$.Inbound> | null | undefined;
        id?: string | null | undefined;
        job_status?: JobStatus$.Inbound | null | undefined;
        location_ids?: Array<string> | null | undefined;
        title?: string | null | undefined;
        updated_at?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<Job, z.ZodTypeDef, Inbound> = z
        .object({
            code: z.nullable(z.string()).optional(),
            company_id: z.nullable(z.string()).optional(),
            confidential: z.nullable(Confidential$).optional(),
            created_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            department_ids: z.nullable(z.array(z.string())).optional(),
            hiring_team: z.nullable(z.array(JobHiringTeam$.inboundSchema)).optional(),
            id: z.nullable(z.string()).optional(),
            job_status: z.nullable(z.lazy(() => JobStatus$.inboundSchema)).optional(),
            location_ids: z.nullable(z.array(z.string())).optional(),
            title: z.nullable(z.string()).optional(),
            updated_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.code === undefined ? null : { code: v.code }),
                ...(v.company_id === undefined ? null : { companyId: v.company_id }),
                ...(v.confidential === undefined ? null : { confidential: v.confidential }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.department_ids === undefined ? null : { departmentIds: v.department_ids }),
                ...(v.hiring_team === undefined ? null : { hiringTeam: v.hiring_team }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.job_status === undefined ? null : { jobStatus: v.job_status }),
                ...(v.location_ids === undefined ? null : { locationIds: v.location_ids }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        code?: string | null | undefined;
        company_id?: string | null | undefined;
        confidential?: Confidential | null | undefined;
        created_at?: string | null | undefined;
        department_ids?: Array<string> | null | undefined;
        hiring_team?: Array<JobHiringTeam$.Outbound> | null | undefined;
        id?: string | null | undefined;
        job_status?: JobStatus$.Outbound | null | undefined;
        location_ids?: Array<string> | null | undefined;
        title?: string | null | undefined;
        updated_at?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Job> = z
        .object({
            code: z.nullable(z.string()).optional(),
            companyId: z.nullable(z.string()).optional(),
            confidential: z.nullable(Confidential$).optional(),
            createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            departmentIds: z.nullable(z.array(z.string())).optional(),
            hiringTeam: z.nullable(z.array(JobHiringTeam$.outboundSchema)).optional(),
            id: z.nullable(z.string()).optional(),
            jobStatus: z.nullable(z.lazy(() => JobStatus$.outboundSchema)).optional(),
            locationIds: z.nullable(z.array(z.string())).optional(),
            title: z.nullable(z.string()).optional(),
            updatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.code === undefined ? null : { code: v.code }),
                ...(v.companyId === undefined ? null : { company_id: v.companyId }),
                ...(v.confidential === undefined ? null : { confidential: v.confidential }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.departmentIds === undefined ? null : { department_ids: v.departmentIds }),
                ...(v.hiringTeam === undefined ? null : { hiring_team: v.hiringTeam }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.jobStatus === undefined ? null : { job_status: v.jobStatus }),
                ...(v.locationIds === undefined ? null : { location_ids: v.locationIds }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}
