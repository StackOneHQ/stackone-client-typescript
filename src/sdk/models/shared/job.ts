/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import {
  InterviewStage,
  InterviewStage$inboundSchema,
  InterviewStage$Outbound,
  InterviewStage$outboundSchema,
} from "./interviewstage.js";
import {
  JobCustomFields,
  JobCustomFields$inboundSchema,
  JobCustomFields$Outbound,
  JobCustomFields$outboundSchema,
} from "./jobcustomfields.js";
import {
  JobHiringTeam,
  JobHiringTeam$inboundSchema,
  JobHiringTeam$Outbound,
  JobHiringTeam$outboundSchema,
} from "./jobhiringteam.js";

/**
 * Confidential status of the job
 */
export enum JobConfidential {
  True = "true",
  False = "false",
}
/**
 * Confidential status of the job
 */
export type JobConfidentialOpen = OpenEnum<typeof JobConfidential>;

export type Job4 = {};

/**
 * The source value of the job status.
 */
export type JobSourceValue = Job4 | string | number | boolean | Array<any>;

/**
 * The status of the job.
 */
export enum JobValue {
  Published = "published",
  Draft = "draft",
  Pending = "pending",
  Internal = "internal",
  Archived = "archived",
  Closed = "closed",
  Open = "open",
  Deleted = "deleted",
  UnmappedValue = "unmapped_value",
}
/**
 * The status of the job.
 */
export type JobValueOpen = OpenEnum<typeof JobValue>;

/**
 * Status of the job
 */
export type JobJobStatus = {
  /**
   * The source value of the job status.
   */
  sourceValue?:
    | Job4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The status of the job.
   */
  value?: JobValueOpen | null | undefined;
};

export type Job = {
  /**
   * Code of the job
   */
  code?: string | null | undefined;
  /**
   * Confidential status of the job
   */
  confidential?: JobConfidentialOpen | null | undefined;
  /**
   * Date of creation
   */
  createdAt?: Date | null | undefined;
  /**
   * The job custom fields
   */
  customFields?: Array<JobCustomFields> | null | undefined;
  /**
   * Department ids of the job
   */
  departmentIds?: Array<string> | null | undefined;
  /**
   * Hiring team for the job.
   */
  hiringTeam?: Array<JobHiringTeam> | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Interview stages for the job.
   */
  interviewStages?: Array<InterviewStage> | null | undefined;
  /**
   * Status of the job
   */
  jobStatus?: JobJobStatus | null | undefined;
  /**
   * Location ids of the job
   */
  locationIds?: Array<string> | null | undefined;
  /**
   * Provider's department ids of the job
   */
  remoteDepartmentIds?: Array<string> | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * Provider's location ids of the job
   */
  remoteLocationIds?: Array<string> | null | undefined;
  /**
   * Status of the job
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  status?: string | null | undefined;
  /**
   * Title of the job
   */
  title?: string | null | undefined;
  /**
   * Custom Unified Fields configured in your StackOne project
   */
  unifiedCustomFields?: { [k: string]: any } | null | undefined;
  /**
   * Date of last update
   */
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const JobConfidential$inboundSchema: z.ZodType<
  JobConfidentialOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(JobConfidential),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const JobConfidential$outboundSchema: z.ZodType<
  JobConfidentialOpen,
  z.ZodTypeDef,
  JobConfidentialOpen
> = z.union([
  z.nativeEnum(JobConfidential),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobConfidential$ {
  /** @deprecated use `JobConfidential$inboundSchema` instead. */
  export const inboundSchema = JobConfidential$inboundSchema;
  /** @deprecated use `JobConfidential$outboundSchema` instead. */
  export const outboundSchema = JobConfidential$outboundSchema;
}

/** @internal */
export const Job4$inboundSchema: z.ZodType<Job4, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Job4$Outbound = {};

/** @internal */
export const Job4$outboundSchema: z.ZodType<Job4$Outbound, z.ZodTypeDef, Job4> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Job4$ {
  /** @deprecated use `Job4$inboundSchema` instead. */
  export const inboundSchema = Job4$inboundSchema;
  /** @deprecated use `Job4$outboundSchema` instead. */
  export const outboundSchema = Job4$outboundSchema;
  /** @deprecated use `Job4$Outbound` instead. */
  export type Outbound = Job4$Outbound;
}

/** @internal */
export const JobSourceValue$inboundSchema: z.ZodType<
  JobSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Job4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type JobSourceValue$Outbound =
  | Job4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const JobSourceValue$outboundSchema: z.ZodType<
  JobSourceValue$Outbound,
  z.ZodTypeDef,
  JobSourceValue
> = z.union([
  z.lazy(() => Job4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobSourceValue$ {
  /** @deprecated use `JobSourceValue$inboundSchema` instead. */
  export const inboundSchema = JobSourceValue$inboundSchema;
  /** @deprecated use `JobSourceValue$outboundSchema` instead. */
  export const outboundSchema = JobSourceValue$outboundSchema;
  /** @deprecated use `JobSourceValue$Outbound` instead. */
  export type Outbound = JobSourceValue$Outbound;
}

/** @internal */
export const JobValue$inboundSchema: z.ZodType<
  JobValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(JobValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const JobValue$outboundSchema: z.ZodType<
  JobValueOpen,
  z.ZodTypeDef,
  JobValueOpen
> = z.union([
  z.nativeEnum(JobValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobValue$ {
  /** @deprecated use `JobValue$inboundSchema` instead. */
  export const inboundSchema = JobValue$inboundSchema;
  /** @deprecated use `JobValue$outboundSchema` instead. */
  export const outboundSchema = JobValue$outboundSchema;
}

/** @internal */
export const JobJobStatus$inboundSchema: z.ZodType<
  JobJobStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => Job4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(JobValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type JobJobStatus$Outbound = {
  source_value?:
    | Job4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const JobJobStatus$outboundSchema: z.ZodType<
  JobJobStatus$Outbound,
  z.ZodTypeDef,
  JobJobStatus
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => Job4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(JobValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobJobStatus$ {
  /** @deprecated use `JobJobStatus$inboundSchema` instead. */
  export const inboundSchema = JobJobStatus$inboundSchema;
  /** @deprecated use `JobJobStatus$outboundSchema` instead. */
  export const outboundSchema = JobJobStatus$outboundSchema;
  /** @deprecated use `JobJobStatus$Outbound` instead. */
  export type Outbound = JobJobStatus$Outbound;
}

/** @internal */
export const Job$inboundSchema: z.ZodType<Job, z.ZodTypeDef, unknown> = z
  .object({
    code: z.nullable(z.string()).optional(),
    confidential: z.nullable(JobConfidential$inboundSchema).optional(),
    created_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    custom_fields: z.nullable(z.array(JobCustomFields$inboundSchema))
      .optional(),
    department_ids: z.nullable(z.array(z.string())).optional(),
    hiring_team: z.nullable(z.array(JobHiringTeam$inboundSchema)).optional(),
    id: z.nullable(z.string()).optional(),
    interview_stages: z.nullable(z.array(InterviewStage$inboundSchema))
      .optional(),
    job_status: z.nullable(z.lazy(() => JobJobStatus$inboundSchema)).optional(),
    location_ids: z.nullable(z.array(z.string())).optional(),
    remote_department_ids: z.nullable(z.array(z.string())).optional(),
    remote_id: z.nullable(z.string()).optional(),
    remote_location_ids: z.nullable(z.array(z.string())).optional(),
    status: z.nullable(z.string()).optional(),
    title: z.nullable(z.string()).optional(),
    unified_custom_fields: z.nullable(z.record(z.any())).optional(),
    updated_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "custom_fields": "customFields",
      "department_ids": "departmentIds",
      "hiring_team": "hiringTeam",
      "interview_stages": "interviewStages",
      "job_status": "jobStatus",
      "location_ids": "locationIds",
      "remote_department_ids": "remoteDepartmentIds",
      "remote_id": "remoteId",
      "remote_location_ids": "remoteLocationIds",
      "unified_custom_fields": "unifiedCustomFields",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Job$Outbound = {
  code?: string | null | undefined;
  confidential?: string | null | undefined;
  created_at?: string | null | undefined;
  custom_fields?: Array<JobCustomFields$Outbound> | null | undefined;
  department_ids?: Array<string> | null | undefined;
  hiring_team?: Array<JobHiringTeam$Outbound> | null | undefined;
  id?: string | null | undefined;
  interview_stages?: Array<InterviewStage$Outbound> | null | undefined;
  job_status?: JobJobStatus$Outbound | null | undefined;
  location_ids?: Array<string> | null | undefined;
  remote_department_ids?: Array<string> | null | undefined;
  remote_id?: string | null | undefined;
  remote_location_ids?: Array<string> | null | undefined;
  status?: string | null | undefined;
  title?: string | null | undefined;
  unified_custom_fields?: { [k: string]: any } | null | undefined;
  updated_at?: string | null | undefined;
};

/** @internal */
export const Job$outboundSchema: z.ZodType<Job$Outbound, z.ZodTypeDef, Job> = z
  .object({
    code: z.nullable(z.string()).optional(),
    confidential: z.nullable(JobConfidential$outboundSchema).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    customFields: z.nullable(z.array(JobCustomFields$outboundSchema))
      .optional(),
    departmentIds: z.nullable(z.array(z.string())).optional(),
    hiringTeam: z.nullable(z.array(JobHiringTeam$outboundSchema)).optional(),
    id: z.nullable(z.string()).optional(),
    interviewStages: z.nullable(z.array(InterviewStage$outboundSchema))
      .optional(),
    jobStatus: z.nullable(z.lazy(() => JobJobStatus$outboundSchema)).optional(),
    locationIds: z.nullable(z.array(z.string())).optional(),
    remoteDepartmentIds: z.nullable(z.array(z.string())).optional(),
    remoteId: z.nullable(z.string()).optional(),
    remoteLocationIds: z.nullable(z.array(z.string())).optional(),
    status: z.nullable(z.string()).optional(),
    title: z.nullable(z.string()).optional(),
    unifiedCustomFields: z.nullable(z.record(z.any())).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  }).transform((v) => {
    return remap$(v, {
      createdAt: "created_at",
      customFields: "custom_fields",
      departmentIds: "department_ids",
      hiringTeam: "hiring_team",
      interviewStages: "interview_stages",
      jobStatus: "job_status",
      locationIds: "location_ids",
      remoteDepartmentIds: "remote_department_ids",
      remoteId: "remote_id",
      remoteLocationIds: "remote_location_ids",
      unifiedCustomFields: "unified_custom_fields",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Job$ {
  /** @deprecated use `Job$inboundSchema` instead. */
  export const inboundSchema = Job$inboundSchema;
  /** @deprecated use `Job$outboundSchema` instead. */
  export const outboundSchema = Job$outboundSchema;
  /** @deprecated use `Job$Outbound` instead. */
  export type Outbound = Job$Outbound;
}
