/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RawResponse, RawResponse$ } from "./rawresponse";
import { User, User$ } from "./user";
import { z } from "zod";

export type UsersPaginated = {
    data: Array<User>;
    nextPage: string;
    raw: Array<RawResponse>;
};

/** @internal */
export namespace UsersPaginated$ {
    export type Inbound = {
        data: Array<User$.Inbound>;
        next_page: string;
        raw: Array<RawResponse$.Inbound>;
    };

    export const inboundSchema: z.ZodType<UsersPaginated, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.array(User$.inboundSchema),
            next_page: z.string(),
            raw: z.array(RawResponse$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
                nextPage: v.next_page,
                raw: v.raw,
            };
        });

    export type Outbound = {
        data: Array<User$.Outbound>;
        next_page: string;
        raw: Array<RawResponse$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UsersPaginated> = z
        .object({
            data: z.array(User$.outboundSchema),
            nextPage: z.string(),
            raw: z.array(RawResponse$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
                next_page: v.nextPage,
                raw: v.raw,
            };
        });
}
