/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AtsJobHiringTeam,
  AtsJobHiringTeam$inboundSchema,
  AtsJobHiringTeam$Outbound,
  AtsJobHiringTeam$outboundSchema,
} from "./atsjobhiringteam.js";
import {
  CustomFields,
  CustomFields$inboundSchema,
  CustomFields$Outbound,
  CustomFields$outboundSchema,
} from "./customfields.js";
import {
  InterviewStage,
  InterviewStage$inboundSchema,
  InterviewStage$Outbound,
  InterviewStage$outboundSchema,
} from "./interviewstage.js";

/**
 * Confidential status of the job
 */
export enum AtsJobConfidential {
  True = "true",
  False = "false",
  UnmappedValue = "unmapped_value",
}
/**
 * Confidential status of the job
 */
export type AtsJobConfidentialOpen = OpenEnum<typeof AtsJobConfidential>;

export type AtsJob4 = {};

/**
 * The source value of the job status.
 */
export type AtsJobSourceValue =
  | AtsJob4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The status of the job.
 */
export enum AtsJobValue {
  Published = "published",
  Draft = "draft",
  Pending = "pending",
  Internal = "internal",
  Archived = "archived",
  Closed = "closed",
  Open = "open",
  Deleted = "deleted",
  OnHold = "on_hold",
  UnmappedValue = "unmapped_value",
}
/**
 * The status of the job.
 */
export type AtsJobValueOpen = OpenEnum<typeof AtsJobValue>;

/**
 * Status of the job
 */
export type AtsJobJobStatus = {
  /**
   * The source value of the job status.
   */
  sourceValue?:
    | AtsJob4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The status of the job.
   */
  value?: AtsJobValueOpen | null | undefined;
};

export type AtsJob = {
  /**
   * Code of the job
   */
  code?: string | null | undefined;
  /**
   * Confidential status of the job
   */
  confidential?: AtsJobConfidentialOpen | null | undefined;
  /**
   * Date of creation
   */
  createdAt?: Date | null | undefined;
  /**
   * The job custom fields
   */
  customFields?: Array<CustomFields> | null | undefined;
  /**
   * Department ids of the job
   */
  departmentIds?: Array<string> | null | undefined;
  /**
   * Description of the job
   */
  description?: string | null | undefined;
  /**
   * Hiring team for the job.
   */
  hiringTeam?: Array<AtsJobHiringTeam> | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Interview stages for the job.
   */
  interviewStages?: Array<InterviewStage> | null | undefined;
  /**
   * Status of the job
   */
  jobStatus?: AtsJobJobStatus | null | undefined;
  /**
   * Location ids of the job
   */
  locationIds?: Array<string> | null | undefined;
  /**
   * Provider's department ids of the job
   */
  remoteDepartmentIds?: Array<string> | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * Provider's location ids of the job
   */
  remoteLocationIds?: Array<string> | null | undefined;
  /**
   * Status of the job
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  status?: string | null | undefined;
  /**
   * Title of the job
   */
  title?: string | null | undefined;
  /**
   * Custom Unified Fields configured in your StackOne project
   */
  unifiedCustomFields?: { [k: string]: any } | null | undefined;
  /**
   * Date of last update
   */
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const AtsJobConfidential$inboundSchema: z.ZodType<
  AtsJobConfidentialOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AtsJobConfidential),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AtsJobConfidential$outboundSchema: z.ZodType<
  AtsJobConfidentialOpen,
  z.ZodTypeDef,
  AtsJobConfidentialOpen
> = z.union([
  z.nativeEnum(AtsJobConfidential),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsJobConfidential$ {
  /** @deprecated use `AtsJobConfidential$inboundSchema` instead. */
  export const inboundSchema = AtsJobConfidential$inboundSchema;
  /** @deprecated use `AtsJobConfidential$outboundSchema` instead. */
  export const outboundSchema = AtsJobConfidential$outboundSchema;
}

/** @internal */
export const AtsJob4$inboundSchema: z.ZodType<AtsJob4, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type AtsJob4$Outbound = {};

/** @internal */
export const AtsJob4$outboundSchema: z.ZodType<
  AtsJob4$Outbound,
  z.ZodTypeDef,
  AtsJob4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsJob4$ {
  /** @deprecated use `AtsJob4$inboundSchema` instead. */
  export const inboundSchema = AtsJob4$inboundSchema;
  /** @deprecated use `AtsJob4$outboundSchema` instead. */
  export const outboundSchema = AtsJob4$outboundSchema;
  /** @deprecated use `AtsJob4$Outbound` instead. */
  export type Outbound = AtsJob4$Outbound;
}

export function atsJob4ToJSON(atsJob4: AtsJob4): string {
  return JSON.stringify(AtsJob4$outboundSchema.parse(atsJob4));
}

export function atsJob4FromJSON(
  jsonString: string,
): SafeParseResult<AtsJob4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsJob4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsJob4' from JSON`,
  );
}

/** @internal */
export const AtsJobSourceValue$inboundSchema: z.ZodType<
  AtsJobSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => AtsJob4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type AtsJobSourceValue$Outbound =
  | AtsJob4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const AtsJobSourceValue$outboundSchema: z.ZodType<
  AtsJobSourceValue$Outbound,
  z.ZodTypeDef,
  AtsJobSourceValue
> = z.union([
  z.lazy(() => AtsJob4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsJobSourceValue$ {
  /** @deprecated use `AtsJobSourceValue$inboundSchema` instead. */
  export const inboundSchema = AtsJobSourceValue$inboundSchema;
  /** @deprecated use `AtsJobSourceValue$outboundSchema` instead. */
  export const outboundSchema = AtsJobSourceValue$outboundSchema;
  /** @deprecated use `AtsJobSourceValue$Outbound` instead. */
  export type Outbound = AtsJobSourceValue$Outbound;
}

export function atsJobSourceValueToJSON(
  atsJobSourceValue: AtsJobSourceValue,
): string {
  return JSON.stringify(
    AtsJobSourceValue$outboundSchema.parse(atsJobSourceValue),
  );
}

export function atsJobSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<AtsJobSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsJobSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsJobSourceValue' from JSON`,
  );
}

/** @internal */
export const AtsJobValue$inboundSchema: z.ZodType<
  AtsJobValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AtsJobValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AtsJobValue$outboundSchema: z.ZodType<
  AtsJobValueOpen,
  z.ZodTypeDef,
  AtsJobValueOpen
> = z.union([
  z.nativeEnum(AtsJobValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsJobValue$ {
  /** @deprecated use `AtsJobValue$inboundSchema` instead. */
  export const inboundSchema = AtsJobValue$inboundSchema;
  /** @deprecated use `AtsJobValue$outboundSchema` instead. */
  export const outboundSchema = AtsJobValue$outboundSchema;
}

/** @internal */
export const AtsJobJobStatus$inboundSchema: z.ZodType<
  AtsJobJobStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => AtsJob4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(AtsJobValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type AtsJobJobStatus$Outbound = {
  source_value?:
    | AtsJob4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const AtsJobJobStatus$outboundSchema: z.ZodType<
  AtsJobJobStatus$Outbound,
  z.ZodTypeDef,
  AtsJobJobStatus
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => AtsJob4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(AtsJobValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsJobJobStatus$ {
  /** @deprecated use `AtsJobJobStatus$inboundSchema` instead. */
  export const inboundSchema = AtsJobJobStatus$inboundSchema;
  /** @deprecated use `AtsJobJobStatus$outboundSchema` instead. */
  export const outboundSchema = AtsJobJobStatus$outboundSchema;
  /** @deprecated use `AtsJobJobStatus$Outbound` instead. */
  export type Outbound = AtsJobJobStatus$Outbound;
}

export function atsJobJobStatusToJSON(
  atsJobJobStatus: AtsJobJobStatus,
): string {
  return JSON.stringify(AtsJobJobStatus$outboundSchema.parse(atsJobJobStatus));
}

export function atsJobJobStatusFromJSON(
  jsonString: string,
): SafeParseResult<AtsJobJobStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsJobJobStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsJobJobStatus' from JSON`,
  );
}

/** @internal */
export const AtsJob$inboundSchema: z.ZodType<AtsJob, z.ZodTypeDef, unknown> = z
  .object({
    code: z.nullable(z.string()).optional(),
    confidential: z.nullable(AtsJobConfidential$inboundSchema).optional(),
    created_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    custom_fields: z.nullable(z.array(CustomFields$inboundSchema)).optional(),
    department_ids: z.nullable(z.array(z.string())).optional(),
    description: z.nullable(z.string()).optional(),
    hiring_team: z.nullable(z.array(AtsJobHiringTeam$inboundSchema)).optional(),
    id: z.nullable(z.string()).optional(),
    interview_stages: z.nullable(z.array(InterviewStage$inboundSchema))
      .optional(),
    job_status: z.nullable(z.lazy(() => AtsJobJobStatus$inboundSchema))
      .optional(),
    location_ids: z.nullable(z.array(z.string())).optional(),
    remote_department_ids: z.nullable(z.array(z.string())).optional(),
    remote_id: z.nullable(z.string()).optional(),
    remote_location_ids: z.nullable(z.array(z.string())).optional(),
    status: z.nullable(z.string()).optional(),
    title: z.nullable(z.string()).optional(),
    unified_custom_fields: z.nullable(z.record(z.any())).optional(),
    updated_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "custom_fields": "customFields",
      "department_ids": "departmentIds",
      "hiring_team": "hiringTeam",
      "interview_stages": "interviewStages",
      "job_status": "jobStatus",
      "location_ids": "locationIds",
      "remote_department_ids": "remoteDepartmentIds",
      "remote_id": "remoteId",
      "remote_location_ids": "remoteLocationIds",
      "unified_custom_fields": "unifiedCustomFields",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type AtsJob$Outbound = {
  code?: string | null | undefined;
  confidential?: string | null | undefined;
  created_at?: string | null | undefined;
  custom_fields?: Array<CustomFields$Outbound> | null | undefined;
  department_ids?: Array<string> | null | undefined;
  description?: string | null | undefined;
  hiring_team?: Array<AtsJobHiringTeam$Outbound> | null | undefined;
  id?: string | null | undefined;
  interview_stages?: Array<InterviewStage$Outbound> | null | undefined;
  job_status?: AtsJobJobStatus$Outbound | null | undefined;
  location_ids?: Array<string> | null | undefined;
  remote_department_ids?: Array<string> | null | undefined;
  remote_id?: string | null | undefined;
  remote_location_ids?: Array<string> | null | undefined;
  status?: string | null | undefined;
  title?: string | null | undefined;
  unified_custom_fields?: { [k: string]: any } | null | undefined;
  updated_at?: string | null | undefined;
};

/** @internal */
export const AtsJob$outboundSchema: z.ZodType<
  AtsJob$Outbound,
  z.ZodTypeDef,
  AtsJob
> = z.object({
  code: z.nullable(z.string()).optional(),
  confidential: z.nullable(AtsJobConfidential$outboundSchema).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  customFields: z.nullable(z.array(CustomFields$outboundSchema)).optional(),
  departmentIds: z.nullable(z.array(z.string())).optional(),
  description: z.nullable(z.string()).optional(),
  hiringTeam: z.nullable(z.array(AtsJobHiringTeam$outboundSchema)).optional(),
  id: z.nullable(z.string()).optional(),
  interviewStages: z.nullable(z.array(InterviewStage$outboundSchema))
    .optional(),
  jobStatus: z.nullable(z.lazy(() => AtsJobJobStatus$outboundSchema))
    .optional(),
  locationIds: z.nullable(z.array(z.string())).optional(),
  remoteDepartmentIds: z.nullable(z.array(z.string())).optional(),
  remoteId: z.nullable(z.string()).optional(),
  remoteLocationIds: z.nullable(z.array(z.string())).optional(),
  status: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  unifiedCustomFields: z.nullable(z.record(z.any())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    customFields: "custom_fields",
    departmentIds: "department_ids",
    hiringTeam: "hiring_team",
    interviewStages: "interview_stages",
    jobStatus: "job_status",
    locationIds: "location_ids",
    remoteDepartmentIds: "remote_department_ids",
    remoteId: "remote_id",
    remoteLocationIds: "remote_location_ids",
    unifiedCustomFields: "unified_custom_fields",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsJob$ {
  /** @deprecated use `AtsJob$inboundSchema` instead. */
  export const inboundSchema = AtsJob$inboundSchema;
  /** @deprecated use `AtsJob$outboundSchema` instead. */
  export const outboundSchema = AtsJob$outboundSchema;
  /** @deprecated use `AtsJob$Outbound` instead. */
  export type Outbound = AtsJob$Outbound;
}

export function atsJobToJSON(atsJob: AtsJob): string {
  return JSON.stringify(AtsJob$outboundSchema.parse(atsJob));
}

export function atsJobFromJSON(
  jsonString: string,
): SafeParseResult<AtsJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsJob' from JSON`,
  );
}
