/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type RawResponse = {
    body?: string | null | undefined;
    method: string;
    response?: Record<string, any> | null | undefined;
    url: string;
};

/** @internal */
export namespace RawResponse$ {
    export type Inbound = {
        body?: string | null | undefined;
        method: string;
        response?: Record<string, any> | null | undefined;
        url: string;
    };

    export const inboundSchema: z.ZodType<RawResponse, z.ZodTypeDef, Inbound> = z
        .object({
            body: z.nullable(z.string()).optional(),
            method: z.string(),
            response: z.nullable(z.record(z.any())).optional(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.body === undefined ? null : { body: v.body }),
                method: v.method,
                ...(v.response === undefined ? null : { response: v.response }),
                url: v.url,
            };
        });

    export type Outbound = {
        body?: string | null | undefined;
        method: string;
        response?: Record<string, any> | null | undefined;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RawResponse> = z
        .object({
            body: z.nullable(z.string()).optional(),
            method: z.string(),
            response: z.nullable(z.record(z.any())).optional(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.body === undefined ? null : { body: v.body }),
                method: v.method,
                ...(v.response === undefined ? null : { response: v.response }),
                url: v.url,
            };
        });
}
