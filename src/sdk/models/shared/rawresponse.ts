/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RawResponse = {
  body?: string | null | undefined;
  method: string;
  response?: { [k: string]: any } | null | undefined;
  url: string;
};

/** @internal */
export const RawResponse$inboundSchema: z.ZodType<
  RawResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  body: z.nullable(z.string()).optional(),
  method: z.string(),
  response: z.nullable(z.record(z.any())).optional(),
  url: z.string(),
});

/** @internal */
export type RawResponse$Outbound = {
  body?: string | null | undefined;
  method: string;
  response?: { [k: string]: any } | null | undefined;
  url: string;
};

/** @internal */
export const RawResponse$outboundSchema: z.ZodType<
  RawResponse$Outbound,
  z.ZodTypeDef,
  RawResponse
> = z.object({
  body: z.nullable(z.string()).optional(),
  method: z.string(),
  response: z.nullable(z.record(z.any())).optional(),
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RawResponse$ {
  /** @deprecated use `RawResponse$inboundSchema` instead. */
  export const inboundSchema = RawResponse$inboundSchema;
  /** @deprecated use `RawResponse$outboundSchema` instead. */
  export const outboundSchema = RawResponse$outboundSchema;
  /** @deprecated use `RawResponse$Outbound` instead. */
  export type Outbound = RawResponse$Outbound;
}

export function rawResponseToJSON(rawResponse: RawResponse): string {
  return JSON.stringify(RawResponse$outboundSchema.parse(rawResponse));
}

export function rawResponseFromJSON(
  jsonString: string,
): SafeParseResult<RawResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RawResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RawResponse' from JSON`,
  );
}
