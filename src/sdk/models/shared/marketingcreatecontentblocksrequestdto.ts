/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MarketingCreateContentBlocksRequestDto4 = {};

/**
 * The source value of the type.
 */
export type MarketingCreateContentBlocksRequestDtoSourceValue =
  | string
  | number
  | boolean
  | MarketingCreateContentBlocksRequestDto4
  | Array<any>;

/**
 * The type of the content blocks.
 */
export enum MarketingCreateContentBlocksRequestDtoValue {
  Text = "text",
  Html = "html",
  Image = "image",
  CodeSnippet = "code-snippet",
  UnmappedValue = "unmapped_value",
}
/**
 * The type of the content blocks.
 */
export type MarketingCreateContentBlocksRequestDtoValueOpen = OpenEnum<
  typeof MarketingCreateContentBlocksRequestDtoValue
>;

/**
 * Stackone enum identifying the type of content block.
 */
export type MarketingCreateContentBlocksRequestDtoType = {
  /**
   * The source value of the type.
   */
  sourceValue?:
    | string
    | number
    | boolean
    | MarketingCreateContentBlocksRequestDto4
    | Array<any>
    | null
    | undefined;
  /**
   * The type of the content blocks.
   */
  value?: MarketingCreateContentBlocksRequestDtoValueOpen | null | undefined;
};

export type MarketingCreateContentBlocksRequestDto = {
  content?: string | null | undefined;
  name?: string | null | undefined;
  /**
   * Value to pass through to the provider
   */
  passthrough?: { [k: string]: any } | null | undefined;
  tags?: Array<string> | null | undefined;
  /**
   * Stackone enum identifying the type of content block.
   */
  type?: MarketingCreateContentBlocksRequestDtoType | null | undefined;
};

/** @internal */
export const MarketingCreateContentBlocksRequestDto4$inboundSchema: z.ZodType<
  MarketingCreateContentBlocksRequestDto4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MarketingCreateContentBlocksRequestDto4$Outbound = {};

/** @internal */
export const MarketingCreateContentBlocksRequestDto4$outboundSchema: z.ZodType<
  MarketingCreateContentBlocksRequestDto4$Outbound,
  z.ZodTypeDef,
  MarketingCreateContentBlocksRequestDto4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MarketingCreateContentBlocksRequestDto4$ {
  /** @deprecated use `MarketingCreateContentBlocksRequestDto4$inboundSchema` instead. */
  export const inboundSchema =
    MarketingCreateContentBlocksRequestDto4$inboundSchema;
  /** @deprecated use `MarketingCreateContentBlocksRequestDto4$outboundSchema` instead. */
  export const outboundSchema =
    MarketingCreateContentBlocksRequestDto4$outboundSchema;
  /** @deprecated use `MarketingCreateContentBlocksRequestDto4$Outbound` instead. */
  export type Outbound = MarketingCreateContentBlocksRequestDto4$Outbound;
}

export function marketingCreateContentBlocksRequestDto4ToJSON(
  marketingCreateContentBlocksRequestDto4:
    MarketingCreateContentBlocksRequestDto4,
): string {
  return JSON.stringify(
    MarketingCreateContentBlocksRequestDto4$outboundSchema.parse(
      marketingCreateContentBlocksRequestDto4,
    ),
  );
}

export function marketingCreateContentBlocksRequestDto4FromJSON(
  jsonString: string,
): SafeParseResult<
  MarketingCreateContentBlocksRequestDto4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MarketingCreateContentBlocksRequestDto4$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MarketingCreateContentBlocksRequestDto4' from JSON`,
  );
}

/** @internal */
export const MarketingCreateContentBlocksRequestDtoSourceValue$inboundSchema:
  z.ZodType<
    MarketingCreateContentBlocksRequestDtoSourceValue,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.lazy(() => MarketingCreateContentBlocksRequestDto4$inboundSchema),
    z.array(z.any()),
  ]);

/** @internal */
export type MarketingCreateContentBlocksRequestDtoSourceValue$Outbound =
  | string
  | number
  | boolean
  | MarketingCreateContentBlocksRequestDto4$Outbound
  | Array<any>;

/** @internal */
export const MarketingCreateContentBlocksRequestDtoSourceValue$outboundSchema:
  z.ZodType<
    MarketingCreateContentBlocksRequestDtoSourceValue$Outbound,
    z.ZodTypeDef,
    MarketingCreateContentBlocksRequestDtoSourceValue
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.lazy(() => MarketingCreateContentBlocksRequestDto4$outboundSchema),
    z.array(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MarketingCreateContentBlocksRequestDtoSourceValue$ {
  /** @deprecated use `MarketingCreateContentBlocksRequestDtoSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    MarketingCreateContentBlocksRequestDtoSourceValue$inboundSchema;
  /** @deprecated use `MarketingCreateContentBlocksRequestDtoSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    MarketingCreateContentBlocksRequestDtoSourceValue$outboundSchema;
  /** @deprecated use `MarketingCreateContentBlocksRequestDtoSourceValue$Outbound` instead. */
  export type Outbound =
    MarketingCreateContentBlocksRequestDtoSourceValue$Outbound;
}

export function marketingCreateContentBlocksRequestDtoSourceValueToJSON(
  marketingCreateContentBlocksRequestDtoSourceValue:
    MarketingCreateContentBlocksRequestDtoSourceValue,
): string {
  return JSON.stringify(
    MarketingCreateContentBlocksRequestDtoSourceValue$outboundSchema.parse(
      marketingCreateContentBlocksRequestDtoSourceValue,
    ),
  );
}

export function marketingCreateContentBlocksRequestDtoSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  MarketingCreateContentBlocksRequestDtoSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MarketingCreateContentBlocksRequestDtoSourceValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MarketingCreateContentBlocksRequestDtoSourceValue' from JSON`,
  );
}

/** @internal */
export const MarketingCreateContentBlocksRequestDtoValue$inboundSchema:
  z.ZodType<
    MarketingCreateContentBlocksRequestDtoValueOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(MarketingCreateContentBlocksRequestDtoValue),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const MarketingCreateContentBlocksRequestDtoValue$outboundSchema:
  z.ZodType<
    MarketingCreateContentBlocksRequestDtoValueOpen,
    z.ZodTypeDef,
    MarketingCreateContentBlocksRequestDtoValueOpen
  > = z.union([
    z.nativeEnum(MarketingCreateContentBlocksRequestDtoValue),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MarketingCreateContentBlocksRequestDtoValue$ {
  /** @deprecated use `MarketingCreateContentBlocksRequestDtoValue$inboundSchema` instead. */
  export const inboundSchema =
    MarketingCreateContentBlocksRequestDtoValue$inboundSchema;
  /** @deprecated use `MarketingCreateContentBlocksRequestDtoValue$outboundSchema` instead. */
  export const outboundSchema =
    MarketingCreateContentBlocksRequestDtoValue$outboundSchema;
}

/** @internal */
export const MarketingCreateContentBlocksRequestDtoType$inboundSchema:
  z.ZodType<MarketingCreateContentBlocksRequestDtoType, z.ZodTypeDef, unknown> =
    z.object({
      source_value: z.nullable(
        z.union([
          z.string(),
          z.number(),
          z.boolean(),
          z.lazy(() => MarketingCreateContentBlocksRequestDto4$inboundSchema),
          z.array(z.any()),
        ]),
      ).optional(),
      value: z.nullable(
        MarketingCreateContentBlocksRequestDtoValue$inboundSchema,
      ).optional(),
    }).transform((v) => {
      return remap$(v, {
        "source_value": "sourceValue",
      });
    });

/** @internal */
export type MarketingCreateContentBlocksRequestDtoType$Outbound = {
  source_value?:
    | string
    | number
    | boolean
    | MarketingCreateContentBlocksRequestDto4$Outbound
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const MarketingCreateContentBlocksRequestDtoType$outboundSchema:
  z.ZodType<
    MarketingCreateContentBlocksRequestDtoType$Outbound,
    z.ZodTypeDef,
    MarketingCreateContentBlocksRequestDtoType
  > = z.object({
    sourceValue: z.nullable(
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        z.lazy(() => MarketingCreateContentBlocksRequestDto4$outboundSchema),
        z.array(z.any()),
      ]),
    ).optional(),
    value: z.nullable(
      MarketingCreateContentBlocksRequestDtoValue$outboundSchema,
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      sourceValue: "source_value",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MarketingCreateContentBlocksRequestDtoType$ {
  /** @deprecated use `MarketingCreateContentBlocksRequestDtoType$inboundSchema` instead. */
  export const inboundSchema =
    MarketingCreateContentBlocksRequestDtoType$inboundSchema;
  /** @deprecated use `MarketingCreateContentBlocksRequestDtoType$outboundSchema` instead. */
  export const outboundSchema =
    MarketingCreateContentBlocksRequestDtoType$outboundSchema;
  /** @deprecated use `MarketingCreateContentBlocksRequestDtoType$Outbound` instead. */
  export type Outbound = MarketingCreateContentBlocksRequestDtoType$Outbound;
}

export function marketingCreateContentBlocksRequestDtoTypeToJSON(
  marketingCreateContentBlocksRequestDtoType:
    MarketingCreateContentBlocksRequestDtoType,
): string {
  return JSON.stringify(
    MarketingCreateContentBlocksRequestDtoType$outboundSchema.parse(
      marketingCreateContentBlocksRequestDtoType,
    ),
  );
}

export function marketingCreateContentBlocksRequestDtoTypeFromJSON(
  jsonString: string,
): SafeParseResult<
  MarketingCreateContentBlocksRequestDtoType,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MarketingCreateContentBlocksRequestDtoType$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MarketingCreateContentBlocksRequestDtoType' from JSON`,
  );
}

/** @internal */
export const MarketingCreateContentBlocksRequestDto$inboundSchema: z.ZodType<
  MarketingCreateContentBlocksRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  passthrough: z.nullable(z.record(z.any())).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  type: z.nullable(
    z.lazy(() => MarketingCreateContentBlocksRequestDtoType$inboundSchema),
  ).optional(),
});

/** @internal */
export type MarketingCreateContentBlocksRequestDto$Outbound = {
  content?: string | null | undefined;
  name?: string | null | undefined;
  passthrough?: { [k: string]: any } | null | undefined;
  tags?: Array<string> | null | undefined;
  type?: MarketingCreateContentBlocksRequestDtoType$Outbound | null | undefined;
};

/** @internal */
export const MarketingCreateContentBlocksRequestDto$outboundSchema: z.ZodType<
  MarketingCreateContentBlocksRequestDto$Outbound,
  z.ZodTypeDef,
  MarketingCreateContentBlocksRequestDto
> = z.object({
  content: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  passthrough: z.nullable(z.record(z.any())).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  type: z.nullable(
    z.lazy(() => MarketingCreateContentBlocksRequestDtoType$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MarketingCreateContentBlocksRequestDto$ {
  /** @deprecated use `MarketingCreateContentBlocksRequestDto$inboundSchema` instead. */
  export const inboundSchema =
    MarketingCreateContentBlocksRequestDto$inboundSchema;
  /** @deprecated use `MarketingCreateContentBlocksRequestDto$outboundSchema` instead. */
  export const outboundSchema =
    MarketingCreateContentBlocksRequestDto$outboundSchema;
  /** @deprecated use `MarketingCreateContentBlocksRequestDto$Outbound` instead. */
  export type Outbound = MarketingCreateContentBlocksRequestDto$Outbound;
}

export function marketingCreateContentBlocksRequestDtoToJSON(
  marketingCreateContentBlocksRequestDto:
    MarketingCreateContentBlocksRequestDto,
): string {
  return JSON.stringify(
    MarketingCreateContentBlocksRequestDto$outboundSchema.parse(
      marketingCreateContentBlocksRequestDto,
    ),
  );
}

export function marketingCreateContentBlocksRequestDtoFromJSON(
  jsonString: string,
): SafeParseResult<MarketingCreateContentBlocksRequestDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MarketingCreateContentBlocksRequestDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MarketingCreateContentBlocksRequestDto' from JSON`,
  );
}
