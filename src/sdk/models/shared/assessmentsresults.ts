/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AssessmentsResultsSchemas4 = {};

/**
 * The source value of the content type.
 */
export type AssessmentsResultsSchemasSourceValue =
  | AssessmentsResultsSchemas4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The content type of the attachment.
 */
export enum AssessmentsResultsSchemasValue {
  Text = "text",
  UnmappedValue = "unmapped_value",
}
/**
 * The content type of the attachment.
 */
export type AssessmentsResultsSchemasValueOpen = OpenEnum<
  typeof AssessmentsResultsSchemasValue
>;

export type AssessmentsResultsContentType = {
  /**
   * The source value of the content type.
   */
  sourceValue?:
    | AssessmentsResultsSchemas4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The content type of the attachment.
   */
  value?: AssessmentsResultsSchemasValueOpen | null | undefined;
};

export type Attachments = {
  contentType?: AssessmentsResultsContentType | null | undefined;
  /**
   * The URL of the attachment.
   */
  url?: string | null | undefined;
};

export type AssessmentsResultsCandidate = {
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Candidate profile url
   */
  profileUrl?: string | null | undefined;
};

export type AssessmentsResults4 = {};

/**
 * The source value of the assessment result.
 */
export type AssessmentsResultsSourceValue =
  | AssessmentsResults4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The result of the assessment.
 */
export enum AssessmentsResultsValue {
  Cancelled = "cancelled",
  Expired = "expired",
  Failed = "failed",
  Passed = "passed",
}
/**
 * The result of the assessment.
 */
export type AssessmentsResultsValueOpen = OpenEnum<
  typeof AssessmentsResultsValue
>;

export type Result = {
  /**
   * The source value of the assessment result.
   */
  sourceValue?:
    | AssessmentsResults4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The result of the assessment.
   */
  value?: AssessmentsResultsValueOpen | null | undefined;
};

export type Score = {
  /**
   * The label of the score
   */
  label?: string | null | undefined;
  /**
   * The maximum value of the score
   */
  max?: string | null | undefined;
  /**
   * The minimum value of the score
   */
  min?: string | null | undefined;
  /**
   * The value is the actual score
   */
  value?: string | null | undefined;
};

export type AssessmentsResults = {
  /**
   * The start date of the candidate assessment
   */
  assessmentDate?: Date | null | undefined;
  /**
   * The id of the candidate assessment
   */
  assessmentId?: string | null | undefined;
  attachments?: Attachments | null | undefined;
  candidate?: AssessmentsResultsCandidate | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  result?: Result | null | undefined;
  /**
   * The assessment`s result url
   */
  resultUrl?: string | null | undefined;
  score?: Score | null | undefined;
  /**
   * The submission date of the candidate assessment
   */
  submissionDate?: Date | null | undefined;
  /**
   * The summary about the result of the assessments
   */
  summary?: string | null | undefined;
};

/** @internal */
export const AssessmentsResultsSchemas4$inboundSchema: z.ZodType<
  AssessmentsResultsSchemas4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AssessmentsResultsSchemas4$Outbound = {};

/** @internal */
export const AssessmentsResultsSchemas4$outboundSchema: z.ZodType<
  AssessmentsResultsSchemas4$Outbound,
  z.ZodTypeDef,
  AssessmentsResultsSchemas4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentsResultsSchemas4$ {
  /** @deprecated use `AssessmentsResultsSchemas4$inboundSchema` instead. */
  export const inboundSchema = AssessmentsResultsSchemas4$inboundSchema;
  /** @deprecated use `AssessmentsResultsSchemas4$outboundSchema` instead. */
  export const outboundSchema = AssessmentsResultsSchemas4$outboundSchema;
  /** @deprecated use `AssessmentsResultsSchemas4$Outbound` instead. */
  export type Outbound = AssessmentsResultsSchemas4$Outbound;
}

export function assessmentsResultsSchemas4ToJSON(
  assessmentsResultsSchemas4: AssessmentsResultsSchemas4,
): string {
  return JSON.stringify(
    AssessmentsResultsSchemas4$outboundSchema.parse(assessmentsResultsSchemas4),
  );
}

export function assessmentsResultsSchemas4FromJSON(
  jsonString: string,
): SafeParseResult<AssessmentsResultsSchemas4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentsResultsSchemas4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentsResultsSchemas4' from JSON`,
  );
}

/** @internal */
export const AssessmentsResultsSchemasSourceValue$inboundSchema: z.ZodType<
  AssessmentsResultsSchemasSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => AssessmentsResultsSchemas4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type AssessmentsResultsSchemasSourceValue$Outbound =
  | AssessmentsResultsSchemas4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const AssessmentsResultsSchemasSourceValue$outboundSchema: z.ZodType<
  AssessmentsResultsSchemasSourceValue$Outbound,
  z.ZodTypeDef,
  AssessmentsResultsSchemasSourceValue
> = z.union([
  z.lazy(() => AssessmentsResultsSchemas4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentsResultsSchemasSourceValue$ {
  /** @deprecated use `AssessmentsResultsSchemasSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    AssessmentsResultsSchemasSourceValue$inboundSchema;
  /** @deprecated use `AssessmentsResultsSchemasSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    AssessmentsResultsSchemasSourceValue$outboundSchema;
  /** @deprecated use `AssessmentsResultsSchemasSourceValue$Outbound` instead. */
  export type Outbound = AssessmentsResultsSchemasSourceValue$Outbound;
}

export function assessmentsResultsSchemasSourceValueToJSON(
  assessmentsResultsSchemasSourceValue: AssessmentsResultsSchemasSourceValue,
): string {
  return JSON.stringify(
    AssessmentsResultsSchemasSourceValue$outboundSchema.parse(
      assessmentsResultsSchemasSourceValue,
    ),
  );
}

export function assessmentsResultsSchemasSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentsResultsSchemasSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AssessmentsResultsSchemasSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentsResultsSchemasSourceValue' from JSON`,
  );
}

/** @internal */
export const AssessmentsResultsSchemasValue$inboundSchema: z.ZodType<
  AssessmentsResultsSchemasValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AssessmentsResultsSchemasValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AssessmentsResultsSchemasValue$outboundSchema: z.ZodType<
  AssessmentsResultsSchemasValueOpen,
  z.ZodTypeDef,
  AssessmentsResultsSchemasValueOpen
> = z.union([
  z.nativeEnum(AssessmentsResultsSchemasValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentsResultsSchemasValue$ {
  /** @deprecated use `AssessmentsResultsSchemasValue$inboundSchema` instead. */
  export const inboundSchema = AssessmentsResultsSchemasValue$inboundSchema;
  /** @deprecated use `AssessmentsResultsSchemasValue$outboundSchema` instead. */
  export const outboundSchema = AssessmentsResultsSchemasValue$outboundSchema;
}

/** @internal */
export const AssessmentsResultsContentType$inboundSchema: z.ZodType<
  AssessmentsResultsContentType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => AssessmentsResultsSchemas4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(AssessmentsResultsSchemasValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type AssessmentsResultsContentType$Outbound = {
  source_value?:
    | AssessmentsResultsSchemas4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const AssessmentsResultsContentType$outboundSchema: z.ZodType<
  AssessmentsResultsContentType$Outbound,
  z.ZodTypeDef,
  AssessmentsResultsContentType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => AssessmentsResultsSchemas4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(AssessmentsResultsSchemasValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentsResultsContentType$ {
  /** @deprecated use `AssessmentsResultsContentType$inboundSchema` instead. */
  export const inboundSchema = AssessmentsResultsContentType$inboundSchema;
  /** @deprecated use `AssessmentsResultsContentType$outboundSchema` instead. */
  export const outboundSchema = AssessmentsResultsContentType$outboundSchema;
  /** @deprecated use `AssessmentsResultsContentType$Outbound` instead. */
  export type Outbound = AssessmentsResultsContentType$Outbound;
}

export function assessmentsResultsContentTypeToJSON(
  assessmentsResultsContentType: AssessmentsResultsContentType,
): string {
  return JSON.stringify(
    AssessmentsResultsContentType$outboundSchema.parse(
      assessmentsResultsContentType,
    ),
  );
}

export function assessmentsResultsContentTypeFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentsResultsContentType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentsResultsContentType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentsResultsContentType' from JSON`,
  );
}

/** @internal */
export const Attachments$inboundSchema: z.ZodType<
  Attachments,
  z.ZodTypeDef,
  unknown
> = z.object({
  content_type: z.nullable(
    z.lazy(() => AssessmentsResultsContentType$inboundSchema),
  ).optional(),
  url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "content_type": "contentType",
  });
});

/** @internal */
export type Attachments$Outbound = {
  content_type?: AssessmentsResultsContentType$Outbound | null | undefined;
  url?: string | null | undefined;
};

/** @internal */
export const Attachments$outboundSchema: z.ZodType<
  Attachments$Outbound,
  z.ZodTypeDef,
  Attachments
> = z.object({
  contentType: z.nullable(
    z.lazy(() => AssessmentsResultsContentType$outboundSchema),
  ).optional(),
  url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "content_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Attachments$ {
  /** @deprecated use `Attachments$inboundSchema` instead. */
  export const inboundSchema = Attachments$inboundSchema;
  /** @deprecated use `Attachments$outboundSchema` instead. */
  export const outboundSchema = Attachments$outboundSchema;
  /** @deprecated use `Attachments$Outbound` instead. */
  export type Outbound = Attachments$Outbound;
}

export function attachmentsToJSON(attachments: Attachments): string {
  return JSON.stringify(Attachments$outboundSchema.parse(attachments));
}

export function attachmentsFromJSON(
  jsonString: string,
): SafeParseResult<Attachments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Attachments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Attachments' from JSON`,
  );
}

/** @internal */
export const AssessmentsResultsCandidate$inboundSchema: z.ZodType<
  AssessmentsResultsCandidate,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  profile_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "profile_url": "profileUrl",
  });
});

/** @internal */
export type AssessmentsResultsCandidate$Outbound = {
  id?: string | null | undefined;
  profile_url?: string | null | undefined;
};

/** @internal */
export const AssessmentsResultsCandidate$outboundSchema: z.ZodType<
  AssessmentsResultsCandidate$Outbound,
  z.ZodTypeDef,
  AssessmentsResultsCandidate
> = z.object({
  id: z.nullable(z.string()).optional(),
  profileUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    profileUrl: "profile_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentsResultsCandidate$ {
  /** @deprecated use `AssessmentsResultsCandidate$inboundSchema` instead. */
  export const inboundSchema = AssessmentsResultsCandidate$inboundSchema;
  /** @deprecated use `AssessmentsResultsCandidate$outboundSchema` instead. */
  export const outboundSchema = AssessmentsResultsCandidate$outboundSchema;
  /** @deprecated use `AssessmentsResultsCandidate$Outbound` instead. */
  export type Outbound = AssessmentsResultsCandidate$Outbound;
}

export function assessmentsResultsCandidateToJSON(
  assessmentsResultsCandidate: AssessmentsResultsCandidate,
): string {
  return JSON.stringify(
    AssessmentsResultsCandidate$outboundSchema.parse(
      assessmentsResultsCandidate,
    ),
  );
}

export function assessmentsResultsCandidateFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentsResultsCandidate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentsResultsCandidate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentsResultsCandidate' from JSON`,
  );
}

/** @internal */
export const AssessmentsResults4$inboundSchema: z.ZodType<
  AssessmentsResults4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AssessmentsResults4$Outbound = {};

/** @internal */
export const AssessmentsResults4$outboundSchema: z.ZodType<
  AssessmentsResults4$Outbound,
  z.ZodTypeDef,
  AssessmentsResults4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentsResults4$ {
  /** @deprecated use `AssessmentsResults4$inboundSchema` instead. */
  export const inboundSchema = AssessmentsResults4$inboundSchema;
  /** @deprecated use `AssessmentsResults4$outboundSchema` instead. */
  export const outboundSchema = AssessmentsResults4$outboundSchema;
  /** @deprecated use `AssessmentsResults4$Outbound` instead. */
  export type Outbound = AssessmentsResults4$Outbound;
}

export function assessmentsResults4ToJSON(
  assessmentsResults4: AssessmentsResults4,
): string {
  return JSON.stringify(
    AssessmentsResults4$outboundSchema.parse(assessmentsResults4),
  );
}

export function assessmentsResults4FromJSON(
  jsonString: string,
): SafeParseResult<AssessmentsResults4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentsResults4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentsResults4' from JSON`,
  );
}

/** @internal */
export const AssessmentsResultsSourceValue$inboundSchema: z.ZodType<
  AssessmentsResultsSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => AssessmentsResults4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type AssessmentsResultsSourceValue$Outbound =
  | AssessmentsResults4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const AssessmentsResultsSourceValue$outboundSchema: z.ZodType<
  AssessmentsResultsSourceValue$Outbound,
  z.ZodTypeDef,
  AssessmentsResultsSourceValue
> = z.union([
  z.lazy(() => AssessmentsResults4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentsResultsSourceValue$ {
  /** @deprecated use `AssessmentsResultsSourceValue$inboundSchema` instead. */
  export const inboundSchema = AssessmentsResultsSourceValue$inboundSchema;
  /** @deprecated use `AssessmentsResultsSourceValue$outboundSchema` instead. */
  export const outboundSchema = AssessmentsResultsSourceValue$outboundSchema;
  /** @deprecated use `AssessmentsResultsSourceValue$Outbound` instead. */
  export type Outbound = AssessmentsResultsSourceValue$Outbound;
}

export function assessmentsResultsSourceValueToJSON(
  assessmentsResultsSourceValue: AssessmentsResultsSourceValue,
): string {
  return JSON.stringify(
    AssessmentsResultsSourceValue$outboundSchema.parse(
      assessmentsResultsSourceValue,
    ),
  );
}

export function assessmentsResultsSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentsResultsSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentsResultsSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentsResultsSourceValue' from JSON`,
  );
}

/** @internal */
export const AssessmentsResultsValue$inboundSchema: z.ZodType<
  AssessmentsResultsValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AssessmentsResultsValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AssessmentsResultsValue$outboundSchema: z.ZodType<
  AssessmentsResultsValueOpen,
  z.ZodTypeDef,
  AssessmentsResultsValueOpen
> = z.union([
  z.nativeEnum(AssessmentsResultsValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentsResultsValue$ {
  /** @deprecated use `AssessmentsResultsValue$inboundSchema` instead. */
  export const inboundSchema = AssessmentsResultsValue$inboundSchema;
  /** @deprecated use `AssessmentsResultsValue$outboundSchema` instead. */
  export const outboundSchema = AssessmentsResultsValue$outboundSchema;
}

/** @internal */
export const Result$inboundSchema: z.ZodType<Result, z.ZodTypeDef, unknown> = z
  .object({
    source_value: z.nullable(
      z.union([
        z.lazy(() => AssessmentsResults4$inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
        z.array(z.any()),
      ]),
    ).optional(),
    value: z.nullable(AssessmentsResultsValue$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "source_value": "sourceValue",
    });
  });

/** @internal */
export type Result$Outbound = {
  source_value?:
    | AssessmentsResults4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const Result$outboundSchema: z.ZodType<
  Result$Outbound,
  z.ZodTypeDef,
  Result
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => AssessmentsResults4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(AssessmentsResultsValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Result$ {
  /** @deprecated use `Result$inboundSchema` instead. */
  export const inboundSchema = Result$inboundSchema;
  /** @deprecated use `Result$outboundSchema` instead. */
  export const outboundSchema = Result$outboundSchema;
  /** @deprecated use `Result$Outbound` instead. */
  export type Outbound = Result$Outbound;
}

export function resultToJSON(result: Result): string {
  return JSON.stringify(Result$outboundSchema.parse(result));
}

export function resultFromJSON(
  jsonString: string,
): SafeParseResult<Result, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Result$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Result' from JSON`,
  );
}

/** @internal */
export const Score$inboundSchema: z.ZodType<Score, z.ZodTypeDef, unknown> = z
  .object({
    label: z.nullable(z.string()).optional(),
    max: z.nullable(z.string()).optional(),
    min: z.nullable(z.string()).optional(),
    value: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Score$Outbound = {
  label?: string | null | undefined;
  max?: string | null | undefined;
  min?: string | null | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const Score$outboundSchema: z.ZodType<
  Score$Outbound,
  z.ZodTypeDef,
  Score
> = z.object({
  label: z.nullable(z.string()).optional(),
  max: z.nullable(z.string()).optional(),
  min: z.nullable(z.string()).optional(),
  value: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Score$ {
  /** @deprecated use `Score$inboundSchema` instead. */
  export const inboundSchema = Score$inboundSchema;
  /** @deprecated use `Score$outboundSchema` instead. */
  export const outboundSchema = Score$outboundSchema;
  /** @deprecated use `Score$Outbound` instead. */
  export type Outbound = Score$Outbound;
}

export function scoreToJSON(score: Score): string {
  return JSON.stringify(Score$outboundSchema.parse(score));
}

export function scoreFromJSON(
  jsonString: string,
): SafeParseResult<Score, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Score$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Score' from JSON`,
  );
}

/** @internal */
export const AssessmentsResults$inboundSchema: z.ZodType<
  AssessmentsResults,
  z.ZodTypeDef,
  unknown
> = z.object({
  assessment_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  assessment_id: z.nullable(z.string()).optional(),
  attachments: z.nullable(z.lazy(() => Attachments$inboundSchema)).optional(),
  candidate: z.nullable(z.lazy(() => AssessmentsResultsCandidate$inboundSchema))
    .optional(),
  id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  result: z.nullable(z.lazy(() => Result$inboundSchema)).optional(),
  result_url: z.nullable(z.string()).optional(),
  score: z.nullable(z.lazy(() => Score$inboundSchema)).optional(),
  submission_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  summary: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "assessment_date": "assessmentDate",
    "assessment_id": "assessmentId",
    "remote_id": "remoteId",
    "result_url": "resultUrl",
    "submission_date": "submissionDate",
  });
});

/** @internal */
export type AssessmentsResults$Outbound = {
  assessment_date?: string | null | undefined;
  assessment_id?: string | null | undefined;
  attachments?: Attachments$Outbound | null | undefined;
  candidate?: AssessmentsResultsCandidate$Outbound | null | undefined;
  id?: string | null | undefined;
  remote_id?: string | null | undefined;
  result?: Result$Outbound | null | undefined;
  result_url?: string | null | undefined;
  score?: Score$Outbound | null | undefined;
  submission_date?: string | null | undefined;
  summary?: string | null | undefined;
};

/** @internal */
export const AssessmentsResults$outboundSchema: z.ZodType<
  AssessmentsResults$Outbound,
  z.ZodTypeDef,
  AssessmentsResults
> = z.object({
  assessmentDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  assessmentId: z.nullable(z.string()).optional(),
  attachments: z.nullable(z.lazy(() => Attachments$outboundSchema)).optional(),
  candidate: z.nullable(
    z.lazy(() => AssessmentsResultsCandidate$outboundSchema),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  result: z.nullable(z.lazy(() => Result$outboundSchema)).optional(),
  resultUrl: z.nullable(z.string()).optional(),
  score: z.nullable(z.lazy(() => Score$outboundSchema)).optional(),
  submissionDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  summary: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    assessmentDate: "assessment_date",
    assessmentId: "assessment_id",
    remoteId: "remote_id",
    resultUrl: "result_url",
    submissionDate: "submission_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentsResults$ {
  /** @deprecated use `AssessmentsResults$inboundSchema` instead. */
  export const inboundSchema = AssessmentsResults$inboundSchema;
  /** @deprecated use `AssessmentsResults$outboundSchema` instead. */
  export const outboundSchema = AssessmentsResults$outboundSchema;
  /** @deprecated use `AssessmentsResults$Outbound` instead. */
  export type Outbound = AssessmentsResults$Outbound;
}

export function assessmentsResultsToJSON(
  assessmentsResults: AssessmentsResults,
): string {
  return JSON.stringify(
    AssessmentsResults$outboundSchema.parse(assessmentsResults),
  );
}

export function assessmentsResultsFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentsResults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentsResults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentsResults' from JSON`,
  );
}
