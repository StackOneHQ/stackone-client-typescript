/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingCompany4 = {};

export type AccountingCompanySourceValue =
  | string
  | number
  | boolean
  | AccountingCompany4
  | Array<any>;

/**
 * Default currency for the company
 */
export enum AccountingCompanyValue {
  Aed = "AED",
  Afn = "AFN",
  All = "ALL",
  Amd = "AMD",
  Ang = "ANG",
  Aoa = "AOA",
  Ars = "ARS",
  Aud = "AUD",
  Awg = "AWG",
  Azn = "AZN",
  Bam = "BAM",
  Bbd = "BBD",
  Bdt = "BDT",
  Bgn = "BGN",
  Bhd = "BHD",
  Bif = "BIF",
  Bmd = "BMD",
  Bnd = "BND",
  Bob = "BOB",
  Brl = "BRL",
  Bsd = "BSD",
  Btn = "BTN",
  Bwp = "BWP",
  Byn = "BYN",
  Bzd = "BZD",
  Cad = "CAD",
  Cdf = "CDF",
  Chf = "CHF",
  Clp = "CLP",
  Cny = "CNY",
  Cop = "COP",
  Crc = "CRC",
  Cuc = "CUC",
  Cup = "CUP",
  Cve = "CVE",
  Czk = "CZK",
  Djf = "DJF",
  Dkk = "DKK",
  Dop = "DOP",
  Dzd = "DZD",
  Egp = "EGP",
  Ern = "ERN",
  Etb = "ETB",
  Eur = "EUR",
  Fjd = "FJD",
  Fkp = "FKP",
  Gbp = "GBP",
  Gel = "GEL",
  Ghs = "GHS",
  Gip = "GIP",
  Gmd = "GMD",
  Gnf = "GNF",
  Gtq = "GTQ",
  Gyd = "GYD",
  Hkd = "HKD",
  Hnl = "HNL",
  Hrk = "HRK",
  Htg = "HTG",
  Huf = "HUF",
  Idr = "IDR",
  Ils = "ILS",
  Inr = "INR",
  Iqd = "IQD",
  Irr = "IRR",
  Isk = "ISK",
  Jmd = "JMD",
  Jod = "JOD",
  Jpy = "JPY",
  Kes = "KES",
  Kgs = "KGS",
  Khr = "KHR",
  Kmf = "KMF",
  Kpw = "KPW",
  Krw = "KRW",
  Kwd = "KWD",
  Kyd = "KYD",
  Kzt = "KZT",
  Lak = "LAK",
  Lbp = "LBP",
  Lkr = "LKR",
  Lrd = "LRD",
  Lsl = "LSL",
  Lyd = "LYD",
  Mad = "MAD",
  Mdl = "MDL",
  Mga = "MGA",
  Mkd = "MKD",
  Mmk = "MMK",
  Mnt = "MNT",
  Mop = "MOP",
  Mru = "MRU",
  Mur = "MUR",
  Mvr = "MVR",
  Mwk = "MWK",
  Mxn = "MXN",
  Myr = "MYR",
  Mzn = "MZN",
  Nad = "NAD",
  Ngn = "NGN",
  Nio = "NIO",
  Nok = "NOK",
  Npr = "NPR",
  Nzd = "NZD",
  Omr = "OMR",
  Pab = "PAB",
  Pen = "PEN",
  Pgk = "PGK",
  Php = "PHP",
  Pkr = "PKR",
  Pln = "PLN",
  Pyg = "PYG",
  Qar = "QAR",
  Ron = "RON",
  Rsd = "RSD",
  Rub = "RUB",
  Rwf = "RWF",
  Sar = "SAR",
  Sbd = "SBD",
  Scr = "SCR",
  Sdg = "SDG",
  Sek = "SEK",
  Sgd = "SGD",
  Shp = "SHP",
  Sll = "SLL",
  Sos = "SOS",
  Srd = "SRD",
  Ssp = "SSP",
  Stn = "STN",
  Syp = "SYP",
  Szl = "SZL",
  Thb = "THB",
  Tjs = "TJS",
  Tmt = "TMT",
  Tnd = "TND",
  Top = "TOP",
  Try = "TRY",
  Ttd = "TTD",
  Twd = "TWD",
  Tzs = "TZS",
  Uah = "UAH",
  Ugx = "UGX",
  Usd = "USD",
  Uyu = "UYU",
  Uzs = "UZS",
  Ves = "VES",
  Vnd = "VND",
  Vuv = "VUV",
  Wst = "WST",
  Xaf = "XAF",
  Xcd = "XCD",
  Xdr = "XDR",
  Xof = "XOF",
  Xpf = "XPF",
  Yer = "YER",
  Zar = "ZAR",
  Zmw = "ZMW",
  Zwl = "ZWL",
  UnmappedValue = "unmapped_value",
}
/**
 * Default currency for the company
 */
export type AccountingCompanyValueOpen = OpenEnum<
  typeof AccountingCompanyValue
>;

/**
 * Default currency for the company
 */
export type BaseCurrency = {
  sourceValue?:
    | string
    | number
    | boolean
    | AccountingCompany4
    | Array<any>
    | null
    | undefined;
  /**
   * Default currency for the company
   */
  value?: AccountingCompanyValueOpen | null | undefined;
};

export type AccountingCompany = {
  /**
   * Default currency for the company
   */
  baseCurrency?: BaseCurrency | null | undefined;
  /**
   * Fiscal year start day (1-31)
   */
  fiscalYearStartDay?: number | null | undefined;
  /**
   * Fiscal year start month (1-12)
   */
  fiscalYearStartMonth?: number | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Name of the company
   */
  name?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
};

/** @internal */
export const AccountingCompany4$inboundSchema: z.ZodType<
  AccountingCompany4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AccountingCompany4$Outbound = {};

/** @internal */
export const AccountingCompany4$outboundSchema: z.ZodType<
  AccountingCompany4$Outbound,
  z.ZodTypeDef,
  AccountingCompany4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingCompany4$ {
  /** @deprecated use `AccountingCompany4$inboundSchema` instead. */
  export const inboundSchema = AccountingCompany4$inboundSchema;
  /** @deprecated use `AccountingCompany4$outboundSchema` instead. */
  export const outboundSchema = AccountingCompany4$outboundSchema;
  /** @deprecated use `AccountingCompany4$Outbound` instead. */
  export type Outbound = AccountingCompany4$Outbound;
}

export function accountingCompany4ToJSON(
  accountingCompany4: AccountingCompany4,
): string {
  return JSON.stringify(
    AccountingCompany4$outboundSchema.parse(accountingCompany4),
  );
}

export function accountingCompany4FromJSON(
  jsonString: string,
): SafeParseResult<AccountingCompany4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingCompany4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingCompany4' from JSON`,
  );
}

/** @internal */
export const AccountingCompanySourceValue$inboundSchema: z.ZodType<
  AccountingCompanySourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => AccountingCompany4$inboundSchema),
  z.array(z.any()),
]);

/** @internal */
export type AccountingCompanySourceValue$Outbound =
  | string
  | number
  | boolean
  | AccountingCompany4$Outbound
  | Array<any>;

/** @internal */
export const AccountingCompanySourceValue$outboundSchema: z.ZodType<
  AccountingCompanySourceValue$Outbound,
  z.ZodTypeDef,
  AccountingCompanySourceValue
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => AccountingCompany4$outboundSchema),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingCompanySourceValue$ {
  /** @deprecated use `AccountingCompanySourceValue$inboundSchema` instead. */
  export const inboundSchema = AccountingCompanySourceValue$inboundSchema;
  /** @deprecated use `AccountingCompanySourceValue$outboundSchema` instead. */
  export const outboundSchema = AccountingCompanySourceValue$outboundSchema;
  /** @deprecated use `AccountingCompanySourceValue$Outbound` instead. */
  export type Outbound = AccountingCompanySourceValue$Outbound;
}

export function accountingCompanySourceValueToJSON(
  accountingCompanySourceValue: AccountingCompanySourceValue,
): string {
  return JSON.stringify(
    AccountingCompanySourceValue$outboundSchema.parse(
      accountingCompanySourceValue,
    ),
  );
}

export function accountingCompanySourceValueFromJSON(
  jsonString: string,
): SafeParseResult<AccountingCompanySourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingCompanySourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingCompanySourceValue' from JSON`,
  );
}

/** @internal */
export const AccountingCompanyValue$inboundSchema: z.ZodType<
  AccountingCompanyValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AccountingCompanyValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AccountingCompanyValue$outboundSchema: z.ZodType<
  AccountingCompanyValueOpen,
  z.ZodTypeDef,
  AccountingCompanyValueOpen
> = z.union([
  z.nativeEnum(AccountingCompanyValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingCompanyValue$ {
  /** @deprecated use `AccountingCompanyValue$inboundSchema` instead. */
  export const inboundSchema = AccountingCompanyValue$inboundSchema;
  /** @deprecated use `AccountingCompanyValue$outboundSchema` instead. */
  export const outboundSchema = AccountingCompanyValue$outboundSchema;
}

/** @internal */
export const BaseCurrency$inboundSchema: z.ZodType<
  BaseCurrency,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => AccountingCompany4$inboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(AccountingCompanyValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type BaseCurrency$Outbound = {
  source_value?:
    | string
    | number
    | boolean
    | AccountingCompany4$Outbound
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const BaseCurrency$outboundSchema: z.ZodType<
  BaseCurrency$Outbound,
  z.ZodTypeDef,
  BaseCurrency
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => AccountingCompany4$outboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(AccountingCompanyValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BaseCurrency$ {
  /** @deprecated use `BaseCurrency$inboundSchema` instead. */
  export const inboundSchema = BaseCurrency$inboundSchema;
  /** @deprecated use `BaseCurrency$outboundSchema` instead. */
  export const outboundSchema = BaseCurrency$outboundSchema;
  /** @deprecated use `BaseCurrency$Outbound` instead. */
  export type Outbound = BaseCurrency$Outbound;
}

export function baseCurrencyToJSON(baseCurrency: BaseCurrency): string {
  return JSON.stringify(BaseCurrency$outboundSchema.parse(baseCurrency));
}

export function baseCurrencyFromJSON(
  jsonString: string,
): SafeParseResult<BaseCurrency, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BaseCurrency$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BaseCurrency' from JSON`,
  );
}

/** @internal */
export const AccountingCompany$inboundSchema: z.ZodType<
  AccountingCompany,
  z.ZodTypeDef,
  unknown
> = z.object({
  base_currency: z.nullable(z.lazy(() => BaseCurrency$inboundSchema))
    .optional(),
  fiscal_year_start_day: z.nullable(z.number()).optional(),
  fiscal_year_start_month: z.nullable(z.number()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "base_currency": "baseCurrency",
    "fiscal_year_start_day": "fiscalYearStartDay",
    "fiscal_year_start_month": "fiscalYearStartMonth",
    "remote_id": "remoteId",
  });
});

/** @internal */
export type AccountingCompany$Outbound = {
  base_currency?: BaseCurrency$Outbound | null | undefined;
  fiscal_year_start_day?: number | null | undefined;
  fiscal_year_start_month?: number | null | undefined;
  id?: string | null | undefined;
  name?: string | null | undefined;
  remote_id?: string | null | undefined;
};

/** @internal */
export const AccountingCompany$outboundSchema: z.ZodType<
  AccountingCompany$Outbound,
  z.ZodTypeDef,
  AccountingCompany
> = z.object({
  baseCurrency: z.nullable(z.lazy(() => BaseCurrency$outboundSchema))
    .optional(),
  fiscalYearStartDay: z.nullable(z.number()).optional(),
  fiscalYearStartMonth: z.nullable(z.number()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    baseCurrency: "base_currency",
    fiscalYearStartDay: "fiscal_year_start_day",
    fiscalYearStartMonth: "fiscal_year_start_month",
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingCompany$ {
  /** @deprecated use `AccountingCompany$inboundSchema` instead. */
  export const inboundSchema = AccountingCompany$inboundSchema;
  /** @deprecated use `AccountingCompany$outboundSchema` instead. */
  export const outboundSchema = AccountingCompany$outboundSchema;
  /** @deprecated use `AccountingCompany$Outbound` instead. */
  export type Outbound = AccountingCompany$Outbound;
}

export function accountingCompanyToJSON(
  accountingCompany: AccountingCompany,
): string {
  return JSON.stringify(
    AccountingCompany$outboundSchema.parse(accountingCompany),
  );
}

export function accountingCompanyFromJSON(
  jsonString: string,
): SafeParseResult<AccountingCompany, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingCompany$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingCompany' from JSON`,
  );
}
