/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EmploymentManagerApiModel4 = {};

export type EmploymentManagerApiModelSourceValue =
  | string
  | number
  | boolean
  | EmploymentManagerApiModel4
  | Array<any>;

export enum EmploymentManagerApiModelValue {
  Admin = "admin",
  Viewer = "viewer",
  Editor = "editor",
  Basic = "basic",
  Guest = "guest",
  Unassigned = "unassigned",
  Restricted = "restricted",
  UnmappedValue = "unmapped_value",
}
export type EmploymentManagerApiModelValueOpen = OpenEnum<
  typeof EmploymentManagerApiModelValue
>;

/**
 * The manager role type (e.g., admin, viewer)
 */
export type RoleType = {
  sourceValue?:
    | string
    | number
    | boolean
    | EmploymentManagerApiModel4
    | Array<any>
    | null
    | undefined;
  value?: EmploymentManagerApiModelValueOpen | null | undefined;
};

/**
 * The role of manager
 */
export type Role = {
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The label of the role type
   */
  label?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * The manager role type (e.g., admin, viewer)
   */
  roleType?: RoleType | null | undefined;
};

export type EmploymentManagerApiModel = {
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * The role of manager
   */
  role?: Role | null | undefined;
};

/** @internal */
export const EmploymentManagerApiModel4$inboundSchema: z.ZodType<
  EmploymentManagerApiModel4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EmploymentManagerApiModel4$Outbound = {};

/** @internal */
export const EmploymentManagerApiModel4$outboundSchema: z.ZodType<
  EmploymentManagerApiModel4$Outbound,
  z.ZodTypeDef,
  EmploymentManagerApiModel4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentManagerApiModel4$ {
  /** @deprecated use `EmploymentManagerApiModel4$inboundSchema` instead. */
  export const inboundSchema = EmploymentManagerApiModel4$inboundSchema;
  /** @deprecated use `EmploymentManagerApiModel4$outboundSchema` instead. */
  export const outboundSchema = EmploymentManagerApiModel4$outboundSchema;
  /** @deprecated use `EmploymentManagerApiModel4$Outbound` instead. */
  export type Outbound = EmploymentManagerApiModel4$Outbound;
}

export function employmentManagerApiModel4ToJSON(
  employmentManagerApiModel4: EmploymentManagerApiModel4,
): string {
  return JSON.stringify(
    EmploymentManagerApiModel4$outboundSchema.parse(employmentManagerApiModel4),
  );
}

export function employmentManagerApiModel4FromJSON(
  jsonString: string,
): SafeParseResult<EmploymentManagerApiModel4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentManagerApiModel4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentManagerApiModel4' from JSON`,
  );
}

/** @internal */
export const EmploymentManagerApiModelSourceValue$inboundSchema: z.ZodType<
  EmploymentManagerApiModelSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => EmploymentManagerApiModel4$inboundSchema),
  z.array(z.any()),
]);

/** @internal */
export type EmploymentManagerApiModelSourceValue$Outbound =
  | string
  | number
  | boolean
  | EmploymentManagerApiModel4$Outbound
  | Array<any>;

/** @internal */
export const EmploymentManagerApiModelSourceValue$outboundSchema: z.ZodType<
  EmploymentManagerApiModelSourceValue$Outbound,
  z.ZodTypeDef,
  EmploymentManagerApiModelSourceValue
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => EmploymentManagerApiModel4$outboundSchema),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentManagerApiModelSourceValue$ {
  /** @deprecated use `EmploymentManagerApiModelSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    EmploymentManagerApiModelSourceValue$inboundSchema;
  /** @deprecated use `EmploymentManagerApiModelSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    EmploymentManagerApiModelSourceValue$outboundSchema;
  /** @deprecated use `EmploymentManagerApiModelSourceValue$Outbound` instead. */
  export type Outbound = EmploymentManagerApiModelSourceValue$Outbound;
}

export function employmentManagerApiModelSourceValueToJSON(
  employmentManagerApiModelSourceValue: EmploymentManagerApiModelSourceValue,
): string {
  return JSON.stringify(
    EmploymentManagerApiModelSourceValue$outboundSchema.parse(
      employmentManagerApiModelSourceValue,
    ),
  );
}

export function employmentManagerApiModelSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentManagerApiModelSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EmploymentManagerApiModelSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentManagerApiModelSourceValue' from JSON`,
  );
}

/** @internal */
export const EmploymentManagerApiModelValue$inboundSchema: z.ZodType<
  EmploymentManagerApiModelValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EmploymentManagerApiModelValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EmploymentManagerApiModelValue$outboundSchema: z.ZodType<
  EmploymentManagerApiModelValueOpen,
  z.ZodTypeDef,
  EmploymentManagerApiModelValueOpen
> = z.union([
  z.nativeEnum(EmploymentManagerApiModelValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentManagerApiModelValue$ {
  /** @deprecated use `EmploymentManagerApiModelValue$inboundSchema` instead. */
  export const inboundSchema = EmploymentManagerApiModelValue$inboundSchema;
  /** @deprecated use `EmploymentManagerApiModelValue$outboundSchema` instead. */
  export const outboundSchema = EmploymentManagerApiModelValue$outboundSchema;
}

/** @internal */
export const RoleType$inboundSchema: z.ZodType<
  RoleType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => EmploymentManagerApiModel4$inboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmploymentManagerApiModelValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type RoleType$Outbound = {
  source_value?:
    | string
    | number
    | boolean
    | EmploymentManagerApiModel4$Outbound
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const RoleType$outboundSchema: z.ZodType<
  RoleType$Outbound,
  z.ZodTypeDef,
  RoleType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => EmploymentManagerApiModel4$outboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmploymentManagerApiModelValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleType$ {
  /** @deprecated use `RoleType$inboundSchema` instead. */
  export const inboundSchema = RoleType$inboundSchema;
  /** @deprecated use `RoleType$outboundSchema` instead. */
  export const outboundSchema = RoleType$outboundSchema;
  /** @deprecated use `RoleType$Outbound` instead. */
  export type Outbound = RoleType$Outbound;
}

export function roleTypeToJSON(roleType: RoleType): string {
  return JSON.stringify(RoleType$outboundSchema.parse(roleType));
}

export function roleTypeFromJSON(
  jsonString: string,
): SafeParseResult<RoleType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RoleType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RoleType' from JSON`,
  );
}

/** @internal */
export const Role$inboundSchema: z.ZodType<Role, z.ZodTypeDef, unknown> = z
  .object({
    id: z.nullable(z.string()).optional(),
    label: z.nullable(z.string()).optional(),
    remote_id: z.nullable(z.string()).optional(),
    role_type: z.nullable(z.lazy(() => RoleType$inboundSchema)).optional(),
  }).transform((v) => {
    return remap$(v, {
      "remote_id": "remoteId",
      "role_type": "roleType",
    });
  });

/** @internal */
export type Role$Outbound = {
  id?: string | null | undefined;
  label?: string | null | undefined;
  remote_id?: string | null | undefined;
  role_type?: RoleType$Outbound | null | undefined;
};

/** @internal */
export const Role$outboundSchema: z.ZodType<Role$Outbound, z.ZodTypeDef, Role> =
  z.object({
    id: z.nullable(z.string()).optional(),
    label: z.nullable(z.string()).optional(),
    remoteId: z.nullable(z.string()).optional(),
    roleType: z.nullable(z.lazy(() => RoleType$outboundSchema)).optional(),
  }).transform((v) => {
    return remap$(v, {
      remoteId: "remote_id",
      roleType: "role_type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Role$ {
  /** @deprecated use `Role$inboundSchema` instead. */
  export const inboundSchema = Role$inboundSchema;
  /** @deprecated use `Role$outboundSchema` instead. */
  export const outboundSchema = Role$outboundSchema;
  /** @deprecated use `Role$Outbound` instead. */
  export type Outbound = Role$Outbound;
}

export function roleToJSON(role: Role): string {
  return JSON.stringify(Role$outboundSchema.parse(role));
}

export function roleFromJSON(
  jsonString: string,
): SafeParseResult<Role, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Role$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Role' from JSON`,
  );
}

/** @internal */
export const EmploymentManagerApiModel$inboundSchema: z.ZodType<
  EmploymentManagerApiModel,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  role: z.nullable(z.lazy(() => Role$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "remote_id": "remoteId",
  });
});

/** @internal */
export type EmploymentManagerApiModel$Outbound = {
  id?: string | null | undefined;
  remote_id?: string | null | undefined;
  role?: Role$Outbound | null | undefined;
};

/** @internal */
export const EmploymentManagerApiModel$outboundSchema: z.ZodType<
  EmploymentManagerApiModel$Outbound,
  z.ZodTypeDef,
  EmploymentManagerApiModel
> = z.object({
  id: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  role: z.nullable(z.lazy(() => Role$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentManagerApiModel$ {
  /** @deprecated use `EmploymentManagerApiModel$inboundSchema` instead. */
  export const inboundSchema = EmploymentManagerApiModel$inboundSchema;
  /** @deprecated use `EmploymentManagerApiModel$outboundSchema` instead. */
  export const outboundSchema = EmploymentManagerApiModel$outboundSchema;
  /** @deprecated use `EmploymentManagerApiModel$Outbound` instead. */
  export type Outbound = EmploymentManagerApiModel$Outbound;
}

export function employmentManagerApiModelToJSON(
  employmentManagerApiModel: EmploymentManagerApiModel,
): string {
  return JSON.stringify(
    EmploymentManagerApiModel$outboundSchema.parse(employmentManagerApiModel),
  );
}

export function employmentManagerApiModelFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentManagerApiModel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentManagerApiModel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentManagerApiModel' from JSON`,
  );
}
