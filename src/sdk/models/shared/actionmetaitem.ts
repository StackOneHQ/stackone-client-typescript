/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AuthenticationMetaItem,
  AuthenticationMetaItem$inboundSchema,
  AuthenticationMetaItem$Outbound,
  AuthenticationMetaItem$outboundSchema,
} from "./authenticationmetaitem.js";

export type ActionMetaItem = {
  /**
   * The authentication methods supported by this action
   */
  authentication?: Array<AuthenticationMetaItem> | null | undefined;
  /**
   * The action description
   */
  description?: string | null | undefined;
  /**
   * The action ID
   */
  id?: string | null | undefined;
  /**
   * The action name
   */
  name?: string | null | undefined;
  /**
   * The operation details for the action
   */
  operationDetails?: { [k: string]: any } | null | undefined;
  /**
   * The schema type for the action
   */
  schemaType?: string | null | undefined;
};

/** @internal */
export const ActionMetaItem$inboundSchema: z.ZodType<
  ActionMetaItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  authentication: z.nullable(z.array(AuthenticationMetaItem$inboundSchema))
    .optional(),
  description: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  operation_details: z.nullable(z.record(z.any())).optional(),
  schema_type: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "operation_details": "operationDetails",
    "schema_type": "schemaType",
  });
});

/** @internal */
export type ActionMetaItem$Outbound = {
  authentication?: Array<AuthenticationMetaItem$Outbound> | null | undefined;
  description?: string | null | undefined;
  id?: string | null | undefined;
  name?: string | null | undefined;
  operation_details?: { [k: string]: any } | null | undefined;
  schema_type?: string | null | undefined;
};

/** @internal */
export const ActionMetaItem$outboundSchema: z.ZodType<
  ActionMetaItem$Outbound,
  z.ZodTypeDef,
  ActionMetaItem
> = z.object({
  authentication: z.nullable(z.array(AuthenticationMetaItem$outboundSchema))
    .optional(),
  description: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  operationDetails: z.nullable(z.record(z.any())).optional(),
  schemaType: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    operationDetails: "operation_details",
    schemaType: "schema_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActionMetaItem$ {
  /** @deprecated use `ActionMetaItem$inboundSchema` instead. */
  export const inboundSchema = ActionMetaItem$inboundSchema;
  /** @deprecated use `ActionMetaItem$outboundSchema` instead. */
  export const outboundSchema = ActionMetaItem$outboundSchema;
  /** @deprecated use `ActionMetaItem$Outbound` instead. */
  export type Outbound = ActionMetaItem$Outbound;
}

export function actionMetaItemToJSON(actionMetaItem: ActionMetaItem): string {
  return JSON.stringify(ActionMetaItem$outboundSchema.parse(actionMetaItem));
}

export function actionMetaItemFromJSON(
  jsonString: string,
): SafeParseResult<ActionMetaItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActionMetaItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActionMetaItem' from JSON`,
  );
}
