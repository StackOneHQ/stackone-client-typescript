/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HRISDivision4 = {};

export type HRISDivisionSourceValue =
  | HRISDivision4
  | string
  | number
  | boolean
  | Array<any>;

export enum HRISDivisionValue {
  Department = "department",
  Company = "company",
  Division = "division",
  Group = "group",
  Project = "project",
  CostCenter = "cost_center",
  Team = "team",
  UnmappedValue = "unmapped_value",
}
export type HRISDivisionValueOpen = OpenEnum<typeof HRISDivisionValue>;

/**
 * The type of the division group
 */
export type HRISDivisionType = {
  sourceValue?:
    | HRISDivision4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: HRISDivisionValueOpen | null | undefined;
};

export type HRISDivision = {
  /**
   * The id of the company that the group belongs to
   */
  companyId?: string | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The name of the group
   */
  name?: string | null | undefined;
  /**
   * The list of group owner ids of the given group
   */
  ownerIds?: Array<string> | null | undefined;
  /**
   * The list of parent group ids of the given group
   */
  parentIds?: Array<string> | null | undefined;
  /**
   * Provider's id of the company that the group belongs to
   */
  remoteCompanyId?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * The list of remote group owner ids of the given group
   */
  remoteOwnerIds?: Array<string> | null | undefined;
  /**
   * Provider's list of parent group remote ids of the given group
   */
  remoteParentIds?: Array<string> | null | undefined;
  /**
   * The type of the division group
   */
  type?: HRISDivisionType | null | undefined;
  /**
   * Custom Unified Fields configured in your StackOne project
   */
  unifiedCustomFields?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const HRISDivision4$inboundSchema: z.ZodType<
  HRISDivision4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HRISDivision4$Outbound = {};

/** @internal */
export const HRISDivision4$outboundSchema: z.ZodType<
  HRISDivision4$Outbound,
  z.ZodTypeDef,
  HRISDivision4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HRISDivision4$ {
  /** @deprecated use `HRISDivision4$inboundSchema` instead. */
  export const inboundSchema = HRISDivision4$inboundSchema;
  /** @deprecated use `HRISDivision4$outboundSchema` instead. */
  export const outboundSchema = HRISDivision4$outboundSchema;
  /** @deprecated use `HRISDivision4$Outbound` instead. */
  export type Outbound = HRISDivision4$Outbound;
}

export function hrisDivision4ToJSON(hrisDivision4: HRISDivision4): string {
  return JSON.stringify(HRISDivision4$outboundSchema.parse(hrisDivision4));
}

export function hrisDivision4FromJSON(
  jsonString: string,
): SafeParseResult<HRISDivision4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HRISDivision4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HRISDivision4' from JSON`,
  );
}

/** @internal */
export const HRISDivisionSourceValue$inboundSchema: z.ZodType<
  HRISDivisionSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => HRISDivision4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type HRISDivisionSourceValue$Outbound =
  | HRISDivision4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const HRISDivisionSourceValue$outboundSchema: z.ZodType<
  HRISDivisionSourceValue$Outbound,
  z.ZodTypeDef,
  HRISDivisionSourceValue
> = z.union([
  z.lazy(() => HRISDivision4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HRISDivisionSourceValue$ {
  /** @deprecated use `HRISDivisionSourceValue$inboundSchema` instead. */
  export const inboundSchema = HRISDivisionSourceValue$inboundSchema;
  /** @deprecated use `HRISDivisionSourceValue$outboundSchema` instead. */
  export const outboundSchema = HRISDivisionSourceValue$outboundSchema;
  /** @deprecated use `HRISDivisionSourceValue$Outbound` instead. */
  export type Outbound = HRISDivisionSourceValue$Outbound;
}

export function hrisDivisionSourceValueToJSON(
  hrisDivisionSourceValue: HRISDivisionSourceValue,
): string {
  return JSON.stringify(
    HRISDivisionSourceValue$outboundSchema.parse(hrisDivisionSourceValue),
  );
}

export function hrisDivisionSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<HRISDivisionSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HRISDivisionSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HRISDivisionSourceValue' from JSON`,
  );
}

/** @internal */
export const HRISDivisionValue$inboundSchema: z.ZodType<
  HRISDivisionValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(HRISDivisionValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const HRISDivisionValue$outboundSchema: z.ZodType<
  HRISDivisionValueOpen,
  z.ZodTypeDef,
  HRISDivisionValueOpen
> = z.union([
  z.nativeEnum(HRISDivisionValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HRISDivisionValue$ {
  /** @deprecated use `HRISDivisionValue$inboundSchema` instead. */
  export const inboundSchema = HRISDivisionValue$inboundSchema;
  /** @deprecated use `HRISDivisionValue$outboundSchema` instead. */
  export const outboundSchema = HRISDivisionValue$outboundSchema;
}

/** @internal */
export const HRISDivisionType$inboundSchema: z.ZodType<
  HRISDivisionType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => HRISDivision4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(HRISDivisionValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type HRISDivisionType$Outbound = {
  source_value?:
    | HRISDivision4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const HRISDivisionType$outboundSchema: z.ZodType<
  HRISDivisionType$Outbound,
  z.ZodTypeDef,
  HRISDivisionType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => HRISDivision4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(HRISDivisionValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HRISDivisionType$ {
  /** @deprecated use `HRISDivisionType$inboundSchema` instead. */
  export const inboundSchema = HRISDivisionType$inboundSchema;
  /** @deprecated use `HRISDivisionType$outboundSchema` instead. */
  export const outboundSchema = HRISDivisionType$outboundSchema;
  /** @deprecated use `HRISDivisionType$Outbound` instead. */
  export type Outbound = HRISDivisionType$Outbound;
}

export function hrisDivisionTypeToJSON(
  hrisDivisionType: HRISDivisionType,
): string {
  return JSON.stringify(
    HRISDivisionType$outboundSchema.parse(hrisDivisionType),
  );
}

export function hrisDivisionTypeFromJSON(
  jsonString: string,
): SafeParseResult<HRISDivisionType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HRISDivisionType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HRISDivisionType' from JSON`,
  );
}

/** @internal */
export const HRISDivision$inboundSchema: z.ZodType<
  HRISDivision,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_id: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  owner_ids: z.nullable(z.array(z.string())).optional(),
  parent_ids: z.nullable(z.array(z.string())).optional(),
  remote_company_id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  remote_owner_ids: z.nullable(z.array(z.string())).optional(),
  remote_parent_ids: z.nullable(z.array(z.string())).optional(),
  type: z.nullable(z.lazy(() => HRISDivisionType$inboundSchema)).optional(),
  unified_custom_fields: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_id": "companyId",
    "owner_ids": "ownerIds",
    "parent_ids": "parentIds",
    "remote_company_id": "remoteCompanyId",
    "remote_id": "remoteId",
    "remote_owner_ids": "remoteOwnerIds",
    "remote_parent_ids": "remoteParentIds",
    "unified_custom_fields": "unifiedCustomFields",
  });
});

/** @internal */
export type HRISDivision$Outbound = {
  company_id?: string | null | undefined;
  id?: string | null | undefined;
  name?: string | null | undefined;
  owner_ids?: Array<string> | null | undefined;
  parent_ids?: Array<string> | null | undefined;
  remote_company_id?: string | null | undefined;
  remote_id?: string | null | undefined;
  remote_owner_ids?: Array<string> | null | undefined;
  remote_parent_ids?: Array<string> | null | undefined;
  type?: HRISDivisionType$Outbound | null | undefined;
  unified_custom_fields?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const HRISDivision$outboundSchema: z.ZodType<
  HRISDivision$Outbound,
  z.ZodTypeDef,
  HRISDivision
> = z.object({
  companyId: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  ownerIds: z.nullable(z.array(z.string())).optional(),
  parentIds: z.nullable(z.array(z.string())).optional(),
  remoteCompanyId: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  remoteOwnerIds: z.nullable(z.array(z.string())).optional(),
  remoteParentIds: z.nullable(z.array(z.string())).optional(),
  type: z.nullable(z.lazy(() => HRISDivisionType$outboundSchema)).optional(),
  unifiedCustomFields: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company_id",
    ownerIds: "owner_ids",
    parentIds: "parent_ids",
    remoteCompanyId: "remote_company_id",
    remoteId: "remote_id",
    remoteOwnerIds: "remote_owner_ids",
    remoteParentIds: "remote_parent_ids",
    unifiedCustomFields: "unified_custom_fields",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HRISDivision$ {
  /** @deprecated use `HRISDivision$inboundSchema` instead. */
  export const inboundSchema = HRISDivision$inboundSchema;
  /** @deprecated use `HRISDivision$outboundSchema` instead. */
  export const outboundSchema = HRISDivision$outboundSchema;
  /** @deprecated use `HRISDivision$Outbound` instead. */
  export type Outbound = HRISDivision$Outbound;
}

export function hrisDivisionToJSON(hrisDivision: HRISDivision): string {
  return JSON.stringify(HRISDivision$outboundSchema.parse(hrisDivision));
}

export function hrisDivisionFromJSON(
  jsonString: string,
): SafeParseResult<HRISDivision, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HRISDivision$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HRISDivision' from JSON`,
  );
}
