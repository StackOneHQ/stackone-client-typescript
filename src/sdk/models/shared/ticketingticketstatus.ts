/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TicketingTicketStatus4 = {};

/**
 * The source value of this status type
 */
export type TicketingTicketStatusSourceValue =
  | TicketingTicketStatus4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The type of this status
 */
export enum TicketingTicketStatusValue {
  ToDo = "to-do",
  InProgress = "in-progress",
  Closed = "closed",
  UnmappedValue = "unmapped_value",
}
/**
 * The type of this status
 */
export type TicketingTicketStatusValueOpen = OpenEnum<
  typeof TicketingTicketStatusValue
>;

/**
 * The type of this status
 */
export type TicketingTicketStatusType = {
  /**
   * The source value of this status type
   */
  sourceValue?:
    | TicketingTicketStatus4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The type of this status
   */
  value?: TicketingTicketStatusValueOpen | null | undefined;
};

export type TicketingTicketStatus = {
  /**
   * The id of the ticket status.
   */
  id?: string | null | undefined;
  /**
   * The name of the ticket status.
   */
  name?: string | null | undefined;
  /**
   * The type of this status
   */
  type?: TicketingTicketStatusType | null | undefined;
};

/** @internal */
export const TicketingTicketStatus4$inboundSchema: z.ZodType<
  TicketingTicketStatus4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TicketingTicketStatus4$Outbound = {};

/** @internal */
export const TicketingTicketStatus4$outboundSchema: z.ZodType<
  TicketingTicketStatus4$Outbound,
  z.ZodTypeDef,
  TicketingTicketStatus4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketStatus4$ {
  /** @deprecated use `TicketingTicketStatus4$inboundSchema` instead. */
  export const inboundSchema = TicketingTicketStatus4$inboundSchema;
  /** @deprecated use `TicketingTicketStatus4$outboundSchema` instead. */
  export const outboundSchema = TicketingTicketStatus4$outboundSchema;
  /** @deprecated use `TicketingTicketStatus4$Outbound` instead. */
  export type Outbound = TicketingTicketStatus4$Outbound;
}

export function ticketingTicketStatus4ToJSON(
  ticketingTicketStatus4: TicketingTicketStatus4,
): string {
  return JSON.stringify(
    TicketingTicketStatus4$outboundSchema.parse(ticketingTicketStatus4),
  );
}

export function ticketingTicketStatus4FromJSON(
  jsonString: string,
): SafeParseResult<TicketingTicketStatus4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingTicketStatus4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingTicketStatus4' from JSON`,
  );
}

/** @internal */
export const TicketingTicketStatusSourceValue$inboundSchema: z.ZodType<
  TicketingTicketStatusSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TicketingTicketStatus4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type TicketingTicketStatusSourceValue$Outbound =
  | TicketingTicketStatus4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const TicketingTicketStatusSourceValue$outboundSchema: z.ZodType<
  TicketingTicketStatusSourceValue$Outbound,
  z.ZodTypeDef,
  TicketingTicketStatusSourceValue
> = z.union([
  z.lazy(() => TicketingTicketStatus4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketStatusSourceValue$ {
  /** @deprecated use `TicketingTicketStatusSourceValue$inboundSchema` instead. */
  export const inboundSchema = TicketingTicketStatusSourceValue$inboundSchema;
  /** @deprecated use `TicketingTicketStatusSourceValue$outboundSchema` instead. */
  export const outboundSchema = TicketingTicketStatusSourceValue$outboundSchema;
  /** @deprecated use `TicketingTicketStatusSourceValue$Outbound` instead. */
  export type Outbound = TicketingTicketStatusSourceValue$Outbound;
}

export function ticketingTicketStatusSourceValueToJSON(
  ticketingTicketStatusSourceValue: TicketingTicketStatusSourceValue,
): string {
  return JSON.stringify(
    TicketingTicketStatusSourceValue$outboundSchema.parse(
      ticketingTicketStatusSourceValue,
    ),
  );
}

export function ticketingTicketStatusSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<TicketingTicketStatusSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingTicketStatusSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingTicketStatusSourceValue' from JSON`,
  );
}

/** @internal */
export const TicketingTicketStatusValue$inboundSchema: z.ZodType<
  TicketingTicketStatusValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TicketingTicketStatusValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TicketingTicketStatusValue$outboundSchema: z.ZodType<
  TicketingTicketStatusValueOpen,
  z.ZodTypeDef,
  TicketingTicketStatusValueOpen
> = z.union([
  z.nativeEnum(TicketingTicketStatusValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketStatusValue$ {
  /** @deprecated use `TicketingTicketStatusValue$inboundSchema` instead. */
  export const inboundSchema = TicketingTicketStatusValue$inboundSchema;
  /** @deprecated use `TicketingTicketStatusValue$outboundSchema` instead. */
  export const outboundSchema = TicketingTicketStatusValue$outboundSchema;
}

/** @internal */
export const TicketingTicketStatusType$inboundSchema: z.ZodType<
  TicketingTicketStatusType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => TicketingTicketStatus4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(TicketingTicketStatusValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type TicketingTicketStatusType$Outbound = {
  source_value?:
    | TicketingTicketStatus4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const TicketingTicketStatusType$outboundSchema: z.ZodType<
  TicketingTicketStatusType$Outbound,
  z.ZodTypeDef,
  TicketingTicketStatusType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => TicketingTicketStatus4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(TicketingTicketStatusValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketStatusType$ {
  /** @deprecated use `TicketingTicketStatusType$inboundSchema` instead. */
  export const inboundSchema = TicketingTicketStatusType$inboundSchema;
  /** @deprecated use `TicketingTicketStatusType$outboundSchema` instead. */
  export const outboundSchema = TicketingTicketStatusType$outboundSchema;
  /** @deprecated use `TicketingTicketStatusType$Outbound` instead. */
  export type Outbound = TicketingTicketStatusType$Outbound;
}

export function ticketingTicketStatusTypeToJSON(
  ticketingTicketStatusType: TicketingTicketStatusType,
): string {
  return JSON.stringify(
    TicketingTicketStatusType$outboundSchema.parse(ticketingTicketStatusType),
  );
}

export function ticketingTicketStatusTypeFromJSON(
  jsonString: string,
): SafeParseResult<TicketingTicketStatusType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingTicketStatusType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingTicketStatusType' from JSON`,
  );
}

/** @internal */
export const TicketingTicketStatus$inboundSchema: z.ZodType<
  TicketingTicketStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  type: z.nullable(z.lazy(() => TicketingTicketStatusType$inboundSchema))
    .optional(),
});

/** @internal */
export type TicketingTicketStatus$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  type?: TicketingTicketStatusType$Outbound | null | undefined;
};

/** @internal */
export const TicketingTicketStatus$outboundSchema: z.ZodType<
  TicketingTicketStatus$Outbound,
  z.ZodTypeDef,
  TicketingTicketStatus
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  type: z.nullable(z.lazy(() => TicketingTicketStatusType$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketStatus$ {
  /** @deprecated use `TicketingTicketStatus$inboundSchema` instead. */
  export const inboundSchema = TicketingTicketStatus$inboundSchema;
  /** @deprecated use `TicketingTicketStatus$outboundSchema` instead. */
  export const outboundSchema = TicketingTicketStatus$outboundSchema;
  /** @deprecated use `TicketingTicketStatus$Outbound` instead. */
  export type Outbound = TicketingTicketStatus$Outbound;
}

export function ticketingTicketStatusToJSON(
  ticketingTicketStatus: TicketingTicketStatus,
): string {
  return JSON.stringify(
    TicketingTicketStatus$outboundSchema.parse(ticketingTicketStatus),
  );
}

export function ticketingTicketStatusFromJSON(
  jsonString: string,
): SafeParseResult<TicketingTicketStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingTicketStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingTicketStatus' from JSON`,
  );
}
