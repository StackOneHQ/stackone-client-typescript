/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * The type of the answer.
 */
export enum Value {
    ShortText = "short_text",
    LongText = "long_text",
    Attachment = "attachment",
    MultiSelect = "multi_select",
    SingleSelect = "single_select",
    Boolean = "boolean",
    Number = "number",
    Date = "date",
}

export type AnswerEnum = {
    /**
     * The source value of the answer type.
     */
    sourceValue?: string | undefined;
    /**
     * The type of the answer.
     */
    value?: Value | undefined;
};

/** @internal */
export const Value$ = z.nativeEnum(Value);

/** @internal */
export namespace AnswerEnum$ {
    export type Inbound = {
        source_value?: string | undefined;
        value?: Value | undefined;
    };

    export const inboundSchema: z.ZodType<AnswerEnum, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z.string().optional(),
            value: Value$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?: string | undefined;
        value?: Value | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AnswerEnum> = z
        .object({
            sourceValue: z.string().optional(),
            value: Value$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}
