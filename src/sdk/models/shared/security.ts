/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as z from "zod";

export type Security = {
    password?: string | undefined;
    username?: string | undefined;
};

/** @internal */
export namespace Security$ {
    export const inboundSchema: z.ZodType<Security, z.ZodTypeDef, unknown> = z
        .object({
            Password: z.string().optional(),
            Username: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Password: "password",
                Username: "username",
            });
        });

    export type Outbound = {
        Password?: string | undefined;
        Username?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Security> = z
        .object({
            password: z.string().optional(),
            username: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                password: "Password",
                username: "Username",
            });
        });
}
