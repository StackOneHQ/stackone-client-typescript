/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Security = {
    password?: string | undefined;
    username?: string | undefined;
};

/** @internal */
export namespace Security$ {
    export type Inbound = {
        Password?: string | undefined;
        Username?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Security, z.ZodTypeDef, Inbound> = z
        .object({
            Password: z.string().optional(),
            Username: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.Password === undefined ? null : { password: v.Password }),
                ...(v.Username === undefined ? null : { username: v.Username }),
            };
        });

    export type Outbound = {
        Password?: string | undefined;
        Username?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Security> = z
        .object({
            password: z.string().optional(),
            username: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.password === undefined ? null : { Password: v.password }),
                ...(v.username === undefined ? null : { Username: v.username }),
            };
        });
}
