/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CreateJournalLine,
  CreateJournalLine$inboundSchema,
  CreateJournalLine$Outbound,
  CreateJournalLine$outboundSchema,
} from "./createjournalline.js";

export type AccountingJournalCreateRequestDto4 = {};

export type AccountingJournalCreateRequestDtoSourceValue =
  | AccountingJournalCreateRequestDto4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * Default currency for the company
 */
export enum AccountingJournalCreateRequestDtoValue {
  Aed = "AED",
  Afn = "AFN",
  All = "ALL",
  Amd = "AMD",
  Ang = "ANG",
  Aoa = "AOA",
  Ars = "ARS",
  Aud = "AUD",
  Awg = "AWG",
  Azn = "AZN",
  Bam = "BAM",
  Bbd = "BBD",
  Bdt = "BDT",
  Bgn = "BGN",
  Bhd = "BHD",
  Bif = "BIF",
  Bmd = "BMD",
  Bnd = "BND",
  Bob = "BOB",
  Brl = "BRL",
  Bsd = "BSD",
  Btn = "BTN",
  Bwp = "BWP",
  Byn = "BYN",
  Bzd = "BZD",
  Cad = "CAD",
  Cdf = "CDF",
  Chf = "CHF",
  Clp = "CLP",
  Cny = "CNY",
  Cop = "COP",
  Crc = "CRC",
  Cuc = "CUC",
  Cup = "CUP",
  Cve = "CVE",
  Czk = "CZK",
  Djf = "DJF",
  Dkk = "DKK",
  Dop = "DOP",
  Dzd = "DZD",
  Egp = "EGP",
  Ern = "ERN",
  Etb = "ETB",
  Eur = "EUR",
  Fjd = "FJD",
  Fkp = "FKP",
  Gbp = "GBP",
  Gel = "GEL",
  Ghs = "GHS",
  Gip = "GIP",
  Gmd = "GMD",
  Gnf = "GNF",
  Gtq = "GTQ",
  Gyd = "GYD",
  Hkd = "HKD",
  Hnl = "HNL",
  Hrk = "HRK",
  Htg = "HTG",
  Huf = "HUF",
  Idr = "IDR",
  Ils = "ILS",
  Inr = "INR",
  Iqd = "IQD",
  Irr = "IRR",
  Isk = "ISK",
  Jmd = "JMD",
  Jod = "JOD",
  Jpy = "JPY",
  Kes = "KES",
  Kgs = "KGS",
  Khr = "KHR",
  Kmf = "KMF",
  Kpw = "KPW",
  Krw = "KRW",
  Kwd = "KWD",
  Kyd = "KYD",
  Kzt = "KZT",
  Lak = "LAK",
  Lbp = "LBP",
  Lkr = "LKR",
  Lrd = "LRD",
  Lsl = "LSL",
  Lyd = "LYD",
  Mad = "MAD",
  Mdl = "MDL",
  Mga = "MGA",
  Mkd = "MKD",
  Mmk = "MMK",
  Mnt = "MNT",
  Mop = "MOP",
  Mru = "MRU",
  Mur = "MUR",
  Mvr = "MVR",
  Mwk = "MWK",
  Mxn = "MXN",
  Myr = "MYR",
  Mzn = "MZN",
  Nad = "NAD",
  Ngn = "NGN",
  Nio = "NIO",
  Nok = "NOK",
  Npr = "NPR",
  Nzd = "NZD",
  Omr = "OMR",
  Pab = "PAB",
  Pen = "PEN",
  Pgk = "PGK",
  Php = "PHP",
  Pkr = "PKR",
  Pln = "PLN",
  Pyg = "PYG",
  Qar = "QAR",
  Ron = "RON",
  Rsd = "RSD",
  Rub = "RUB",
  Rwf = "RWF",
  Sar = "SAR",
  Sbd = "SBD",
  Scr = "SCR",
  Sdg = "SDG",
  Sek = "SEK",
  Sgd = "SGD",
  Shp = "SHP",
  Sll = "SLL",
  Sos = "SOS",
  Srd = "SRD",
  Ssp = "SSP",
  Stn = "STN",
  Syp = "SYP",
  Szl = "SZL",
  Thb = "THB",
  Tjs = "TJS",
  Tmt = "TMT",
  Tnd = "TND",
  Top = "TOP",
  Try = "TRY",
  Ttd = "TTD",
  Twd = "TWD",
  Tzs = "TZS",
  Uah = "UAH",
  Ugx = "UGX",
  Usd = "USD",
  Uyu = "UYU",
  Uzs = "UZS",
  Ves = "VES",
  Vnd = "VND",
  Vuv = "VUV",
  Wst = "WST",
  Xaf = "XAF",
  Xcd = "XCD",
  Xdr = "XDR",
  Xof = "XOF",
  Xpf = "XPF",
  Yer = "YER",
  Zar = "ZAR",
  Zmw = "ZMW",
  Zwl = "ZWL",
  UnmappedValue = "unmapped_value",
}
/**
 * Default currency for the company
 */
export type AccountingJournalCreateRequestDtoValueOpen = OpenEnum<
  typeof AccountingJournalCreateRequestDtoValue
>;

/**
 * Currency code for the journal and all lines
 */
export type CurrencyCode = {
  sourceValue?:
    | AccountingJournalCreateRequestDto4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * Default currency for the company
   */
  value?: AccountingJournalCreateRequestDtoValueOpen | null | undefined;
};

export type AccountingJournalCreateRequestDto = {
  /**
   * Currency code for the journal and all lines
   */
  currencyCode?: CurrencyCode | null | undefined;
  /**
   * Exchange rate to company base currency to apply to all lines
   */
  exchangeRate?: number | null | undefined;
  /**
   * List of journal lines
   */
  lines?: Array<CreateJournalLine> | null | undefined;
  /**
   * Memo or description for the journal
   */
  memo?: string | null | undefined;
  /**
   * Reference number for the journal
   */
  reference?: string | null | undefined;
  /**
   * Date of the journal transaction
   */
  transactionDate?: Date | null | undefined;
};

/** @internal */
export const AccountingJournalCreateRequestDto4$inboundSchema: z.ZodType<
  AccountingJournalCreateRequestDto4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AccountingJournalCreateRequestDto4$Outbound = {};

/** @internal */
export const AccountingJournalCreateRequestDto4$outboundSchema: z.ZodType<
  AccountingJournalCreateRequestDto4$Outbound,
  z.ZodTypeDef,
  AccountingJournalCreateRequestDto4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingJournalCreateRequestDto4$ {
  /** @deprecated use `AccountingJournalCreateRequestDto4$inboundSchema` instead. */
  export const inboundSchema = AccountingJournalCreateRequestDto4$inboundSchema;
  /** @deprecated use `AccountingJournalCreateRequestDto4$outboundSchema` instead. */
  export const outboundSchema =
    AccountingJournalCreateRequestDto4$outboundSchema;
  /** @deprecated use `AccountingJournalCreateRequestDto4$Outbound` instead. */
  export type Outbound = AccountingJournalCreateRequestDto4$Outbound;
}

export function accountingJournalCreateRequestDto4ToJSON(
  accountingJournalCreateRequestDto4: AccountingJournalCreateRequestDto4,
): string {
  return JSON.stringify(
    AccountingJournalCreateRequestDto4$outboundSchema.parse(
      accountingJournalCreateRequestDto4,
    ),
  );
}

export function accountingJournalCreateRequestDto4FromJSON(
  jsonString: string,
): SafeParseResult<AccountingJournalCreateRequestDto4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingJournalCreateRequestDto4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingJournalCreateRequestDto4' from JSON`,
  );
}

/** @internal */
export const AccountingJournalCreateRequestDtoSourceValue$inboundSchema:
  z.ZodType<
    AccountingJournalCreateRequestDtoSourceValue,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => AccountingJournalCreateRequestDto4$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/** @internal */
export type AccountingJournalCreateRequestDtoSourceValue$Outbound =
  | AccountingJournalCreateRequestDto4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const AccountingJournalCreateRequestDtoSourceValue$outboundSchema:
  z.ZodType<
    AccountingJournalCreateRequestDtoSourceValue$Outbound,
    z.ZodTypeDef,
    AccountingJournalCreateRequestDtoSourceValue
  > = z.union([
    z.lazy(() => AccountingJournalCreateRequestDto4$outboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingJournalCreateRequestDtoSourceValue$ {
  /** @deprecated use `AccountingJournalCreateRequestDtoSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    AccountingJournalCreateRequestDtoSourceValue$inboundSchema;
  /** @deprecated use `AccountingJournalCreateRequestDtoSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    AccountingJournalCreateRequestDtoSourceValue$outboundSchema;
  /** @deprecated use `AccountingJournalCreateRequestDtoSourceValue$Outbound` instead. */
  export type Outbound = AccountingJournalCreateRequestDtoSourceValue$Outbound;
}

export function accountingJournalCreateRequestDtoSourceValueToJSON(
  accountingJournalCreateRequestDtoSourceValue:
    AccountingJournalCreateRequestDtoSourceValue,
): string {
  return JSON.stringify(
    AccountingJournalCreateRequestDtoSourceValue$outboundSchema.parse(
      accountingJournalCreateRequestDtoSourceValue,
    ),
  );
}

export function accountingJournalCreateRequestDtoSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountingJournalCreateRequestDtoSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingJournalCreateRequestDtoSourceValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountingJournalCreateRequestDtoSourceValue' from JSON`,
  );
}

/** @internal */
export const AccountingJournalCreateRequestDtoValue$inboundSchema: z.ZodType<
  AccountingJournalCreateRequestDtoValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AccountingJournalCreateRequestDtoValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AccountingJournalCreateRequestDtoValue$outboundSchema: z.ZodType<
  AccountingJournalCreateRequestDtoValueOpen,
  z.ZodTypeDef,
  AccountingJournalCreateRequestDtoValueOpen
> = z.union([
  z.nativeEnum(AccountingJournalCreateRequestDtoValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingJournalCreateRequestDtoValue$ {
  /** @deprecated use `AccountingJournalCreateRequestDtoValue$inboundSchema` instead. */
  export const inboundSchema =
    AccountingJournalCreateRequestDtoValue$inboundSchema;
  /** @deprecated use `AccountingJournalCreateRequestDtoValue$outboundSchema` instead. */
  export const outboundSchema =
    AccountingJournalCreateRequestDtoValue$outboundSchema;
}

/** @internal */
export const CurrencyCode$inboundSchema: z.ZodType<
  CurrencyCode,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => AccountingJournalCreateRequestDto4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(AccountingJournalCreateRequestDtoValue$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type CurrencyCode$Outbound = {
  source_value?:
    | AccountingJournalCreateRequestDto4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const CurrencyCode$outboundSchema: z.ZodType<
  CurrencyCode$Outbound,
  z.ZodTypeDef,
  CurrencyCode
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => AccountingJournalCreateRequestDto4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(AccountingJournalCreateRequestDtoValue$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CurrencyCode$ {
  /** @deprecated use `CurrencyCode$inboundSchema` instead. */
  export const inboundSchema = CurrencyCode$inboundSchema;
  /** @deprecated use `CurrencyCode$outboundSchema` instead. */
  export const outboundSchema = CurrencyCode$outboundSchema;
  /** @deprecated use `CurrencyCode$Outbound` instead. */
  export type Outbound = CurrencyCode$Outbound;
}

export function currencyCodeToJSON(currencyCode: CurrencyCode): string {
  return JSON.stringify(CurrencyCode$outboundSchema.parse(currencyCode));
}

export function currencyCodeFromJSON(
  jsonString: string,
): SafeParseResult<CurrencyCode, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CurrencyCode$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CurrencyCode' from JSON`,
  );
}

/** @internal */
export const AccountingJournalCreateRequestDto$inboundSchema: z.ZodType<
  AccountingJournalCreateRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency_code: z.nullable(z.lazy(() => CurrencyCode$inboundSchema))
    .optional(),
  exchange_rate: z.nullable(z.number()).optional(),
  lines: z.nullable(z.array(CreateJournalLine$inboundSchema)).optional(),
  memo: z.nullable(z.string()).optional(),
  reference: z.nullable(z.string()).optional(),
  transaction_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
    "exchange_rate": "exchangeRate",
    "transaction_date": "transactionDate",
  });
});

/** @internal */
export type AccountingJournalCreateRequestDto$Outbound = {
  currency_code?: CurrencyCode$Outbound | null | undefined;
  exchange_rate?: number | null | undefined;
  lines?: Array<CreateJournalLine$Outbound> | null | undefined;
  memo?: string | null | undefined;
  reference?: string | null | undefined;
  transaction_date?: string | null | undefined;
};

/** @internal */
export const AccountingJournalCreateRequestDto$outboundSchema: z.ZodType<
  AccountingJournalCreateRequestDto$Outbound,
  z.ZodTypeDef,
  AccountingJournalCreateRequestDto
> = z.object({
  currencyCode: z.nullable(z.lazy(() => CurrencyCode$outboundSchema))
    .optional(),
  exchangeRate: z.nullable(z.number()).optional(),
  lines: z.nullable(z.array(CreateJournalLine$outboundSchema)).optional(),
  memo: z.nullable(z.string()).optional(),
  reference: z.nullable(z.string()).optional(),
  transactionDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
    exchangeRate: "exchange_rate",
    transactionDate: "transaction_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingJournalCreateRequestDto$ {
  /** @deprecated use `AccountingJournalCreateRequestDto$inboundSchema` instead. */
  export const inboundSchema = AccountingJournalCreateRequestDto$inboundSchema;
  /** @deprecated use `AccountingJournalCreateRequestDto$outboundSchema` instead. */
  export const outboundSchema =
    AccountingJournalCreateRequestDto$outboundSchema;
  /** @deprecated use `AccountingJournalCreateRequestDto$Outbound` instead. */
  export type Outbound = AccountingJournalCreateRequestDto$Outbound;
}

export function accountingJournalCreateRequestDtoToJSON(
  accountingJournalCreateRequestDto: AccountingJournalCreateRequestDto,
): string {
  return JSON.stringify(
    AccountingJournalCreateRequestDto$outboundSchema.parse(
      accountingJournalCreateRequestDto,
    ),
  );
}

export function accountingJournalCreateRequestDtoFromJSON(
  jsonString: string,
): SafeParseResult<AccountingJournalCreateRequestDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingJournalCreateRequestDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingJournalCreateRequestDto' from JSON`,
  );
}
