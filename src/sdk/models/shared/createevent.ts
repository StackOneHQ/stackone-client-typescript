/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateEvent = {
  /**
   * The event name
   */
  event: string;
  /**
   * The record id associated with the event
   */
  recordId: string;
};

/** @internal */
export const CreateEvent$inboundSchema: z.ZodType<
  CreateEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  event: z.string(),
  record_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "record_id": "recordId",
  });
});

/** @internal */
export type CreateEvent$Outbound = {
  event: string;
  record_id: string;
};

/** @internal */
export const CreateEvent$outboundSchema: z.ZodType<
  CreateEvent$Outbound,
  z.ZodTypeDef,
  CreateEvent
> = z.object({
  event: z.string(),
  recordId: z.string(),
}).transform((v) => {
  return remap$(v, {
    recordId: "record_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEvent$ {
  /** @deprecated use `CreateEvent$inboundSchema` instead. */
  export const inboundSchema = CreateEvent$inboundSchema;
  /** @deprecated use `CreateEvent$outboundSchema` instead. */
  export const outboundSchema = CreateEvent$outboundSchema;
  /** @deprecated use `CreateEvent$Outbound` instead. */
  export type Outbound = CreateEvent$Outbound;
}

export function createEventToJSON(createEvent: CreateEvent): string {
  return JSON.stringify(CreateEvent$outboundSchema.parse(createEvent));
}

export function createEventFromJSON(
  jsonString: string,
): SafeParseResult<CreateEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEvent' from JSON`,
  );
}
