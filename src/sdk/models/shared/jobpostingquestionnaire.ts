/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Question, Question$ } from "./question";
import { z } from "zod";

export type JobPostingQuestionnaire = {
    id?: string | null | undefined;
    internal?: boolean | null | undefined;
    name?: string | null | undefined;
    questions?: Array<Question> | null | undefined;
};

/** @internal */
export namespace JobPostingQuestionnaire$ {
    export type Inbound = {
        id?: string | null | undefined;
        internal?: boolean | null | undefined;
        name?: string | null | undefined;
        questions?: Array<Question$.Inbound> | null | undefined;
    };

    export const inboundSchema: z.ZodType<JobPostingQuestionnaire, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.nullable(z.string()).optional(),
            internal: z.nullable(z.boolean()).optional(),
            name: z.nullable(z.string()).optional(),
            questions: z.nullable(z.array(Question$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.internal === undefined ? null : { internal: v.internal }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.questions === undefined ? null : { questions: v.questions }),
            };
        });

    export type Outbound = {
        id?: string | null | undefined;
        internal?: boolean | null | undefined;
        name?: string | null | undefined;
        questions?: Array<Question$.Outbound> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobPostingQuestionnaire> = z
        .object({
            id: z.nullable(z.string()).optional(),
            internal: z.nullable(z.boolean()).optional(),
            name: z.nullable(z.string()).optional(),
            questions: z.nullable(z.array(Question$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.internal === undefined ? null : { internal: v.internal }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.questions === undefined ? null : { questions: v.questions }),
            };
        });
}
