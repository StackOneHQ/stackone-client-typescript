/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TimeOffPolicies4 = {};

export type TimeOffPoliciesSourceValue =
  | TimeOffPolicies4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The unified value for the type of the time off policy. If the provider does not specify this unit, the value will be set to unmapped_value
 */
export enum TimeOffPoliciesValue {
  Paid = "paid",
  Unpaid = "unpaid",
  Holiday = "holiday",
  Vacation = "vacation",
  Sick = "sick",
  Personal = "personal",
  InLieu = "in_lieu",
  Bereavement = "bereavement",
  JuryDuty = "jury_duty",
  UnmappedValue = "unmapped_value",
}
/**
 * The unified value for the type of the time off policy. If the provider does not specify this unit, the value will be set to unmapped_value
 */
export type TimeOffPoliciesValueOpen = OpenEnum<typeof TimeOffPoliciesValue>;

/**
 * The type of this policy
 */
export type TimeOffPoliciesType = {
  sourceValue?:
    | TimeOffPolicies4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The unified value for the type of the time off policy. If the provider does not specify this unit, the value will be set to unmapped_value
   */
  value?: TimeOffPoliciesValueOpen | null | undefined;
};

export type TimeOffPolicies = {
  /**
   * The created_at date of this policy
   */
  createdAt?: Date | null | undefined;
  /**
   * The description of this policy
   */
  description?: string | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The name of this policy
   */
  name?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * The type of this policy
   */
  type?: TimeOffPoliciesType | null | undefined;
  /**
   * The updated_at date of this policy
   */
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const TimeOffPolicies4$inboundSchema: z.ZodType<
  TimeOffPolicies4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TimeOffPolicies4$Outbound = {};

/** @internal */
export const TimeOffPolicies4$outboundSchema: z.ZodType<
  TimeOffPolicies4$Outbound,
  z.ZodTypeDef,
  TimeOffPolicies4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeOffPolicies4$ {
  /** @deprecated use `TimeOffPolicies4$inboundSchema` instead. */
  export const inboundSchema = TimeOffPolicies4$inboundSchema;
  /** @deprecated use `TimeOffPolicies4$outboundSchema` instead. */
  export const outboundSchema = TimeOffPolicies4$outboundSchema;
  /** @deprecated use `TimeOffPolicies4$Outbound` instead. */
  export type Outbound = TimeOffPolicies4$Outbound;
}

export function timeOffPolicies4ToJSON(
  timeOffPolicies4: TimeOffPolicies4,
): string {
  return JSON.stringify(
    TimeOffPolicies4$outboundSchema.parse(timeOffPolicies4),
  );
}

export function timeOffPolicies4FromJSON(
  jsonString: string,
): SafeParseResult<TimeOffPolicies4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TimeOffPolicies4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TimeOffPolicies4' from JSON`,
  );
}

/** @internal */
export const TimeOffPoliciesSourceValue$inboundSchema: z.ZodType<
  TimeOffPoliciesSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TimeOffPolicies4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type TimeOffPoliciesSourceValue$Outbound =
  | TimeOffPolicies4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const TimeOffPoliciesSourceValue$outboundSchema: z.ZodType<
  TimeOffPoliciesSourceValue$Outbound,
  z.ZodTypeDef,
  TimeOffPoliciesSourceValue
> = z.union([
  z.lazy(() => TimeOffPolicies4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeOffPoliciesSourceValue$ {
  /** @deprecated use `TimeOffPoliciesSourceValue$inboundSchema` instead. */
  export const inboundSchema = TimeOffPoliciesSourceValue$inboundSchema;
  /** @deprecated use `TimeOffPoliciesSourceValue$outboundSchema` instead. */
  export const outboundSchema = TimeOffPoliciesSourceValue$outboundSchema;
  /** @deprecated use `TimeOffPoliciesSourceValue$Outbound` instead. */
  export type Outbound = TimeOffPoliciesSourceValue$Outbound;
}

export function timeOffPoliciesSourceValueToJSON(
  timeOffPoliciesSourceValue: TimeOffPoliciesSourceValue,
): string {
  return JSON.stringify(
    TimeOffPoliciesSourceValue$outboundSchema.parse(timeOffPoliciesSourceValue),
  );
}

export function timeOffPoliciesSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<TimeOffPoliciesSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TimeOffPoliciesSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TimeOffPoliciesSourceValue' from JSON`,
  );
}

/** @internal */
export const TimeOffPoliciesValue$inboundSchema: z.ZodType<
  TimeOffPoliciesValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TimeOffPoliciesValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TimeOffPoliciesValue$outboundSchema: z.ZodType<
  TimeOffPoliciesValueOpen,
  z.ZodTypeDef,
  TimeOffPoliciesValueOpen
> = z.union([
  z.nativeEnum(TimeOffPoliciesValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeOffPoliciesValue$ {
  /** @deprecated use `TimeOffPoliciesValue$inboundSchema` instead. */
  export const inboundSchema = TimeOffPoliciesValue$inboundSchema;
  /** @deprecated use `TimeOffPoliciesValue$outboundSchema` instead. */
  export const outboundSchema = TimeOffPoliciesValue$outboundSchema;
}

/** @internal */
export const TimeOffPoliciesType$inboundSchema: z.ZodType<
  TimeOffPoliciesType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => TimeOffPolicies4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(TimeOffPoliciesValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type TimeOffPoliciesType$Outbound = {
  source_value?:
    | TimeOffPolicies4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const TimeOffPoliciesType$outboundSchema: z.ZodType<
  TimeOffPoliciesType$Outbound,
  z.ZodTypeDef,
  TimeOffPoliciesType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => TimeOffPolicies4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(TimeOffPoliciesValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeOffPoliciesType$ {
  /** @deprecated use `TimeOffPoliciesType$inboundSchema` instead. */
  export const inboundSchema = TimeOffPoliciesType$inboundSchema;
  /** @deprecated use `TimeOffPoliciesType$outboundSchema` instead. */
  export const outboundSchema = TimeOffPoliciesType$outboundSchema;
  /** @deprecated use `TimeOffPoliciesType$Outbound` instead. */
  export type Outbound = TimeOffPoliciesType$Outbound;
}

export function timeOffPoliciesTypeToJSON(
  timeOffPoliciesType: TimeOffPoliciesType,
): string {
  return JSON.stringify(
    TimeOffPoliciesType$outboundSchema.parse(timeOffPoliciesType),
  );
}

export function timeOffPoliciesTypeFromJSON(
  jsonString: string,
): SafeParseResult<TimeOffPoliciesType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TimeOffPoliciesType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TimeOffPoliciesType' from JSON`,
  );
}

/** @internal */
export const TimeOffPolicies$inboundSchema: z.ZodType<
  TimeOffPolicies,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  description: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  type: z.nullable(z.lazy(() => TimeOffPoliciesType$inboundSchema)).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "remote_id": "remoteId",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type TimeOffPolicies$Outbound = {
  created_at?: string | null | undefined;
  description?: string | null | undefined;
  id?: string | null | undefined;
  name?: string | null | undefined;
  remote_id?: string | null | undefined;
  type?: TimeOffPoliciesType$Outbound | null | undefined;
  updated_at?: string | null | undefined;
};

/** @internal */
export const TimeOffPolicies$outboundSchema: z.ZodType<
  TimeOffPolicies$Outbound,
  z.ZodTypeDef,
  TimeOffPolicies
> = z.object({
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  description: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  type: z.nullable(z.lazy(() => TimeOffPoliciesType$outboundSchema)).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    remoteId: "remote_id",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeOffPolicies$ {
  /** @deprecated use `TimeOffPolicies$inboundSchema` instead. */
  export const inboundSchema = TimeOffPolicies$inboundSchema;
  /** @deprecated use `TimeOffPolicies$outboundSchema` instead. */
  export const outboundSchema = TimeOffPolicies$outboundSchema;
  /** @deprecated use `TimeOffPolicies$Outbound` instead. */
  export type Outbound = TimeOffPolicies$Outbound;
}

export function timeOffPoliciesToJSON(
  timeOffPolicies: TimeOffPolicies,
): string {
  return JSON.stringify(TimeOffPolicies$outboundSchema.parse(timeOffPolicies));
}

export function timeOffPoliciesFromJSON(
  jsonString: string,
): SafeParseResult<TimeOffPolicies, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TimeOffPolicies$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TimeOffPolicies' from JSON`,
  );
}
