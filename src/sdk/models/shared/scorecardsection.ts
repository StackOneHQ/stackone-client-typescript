/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Field, Field$ } from "./field";
import { z } from "zod";

export type ScorecardSection = {
    /**
     * The fields within the section
     */
    fields?: Array<Field> | undefined;
    /**
     * The ID of the section
     */
    id?: string | undefined;
    /**
     * The label of the section
     */
    label?: string | undefined;
};

/** @internal */
export namespace ScorecardSection$ {
    export type Inbound = {
        fields?: Array<Field$.Inbound> | undefined;
        id?: string | undefined;
        label?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ScorecardSection, z.ZodTypeDef, Inbound> = z
        .object({
            fields: z.array(Field$.inboundSchema).optional(),
            id: z.string().optional(),
            label: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.fields === undefined ? null : { fields: v.fields }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.label === undefined ? null : { label: v.label }),
            };
        });

    export type Outbound = {
        fields?: Array<Field$.Outbound> | undefined;
        id?: string | undefined;
        label?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ScorecardSection> = z
        .object({
            fields: z.array(Field$.outboundSchema).optional(),
            id: z.string().optional(),
            label: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.fields === undefined ? null : { fields: v.fields }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.label === undefined ? null : { label: v.label }),
            };
        });
}
