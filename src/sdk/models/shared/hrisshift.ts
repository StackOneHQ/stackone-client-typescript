/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ShiftBreak,
  ShiftBreak$inboundSchema,
  ShiftBreak$Outbound,
  ShiftBreak$outboundSchema,
} from "./shiftbreak.js";

export type HrisShift4 = {};

export type HrisShiftSourceValue =
  | string
  | number
  | boolean
  | HrisShift4
  | Array<any>;

/**
 * The approval status of the shift
 */
export enum HrisShiftValue {
  Pending = "pending",
  Approved = "approved",
  Rejected = "rejected",
  UnmappedValue = "unmapped_value",
}
/**
 * The approval status of the shift
 */
export type HrisShiftValueOpen = OpenEnum<typeof HrisShiftValue>;

/**
 * The approval status of the shift
 */
export type ApprovalStatus = {
  sourceValue?:
    | string
    | number
    | boolean
    | HrisShift4
    | Array<any>
    | null
    | undefined;
  /**
   * The approval status of the shift
   */
  value?: HrisShiftValueOpen | null | undefined;
};

export type HrisShiftSchemas4 = {};

export type HrisShiftSchemasSourceValue =
  | string
  | number
  | boolean
  | HrisShiftSchemas4
  | Array<any>;

/**
 * The status of the shift
 */
export enum HrisShiftSchemasValue {
  Draft = "draft",
  Published = "published",
  Confirmed = "confirmed",
  Cancelled = "cancelled",
  UnmappedValue = "unmapped_value",
}
/**
 * The status of the shift
 */
export type HrisShiftSchemasValueOpen = OpenEnum<typeof HrisShiftSchemasValue>;

/**
 * The status of the shift
 */
export type HrisShiftStatus = {
  sourceValue?:
    | string
    | number
    | boolean
    | HrisShiftSchemas4
    | Array<any>
    | null
    | undefined;
  /**
   * The status of the shift
   */
  value?: HrisShiftSchemasValueOpen | null | undefined;
};

export type HrisShift = {
  /**
   * The approval status of the shift
   */
  approvalStatus?: ApprovalStatus | null | undefined;
  /**
   * The total break duration for this shift in ISO 8601 duration format
   */
  breakDuration?: string | null | undefined;
  /**
   * The breaks taken during this shift
   */
  breaks?: Array<ShiftBreak> | null | undefined;
  /**
   * The company ID associated with this shift
   */
  companyId?: string | null | undefined;
  /**
   * The date and time the shift was created
   */
  createdAt?: Date | null | undefined;
  /**
   * The employee ID associated with this shift
   */
  employeeId?: string | null | undefined;
  /**
   * The end time of the shift
   */
  endTime?: Date | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The location ID where this shift takes place
   */
  locationId?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * The start time of the shift
   */
  startTime?: Date | null | undefined;
  /**
   * The status of the shift
   */
  status?: HrisShiftStatus | null | undefined;
  /**
   * The date and time the shift was last updated
   */
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const HrisShift4$inboundSchema: z.ZodType<
  HrisShift4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HrisShift4$Outbound = {};

/** @internal */
export const HrisShift4$outboundSchema: z.ZodType<
  HrisShift4$Outbound,
  z.ZodTypeDef,
  HrisShift4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisShift4$ {
  /** @deprecated use `HrisShift4$inboundSchema` instead. */
  export const inboundSchema = HrisShift4$inboundSchema;
  /** @deprecated use `HrisShift4$outboundSchema` instead. */
  export const outboundSchema = HrisShift4$outboundSchema;
  /** @deprecated use `HrisShift4$Outbound` instead. */
  export type Outbound = HrisShift4$Outbound;
}

export function hrisShift4ToJSON(hrisShift4: HrisShift4): string {
  return JSON.stringify(HrisShift4$outboundSchema.parse(hrisShift4));
}

export function hrisShift4FromJSON(
  jsonString: string,
): SafeParseResult<HrisShift4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisShift4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisShift4' from JSON`,
  );
}

/** @internal */
export const HrisShiftSourceValue$inboundSchema: z.ZodType<
  HrisShiftSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => HrisShift4$inboundSchema),
  z.array(z.any()),
]);

/** @internal */
export type HrisShiftSourceValue$Outbound =
  | string
  | number
  | boolean
  | HrisShift4$Outbound
  | Array<any>;

/** @internal */
export const HrisShiftSourceValue$outboundSchema: z.ZodType<
  HrisShiftSourceValue$Outbound,
  z.ZodTypeDef,
  HrisShiftSourceValue
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => HrisShift4$outboundSchema),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisShiftSourceValue$ {
  /** @deprecated use `HrisShiftSourceValue$inboundSchema` instead. */
  export const inboundSchema = HrisShiftSourceValue$inboundSchema;
  /** @deprecated use `HrisShiftSourceValue$outboundSchema` instead. */
  export const outboundSchema = HrisShiftSourceValue$outboundSchema;
  /** @deprecated use `HrisShiftSourceValue$Outbound` instead. */
  export type Outbound = HrisShiftSourceValue$Outbound;
}

export function hrisShiftSourceValueToJSON(
  hrisShiftSourceValue: HrisShiftSourceValue,
): string {
  return JSON.stringify(
    HrisShiftSourceValue$outboundSchema.parse(hrisShiftSourceValue),
  );
}

export function hrisShiftSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<HrisShiftSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisShiftSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisShiftSourceValue' from JSON`,
  );
}

/** @internal */
export const HrisShiftValue$inboundSchema: z.ZodType<
  HrisShiftValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(HrisShiftValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const HrisShiftValue$outboundSchema: z.ZodType<
  HrisShiftValueOpen,
  z.ZodTypeDef,
  HrisShiftValueOpen
> = z.union([
  z.nativeEnum(HrisShiftValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisShiftValue$ {
  /** @deprecated use `HrisShiftValue$inboundSchema` instead. */
  export const inboundSchema = HrisShiftValue$inboundSchema;
  /** @deprecated use `HrisShiftValue$outboundSchema` instead. */
  export const outboundSchema = HrisShiftValue$outboundSchema;
}

/** @internal */
export const ApprovalStatus$inboundSchema: z.ZodType<
  ApprovalStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => HrisShift4$inboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(HrisShiftValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type ApprovalStatus$Outbound = {
  source_value?:
    | string
    | number
    | boolean
    | HrisShift4$Outbound
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const ApprovalStatus$outboundSchema: z.ZodType<
  ApprovalStatus$Outbound,
  z.ZodTypeDef,
  ApprovalStatus
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => HrisShift4$outboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(HrisShiftValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApprovalStatus$ {
  /** @deprecated use `ApprovalStatus$inboundSchema` instead. */
  export const inboundSchema = ApprovalStatus$inboundSchema;
  /** @deprecated use `ApprovalStatus$outboundSchema` instead. */
  export const outboundSchema = ApprovalStatus$outboundSchema;
  /** @deprecated use `ApprovalStatus$Outbound` instead. */
  export type Outbound = ApprovalStatus$Outbound;
}

export function approvalStatusToJSON(approvalStatus: ApprovalStatus): string {
  return JSON.stringify(ApprovalStatus$outboundSchema.parse(approvalStatus));
}

export function approvalStatusFromJSON(
  jsonString: string,
): SafeParseResult<ApprovalStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApprovalStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApprovalStatus' from JSON`,
  );
}

/** @internal */
export const HrisShiftSchemas4$inboundSchema: z.ZodType<
  HrisShiftSchemas4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HrisShiftSchemas4$Outbound = {};

/** @internal */
export const HrisShiftSchemas4$outboundSchema: z.ZodType<
  HrisShiftSchemas4$Outbound,
  z.ZodTypeDef,
  HrisShiftSchemas4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisShiftSchemas4$ {
  /** @deprecated use `HrisShiftSchemas4$inboundSchema` instead. */
  export const inboundSchema = HrisShiftSchemas4$inboundSchema;
  /** @deprecated use `HrisShiftSchemas4$outboundSchema` instead. */
  export const outboundSchema = HrisShiftSchemas4$outboundSchema;
  /** @deprecated use `HrisShiftSchemas4$Outbound` instead. */
  export type Outbound = HrisShiftSchemas4$Outbound;
}

export function hrisShiftSchemas4ToJSON(
  hrisShiftSchemas4: HrisShiftSchemas4,
): string {
  return JSON.stringify(
    HrisShiftSchemas4$outboundSchema.parse(hrisShiftSchemas4),
  );
}

export function hrisShiftSchemas4FromJSON(
  jsonString: string,
): SafeParseResult<HrisShiftSchemas4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisShiftSchemas4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisShiftSchemas4' from JSON`,
  );
}

/** @internal */
export const HrisShiftSchemasSourceValue$inboundSchema: z.ZodType<
  HrisShiftSchemasSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => HrisShiftSchemas4$inboundSchema),
  z.array(z.any()),
]);

/** @internal */
export type HrisShiftSchemasSourceValue$Outbound =
  | string
  | number
  | boolean
  | HrisShiftSchemas4$Outbound
  | Array<any>;

/** @internal */
export const HrisShiftSchemasSourceValue$outboundSchema: z.ZodType<
  HrisShiftSchemasSourceValue$Outbound,
  z.ZodTypeDef,
  HrisShiftSchemasSourceValue
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => HrisShiftSchemas4$outboundSchema),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisShiftSchemasSourceValue$ {
  /** @deprecated use `HrisShiftSchemasSourceValue$inboundSchema` instead. */
  export const inboundSchema = HrisShiftSchemasSourceValue$inboundSchema;
  /** @deprecated use `HrisShiftSchemasSourceValue$outboundSchema` instead. */
  export const outboundSchema = HrisShiftSchemasSourceValue$outboundSchema;
  /** @deprecated use `HrisShiftSchemasSourceValue$Outbound` instead. */
  export type Outbound = HrisShiftSchemasSourceValue$Outbound;
}

export function hrisShiftSchemasSourceValueToJSON(
  hrisShiftSchemasSourceValue: HrisShiftSchemasSourceValue,
): string {
  return JSON.stringify(
    HrisShiftSchemasSourceValue$outboundSchema.parse(
      hrisShiftSchemasSourceValue,
    ),
  );
}

export function hrisShiftSchemasSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<HrisShiftSchemasSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisShiftSchemasSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisShiftSchemasSourceValue' from JSON`,
  );
}

/** @internal */
export const HrisShiftSchemasValue$inboundSchema: z.ZodType<
  HrisShiftSchemasValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(HrisShiftSchemasValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const HrisShiftSchemasValue$outboundSchema: z.ZodType<
  HrisShiftSchemasValueOpen,
  z.ZodTypeDef,
  HrisShiftSchemasValueOpen
> = z.union([
  z.nativeEnum(HrisShiftSchemasValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisShiftSchemasValue$ {
  /** @deprecated use `HrisShiftSchemasValue$inboundSchema` instead. */
  export const inboundSchema = HrisShiftSchemasValue$inboundSchema;
  /** @deprecated use `HrisShiftSchemasValue$outboundSchema` instead. */
  export const outboundSchema = HrisShiftSchemasValue$outboundSchema;
}

/** @internal */
export const HrisShiftStatus$inboundSchema: z.ZodType<
  HrisShiftStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => HrisShiftSchemas4$inboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(HrisShiftSchemasValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type HrisShiftStatus$Outbound = {
  source_value?:
    | string
    | number
    | boolean
    | HrisShiftSchemas4$Outbound
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const HrisShiftStatus$outboundSchema: z.ZodType<
  HrisShiftStatus$Outbound,
  z.ZodTypeDef,
  HrisShiftStatus
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => HrisShiftSchemas4$outboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(HrisShiftSchemasValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisShiftStatus$ {
  /** @deprecated use `HrisShiftStatus$inboundSchema` instead. */
  export const inboundSchema = HrisShiftStatus$inboundSchema;
  /** @deprecated use `HrisShiftStatus$outboundSchema` instead. */
  export const outboundSchema = HrisShiftStatus$outboundSchema;
  /** @deprecated use `HrisShiftStatus$Outbound` instead. */
  export type Outbound = HrisShiftStatus$Outbound;
}

export function hrisShiftStatusToJSON(
  hrisShiftStatus: HrisShiftStatus,
): string {
  return JSON.stringify(HrisShiftStatus$outboundSchema.parse(hrisShiftStatus));
}

export function hrisShiftStatusFromJSON(
  jsonString: string,
): SafeParseResult<HrisShiftStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisShiftStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisShiftStatus' from JSON`,
  );
}

/** @internal */
export const HrisShift$inboundSchema: z.ZodType<
  HrisShift,
  z.ZodTypeDef,
  unknown
> = z.object({
  approval_status: z.nullable(z.lazy(() => ApprovalStatus$inboundSchema))
    .optional(),
  break_duration: z.nullable(z.string()).optional(),
  breaks: z.nullable(z.array(ShiftBreak$inboundSchema)).optional(),
  company_id: z.nullable(z.string()).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  employee_id: z.nullable(z.string()).optional(),
  end_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  location_id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  start_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  status: z.nullable(z.lazy(() => HrisShiftStatus$inboundSchema)).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "approval_status": "approvalStatus",
    "break_duration": "breakDuration",
    "company_id": "companyId",
    "created_at": "createdAt",
    "employee_id": "employeeId",
    "end_time": "endTime",
    "location_id": "locationId",
    "remote_id": "remoteId",
    "start_time": "startTime",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type HrisShift$Outbound = {
  approval_status?: ApprovalStatus$Outbound | null | undefined;
  break_duration?: string | null | undefined;
  breaks?: Array<ShiftBreak$Outbound> | null | undefined;
  company_id?: string | null | undefined;
  created_at?: string | null | undefined;
  employee_id?: string | null | undefined;
  end_time?: string | null | undefined;
  id?: string | null | undefined;
  location_id?: string | null | undefined;
  remote_id?: string | null | undefined;
  start_time?: string | null | undefined;
  status?: HrisShiftStatus$Outbound | null | undefined;
  updated_at?: string | null | undefined;
};

/** @internal */
export const HrisShift$outboundSchema: z.ZodType<
  HrisShift$Outbound,
  z.ZodTypeDef,
  HrisShift
> = z.object({
  approvalStatus: z.nullable(z.lazy(() => ApprovalStatus$outboundSchema))
    .optional(),
  breakDuration: z.nullable(z.string()).optional(),
  breaks: z.nullable(z.array(ShiftBreak$outboundSchema)).optional(),
  companyId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  employeeId: z.nullable(z.string()).optional(),
  endTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  id: z.nullable(z.string()).optional(),
  locationId: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  startTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  status: z.nullable(z.lazy(() => HrisShiftStatus$outboundSchema)).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    approvalStatus: "approval_status",
    breakDuration: "break_duration",
    companyId: "company_id",
    createdAt: "created_at",
    employeeId: "employee_id",
    endTime: "end_time",
    locationId: "location_id",
    remoteId: "remote_id",
    startTime: "start_time",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisShift$ {
  /** @deprecated use `HrisShift$inboundSchema` instead. */
  export const inboundSchema = HrisShift$inboundSchema;
  /** @deprecated use `HrisShift$outboundSchema` instead. */
  export const outboundSchema = HrisShift$outboundSchema;
  /** @deprecated use `HrisShift$Outbound` instead. */
  export type Outbound = HrisShift$Outbound;
}

export function hrisShiftToJSON(hrisShift: HrisShift): string {
  return JSON.stringify(HrisShift$outboundSchema.parse(hrisShift));
}

export function hrisShiftFromJSON(
  jsonString: string,
): SafeParseResult<HrisShift, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisShift$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisShift' from JSON`,
  );
}
