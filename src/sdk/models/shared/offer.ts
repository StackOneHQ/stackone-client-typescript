/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types";
import { OfferHistory, OfferHistory$ } from "./offerhistory";
import * as z from "zod";

export type Offer4 = {};

/**
 * The source value of the offer status.
 */
export type OfferSourceValue = Offer4 | string | number | boolean;

/**
 * The status of the offer.
 */
export enum OfferValue {
    Pending = "pending",
    Retracted = "retracted",
    Accepted = "accepted",
    Rejected = "rejected",
    Created = "created",
    Approved = "approved",
    NotApproved = "not_approved",
    UnmappedValue = "unmapped_value",
}
/**
 * The status of the offer.
 */
export type OfferValueOpen = OpenEnum<typeof OfferValue>;

export type OfferOfferStatus = {
    /**
     * The source value of the offer status.
     */
    sourceValue?: Offer4 | string | number | boolean | null | undefined;
    /**
     * The status of the offer.
     */
    value?: OfferValueOpen | null | undefined;
};

export type Offer = {
    applicationId?: string | null | undefined;
    /**
     * Date of creation
     */
    createdAt?: Date | null | undefined;
    currency?: string | null | undefined;
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    offerHistory?: Array<OfferHistory> | null | undefined;
    offerStatus?: OfferOfferStatus | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    salary?: number | null | undefined;
    /**
     * Date of creation
     */
    startDate?: Date | null | undefined;
    /**
     * Date of last update
     */
    updatedAt?: Date | null | undefined;
};

/** @internal */
export namespace Offer4$ {
    export const inboundSchema: z.ZodType<Offer4, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Offer4> = z.object({});
}

/** @internal */
export namespace OfferSourceValue$ {
    export const inboundSchema: z.ZodType<OfferSourceValue, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => Offer4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export type Outbound = Offer4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OfferSourceValue> = z.union([
        z.lazy(() => Offer4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace OfferValue$ {
    export const inboundSchema: z.ZodType<OfferValueOpen, z.ZodTypeDef, unknown> = z.union([
        z.nativeEnum(OfferValue),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema = z.union([
        z.nativeEnum(OfferValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace OfferOfferStatus$ {
    export const inboundSchema: z.ZodType<OfferOfferStatus, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => Offer4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(OfferValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?: Offer4$.Outbound | string | number | boolean | null | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OfferOfferStatus> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => Offer4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(OfferValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace Offer$ {
    export const inboundSchema: z.ZodType<Offer, z.ZodTypeDef, unknown> = z
        .object({
            application_id: z.nullable(z.string()).optional(),
            created_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            currency: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            offer_history: z.nullable(z.array(OfferHistory$.inboundSchema)).optional(),
            offer_status: z.nullable(z.lazy(() => OfferOfferStatus$.inboundSchema)).optional(),
            remote_id: z.nullable(z.string()).optional(),
            salary: z.nullable(z.number()).optional(),
            start_date: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            updated_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.application_id === undefined ? null : { applicationId: v.application_id }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.offer_history === undefined ? null : { offerHistory: v.offer_history }),
                ...(v.offer_status === undefined ? null : { offerStatus: v.offer_status }),
                ...(v.remote_id === undefined ? null : { remoteId: v.remote_id }),
                ...(v.salary === undefined ? null : { salary: v.salary }),
                ...(v.start_date === undefined ? null : { startDate: v.start_date }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        application_id?: string | null | undefined;
        created_at?: string | null | undefined;
        currency?: string | null | undefined;
        id?: string | null | undefined;
        offer_history?: Array<OfferHistory$.Outbound> | null | undefined;
        offer_status?: OfferOfferStatus$.Outbound | null | undefined;
        remote_id?: string | null | undefined;
        salary?: number | null | undefined;
        start_date?: string | null | undefined;
        updated_at?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Offer> = z
        .object({
            applicationId: z.nullable(z.string()).optional(),
            createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            currency: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            offerHistory: z.nullable(z.array(OfferHistory$.outboundSchema)).optional(),
            offerStatus: z.nullable(z.lazy(() => OfferOfferStatus$.outboundSchema)).optional(),
            remoteId: z.nullable(z.string()).optional(),
            salary: z.nullable(z.number()).optional(),
            startDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            updatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.applicationId === undefined ? null : { application_id: v.applicationId }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.offerHistory === undefined ? null : { offer_history: v.offerHistory }),
                ...(v.offerStatus === undefined ? null : { offer_status: v.offerStatus }),
                ...(v.remoteId === undefined ? null : { remote_id: v.remoteId }),
                ...(v.salary === undefined ? null : { salary: v.salary }),
                ...(v.startDate === undefined ? null : { start_date: v.startDate }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}
