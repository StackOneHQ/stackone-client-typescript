/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export enum EmployeeCustomFieldsSchemasValue {
    Date = "date",
    Float = "float",
    Integer = "integer",
    List = "list",
    Text = "text",
    UnmappedValue = "unmapped_value",
}

/**
 * The type of the custom field.
 */
export class TypeT extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "source_value" })
    sourceValue: string;

    @SpeakeasyMetadata()
    @Expose({ name: "value" })
    value: EmployeeCustomFieldsSchemasValue;
}

/**
 * The value associated with the custom field.
 */
export class EmployeeCustomFieldsValue extends SpeakeasyBase {}

export class EmployeeCustomFields extends SpeakeasyBase {
    /**
     * The description of the custom field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "description" })
    description?: string;

    /**
     * The unique identifier for the custom field, which defaults to the name property if the ID is not accessible.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * The name of the custom field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    /**
     * An array of possible options for the custom field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "options" })
    options?: string[];

    /**
     * The type of the custom field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    @Type(() => TypeT)
    type?: TypeT;

    /**
     * The value associated with the custom field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "value" })
    @Type(() => EmployeeCustomFieldsValue)
    value?: EmployeeCustomFieldsValue;

    /**
     * The unique identifier for the value of the custom field.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "value_id" })
    valueId?: string;
}
