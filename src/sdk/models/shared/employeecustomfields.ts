/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type EmployeeCustomFields4 = {};

/**
 * The value associated with the custom field.
 */
export type EmployeeCustomFieldsValue =
    | EmployeeCustomFields4
    | string
    | number
    | boolean
    | Array<any>;

export type EmployeeCustomFields = {
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    /**
     * The name of the custom field.
     */
    name?: string | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    /**
     * Provider's unique identifier for the value of the custom field.
     */
    remoteValueId?: string | null | undefined;
    /**
     * The value associated with the custom field.
     */
    value?: EmployeeCustomFields4 | string | number | boolean | Array<any> | null | undefined;
    /**
     * The unique identifier for the value of the custom field.
     */
    valueId?: string | null | undefined;
};

/** @internal */
export const EmployeeCustomFields4$inboundSchema: z.ZodType<
    EmployeeCustomFields4,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type EmployeeCustomFields4$Outbound = {};

/** @internal */
export const EmployeeCustomFields4$outboundSchema: z.ZodType<
    EmployeeCustomFields4$Outbound,
    z.ZodTypeDef,
    EmployeeCustomFields4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeCustomFields4$ {
    /** @deprecated use `EmployeeCustomFields4$inboundSchema` instead. */
    export const inboundSchema = EmployeeCustomFields4$inboundSchema;
    /** @deprecated use `EmployeeCustomFields4$outboundSchema` instead. */
    export const outboundSchema = EmployeeCustomFields4$outboundSchema;
    /** @deprecated use `EmployeeCustomFields4$Outbound` instead. */
    export type Outbound = EmployeeCustomFields4$Outbound;
}

/** @internal */
export const EmployeeCustomFieldsValue$inboundSchema: z.ZodType<
    EmployeeCustomFieldsValue,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => EmployeeCustomFields4$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
]);

/** @internal */
export type EmployeeCustomFieldsValue$Outbound =
    | EmployeeCustomFields4$Outbound
    | string
    | number
    | boolean
    | Array<any>;

/** @internal */
export const EmployeeCustomFieldsValue$outboundSchema: z.ZodType<
    EmployeeCustomFieldsValue$Outbound,
    z.ZodTypeDef,
    EmployeeCustomFieldsValue
> = z.union([
    z.lazy(() => EmployeeCustomFields4$outboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeCustomFieldsValue$ {
    /** @deprecated use `EmployeeCustomFieldsValue$inboundSchema` instead. */
    export const inboundSchema = EmployeeCustomFieldsValue$inboundSchema;
    /** @deprecated use `EmployeeCustomFieldsValue$outboundSchema` instead. */
    export const outboundSchema = EmployeeCustomFieldsValue$outboundSchema;
    /** @deprecated use `EmployeeCustomFieldsValue$Outbound` instead. */
    export type Outbound = EmployeeCustomFieldsValue$Outbound;
}

/** @internal */
export const EmployeeCustomFields$inboundSchema: z.ZodType<
    EmployeeCustomFields,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        id: z.nullable(z.string()).optional(),
        name: z.nullable(z.string()).optional(),
        remote_id: z.nullable(z.string()).optional(),
        remote_value_id: z.nullable(z.string()).optional(),
        value: z
            .nullable(
                z.union([
                    z.lazy(() => EmployeeCustomFields4$inboundSchema),
                    z.string(),
                    z.number(),
                    z.boolean(),
                    z.array(z.any()),
                ])
            )
            .optional(),
        value_id: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            remote_id: "remoteId",
            remote_value_id: "remoteValueId",
            value_id: "valueId",
        });
    });

/** @internal */
export type EmployeeCustomFields$Outbound = {
    id?: string | null | undefined;
    name?: string | null | undefined;
    remote_id?: string | null | undefined;
    remote_value_id?: string | null | undefined;
    value?:
        | EmployeeCustomFields4$Outbound
        | string
        | number
        | boolean
        | Array<any>
        | null
        | undefined;
    value_id?: string | null | undefined;
};

/** @internal */
export const EmployeeCustomFields$outboundSchema: z.ZodType<
    EmployeeCustomFields$Outbound,
    z.ZodTypeDef,
    EmployeeCustomFields
> = z
    .object({
        id: z.nullable(z.string()).optional(),
        name: z.nullable(z.string()).optional(),
        remoteId: z.nullable(z.string()).optional(),
        remoteValueId: z.nullable(z.string()).optional(),
        value: z
            .nullable(
                z.union([
                    z.lazy(() => EmployeeCustomFields4$outboundSchema),
                    z.string(),
                    z.number(),
                    z.boolean(),
                    z.array(z.any()),
                ])
            )
            .optional(),
        valueId: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            remoteId: "remote_id",
            remoteValueId: "remote_value_id",
            valueId: "value_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeCustomFields$ {
    /** @deprecated use `EmployeeCustomFields$inboundSchema` instead. */
    export const inboundSchema = EmployeeCustomFields$inboundSchema;
    /** @deprecated use `EmployeeCustomFields$outboundSchema` instead. */
    export const outboundSchema = EmployeeCustomFields$outboundSchema;
    /** @deprecated use `EmployeeCustomFields$Outbound` instead. */
    export type Outbound = EmployeeCustomFields$Outbound;
}
