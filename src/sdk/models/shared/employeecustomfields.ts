/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type EmployeeCustomFields4 = {};

export type Options = EmployeeCustomFields4 | string | number | boolean;

export type EmployeeCustomFieldsSchemasType4 = {};

export type EmployeeCustomFieldsSourceValue =
    | EmployeeCustomFieldsSchemasType4
    | string
    | number
    | boolean;

export enum EmployeeCustomFieldsSchemasValue {
    Date = "date",
    Float = "float",
    Integer = "integer",
    List = "list",
    Text = "text",
    UnmappedValue = "unmapped_value",
}

/**
 * The type of the custom field.
 */
export type EmployeeCustomFieldsType = {
    sourceValue?: EmployeeCustomFieldsSchemasType4 | string | number | boolean | null | undefined;
    value?: EmployeeCustomFieldsSchemasValue | null | undefined;
};

export type EmployeeCustomFieldsSchemas4 = {};

/**
 * The value associated with the custom field.
 */
export type EmployeeCustomFieldsValue = EmployeeCustomFieldsSchemas4 | string | number | boolean;

export type EmployeeCustomFields = {
    /**
     * The description of the custom field.
     */
    description?: string | null | undefined;
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    /**
     * The name of the custom field.
     */
    name?: string | null | undefined;
    /**
     * An array of possible options for the custom field.
     */
    options?: Array<EmployeeCustomFields4 | string | number | boolean> | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    /**
     * The type of the custom field.
     */
    type?: EmployeeCustomFieldsType | null | undefined;
    /**
     * The value associated with the custom field.
     */
    value?: EmployeeCustomFieldsSchemas4 | string | number | boolean | null | undefined;
    /**
     * The unique identifier for the value of the custom field.
     */
    valueId?: string | null | undefined;
};

/** @internal */
export namespace EmployeeCustomFields4$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<EmployeeCustomFields4, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeCustomFields4> =
        z.object({});
}

/** @internal */
export namespace Options$ {
    export type Inbound = EmployeeCustomFields4$.Inbound | string | number | boolean;

    export type Outbound = EmployeeCustomFields4$.Outbound | string | number | boolean;
    export const inboundSchema: z.ZodType<Options, z.ZodTypeDef, Inbound> = z.union([
        z.lazy(() => EmployeeCustomFields4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Options> = z.union([
        z.lazy(() => EmployeeCustomFields4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace EmployeeCustomFieldsSchemasType4$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<EmployeeCustomFieldsSchemasType4, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EmployeeCustomFieldsSchemasType4
    > = z.object({});
}

/** @internal */
export namespace EmployeeCustomFieldsSourceValue$ {
    export type Inbound = EmployeeCustomFieldsSchemasType4$.Inbound | string | number | boolean;

    export type Outbound = EmployeeCustomFieldsSchemasType4$.Outbound | string | number | boolean;
    export const inboundSchema: z.ZodType<EmployeeCustomFieldsSourceValue, z.ZodTypeDef, Inbound> =
        z.union([
            z.lazy(() => EmployeeCustomFieldsSchemasType4$.inboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EmployeeCustomFieldsSourceValue
    > = z.union([
        z.lazy(() => EmployeeCustomFieldsSchemasType4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export const EmployeeCustomFieldsSchemasValue$: z.ZodNativeEnum<
    typeof EmployeeCustomFieldsSchemasValue
> = z.nativeEnum(EmployeeCustomFieldsSchemasValue);

/** @internal */
export namespace EmployeeCustomFieldsType$ {
    export type Inbound = {
        source_value?:
            | EmployeeCustomFieldsSchemasType4$.Inbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: EmployeeCustomFieldsSchemasValue | null | undefined;
    };

    export const inboundSchema: z.ZodType<EmployeeCustomFieldsType, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeCustomFieldsSchemasType4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeCustomFieldsSchemasValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?:
            | EmployeeCustomFieldsSchemasType4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: EmployeeCustomFieldsSchemasValue | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeCustomFieldsType> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeCustomFieldsSchemasType4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(EmployeeCustomFieldsSchemasValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace EmployeeCustomFieldsSchemas4$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<EmployeeCustomFieldsSchemas4, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeCustomFieldsSchemas4> =
        z.object({});
}

/** @internal */
export namespace EmployeeCustomFieldsValue$ {
    export type Inbound = EmployeeCustomFieldsSchemas4$.Inbound | string | number | boolean;

    export type Outbound = EmployeeCustomFieldsSchemas4$.Outbound | string | number | boolean;
    export const inboundSchema: z.ZodType<EmployeeCustomFieldsValue, z.ZodTypeDef, Inbound> =
        z.union([
            z.lazy(() => EmployeeCustomFieldsSchemas4$.inboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeCustomFieldsValue> =
        z.union([
            z.lazy(() => EmployeeCustomFieldsSchemas4$.outboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);
}

/** @internal */
export namespace EmployeeCustomFields$ {
    export type Inbound = {
        description?: string | null | undefined;
        id?: string | null | undefined;
        name?: string | null | undefined;
        options?:
            | Array<EmployeeCustomFields4$.Inbound | string | number | boolean>
            | null
            | undefined;
        remote_id?: string | null | undefined;
        type?: EmployeeCustomFieldsType$.Inbound | null | undefined;
        value?:
            | EmployeeCustomFieldsSchemas4$.Inbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value_id?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<EmployeeCustomFields, z.ZodTypeDef, Inbound> = z
        .object({
            description: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            options: z
                .nullable(
                    z.array(
                        z.union([
                            z.lazy(() => EmployeeCustomFields4$.inboundSchema),
                            z.string(),
                            z.number(),
                            z.boolean(),
                        ])
                    )
                )
                .optional(),
            remote_id: z.nullable(z.string()).optional(),
            type: z.nullable(z.lazy(() => EmployeeCustomFieldsType$.inboundSchema)).optional(),
            value: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeCustomFieldsSchemas4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value_id: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.options === undefined ? null : { options: v.options }),
                ...(v.remote_id === undefined ? null : { remoteId: v.remote_id }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.value_id === undefined ? null : { valueId: v.value_id }),
            };
        });

    export type Outbound = {
        description?: string | null | undefined;
        id?: string | null | undefined;
        name?: string | null | undefined;
        options?:
            | Array<EmployeeCustomFields4$.Outbound | string | number | boolean>
            | null
            | undefined;
        remote_id?: string | null | undefined;
        type?: EmployeeCustomFieldsType$.Outbound | null | undefined;
        value?:
            | EmployeeCustomFieldsSchemas4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value_id?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeCustomFields> = z
        .object({
            description: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            options: z
                .nullable(
                    z.array(
                        z.union([
                            z.lazy(() => EmployeeCustomFields4$.outboundSchema),
                            z.string(),
                            z.number(),
                            z.boolean(),
                        ])
                    )
                )
                .optional(),
            remoteId: z.nullable(z.string()).optional(),
            type: z.nullable(z.lazy(() => EmployeeCustomFieldsType$.outboundSchema)).optional(),
            value: z
                .nullable(
                    z.union([
                        z.lazy(() => EmployeeCustomFieldsSchemas4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            valueId: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.options === undefined ? null : { options: v.options }),
                ...(v.remoteId === undefined ? null : { remote_id: v.remoteId }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.valueId === undefined ? null : { value_id: v.valueId }),
            };
        });
}
