/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum EmployeeCustomFieldsSchemasValue {
    Date = "date",
    Float = "float",
    Integer = "integer",
    List = "list",
    Text = "text",
    UnmappedValue = "unmapped_value",
}

/**
 * The type of the custom field.
 */
export type EmployeeCustomFieldsType = {
    sourceValue: string;
    value: EmployeeCustomFieldsSchemasValue;
};

/**
 * The value associated with the custom field.
 */
export type EmployeeCustomFieldsValue = {};

export type EmployeeCustomFields = {
    /**
     * The description of the custom field.
     */
    description?: string | undefined;
    /**
     * The unique identifier for the custom field, which defaults to the name property if the ID is not accessible.
     */
    id?: string | undefined;
    /**
     * The name of the custom field.
     */
    name?: string | undefined;
    /**
     * An array of possible options for the custom field.
     */
    options?: Array<string> | undefined;
    /**
     * The type of the custom field.
     */
    type?: EmployeeCustomFieldsType | undefined;
    /**
     * The value associated with the custom field.
     */
    value?: EmployeeCustomFieldsValue | undefined;
    /**
     * The unique identifier for the value of the custom field.
     */
    valueId?: string | undefined;
};

/** @internal */
export const EmployeeCustomFieldsSchemasValue$ = z.nativeEnum(EmployeeCustomFieldsSchemasValue);

/** @internal */
export namespace EmployeeCustomFieldsType$ {
    export type Inbound = {
        source_value: string;
        value: EmployeeCustomFieldsSchemasValue;
    };

    export const inboundSchema: z.ZodType<EmployeeCustomFieldsType, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z.string(),
            value: EmployeeCustomFieldsSchemasValue$,
        })
        .transform((v) => {
            return {
                sourceValue: v.source_value,
                value: v.value,
            };
        });

    export type Outbound = {
        source_value: string;
        value: EmployeeCustomFieldsSchemasValue;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeCustomFieldsType> = z
        .object({
            sourceValue: z.string(),
            value: EmployeeCustomFieldsSchemasValue$,
        })
        .transform((v) => {
            return {
                source_value: v.sourceValue,
                value: v.value,
            };
        });
}

/** @internal */
export namespace EmployeeCustomFieldsValue$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<EmployeeCustomFieldsValue, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeCustomFieldsValue> =
        z.object({});
}

/** @internal */
export namespace EmployeeCustomFields$ {
    export type Inbound = {
        description?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
        options?: Array<string> | undefined;
        type?: EmployeeCustomFieldsType$.Inbound | undefined;
        value?: EmployeeCustomFieldsValue$.Inbound | undefined;
        value_id?: string | undefined;
    };

    export const inboundSchema: z.ZodType<EmployeeCustomFields, z.ZodTypeDef, Inbound> = z
        .object({
            description: z.string().optional(),
            id: z.string().optional(),
            name: z.string().optional(),
            options: z.array(z.string()).optional(),
            type: z.lazy(() => EmployeeCustomFieldsType$.inboundSchema).optional(),
            value: z.lazy(() => EmployeeCustomFieldsValue$.inboundSchema).optional(),
            value_id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.options === undefined ? null : { options: v.options }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.value_id === undefined ? null : { valueId: v.value_id }),
            };
        });

    export type Outbound = {
        description?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
        options?: Array<string> | undefined;
        type?: EmployeeCustomFieldsType$.Outbound | undefined;
        value?: EmployeeCustomFieldsValue$.Outbound | undefined;
        value_id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmployeeCustomFields> = z
        .object({
            description: z.string().optional(),
            id: z.string().optional(),
            name: z.string().optional(),
            options: z.array(z.string()).optional(),
            type: z.lazy(() => EmployeeCustomFieldsType$.outboundSchema).optional(),
            value: z.lazy(() => EmployeeCustomFieldsValue$.outboundSchema).optional(),
            valueId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.options === undefined ? null : { options: v.options }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.valueId === undefined ? null : { value_id: v.valueId }),
            };
        });
}
