/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types/enums.js";
import * as z from "zod";

export enum LinkedAccountMetaCategory {
    Ats = "ats",
    Hris = "hris",
    HrisLegacy = "hris-legacy",
    Crm = "crm",
    Iam = "iam",
    Marketing = "marketing",
    Lms = "lms",
    Stackone = "stackone",
}
export type LinkedAccountMetaCategoryOpen = OpenEnum<typeof LinkedAccountMetaCategory>;

export type LinkedAccountMeta = {
    category: LinkedAccountMetaCategoryOpen;
    models: { [k: string]: any };
    provider: string;
};

/** @internal */
export namespace LinkedAccountMetaCategory$ {
    export const inboundSchema: z.ZodType<LinkedAccountMetaCategoryOpen, z.ZodTypeDef, unknown> =
        z.union([
            z.nativeEnum(LinkedAccountMetaCategory),
            z.string().transform(catchUnrecognizedEnum),
        ]);

    export const outboundSchema: z.ZodType<
        LinkedAccountMetaCategoryOpen,
        z.ZodTypeDef,
        LinkedAccountMetaCategoryOpen
    > = z.union([
        z.nativeEnum(LinkedAccountMetaCategory),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace LinkedAccountMeta$ {
    export const inboundSchema: z.ZodType<LinkedAccountMeta, z.ZodTypeDef, unknown> = z.object({
        category: LinkedAccountMetaCategory$.inboundSchema,
        models: z.record(z.any()),
        provider: z.string(),
    });

    export type Outbound = {
        category: string;
        models: { [k: string]: any };
        provider: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LinkedAccountMeta> = z.object({
        category: LinkedAccountMetaCategory$.outboundSchema,
        models: z.record(z.any()),
        provider: z.string(),
    });
}
