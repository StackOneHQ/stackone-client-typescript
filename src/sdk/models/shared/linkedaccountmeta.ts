/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export enum LinkedAccountMetaCategory {
  Ats = "ats",
  Hris = "hris",
  HrisLegacy = "hris-legacy",
  Crm = "crm",
  Iam = "iam",
  Marketing = "marketing",
  Lms = "lms",
  Stackone = "stackone",
  Documents = "documents",
  Ticketing = "ticketing",
  Screening = "screening",
}
export type LinkedAccountMetaCategoryOpen = OpenEnum<
  typeof LinkedAccountMetaCategory
>;

export type LinkedAccountMeta = {
  category: LinkedAccountMetaCategoryOpen;
  models: { [k: string]: any };
  provider: string;
};

/** @internal */
export const LinkedAccountMetaCategory$inboundSchema: z.ZodType<
  LinkedAccountMetaCategoryOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(LinkedAccountMetaCategory),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const LinkedAccountMetaCategory$outboundSchema: z.ZodType<
  LinkedAccountMetaCategoryOpen,
  z.ZodTypeDef,
  LinkedAccountMetaCategoryOpen
> = z.union([
  z.nativeEnum(LinkedAccountMetaCategory),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkedAccountMetaCategory$ {
  /** @deprecated use `LinkedAccountMetaCategory$inboundSchema` instead. */
  export const inboundSchema = LinkedAccountMetaCategory$inboundSchema;
  /** @deprecated use `LinkedAccountMetaCategory$outboundSchema` instead. */
  export const outboundSchema = LinkedAccountMetaCategory$outboundSchema;
}

/** @internal */
export const LinkedAccountMeta$inboundSchema: z.ZodType<
  LinkedAccountMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  category: LinkedAccountMetaCategory$inboundSchema,
  models: z.record(z.any()),
  provider: z.string(),
});

/** @internal */
export type LinkedAccountMeta$Outbound = {
  category: string;
  models: { [k: string]: any };
  provider: string;
};

/** @internal */
export const LinkedAccountMeta$outboundSchema: z.ZodType<
  LinkedAccountMeta$Outbound,
  z.ZodTypeDef,
  LinkedAccountMeta
> = z.object({
  category: LinkedAccountMetaCategory$outboundSchema,
  models: z.record(z.any()),
  provider: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkedAccountMeta$ {
  /** @deprecated use `LinkedAccountMeta$inboundSchema` instead. */
  export const inboundSchema = LinkedAccountMeta$inboundSchema;
  /** @deprecated use `LinkedAccountMeta$outboundSchema` instead. */
  export const outboundSchema = LinkedAccountMeta$outboundSchema;
  /** @deprecated use `LinkedAccountMeta$Outbound` instead. */
  export type Outbound = LinkedAccountMeta$Outbound;
}

export function linkedAccountMetaToJSON(
  linkedAccountMeta: LinkedAccountMeta,
): string {
  return JSON.stringify(
    LinkedAccountMeta$outboundSchema.parse(linkedAccountMeta),
  );
}

export function linkedAccountMetaFromJSON(
  jsonString: string,
): SafeParseResult<LinkedAccountMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinkedAccountMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinkedAccountMeta' from JSON`,
  );
}
