/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum LinkedAccountMetaCategory {
    Ats = "ats",
    Hris = "hris",
    HrisLegacy = "hris-legacy",
    Crm = "crm",
    Marketing = "marketing",
    Stackone = "stackone",
}

export type LinkedAccountMetaModels = {};

export type LinkedAccountMeta = {
    category: LinkedAccountMetaCategory;
    models: LinkedAccountMetaModels;
    provider: string;
};

/** @internal */
export const LinkedAccountMetaCategory$ = z.nativeEnum(LinkedAccountMetaCategory);

/** @internal */
export namespace LinkedAccountMetaModels$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<LinkedAccountMetaModels, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LinkedAccountMetaModels> =
        z.object({});
}

/** @internal */
export namespace LinkedAccountMeta$ {
    export type Inbound = {
        category: LinkedAccountMetaCategory;
        models: LinkedAccountMetaModels$.Inbound;
        provider: string;
    };

    export const inboundSchema: z.ZodType<LinkedAccountMeta, z.ZodTypeDef, Inbound> = z
        .object({
            category: LinkedAccountMetaCategory$,
            models: z.lazy(() => LinkedAccountMetaModels$.inboundSchema),
            provider: z.string(),
        })
        .transform((v) => {
            return {
                category: v.category,
                models: v.models,
                provider: v.provider,
            };
        });

    export type Outbound = {
        category: LinkedAccountMetaCategory;
        models: LinkedAccountMetaModels$.Outbound;
        provider: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LinkedAccountMeta> = z
        .object({
            category: LinkedAccountMetaCategory$,
            models: z.lazy(() => LinkedAccountMetaModels$.outboundSchema),
            provider: z.string(),
        })
        .transform((v) => {
            return {
                category: v.category,
                models: v.models,
                provider: v.provider,
            };
        });
}
