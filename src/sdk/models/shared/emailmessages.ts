/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EmailMessagesMessageContent = {
  body?: string | null | undefined;
  from?: string | null | undefined;
  preheader?: string | null | undefined;
  replyTo?: string | null | undefined;
  subject?: string | null | undefined;
};

export type EmailMessages4 = {};

/**
 * The original value from the provider used to derive the unified message type.
 */
export type EmailMessagesSourceValue =
  | string
  | number
  | boolean
  | EmailMessages4
  | Array<any>;

/**
 * The unified message type.
 */
export enum EmailMessagesValue {
  Email = "email",
  Sms = "sms",
  Push = "push",
  WebPush = "web_push",
  IosPush = "ios_push",
  AndroidPush = "android_push",
  AppPush = "app_push",
  OmniChannel = "omni_channel",
  ContentBlock = "content_block",
  InApp = "in_app",
  Unknown = "unknown",
  UnmappedValue = "unmapped_value",
}
/**
 * The unified message type.
 */
export type EmailMessagesValueOpen = OpenEnum<typeof EmailMessagesValue>;

export type EmailMessagesMessageType = {
  /**
   * The original value from the provider used to derive the unified message type.
   */
  sourceValue?:
    | string
    | number
    | boolean
    | EmailMessages4
    | Array<any>
    | null
    | undefined;
  /**
   * The unified message type.
   */
  value?: EmailMessagesValueOpen | null | undefined;
};

export type EmailMessages = {
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  messageContent?: EmailMessagesMessageContent | null | undefined;
  messageType?: EmailMessagesMessageType | null | undefined;
  name?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
};

/** @internal */
export const EmailMessagesMessageContent$inboundSchema: z.ZodType<
  EmailMessagesMessageContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  body: z.nullable(z.string()).optional(),
  from: z.nullable(z.string()).optional(),
  preheader: z.nullable(z.string()).optional(),
  "reply-to": z.nullable(z.string()).optional(),
  subject: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "reply-to": "replyTo",
  });
});

/** @internal */
export type EmailMessagesMessageContent$Outbound = {
  body?: string | null | undefined;
  from?: string | null | undefined;
  preheader?: string | null | undefined;
  "reply-to"?: string | null | undefined;
  subject?: string | null | undefined;
};

/** @internal */
export const EmailMessagesMessageContent$outboundSchema: z.ZodType<
  EmailMessagesMessageContent$Outbound,
  z.ZodTypeDef,
  EmailMessagesMessageContent
> = z.object({
  body: z.nullable(z.string()).optional(),
  from: z.nullable(z.string()).optional(),
  preheader: z.nullable(z.string()).optional(),
  replyTo: z.nullable(z.string()).optional(),
  subject: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    replyTo: "reply-to",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmailMessagesMessageContent$ {
  /** @deprecated use `EmailMessagesMessageContent$inboundSchema` instead. */
  export const inboundSchema = EmailMessagesMessageContent$inboundSchema;
  /** @deprecated use `EmailMessagesMessageContent$outboundSchema` instead. */
  export const outboundSchema = EmailMessagesMessageContent$outboundSchema;
  /** @deprecated use `EmailMessagesMessageContent$Outbound` instead. */
  export type Outbound = EmailMessagesMessageContent$Outbound;
}

export function emailMessagesMessageContentToJSON(
  emailMessagesMessageContent: EmailMessagesMessageContent,
): string {
  return JSON.stringify(
    EmailMessagesMessageContent$outboundSchema.parse(
      emailMessagesMessageContent,
    ),
  );
}

export function emailMessagesMessageContentFromJSON(
  jsonString: string,
): SafeParseResult<EmailMessagesMessageContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmailMessagesMessageContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmailMessagesMessageContent' from JSON`,
  );
}

/** @internal */
export const EmailMessages4$inboundSchema: z.ZodType<
  EmailMessages4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EmailMessages4$Outbound = {};

/** @internal */
export const EmailMessages4$outboundSchema: z.ZodType<
  EmailMessages4$Outbound,
  z.ZodTypeDef,
  EmailMessages4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmailMessages4$ {
  /** @deprecated use `EmailMessages4$inboundSchema` instead. */
  export const inboundSchema = EmailMessages4$inboundSchema;
  /** @deprecated use `EmailMessages4$outboundSchema` instead. */
  export const outboundSchema = EmailMessages4$outboundSchema;
  /** @deprecated use `EmailMessages4$Outbound` instead. */
  export type Outbound = EmailMessages4$Outbound;
}

export function emailMessages4ToJSON(emailMessages4: EmailMessages4): string {
  return JSON.stringify(EmailMessages4$outboundSchema.parse(emailMessages4));
}

export function emailMessages4FromJSON(
  jsonString: string,
): SafeParseResult<EmailMessages4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmailMessages4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmailMessages4' from JSON`,
  );
}

/** @internal */
export const EmailMessagesSourceValue$inboundSchema: z.ZodType<
  EmailMessagesSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => EmailMessages4$inboundSchema),
  z.array(z.any()),
]);

/** @internal */
export type EmailMessagesSourceValue$Outbound =
  | string
  | number
  | boolean
  | EmailMessages4$Outbound
  | Array<any>;

/** @internal */
export const EmailMessagesSourceValue$outboundSchema: z.ZodType<
  EmailMessagesSourceValue$Outbound,
  z.ZodTypeDef,
  EmailMessagesSourceValue
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => EmailMessages4$outboundSchema),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmailMessagesSourceValue$ {
  /** @deprecated use `EmailMessagesSourceValue$inboundSchema` instead. */
  export const inboundSchema = EmailMessagesSourceValue$inboundSchema;
  /** @deprecated use `EmailMessagesSourceValue$outboundSchema` instead. */
  export const outboundSchema = EmailMessagesSourceValue$outboundSchema;
  /** @deprecated use `EmailMessagesSourceValue$Outbound` instead. */
  export type Outbound = EmailMessagesSourceValue$Outbound;
}

export function emailMessagesSourceValueToJSON(
  emailMessagesSourceValue: EmailMessagesSourceValue,
): string {
  return JSON.stringify(
    EmailMessagesSourceValue$outboundSchema.parse(emailMessagesSourceValue),
  );
}

export function emailMessagesSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<EmailMessagesSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmailMessagesSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmailMessagesSourceValue' from JSON`,
  );
}

/** @internal */
export const EmailMessagesValue$inboundSchema: z.ZodType<
  EmailMessagesValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EmailMessagesValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EmailMessagesValue$outboundSchema: z.ZodType<
  EmailMessagesValueOpen,
  z.ZodTypeDef,
  EmailMessagesValueOpen
> = z.union([
  z.nativeEnum(EmailMessagesValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmailMessagesValue$ {
  /** @deprecated use `EmailMessagesValue$inboundSchema` instead. */
  export const inboundSchema = EmailMessagesValue$inboundSchema;
  /** @deprecated use `EmailMessagesValue$outboundSchema` instead. */
  export const outboundSchema = EmailMessagesValue$outboundSchema;
}

/** @internal */
export const EmailMessagesMessageType$inboundSchema: z.ZodType<
  EmailMessagesMessageType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => EmailMessages4$inboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmailMessagesValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type EmailMessagesMessageType$Outbound = {
  source_value?:
    | string
    | number
    | boolean
    | EmailMessages4$Outbound
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const EmailMessagesMessageType$outboundSchema: z.ZodType<
  EmailMessagesMessageType$Outbound,
  z.ZodTypeDef,
  EmailMessagesMessageType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => EmailMessages4$outboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(EmailMessagesValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmailMessagesMessageType$ {
  /** @deprecated use `EmailMessagesMessageType$inboundSchema` instead. */
  export const inboundSchema = EmailMessagesMessageType$inboundSchema;
  /** @deprecated use `EmailMessagesMessageType$outboundSchema` instead. */
  export const outboundSchema = EmailMessagesMessageType$outboundSchema;
  /** @deprecated use `EmailMessagesMessageType$Outbound` instead. */
  export type Outbound = EmailMessagesMessageType$Outbound;
}

export function emailMessagesMessageTypeToJSON(
  emailMessagesMessageType: EmailMessagesMessageType,
): string {
  return JSON.stringify(
    EmailMessagesMessageType$outboundSchema.parse(emailMessagesMessageType),
  );
}

export function emailMessagesMessageTypeFromJSON(
  jsonString: string,
): SafeParseResult<EmailMessagesMessageType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmailMessagesMessageType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmailMessagesMessageType' from JSON`,
  );
}

/** @internal */
export const EmailMessages$inboundSchema: z.ZodType<
  EmailMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  message_content: z.nullable(
    z.lazy(() => EmailMessagesMessageContent$inboundSchema),
  ).optional(),
  message_type: z.nullable(z.lazy(() => EmailMessagesMessageType$inboundSchema))
    .optional(),
  name: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "message_content": "messageContent",
    "message_type": "messageType",
    "remote_id": "remoteId",
  });
});

/** @internal */
export type EmailMessages$Outbound = {
  id?: string | null | undefined;
  message_content?: EmailMessagesMessageContent$Outbound | null | undefined;
  message_type?: EmailMessagesMessageType$Outbound | null | undefined;
  name?: string | null | undefined;
  remote_id?: string | null | undefined;
};

/** @internal */
export const EmailMessages$outboundSchema: z.ZodType<
  EmailMessages$Outbound,
  z.ZodTypeDef,
  EmailMessages
> = z.object({
  id: z.nullable(z.string()).optional(),
  messageContent: z.nullable(
    z.lazy(() => EmailMessagesMessageContent$outboundSchema),
  ).optional(),
  messageType: z.nullable(z.lazy(() => EmailMessagesMessageType$outboundSchema))
    .optional(),
  name: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    messageContent: "message_content",
    messageType: "message_type",
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmailMessages$ {
  /** @deprecated use `EmailMessages$inboundSchema` instead. */
  export const inboundSchema = EmailMessages$inboundSchema;
  /** @deprecated use `EmailMessages$outboundSchema` instead. */
  export const outboundSchema = EmailMessages$outboundSchema;
  /** @deprecated use `EmailMessages$Outbound` instead. */
  export type Outbound = EmailMessages$Outbound;
}

export function emailMessagesToJSON(emailMessages: EmailMessages): string {
  return JSON.stringify(EmailMessages$outboundSchema.parse(emailMessages));
}

export function emailMessagesFromJSON(
  jsonString: string,
): SafeParseResult<EmailMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmailMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmailMessages' from JSON`,
  );
}
