/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type MessageContent = {
    body?: string | null | undefined;
    from?: string | null | undefined;
    preheader?: string | null | undefined;
    replyTo?: string | null | undefined;
    subject?: string | null | undefined;
};

export type EmailMessages4 = {};

/**
 * The original value from the provider used to derive the unified message type.
 */
export type EmailMessagesSourceValue = EmailMessages4 | string | number | boolean;

/**
 * The unified message type.
 */
export type EmailMessagesValue = {};

export type MessageType = {
    /**
     * The original value from the provider used to derive the unified message type.
     */
    sourceValue?: EmailMessages4 | string | number | boolean | null | undefined;
    /**
     * The unified message type.
     */
    value?: EmailMessagesValue | null | undefined;
};

export type EmailMessages = {
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    messageContent?: MessageContent | null | undefined;
    messageType?: MessageType | null | undefined;
    name?: string | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
};

/** @internal */
export namespace MessageContent$ {
    export const inboundSchema: z.ZodType<MessageContent, z.ZodTypeDef, unknown> = z
        .object({
            body: z.nullable(z.string()).optional(),
            from: z.nullable(z.string()).optional(),
            preheader: z.nullable(z.string()).optional(),
            "reply-to": z.nullable(z.string()).optional(),
            subject: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.body === undefined ? null : { body: v.body }),
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.preheader === undefined ? null : { preheader: v.preheader }),
                ...(v["reply-to"] === undefined ? null : { replyTo: v["reply-to"] }),
                ...(v.subject === undefined ? null : { subject: v.subject }),
            };
        });

    export type Outbound = {
        body?: string | null | undefined;
        from?: string | null | undefined;
        preheader?: string | null | undefined;
        "reply-to"?: string | null | undefined;
        subject?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MessageContent> = z
        .object({
            body: z.nullable(z.string()).optional(),
            from: z.nullable(z.string()).optional(),
            preheader: z.nullable(z.string()).optional(),
            replyTo: z.nullable(z.string()).optional(),
            subject: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.body === undefined ? null : { body: v.body }),
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.preheader === undefined ? null : { preheader: v.preheader }),
                ...(v.replyTo === undefined ? null : { "reply-to": v.replyTo }),
                ...(v.subject === undefined ? null : { subject: v.subject }),
            };
        });
}

/** @internal */
export namespace EmailMessages4$ {
    export const inboundSchema: z.ZodType<EmailMessages4, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmailMessages4> = z.object({});
}

/** @internal */
export namespace EmailMessagesSourceValue$ {
    export const inboundSchema: z.ZodType<EmailMessagesSourceValue, z.ZodTypeDef, unknown> =
        z.union([z.lazy(() => EmailMessages4$.inboundSchema), z.string(), z.number(), z.boolean()]);

    export type Outbound = EmailMessages4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmailMessagesSourceValue> =
        z.union([
            z.lazy(() => EmailMessages4$.outboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);
}

/** @internal */
export namespace EmailMessagesValue$ {
    export const inboundSchema: z.ZodType<EmailMessagesValue, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmailMessagesValue> = z.object(
        {}
    );
}

/** @internal */
export namespace MessageType$ {
    export const inboundSchema: z.ZodType<MessageType, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => EmailMessages4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(z.lazy(() => EmailMessagesValue$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?: EmailMessages4$.Outbound | string | number | boolean | null | undefined;
        value?: EmailMessagesValue$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MessageType> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => EmailMessages4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(z.lazy(() => EmailMessagesValue$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace EmailMessages$ {
    export const inboundSchema: z.ZodType<EmailMessages, z.ZodTypeDef, unknown> = z
        .object({
            id: z.nullable(z.string()).optional(),
            message_content: z.nullable(z.lazy(() => MessageContent$.inboundSchema)).optional(),
            message_type: z.nullable(z.lazy(() => MessageType$.inboundSchema)).optional(),
            name: z.nullable(z.string()).optional(),
            remote_id: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.message_content === undefined ? null : { messageContent: v.message_content }),
                ...(v.message_type === undefined ? null : { messageType: v.message_type }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.remote_id === undefined ? null : { remoteId: v.remote_id }),
            };
        });

    export type Outbound = {
        id?: string | null | undefined;
        message_content?: MessageContent$.Outbound | null | undefined;
        message_type?: MessageType$.Outbound | null | undefined;
        name?: string | null | undefined;
        remote_id?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmailMessages> = z
        .object({
            id: z.nullable(z.string()).optional(),
            messageContent: z.nullable(z.lazy(() => MessageContent$.outboundSchema)).optional(),
            messageType: z.nullable(z.lazy(() => MessageType$.outboundSchema)).optional(),
            name: z.nullable(z.string()).optional(),
            remoteId: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.messageContent === undefined ? null : { message_content: v.messageContent }),
                ...(v.messageType === undefined ? null : { message_type: v.messageType }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.remoteId === undefined ? null : { remote_id: v.remoteId }),
            };
        });
}
