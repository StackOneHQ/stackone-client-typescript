/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type MessageContent = {
    body: string;
    from: string;
    preheader?: string | null | undefined;
    replyTo?: string | null | undefined;
    subject: string;
};

export enum EmailMessagesValue {
    Email = "email",
    Sms = "sms",
    WebPush = "web_push",
    IosPush = "ios_push",
    AndroidPush = "android_push",
    AppPush = "app_push",
    OmniChannel = "omni_channel",
    Unknown = "unknown",
    UnmappedValue = "unmapped_value",
}

export type MessageType = {
    sourceValue: string;
    value: EmailMessagesValue;
};

export type EmailMessages = {
    id?: string | null | undefined;
    messageContent?: MessageContent | null | undefined;
    messageType?: MessageType | null | undefined;
    name?: string | null | undefined;
};

/** @internal */
export namespace MessageContent$ {
    export type Inbound = {
        body: string;
        from: string;
        preheader?: string | null | undefined;
        "reply-to"?: string | null | undefined;
        subject: string;
    };

    export const inboundSchema: z.ZodType<MessageContent, z.ZodTypeDef, Inbound> = z
        .object({
            body: z.string(),
            from: z.string(),
            preheader: z.string().nullable().optional(),
            "reply-to": z.string().nullable().optional(),
            subject: z.string(),
        })
        .transform((v) => {
            return {
                body: v.body,
                from: v.from,
                ...(v.preheader === undefined ? null : { preheader: v.preheader }),
                ...(v["reply-to"] === undefined ? null : { replyTo: v["reply-to"] }),
                subject: v.subject,
            };
        });

    export type Outbound = {
        body: string;
        from: string;
        preheader?: string | null | undefined;
        "reply-to"?: string | null | undefined;
        subject: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MessageContent> = z
        .object({
            body: z.string(),
            from: z.string(),
            preheader: z.string().nullable().optional(),
            replyTo: z.string().nullable().optional(),
            subject: z.string(),
        })
        .transform((v) => {
            return {
                body: v.body,
                from: v.from,
                ...(v.preheader === undefined ? null : { preheader: v.preheader }),
                ...(v.replyTo === undefined ? null : { "reply-to": v.replyTo }),
                subject: v.subject,
            };
        });
}

/** @internal */
export const EmailMessagesValue$ = z.nativeEnum(EmailMessagesValue);

/** @internal */
export namespace MessageType$ {
    export type Inbound = {
        source_value: string;
        value: EmailMessagesValue;
    };

    export const inboundSchema: z.ZodType<MessageType, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z.string(),
            value: EmailMessagesValue$,
        })
        .transform((v) => {
            return {
                sourceValue: v.source_value,
                value: v.value,
            };
        });

    export type Outbound = {
        source_value: string;
        value: EmailMessagesValue;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MessageType> = z
        .object({
            sourceValue: z.string(),
            value: EmailMessagesValue$,
        })
        .transform((v) => {
            return {
                source_value: v.sourceValue,
                value: v.value,
            };
        });
}

/** @internal */
export namespace EmailMessages$ {
    export type Inbound = {
        id?: string | null | undefined;
        message_content?: MessageContent$.Inbound | null | undefined;
        message_type?: MessageType$.Inbound | null | undefined;
        name?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<EmailMessages, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().nullable().optional(),
            message_content: z
                .lazy(() => MessageContent$.inboundSchema)
                .nullable()
                .optional(),
            message_type: z
                .lazy(() => MessageType$.inboundSchema)
                .nullable()
                .optional(),
            name: z.string().nullable().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.message_content === undefined ? null : { messageContent: v.message_content }),
                ...(v.message_type === undefined ? null : { messageType: v.message_type }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        id?: string | null | undefined;
        message_content?: MessageContent$.Outbound | null | undefined;
        message_type?: MessageType$.Outbound | null | undefined;
        name?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmailMessages> = z
        .object({
            id: z.string().nullable().optional(),
            messageContent: z
                .lazy(() => MessageContent$.outboundSchema)
                .nullable()
                .optional(),
            messageType: z
                .lazy(() => MessageType$.outboundSchema)
                .nullable()
                .optional(),
            name: z.string().nullable().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.messageContent === undefined ? null : { message_content: v.messageContent }),
                ...(v.messageType === undefined ? null : { message_type: v.messageType }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}
