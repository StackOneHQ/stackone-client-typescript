/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CustomMappingError,
  CustomMappingError$inboundSchema,
  CustomMappingError$Outbound,
  CustomMappingError$outboundSchema,
} from "./custommappingerror.js";
import {
  ProviderError,
  ProviderError$inboundSchema,
  ProviderError$Outbound,
  ProviderError$outboundSchema,
} from "./providererror.js";

/**
 * The request URL data
 */
export type Url = {
  /**
   * The request URL hostname
   */
  hostname?: string | null | undefined;
  /**
   * The request path
   */
  path?: string | null | undefined;
  /**
   * The request query parameters
   */
  queryParams?: { [k: string]: any } | null | undefined;
  /**
   * The request URL
   */
  url?: string | null | undefined;
};

/**
 * The advanced log request data
 */
export type RequestT = {
  body?: any | null | undefined;
  headers?: { [k: string]: any } | null | undefined;
  /**
   * The request ID
   */
  id?: string | null | undefined;
  /**
   * The request method
   */
  method?: string | null | undefined;
  /**
   * The request URL data
   */
  url?: Url | null | undefined;
};

/**
 * The advanced log response data
 */
export type StepLogResponse = {
  body?: any | null | undefined;
  /**
   * The custom mapping errors
   */
  customMappingErrors?: Array<CustomMappingError> | null | undefined;
  headers?: { [k: string]: any } | null | undefined;
  /**
   * The provider errors
   */
  providerErrors?: Array<ProviderError> | null | undefined;
  /**
   * The response status code
   */
  statusCode?: number | null | undefined;
};

export type StepLog = {
  /**
   * The account ID of the request
   */
  accountId?: string | null | undefined;
  /**
   * The requested action
   */
  action?: string | null | undefined;
  /**
   * The requested child resource
   */
  childResource?: string | null | undefined;
  /**
   * The request duration in milliseconds
   */
  duration?: number | null | undefined;
  /**
   * The request end time ISO8601 date string
   */
  endTime?: Date | null | undefined;
  /**
   * The requested HTTP method
   */
  httpMethod?: string | null | undefined;
  /**
   * The provider request ID
   */
  id?: string | null | undefined;
  /**
   * The asynchronous worker flag
   */
  isWorker?: boolean | null | undefined;
  /**
   * The requested path
   */
  path?: string | null | undefined;
  /**
   * The project ID of the request
   */
  projectId?: string | null | undefined;
  /**
   * The requested provider
   */
  provider?: string | null | undefined;
  /**
   * The advanced log request data
   */
  request?: RequestT | null | undefined;
  /**
   * The request ID
   */
  requestId?: string | null | undefined;
  /**
   * The requested resource
   */
  resource?: string | null | undefined;
  /**
   * The advanced log response data
   */
  response?: StepLogResponse | null | undefined;
  /**
   * The requested service
   */
  service?: string | null | undefined;
  /**
   * The request start time ISO8601 date string
   */
  startTime?: Date | null | undefined;
  /**
   * The requests response status code
   */
  status?: number | null | undefined;
  /**
   * The requested sub resource
   */
  subResource?: string | null | undefined;
  /**
   * The request success flag
   */
  success?: boolean | null | undefined;
  /**
   * The requested URL
   */
  url?: string | null | undefined;
};

/** @internal */
export const Url$inboundSchema: z.ZodType<Url, z.ZodTypeDef, unknown> = z
  .object({
    hostname: z.nullable(z.string()).optional(),
    path: z.nullable(z.string()).optional(),
    query_params: z.nullable(z.record(z.any())).optional(),
    url: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "query_params": "queryParams",
    });
  });

/** @internal */
export type Url$Outbound = {
  hostname?: string | null | undefined;
  path?: string | null | undefined;
  query_params?: { [k: string]: any } | null | undefined;
  url?: string | null | undefined;
};

/** @internal */
export const Url$outboundSchema: z.ZodType<Url$Outbound, z.ZodTypeDef, Url> = z
  .object({
    hostname: z.nullable(z.string()).optional(),
    path: z.nullable(z.string()).optional(),
    queryParams: z.nullable(z.record(z.any())).optional(),
    url: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      queryParams: "query_params",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Url$ {
  /** @deprecated use `Url$inboundSchema` instead. */
  export const inboundSchema = Url$inboundSchema;
  /** @deprecated use `Url$outboundSchema` instead. */
  export const outboundSchema = Url$outboundSchema;
  /** @deprecated use `Url$Outbound` instead. */
  export type Outbound = Url$Outbound;
}

export function urlToJSON(url: Url): string {
  return JSON.stringify(Url$outboundSchema.parse(url));
}

export function urlFromJSON(
  jsonString: string,
): SafeParseResult<Url, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Url$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Url' from JSON`,
  );
}

/** @internal */
export const RequestT$inboundSchema: z.ZodType<
  RequestT,
  z.ZodTypeDef,
  unknown
> = z.object({
  body: z.nullable(z.any()).optional(),
  headers: z.nullable(z.record(z.any())).optional(),
  id: z.nullable(z.string()).optional(),
  method: z.nullable(z.string()).optional(),
  url: z.nullable(z.lazy(() => Url$inboundSchema)).optional(),
});

/** @internal */
export type RequestT$Outbound = {
  body?: any | null | undefined;
  headers?: { [k: string]: any } | null | undefined;
  id?: string | null | undefined;
  method?: string | null | undefined;
  url?: Url$Outbound | null | undefined;
};

/** @internal */
export const RequestT$outboundSchema: z.ZodType<
  RequestT$Outbound,
  z.ZodTypeDef,
  RequestT
> = z.object({
  body: z.nullable(z.any()).optional(),
  headers: z.nullable(z.record(z.any())).optional(),
  id: z.nullable(z.string()).optional(),
  method: z.nullable(z.string()).optional(),
  url: z.nullable(z.lazy(() => Url$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestT$ {
  /** @deprecated use `RequestT$inboundSchema` instead. */
  export const inboundSchema = RequestT$inboundSchema;
  /** @deprecated use `RequestT$outboundSchema` instead. */
  export const outboundSchema = RequestT$outboundSchema;
  /** @deprecated use `RequestT$Outbound` instead. */
  export type Outbound = RequestT$Outbound;
}

export function requestToJSON(requestT: RequestT): string {
  return JSON.stringify(RequestT$outboundSchema.parse(requestT));
}

export function requestFromJSON(
  jsonString: string,
): SafeParseResult<RequestT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestT' from JSON`,
  );
}

/** @internal */
export const StepLogResponse$inboundSchema: z.ZodType<
  StepLogResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  body: z.nullable(z.any()).optional(),
  custom_mapping_errors: z.nullable(z.array(CustomMappingError$inboundSchema))
    .optional(),
  headers: z.nullable(z.record(z.any())).optional(),
  provider_errors: z.nullable(z.array(ProviderError$inboundSchema)).optional(),
  status_code: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "custom_mapping_errors": "customMappingErrors",
    "provider_errors": "providerErrors",
    "status_code": "statusCode",
  });
});

/** @internal */
export type StepLogResponse$Outbound = {
  body?: any | null | undefined;
  custom_mapping_errors?: Array<CustomMappingError$Outbound> | null | undefined;
  headers?: { [k: string]: any } | null | undefined;
  provider_errors?: Array<ProviderError$Outbound> | null | undefined;
  status_code?: number | null | undefined;
};

/** @internal */
export const StepLogResponse$outboundSchema: z.ZodType<
  StepLogResponse$Outbound,
  z.ZodTypeDef,
  StepLogResponse
> = z.object({
  body: z.nullable(z.any()).optional(),
  customMappingErrors: z.nullable(z.array(CustomMappingError$outboundSchema))
    .optional(),
  headers: z.nullable(z.record(z.any())).optional(),
  providerErrors: z.nullable(z.array(ProviderError$outboundSchema)).optional(),
  statusCode: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    customMappingErrors: "custom_mapping_errors",
    providerErrors: "provider_errors",
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StepLogResponse$ {
  /** @deprecated use `StepLogResponse$inboundSchema` instead. */
  export const inboundSchema = StepLogResponse$inboundSchema;
  /** @deprecated use `StepLogResponse$outboundSchema` instead. */
  export const outboundSchema = StepLogResponse$outboundSchema;
  /** @deprecated use `StepLogResponse$Outbound` instead. */
  export type Outbound = StepLogResponse$Outbound;
}

export function stepLogResponseToJSON(
  stepLogResponse: StepLogResponse,
): string {
  return JSON.stringify(StepLogResponse$outboundSchema.parse(stepLogResponse));
}

export function stepLogResponseFromJSON(
  jsonString: string,
): SafeParseResult<StepLogResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StepLogResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StepLogResponse' from JSON`,
  );
}

/** @internal */
export const StepLog$inboundSchema: z.ZodType<StepLog, z.ZodTypeDef, unknown> =
  z.object({
    account_id: z.nullable(z.string()).optional(),
    action: z.nullable(z.string()).optional(),
    child_resource: z.nullable(z.string()).optional(),
    duration: z.nullable(z.number()).optional(),
    end_time: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    http_method: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    is_worker: z.nullable(z.boolean()).optional(),
    path: z.nullable(z.string()).optional(),
    project_id: z.nullable(z.string()).optional(),
    provider: z.nullable(z.string()).optional(),
    request: z.nullable(z.lazy(() => RequestT$inboundSchema)).optional(),
    request_id: z.nullable(z.string()).optional(),
    resource: z.nullable(z.string()).optional(),
    response: z.nullable(z.lazy(() => StepLogResponse$inboundSchema))
      .optional(),
    service: z.nullable(z.string()).optional(),
    start_time: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    status: z.nullable(z.number()).optional(),
    sub_resource: z.nullable(z.string()).optional(),
    success: z.nullable(z.boolean()).optional(),
    url: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
      "child_resource": "childResource",
      "end_time": "endTime",
      "http_method": "httpMethod",
      "is_worker": "isWorker",
      "project_id": "projectId",
      "request_id": "requestId",
      "start_time": "startTime",
      "sub_resource": "subResource",
    });
  });

/** @internal */
export type StepLog$Outbound = {
  account_id?: string | null | undefined;
  action?: string | null | undefined;
  child_resource?: string | null | undefined;
  duration?: number | null | undefined;
  end_time?: string | null | undefined;
  http_method?: string | null | undefined;
  id?: string | null | undefined;
  is_worker?: boolean | null | undefined;
  path?: string | null | undefined;
  project_id?: string | null | undefined;
  provider?: string | null | undefined;
  request?: RequestT$Outbound | null | undefined;
  request_id?: string | null | undefined;
  resource?: string | null | undefined;
  response?: StepLogResponse$Outbound | null | undefined;
  service?: string | null | undefined;
  start_time?: string | null | undefined;
  status?: number | null | undefined;
  sub_resource?: string | null | undefined;
  success?: boolean | null | undefined;
  url?: string | null | undefined;
};

/** @internal */
export const StepLog$outboundSchema: z.ZodType<
  StepLog$Outbound,
  z.ZodTypeDef,
  StepLog
> = z.object({
  accountId: z.nullable(z.string()).optional(),
  action: z.nullable(z.string()).optional(),
  childResource: z.nullable(z.string()).optional(),
  duration: z.nullable(z.number()).optional(),
  endTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  httpMethod: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  isWorker: z.nullable(z.boolean()).optional(),
  path: z.nullable(z.string()).optional(),
  projectId: z.nullable(z.string()).optional(),
  provider: z.nullable(z.string()).optional(),
  request: z.nullable(z.lazy(() => RequestT$outboundSchema)).optional(),
  requestId: z.nullable(z.string()).optional(),
  resource: z.nullable(z.string()).optional(),
  response: z.nullable(z.lazy(() => StepLogResponse$outboundSchema)).optional(),
  service: z.nullable(z.string()).optional(),
  startTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  status: z.nullable(z.number()).optional(),
  subResource: z.nullable(z.string()).optional(),
  success: z.nullable(z.boolean()).optional(),
  url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    childResource: "child_resource",
    endTime: "end_time",
    httpMethod: "http_method",
    isWorker: "is_worker",
    projectId: "project_id",
    requestId: "request_id",
    startTime: "start_time",
    subResource: "sub_resource",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StepLog$ {
  /** @deprecated use `StepLog$inboundSchema` instead. */
  export const inboundSchema = StepLog$inboundSchema;
  /** @deprecated use `StepLog$outboundSchema` instead. */
  export const outboundSchema = StepLog$outboundSchema;
  /** @deprecated use `StepLog$Outbound` instead. */
  export type Outbound = StepLog$Outbound;
}

export function stepLogToJSON(stepLog: StepLog): string {
  return JSON.stringify(StepLog$outboundSchema.parse(stepLog));
}

export function stepLogFromJSON(
  jsonString: string,
): SafeParseResult<StepLog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StepLog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StepLog' from JSON`,
  );
}
