/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TicketingContent,
  TicketingContent$inboundSchema,
  TicketingContent$Outbound,
  TicketingContent$outboundSchema,
} from "./ticketingcontent.js";

export type TicketingTicketUpdateRequestDto4 = {};

/**
 * The source value of the ticket priority.
 */
export type TicketingTicketUpdateRequestDtoSourceValue =
  | TicketingTicketUpdateRequestDto4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The priority of the ticket.
 */
export enum TicketingTicketUpdateRequestDtoValue {
  Lowest = "lowest",
  Low = "low",
  Medium = "medium",
  High = "high",
  Highest = "highest",
  UnmappedValue = "unmapped_value",
}
/**
 * The priority of the ticket.
 */
export type TicketingTicketUpdateRequestDtoValueOpen = OpenEnum<
  typeof TicketingTicketUpdateRequestDtoValue
>;

/**
 * Priority of the ticket
 */
export type TicketingTicketUpdateRequestDtoPriority = {
  /**
   * The id of the ticket priority.
   */
  id?: string | null | undefined;
  /**
   * The source value of the ticket priority.
   */
  sourceValue?:
    | TicketingTicketUpdateRequestDto4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The priority of the ticket.
   */
  value?: TicketingTicketUpdateRequestDtoValueOpen | null | undefined;
};

export type TicketingTicketUpdateRequestDtoSchemas4 = {};

/**
 * The source value of this status type
 */
export type TicketingTicketUpdateRequestDtoSchemasSourceValue =
  | TicketingTicketUpdateRequestDtoSchemas4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The type of this status
 */
export enum TicketingTicketUpdateRequestDtoSchemasValue {
  ToDo = "to-do",
  InProgress = "in-progress",
  Closed = "closed",
  UnmappedValue = "unmapped_value",
}
/**
 * The type of this status
 */
export type TicketingTicketUpdateRequestDtoSchemasValueOpen = OpenEnum<
  typeof TicketingTicketUpdateRequestDtoSchemasValue
>;

/**
 * The type of this status
 */
export type TicketingTicketUpdateRequestDtoType = {
  /**
   * The source value of this status type
   */
  sourceValue?:
    | TicketingTicketUpdateRequestDtoSchemas4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The type of this status
   */
  value?: TicketingTicketUpdateRequestDtoSchemasValueOpen | null | undefined;
};

/**
 * Current status of the ticket
 */
export type TicketingTicketUpdateRequestDtoStatus = {
  /**
   * The id of the ticket status.
   */
  id?: string | null | undefined;
  /**
   * The name of the ticket status.
   */
  name?: string | null | undefined;
  /**
   * The type of this status
   */
  type?: TicketingTicketUpdateRequestDtoType | null | undefined;
};

export type TicketingTicketUpdateRequestDto = {
  /**
   * Agents assigned to the ticket
   */
  assignees?: Array<string> | null | undefined;
  /**
   * Collections the ticket belongs to
   */
  collectionIds?: Array<string> | null | undefined;
  /**
   * Array of content associated with the ticket
   */
  content?: Array<TicketingContent> | null | undefined;
  /**
   * ID of the parent ticket if this is a sub-ticket
   */
  parentId?: string | null | undefined;
  /**
   * Priority of the ticket
   */
  priority?: TicketingTicketUpdateRequestDtoPriority | null | undefined;
  /**
   * Users who reported the ticket
   */
  reporters?: Array<string> | null | undefined;
  /**
   * Current status of the ticket
   */
  status?: TicketingTicketUpdateRequestDtoStatus | null | undefined;
  /**
   * The tags of the ticket
   */
  tags?: Array<string> | null | undefined;
  /**
   * The title or subject of the ticket
   */
  title?: string | null | undefined;
  /**
   * Custom Unified Fields configured in your StackOne project
   */
  unifiedCustomFields?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const TicketingTicketUpdateRequestDto4$inboundSchema: z.ZodType<
  TicketingTicketUpdateRequestDto4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TicketingTicketUpdateRequestDto4$Outbound = {};

/** @internal */
export const TicketingTicketUpdateRequestDto4$outboundSchema: z.ZodType<
  TicketingTicketUpdateRequestDto4$Outbound,
  z.ZodTypeDef,
  TicketingTicketUpdateRequestDto4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketUpdateRequestDto4$ {
  /** @deprecated use `TicketingTicketUpdateRequestDto4$inboundSchema` instead. */
  export const inboundSchema = TicketingTicketUpdateRequestDto4$inboundSchema;
  /** @deprecated use `TicketingTicketUpdateRequestDto4$outboundSchema` instead. */
  export const outboundSchema = TicketingTicketUpdateRequestDto4$outboundSchema;
  /** @deprecated use `TicketingTicketUpdateRequestDto4$Outbound` instead. */
  export type Outbound = TicketingTicketUpdateRequestDto4$Outbound;
}

export function ticketingTicketUpdateRequestDto4ToJSON(
  ticketingTicketUpdateRequestDto4: TicketingTicketUpdateRequestDto4,
): string {
  return JSON.stringify(
    TicketingTicketUpdateRequestDto4$outboundSchema.parse(
      ticketingTicketUpdateRequestDto4,
    ),
  );
}

export function ticketingTicketUpdateRequestDto4FromJSON(
  jsonString: string,
): SafeParseResult<TicketingTicketUpdateRequestDto4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingTicketUpdateRequestDto4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingTicketUpdateRequestDto4' from JSON`,
  );
}

/** @internal */
export const TicketingTicketUpdateRequestDtoSourceValue$inboundSchema:
  z.ZodType<TicketingTicketUpdateRequestDtoSourceValue, z.ZodTypeDef, unknown> =
    z.union([
      z.lazy(() => TicketingTicketUpdateRequestDto4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]);

/** @internal */
export type TicketingTicketUpdateRequestDtoSourceValue$Outbound =
  | TicketingTicketUpdateRequestDto4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const TicketingTicketUpdateRequestDtoSourceValue$outboundSchema:
  z.ZodType<
    TicketingTicketUpdateRequestDtoSourceValue$Outbound,
    z.ZodTypeDef,
    TicketingTicketUpdateRequestDtoSourceValue
  > = z.union([
    z.lazy(() => TicketingTicketUpdateRequestDto4$outboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketUpdateRequestDtoSourceValue$ {
  /** @deprecated use `TicketingTicketUpdateRequestDtoSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    TicketingTicketUpdateRequestDtoSourceValue$inboundSchema;
  /** @deprecated use `TicketingTicketUpdateRequestDtoSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    TicketingTicketUpdateRequestDtoSourceValue$outboundSchema;
  /** @deprecated use `TicketingTicketUpdateRequestDtoSourceValue$Outbound` instead. */
  export type Outbound = TicketingTicketUpdateRequestDtoSourceValue$Outbound;
}

export function ticketingTicketUpdateRequestDtoSourceValueToJSON(
  ticketingTicketUpdateRequestDtoSourceValue:
    TicketingTicketUpdateRequestDtoSourceValue,
): string {
  return JSON.stringify(
    TicketingTicketUpdateRequestDtoSourceValue$outboundSchema.parse(
      ticketingTicketUpdateRequestDtoSourceValue,
    ),
  );
}

export function ticketingTicketUpdateRequestDtoSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  TicketingTicketUpdateRequestDtoSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TicketingTicketUpdateRequestDtoSourceValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TicketingTicketUpdateRequestDtoSourceValue' from JSON`,
  );
}

/** @internal */
export const TicketingTicketUpdateRequestDtoValue$inboundSchema: z.ZodType<
  TicketingTicketUpdateRequestDtoValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TicketingTicketUpdateRequestDtoValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TicketingTicketUpdateRequestDtoValue$outboundSchema: z.ZodType<
  TicketingTicketUpdateRequestDtoValueOpen,
  z.ZodTypeDef,
  TicketingTicketUpdateRequestDtoValueOpen
> = z.union([
  z.nativeEnum(TicketingTicketUpdateRequestDtoValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketUpdateRequestDtoValue$ {
  /** @deprecated use `TicketingTicketUpdateRequestDtoValue$inboundSchema` instead. */
  export const inboundSchema =
    TicketingTicketUpdateRequestDtoValue$inboundSchema;
  /** @deprecated use `TicketingTicketUpdateRequestDtoValue$outboundSchema` instead. */
  export const outboundSchema =
    TicketingTicketUpdateRequestDtoValue$outboundSchema;
}

/** @internal */
export const TicketingTicketUpdateRequestDtoPriority$inboundSchema: z.ZodType<
  TicketingTicketUpdateRequestDtoPriority,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  source_value: z.nullable(
    z.union([
      z.lazy(() => TicketingTicketUpdateRequestDto4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(TicketingTicketUpdateRequestDtoValue$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type TicketingTicketUpdateRequestDtoPriority$Outbound = {
  id?: string | null | undefined;
  source_value?:
    | TicketingTicketUpdateRequestDto4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const TicketingTicketUpdateRequestDtoPriority$outboundSchema: z.ZodType<
  TicketingTicketUpdateRequestDtoPriority$Outbound,
  z.ZodTypeDef,
  TicketingTicketUpdateRequestDtoPriority
> = z.object({
  id: z.nullable(z.string()).optional(),
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => TicketingTicketUpdateRequestDto4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(TicketingTicketUpdateRequestDtoValue$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketUpdateRequestDtoPriority$ {
  /** @deprecated use `TicketingTicketUpdateRequestDtoPriority$inboundSchema` instead. */
  export const inboundSchema =
    TicketingTicketUpdateRequestDtoPriority$inboundSchema;
  /** @deprecated use `TicketingTicketUpdateRequestDtoPriority$outboundSchema` instead. */
  export const outboundSchema =
    TicketingTicketUpdateRequestDtoPriority$outboundSchema;
  /** @deprecated use `TicketingTicketUpdateRequestDtoPriority$Outbound` instead. */
  export type Outbound = TicketingTicketUpdateRequestDtoPriority$Outbound;
}

export function ticketingTicketUpdateRequestDtoPriorityToJSON(
  ticketingTicketUpdateRequestDtoPriority:
    TicketingTicketUpdateRequestDtoPriority,
): string {
  return JSON.stringify(
    TicketingTicketUpdateRequestDtoPriority$outboundSchema.parse(
      ticketingTicketUpdateRequestDtoPriority,
    ),
  );
}

export function ticketingTicketUpdateRequestDtoPriorityFromJSON(
  jsonString: string,
): SafeParseResult<
  TicketingTicketUpdateRequestDtoPriority,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TicketingTicketUpdateRequestDtoPriority$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TicketingTicketUpdateRequestDtoPriority' from JSON`,
  );
}

/** @internal */
export const TicketingTicketUpdateRequestDtoSchemas4$inboundSchema: z.ZodType<
  TicketingTicketUpdateRequestDtoSchemas4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TicketingTicketUpdateRequestDtoSchemas4$Outbound = {};

/** @internal */
export const TicketingTicketUpdateRequestDtoSchemas4$outboundSchema: z.ZodType<
  TicketingTicketUpdateRequestDtoSchemas4$Outbound,
  z.ZodTypeDef,
  TicketingTicketUpdateRequestDtoSchemas4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketUpdateRequestDtoSchemas4$ {
  /** @deprecated use `TicketingTicketUpdateRequestDtoSchemas4$inboundSchema` instead. */
  export const inboundSchema =
    TicketingTicketUpdateRequestDtoSchemas4$inboundSchema;
  /** @deprecated use `TicketingTicketUpdateRequestDtoSchemas4$outboundSchema` instead. */
  export const outboundSchema =
    TicketingTicketUpdateRequestDtoSchemas4$outboundSchema;
  /** @deprecated use `TicketingTicketUpdateRequestDtoSchemas4$Outbound` instead. */
  export type Outbound = TicketingTicketUpdateRequestDtoSchemas4$Outbound;
}

export function ticketingTicketUpdateRequestDtoSchemas4ToJSON(
  ticketingTicketUpdateRequestDtoSchemas4:
    TicketingTicketUpdateRequestDtoSchemas4,
): string {
  return JSON.stringify(
    TicketingTicketUpdateRequestDtoSchemas4$outboundSchema.parse(
      ticketingTicketUpdateRequestDtoSchemas4,
    ),
  );
}

export function ticketingTicketUpdateRequestDtoSchemas4FromJSON(
  jsonString: string,
): SafeParseResult<
  TicketingTicketUpdateRequestDtoSchemas4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TicketingTicketUpdateRequestDtoSchemas4$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TicketingTicketUpdateRequestDtoSchemas4' from JSON`,
  );
}

/** @internal */
export const TicketingTicketUpdateRequestDtoSchemasSourceValue$inboundSchema:
  z.ZodType<
    TicketingTicketUpdateRequestDtoSchemasSourceValue,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => TicketingTicketUpdateRequestDtoSchemas4$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/** @internal */
export type TicketingTicketUpdateRequestDtoSchemasSourceValue$Outbound =
  | TicketingTicketUpdateRequestDtoSchemas4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const TicketingTicketUpdateRequestDtoSchemasSourceValue$outboundSchema:
  z.ZodType<
    TicketingTicketUpdateRequestDtoSchemasSourceValue$Outbound,
    z.ZodTypeDef,
    TicketingTicketUpdateRequestDtoSchemasSourceValue
  > = z.union([
    z.lazy(() => TicketingTicketUpdateRequestDtoSchemas4$outboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketUpdateRequestDtoSchemasSourceValue$ {
  /** @deprecated use `TicketingTicketUpdateRequestDtoSchemasSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    TicketingTicketUpdateRequestDtoSchemasSourceValue$inboundSchema;
  /** @deprecated use `TicketingTicketUpdateRequestDtoSchemasSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    TicketingTicketUpdateRequestDtoSchemasSourceValue$outboundSchema;
  /** @deprecated use `TicketingTicketUpdateRequestDtoSchemasSourceValue$Outbound` instead. */
  export type Outbound =
    TicketingTicketUpdateRequestDtoSchemasSourceValue$Outbound;
}

export function ticketingTicketUpdateRequestDtoSchemasSourceValueToJSON(
  ticketingTicketUpdateRequestDtoSchemasSourceValue:
    TicketingTicketUpdateRequestDtoSchemasSourceValue,
): string {
  return JSON.stringify(
    TicketingTicketUpdateRequestDtoSchemasSourceValue$outboundSchema.parse(
      ticketingTicketUpdateRequestDtoSchemasSourceValue,
    ),
  );
}

export function ticketingTicketUpdateRequestDtoSchemasSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  TicketingTicketUpdateRequestDtoSchemasSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TicketingTicketUpdateRequestDtoSchemasSourceValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TicketingTicketUpdateRequestDtoSchemasSourceValue' from JSON`,
  );
}

/** @internal */
export const TicketingTicketUpdateRequestDtoSchemasValue$inboundSchema:
  z.ZodType<
    TicketingTicketUpdateRequestDtoSchemasValueOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(TicketingTicketUpdateRequestDtoSchemasValue),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const TicketingTicketUpdateRequestDtoSchemasValue$outboundSchema:
  z.ZodType<
    TicketingTicketUpdateRequestDtoSchemasValueOpen,
    z.ZodTypeDef,
    TicketingTicketUpdateRequestDtoSchemasValueOpen
  > = z.union([
    z.nativeEnum(TicketingTicketUpdateRequestDtoSchemasValue),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketUpdateRequestDtoSchemasValue$ {
  /** @deprecated use `TicketingTicketUpdateRequestDtoSchemasValue$inboundSchema` instead. */
  export const inboundSchema =
    TicketingTicketUpdateRequestDtoSchemasValue$inboundSchema;
  /** @deprecated use `TicketingTicketUpdateRequestDtoSchemasValue$outboundSchema` instead. */
  export const outboundSchema =
    TicketingTicketUpdateRequestDtoSchemasValue$outboundSchema;
}

/** @internal */
export const TicketingTicketUpdateRequestDtoType$inboundSchema: z.ZodType<
  TicketingTicketUpdateRequestDtoType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => TicketingTicketUpdateRequestDtoSchemas4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(TicketingTicketUpdateRequestDtoSchemasValue$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type TicketingTicketUpdateRequestDtoType$Outbound = {
  source_value?:
    | TicketingTicketUpdateRequestDtoSchemas4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const TicketingTicketUpdateRequestDtoType$outboundSchema: z.ZodType<
  TicketingTicketUpdateRequestDtoType$Outbound,
  z.ZodTypeDef,
  TicketingTicketUpdateRequestDtoType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => TicketingTicketUpdateRequestDtoSchemas4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(TicketingTicketUpdateRequestDtoSchemasValue$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketUpdateRequestDtoType$ {
  /** @deprecated use `TicketingTicketUpdateRequestDtoType$inboundSchema` instead. */
  export const inboundSchema =
    TicketingTicketUpdateRequestDtoType$inboundSchema;
  /** @deprecated use `TicketingTicketUpdateRequestDtoType$outboundSchema` instead. */
  export const outboundSchema =
    TicketingTicketUpdateRequestDtoType$outboundSchema;
  /** @deprecated use `TicketingTicketUpdateRequestDtoType$Outbound` instead. */
  export type Outbound = TicketingTicketUpdateRequestDtoType$Outbound;
}

export function ticketingTicketUpdateRequestDtoTypeToJSON(
  ticketingTicketUpdateRequestDtoType: TicketingTicketUpdateRequestDtoType,
): string {
  return JSON.stringify(
    TicketingTicketUpdateRequestDtoType$outboundSchema.parse(
      ticketingTicketUpdateRequestDtoType,
    ),
  );
}

export function ticketingTicketUpdateRequestDtoTypeFromJSON(
  jsonString: string,
): SafeParseResult<TicketingTicketUpdateRequestDtoType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TicketingTicketUpdateRequestDtoType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingTicketUpdateRequestDtoType' from JSON`,
  );
}

/** @internal */
export const TicketingTicketUpdateRequestDtoStatus$inboundSchema: z.ZodType<
  TicketingTicketUpdateRequestDtoStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  type: z.nullable(
    z.lazy(() => TicketingTicketUpdateRequestDtoType$inboundSchema),
  ).optional(),
});

/** @internal */
export type TicketingTicketUpdateRequestDtoStatus$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  type?: TicketingTicketUpdateRequestDtoType$Outbound | null | undefined;
};

/** @internal */
export const TicketingTicketUpdateRequestDtoStatus$outboundSchema: z.ZodType<
  TicketingTicketUpdateRequestDtoStatus$Outbound,
  z.ZodTypeDef,
  TicketingTicketUpdateRequestDtoStatus
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  type: z.nullable(
    z.lazy(() => TicketingTicketUpdateRequestDtoType$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketUpdateRequestDtoStatus$ {
  /** @deprecated use `TicketingTicketUpdateRequestDtoStatus$inboundSchema` instead. */
  export const inboundSchema =
    TicketingTicketUpdateRequestDtoStatus$inboundSchema;
  /** @deprecated use `TicketingTicketUpdateRequestDtoStatus$outboundSchema` instead. */
  export const outboundSchema =
    TicketingTicketUpdateRequestDtoStatus$outboundSchema;
  /** @deprecated use `TicketingTicketUpdateRequestDtoStatus$Outbound` instead. */
  export type Outbound = TicketingTicketUpdateRequestDtoStatus$Outbound;
}

export function ticketingTicketUpdateRequestDtoStatusToJSON(
  ticketingTicketUpdateRequestDtoStatus: TicketingTicketUpdateRequestDtoStatus,
): string {
  return JSON.stringify(
    TicketingTicketUpdateRequestDtoStatus$outboundSchema.parse(
      ticketingTicketUpdateRequestDtoStatus,
    ),
  );
}

export function ticketingTicketUpdateRequestDtoStatusFromJSON(
  jsonString: string,
): SafeParseResult<TicketingTicketUpdateRequestDtoStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TicketingTicketUpdateRequestDtoStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingTicketUpdateRequestDtoStatus' from JSON`,
  );
}

/** @internal */
export const TicketingTicketUpdateRequestDto$inboundSchema: z.ZodType<
  TicketingTicketUpdateRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  assignees: z.nullable(z.array(z.string())).optional(),
  collection_ids: z.nullable(z.array(z.string())).optional(),
  content: z.nullable(z.array(TicketingContent$inboundSchema)).optional(),
  parent_id: z.nullable(z.string()).optional(),
  priority: z.nullable(
    z.lazy(() => TicketingTicketUpdateRequestDtoPriority$inboundSchema),
  ).optional(),
  reporters: z.nullable(z.array(z.string())).optional(),
  status: z.nullable(
    z.lazy(() => TicketingTicketUpdateRequestDtoStatus$inboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  title: z.nullable(z.string()).optional(),
  unified_custom_fields: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    "collection_ids": "collectionIds",
    "parent_id": "parentId",
    "unified_custom_fields": "unifiedCustomFields",
  });
});

/** @internal */
export type TicketingTicketUpdateRequestDto$Outbound = {
  assignees?: Array<string> | null | undefined;
  collection_ids?: Array<string> | null | undefined;
  content?: Array<TicketingContent$Outbound> | null | undefined;
  parent_id?: string | null | undefined;
  priority?:
    | TicketingTicketUpdateRequestDtoPriority$Outbound
    | null
    | undefined;
  reporters?: Array<string> | null | undefined;
  status?: TicketingTicketUpdateRequestDtoStatus$Outbound | null | undefined;
  tags?: Array<string> | null | undefined;
  title?: string | null | undefined;
  unified_custom_fields?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const TicketingTicketUpdateRequestDto$outboundSchema: z.ZodType<
  TicketingTicketUpdateRequestDto$Outbound,
  z.ZodTypeDef,
  TicketingTicketUpdateRequestDto
> = z.object({
  assignees: z.nullable(z.array(z.string())).optional(),
  collectionIds: z.nullable(z.array(z.string())).optional(),
  content: z.nullable(z.array(TicketingContent$outboundSchema)).optional(),
  parentId: z.nullable(z.string()).optional(),
  priority: z.nullable(
    z.lazy(() => TicketingTicketUpdateRequestDtoPriority$outboundSchema),
  ).optional(),
  reporters: z.nullable(z.array(z.string())).optional(),
  status: z.nullable(
    z.lazy(() => TicketingTicketUpdateRequestDtoStatus$outboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  title: z.nullable(z.string()).optional(),
  unifiedCustomFields: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    collectionIds: "collection_ids",
    parentId: "parent_id",
    unifiedCustomFields: "unified_custom_fields",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketUpdateRequestDto$ {
  /** @deprecated use `TicketingTicketUpdateRequestDto$inboundSchema` instead. */
  export const inboundSchema = TicketingTicketUpdateRequestDto$inboundSchema;
  /** @deprecated use `TicketingTicketUpdateRequestDto$outboundSchema` instead. */
  export const outboundSchema = TicketingTicketUpdateRequestDto$outboundSchema;
  /** @deprecated use `TicketingTicketUpdateRequestDto$Outbound` instead. */
  export type Outbound = TicketingTicketUpdateRequestDto$Outbound;
}

export function ticketingTicketUpdateRequestDtoToJSON(
  ticketingTicketUpdateRequestDto: TicketingTicketUpdateRequestDto,
): string {
  return JSON.stringify(
    TicketingTicketUpdateRequestDto$outboundSchema.parse(
      ticketingTicketUpdateRequestDto,
    ),
  );
}

export function ticketingTicketUpdateRequestDtoFromJSON(
  jsonString: string,
): SafeParseResult<TicketingTicketUpdateRequestDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingTicketUpdateRequestDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingTicketUpdateRequestDto' from JSON`,
  );
}
