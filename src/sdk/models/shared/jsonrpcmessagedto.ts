/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Request id (arbitrary JSON scalar)
 */
export type Id = {};

/**
 * Method parameters (arbitrary JSON)
 */
export type Params = {};

export type JsonRpcMessageDto = {
  /**
   * Request id (arbitrary JSON scalar)
   */
  id?: Id | undefined;
  /**
   * JSON-RPC protocol version
   */
  jsonrpc: string;
  /**
   * JSON-RPC method name
   */
  method: string;
  /**
   * Method parameters (arbitrary JSON)
   */
  params?: Params | undefined;
};

/** @internal */
export const Id$inboundSchema: z.ZodType<Id, z.ZodTypeDef, unknown> = z.object(
  {},
);

/** @internal */
export type Id$Outbound = {};

/** @internal */
export const Id$outboundSchema: z.ZodType<Id$Outbound, z.ZodTypeDef, Id> = z
  .object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Id$ {
  /** @deprecated use `Id$inboundSchema` instead. */
  export const inboundSchema = Id$inboundSchema;
  /** @deprecated use `Id$outboundSchema` instead. */
  export const outboundSchema = Id$outboundSchema;
  /** @deprecated use `Id$Outbound` instead. */
  export type Outbound = Id$Outbound;
}

export function idToJSON(id: Id): string {
  return JSON.stringify(Id$outboundSchema.parse(id));
}

export function idFromJSON(
  jsonString: string,
): SafeParseResult<Id, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Id$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Id' from JSON`,
  );
}

/** @internal */
export const Params$inboundSchema: z.ZodType<Params, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Params$Outbound = {};

/** @internal */
export const Params$outboundSchema: z.ZodType<
  Params$Outbound,
  z.ZodTypeDef,
  Params
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Params$ {
  /** @deprecated use `Params$inboundSchema` instead. */
  export const inboundSchema = Params$inboundSchema;
  /** @deprecated use `Params$outboundSchema` instead. */
  export const outboundSchema = Params$outboundSchema;
  /** @deprecated use `Params$Outbound` instead. */
  export type Outbound = Params$Outbound;
}

export function paramsToJSON(params: Params): string {
  return JSON.stringify(Params$outboundSchema.parse(params));
}

export function paramsFromJSON(
  jsonString: string,
): SafeParseResult<Params, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Params$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Params' from JSON`,
  );
}

/** @internal */
export const JsonRpcMessageDto$inboundSchema: z.ZodType<
  JsonRpcMessageDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.lazy(() => Id$inboundSchema).optional(),
  jsonrpc: z.string(),
  method: z.string(),
  params: z.lazy(() => Params$inboundSchema).optional(),
});

/** @internal */
export type JsonRpcMessageDto$Outbound = {
  id?: Id$Outbound | undefined;
  jsonrpc: string;
  method: string;
  params?: Params$Outbound | undefined;
};

/** @internal */
export const JsonRpcMessageDto$outboundSchema: z.ZodType<
  JsonRpcMessageDto$Outbound,
  z.ZodTypeDef,
  JsonRpcMessageDto
> = z.object({
  id: z.lazy(() => Id$outboundSchema).optional(),
  jsonrpc: z.string(),
  method: z.string(),
  params: z.lazy(() => Params$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JsonRpcMessageDto$ {
  /** @deprecated use `JsonRpcMessageDto$inboundSchema` instead. */
  export const inboundSchema = JsonRpcMessageDto$inboundSchema;
  /** @deprecated use `JsonRpcMessageDto$outboundSchema` instead. */
  export const outboundSchema = JsonRpcMessageDto$outboundSchema;
  /** @deprecated use `JsonRpcMessageDto$Outbound` instead. */
  export type Outbound = JsonRpcMessageDto$Outbound;
}

export function jsonRpcMessageDtoToJSON(
  jsonRpcMessageDto: JsonRpcMessageDto,
): string {
  return JSON.stringify(
    JsonRpcMessageDto$outboundSchema.parse(jsonRpcMessageDto),
  );
}

export function jsonRpcMessageDtoFromJSON(
  jsonString: string,
): SafeParseResult<JsonRpcMessageDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JsonRpcMessageDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JsonRpcMessageDto' from JSON`,
  );
}
