/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * The type of the compensation.
 */
export enum CompensationTypeEnumValue {
    Salary = "salary",
    Hourly = "hourly",
    Commission = "commission",
    Bonus = "bonus",
    Equity = "equity",
    Other = "other",
    UnmappedValue = "unmapped_value",
}

export type CompensationTypeEnum = {
    /**
     * The source value of the compensation type.
     */
    sourceValue: string;
    /**
     * The type of the compensation.
     */
    value: CompensationTypeEnumValue;
};

/** @internal */
export const CompensationTypeEnumValue$ = z.nativeEnum(CompensationTypeEnumValue);

/** @internal */
export namespace CompensationTypeEnum$ {
    export type Inbound = {
        source_value: string;
        value: CompensationTypeEnumValue;
    };

    export const inboundSchema: z.ZodType<CompensationTypeEnum, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z.string(),
            value: CompensationTypeEnumValue$,
        })
        .transform((v) => {
            return {
                sourceValue: v.source_value,
                value: v.value,
            };
        });

    export type Outbound = {
        source_value: string;
        value: CompensationTypeEnumValue;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CompensationTypeEnum> = z
        .object({
            sourceValue: z.string(),
            value: CompensationTypeEnumValue$,
        })
        .transform((v) => {
            return {
                source_value: v.sourceValue,
                value: v.value,
            };
        });
}
