/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type AtsRejectApplicationRequestDto = {
  /**
   * Value to pass through to the provider
   */
  passthrough?: { [k: string]: any } | null | undefined;
  /**
   * Unique identifier of the rejection reason
   */
  rejectedReasonId?: string | null | undefined;
};

/** @internal */
export const AtsRejectApplicationRequestDto$inboundSchema: z.ZodType<
  AtsRejectApplicationRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  passthrough: z.nullable(z.record(z.any())).optional(),
  rejected_reason_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "rejected_reason_id": "rejectedReasonId",
  });
});

/** @internal */
export type AtsRejectApplicationRequestDto$Outbound = {
  passthrough?: { [k: string]: any } | null | undefined;
  rejected_reason_id?: string | null | undefined;
};

/** @internal */
export const AtsRejectApplicationRequestDto$outboundSchema: z.ZodType<
  AtsRejectApplicationRequestDto$Outbound,
  z.ZodTypeDef,
  AtsRejectApplicationRequestDto
> = z.object({
  passthrough: z.nullable(z.record(z.any())).optional(),
  rejectedReasonId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    rejectedReasonId: "rejected_reason_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsRejectApplicationRequestDto$ {
  /** @deprecated use `AtsRejectApplicationRequestDto$inboundSchema` instead. */
  export const inboundSchema = AtsRejectApplicationRequestDto$inboundSchema;
  /** @deprecated use `AtsRejectApplicationRequestDto$outboundSchema` instead. */
  export const outboundSchema = AtsRejectApplicationRequestDto$outboundSchema;
  /** @deprecated use `AtsRejectApplicationRequestDto$Outbound` instead. */
  export type Outbound = AtsRejectApplicationRequestDto$Outbound;
}
