/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RawResponse,
  RawResponse$inboundSchema,
  RawResponse$Outbound,
  RawResponse$outboundSchema,
} from "./rawresponse.js";

export type Data = {
  /**
   * The timestamp when the record was created
   */
  createdAt?: Date | null | undefined;
  /**
   * The name of the file
   */
  fileName?: string | null | undefined;
  /**
   * The type of the file
   */
  fileType?: string | null | undefined;
  /**
   * The resource URL of the file
   */
  fileUrl?: string | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * The size of the file
   */
  size?: number | null | undefined;
  /**
   * The reference ticket ID the attachment belongs to
   */
  ticketId?: string | null | undefined;
  /**
   * The timestamp when the record was last updated
   */
  updatedAt?: Date | null | undefined;
  /**
   * The user who uploaded the file
   */
  userId?: string | null | undefined;
};

export type TicketingAttachmentResult = {
  data?: Data | null | undefined;
  raw?: Array<RawResponse> | null | undefined;
};

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    created_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    file_name: z.nullable(z.string()).optional(),
    file_type: z.nullable(z.string()).optional(),
    file_url: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    remote_id: z.nullable(z.string()).optional(),
    size: z.nullable(z.number()).optional(),
    ticket_id: z.nullable(z.string()).optional(),
    updated_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    user_id: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "file_name": "fileName",
      "file_type": "fileType",
      "file_url": "fileUrl",
      "remote_id": "remoteId",
      "ticket_id": "ticketId",
      "updated_at": "updatedAt",
      "user_id": "userId",
    });
  });

/** @internal */
export type Data$Outbound = {
  created_at?: string | null | undefined;
  file_name?: string | null | undefined;
  file_type?: string | null | undefined;
  file_url?: string | null | undefined;
  id?: string | null | undefined;
  remote_id?: string | null | undefined;
  size?: number | null | undefined;
  ticket_id?: string | null | undefined;
  updated_at?: string | null | undefined;
  user_id?: string | null | undefined;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    fileName: z.nullable(z.string()).optional(),
    fileType: z.nullable(z.string()).optional(),
    fileUrl: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    remoteId: z.nullable(z.string()).optional(),
    size: z.nullable(z.number()).optional(),
    ticketId: z.nullable(z.string()).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    userId: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      createdAt: "created_at",
      fileName: "file_name",
      fileType: "file_type",
      fileUrl: "file_url",
      remoteId: "remote_id",
      ticketId: "ticket_id",
      updatedAt: "updated_at",
      userId: "user_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const TicketingAttachmentResult$inboundSchema: z.ZodType<
  TicketingAttachmentResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(z.lazy(() => Data$inboundSchema)).optional(),
  raw: z.nullable(z.array(RawResponse$inboundSchema)).optional(),
});

/** @internal */
export type TicketingAttachmentResult$Outbound = {
  data?: Data$Outbound | null | undefined;
  raw?: Array<RawResponse$Outbound> | null | undefined;
};

/** @internal */
export const TicketingAttachmentResult$outboundSchema: z.ZodType<
  TicketingAttachmentResult$Outbound,
  z.ZodTypeDef,
  TicketingAttachmentResult
> = z.object({
  data: z.nullable(z.lazy(() => Data$outboundSchema)).optional(),
  raw: z.nullable(z.array(RawResponse$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingAttachmentResult$ {
  /** @deprecated use `TicketingAttachmentResult$inboundSchema` instead. */
  export const inboundSchema = TicketingAttachmentResult$inboundSchema;
  /** @deprecated use `TicketingAttachmentResult$outboundSchema` instead. */
  export const outboundSchema = TicketingAttachmentResult$outboundSchema;
  /** @deprecated use `TicketingAttachmentResult$Outbound` instead. */
  export type Outbound = TicketingAttachmentResult$Outbound;
}

export function ticketingAttachmentResultToJSON(
  ticketingAttachmentResult: TicketingAttachmentResult,
): string {
  return JSON.stringify(
    TicketingAttachmentResult$outboundSchema.parse(ticketingAttachmentResult),
  );
}

export function ticketingAttachmentResultFromJSON(
  jsonString: string,
): SafeParseResult<TicketingAttachmentResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingAttachmentResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingAttachmentResult' from JSON`,
  );
}
