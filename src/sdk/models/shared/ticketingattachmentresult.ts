/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RawResponse,
  RawResponse$inboundSchema,
  RawResponse$Outbound,
  RawResponse$outboundSchema,
} from "./rawresponse.js";

export type Data = {};

export type TicketingAttachmentResult = {
  data?: Data | null | undefined;
  raw?: Array<RawResponse> | null | undefined;
};

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Data$Outbound = {};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const TicketingAttachmentResult$inboundSchema: z.ZodType<
  TicketingAttachmentResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(z.lazy(() => Data$inboundSchema)).optional(),
  raw: z.nullable(z.array(RawResponse$inboundSchema)).optional(),
});

/** @internal */
export type TicketingAttachmentResult$Outbound = {
  data?: Data$Outbound | null | undefined;
  raw?: Array<RawResponse$Outbound> | null | undefined;
};

/** @internal */
export const TicketingAttachmentResult$outboundSchema: z.ZodType<
  TicketingAttachmentResult$Outbound,
  z.ZodTypeDef,
  TicketingAttachmentResult
> = z.object({
  data: z.nullable(z.lazy(() => Data$outboundSchema)).optional(),
  raw: z.nullable(z.array(RawResponse$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingAttachmentResult$ {
  /** @deprecated use `TicketingAttachmentResult$inboundSchema` instead. */
  export const inboundSchema = TicketingAttachmentResult$inboundSchema;
  /** @deprecated use `TicketingAttachmentResult$outboundSchema` instead. */
  export const outboundSchema = TicketingAttachmentResult$outboundSchema;
  /** @deprecated use `TicketingAttachmentResult$Outbound` instead. */
  export type Outbound = TicketingAttachmentResult$Outbound;
}

export function ticketingAttachmentResultToJSON(
  ticketingAttachmentResult: TicketingAttachmentResult,
): string {
  return JSON.stringify(
    TicketingAttachmentResult$outboundSchema.parse(ticketingAttachmentResult),
  );
}

export function ticketingAttachmentResultFromJSON(
  jsonString: string,
): SafeParseResult<TicketingAttachmentResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingAttachmentResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingAttachmentResult' from JSON`,
  );
}
