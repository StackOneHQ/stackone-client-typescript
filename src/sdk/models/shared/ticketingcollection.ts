/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of the collection.
 */
export enum TicketingCollectionType {
  Project = "project",
  Component = "component",
  UnmappedValue = "unmapped_value",
}
/**
 * The type of the collection.
 */
export type TicketingCollectionTypeOpen = OpenEnum<
  typeof TicketingCollectionType
>;

export type TicketingCollection = {
  /**
   * The timestamp when the record was created
   */
  createdAt?: Date | null | undefined;
  /**
   * The description of the collection
   */
  description?: string | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The user-friendly key of the collection
   */
  key?: string | null | undefined;
  /**
   * The name of the collection
   */
  name?: string | null | undefined;
  /**
   * The organization id related to the collection
   */
  organizationId?: string | null | undefined;
  /**
   * The parent collection of the collection
   */
  parentId?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * The type of the collection.
   */
  type?: TicketingCollectionTypeOpen | null | undefined;
  /**
   * The timestamp when the record was last updated
   */
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const TicketingCollectionType$inboundSchema: z.ZodType<
  TicketingCollectionTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TicketingCollectionType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TicketingCollectionType$outboundSchema: z.ZodType<
  TicketingCollectionTypeOpen,
  z.ZodTypeDef,
  TicketingCollectionTypeOpen
> = z.union([
  z.nativeEnum(TicketingCollectionType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingCollectionType$ {
  /** @deprecated use `TicketingCollectionType$inboundSchema` instead. */
  export const inboundSchema = TicketingCollectionType$inboundSchema;
  /** @deprecated use `TicketingCollectionType$outboundSchema` instead. */
  export const outboundSchema = TicketingCollectionType$outboundSchema;
}

/** @internal */
export const TicketingCollection$inboundSchema: z.ZodType<
  TicketingCollection,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  description: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  key: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  organization_id: z.nullable(z.string()).optional(),
  parent_id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  type: z.nullable(TicketingCollectionType$inboundSchema).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "organization_id": "organizationId",
    "parent_id": "parentId",
    "remote_id": "remoteId",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type TicketingCollection$Outbound = {
  created_at?: string | null | undefined;
  description?: string | null | undefined;
  id?: string | null | undefined;
  key?: string | null | undefined;
  name?: string | null | undefined;
  organization_id?: string | null | undefined;
  parent_id?: string | null | undefined;
  remote_id?: string | null | undefined;
  type?: string | null | undefined;
  updated_at?: string | null | undefined;
};

/** @internal */
export const TicketingCollection$outboundSchema: z.ZodType<
  TicketingCollection$Outbound,
  z.ZodTypeDef,
  TicketingCollection
> = z.object({
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  description: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  key: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  organizationId: z.nullable(z.string()).optional(),
  parentId: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  type: z.nullable(TicketingCollectionType$outboundSchema).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    organizationId: "organization_id",
    parentId: "parent_id",
    remoteId: "remote_id",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingCollection$ {
  /** @deprecated use `TicketingCollection$inboundSchema` instead. */
  export const inboundSchema = TicketingCollection$inboundSchema;
  /** @deprecated use `TicketingCollection$outboundSchema` instead. */
  export const outboundSchema = TicketingCollection$outboundSchema;
  /** @deprecated use `TicketingCollection$Outbound` instead. */
  export type Outbound = TicketingCollection$Outbound;
}

export function ticketingCollectionToJSON(
  ticketingCollection: TicketingCollection,
): string {
  return JSON.stringify(
    TicketingCollection$outboundSchema.parse(ticketingCollection),
  );
}

export function ticketingCollectionFromJSON(
  jsonString: string,
): SafeParseResult<TicketingCollection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingCollection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingCollection' from JSON`,
  );
}
