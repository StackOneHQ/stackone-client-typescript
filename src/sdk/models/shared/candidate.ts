/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CandidateEmail, CandidateEmail$ } from "./candidateemail";
import { SocialLink, SocialLink$ } from "./sociallink";
import { z } from "zod";

export type Candidate = {
    /**
     * List of candidate application IDs
     */
    applicationIds?: Array<string> | null | undefined;
    /**
     * Candidate company
     */
    company?: string | null | undefined;
    /**
     * Candidate created date
     */
    createdAt: Date;
    /**
     * Candidate email
     */
    email: string;
    /**
     * List of candidate emails
     */
    emails: Array<CandidateEmail>;
    /**
     * Candidate first name
     */
    firstName: string;
    /**
     * Candidate hired date
     */
    hiredAt?: Date | null | undefined;
    /**
     * Candidate ID
     */
    id: string;
    /**
     * Candidate last name
     */
    lastName: string;
    /**
     * Candidate name
     */
    name: string;
    /**
     * Candidate phone number
     */
    phone?: string | null | undefined;
    /**
     * List of candidate social links
     */
    socialLinks: Array<SocialLink>;
    /**
     * Candidate title
     */
    title: string;
    /**
     * Candidate updated date
     */
    updatedAt: Date;
};

/** @internal */
export namespace Candidate$ {
    export type Inbound = {
        application_ids?: Array<string> | null | undefined;
        company?: string | null | undefined;
        created_at: string;
        email: string;
        emails: Array<CandidateEmail$.Inbound>;
        first_name: string;
        hired_at?: string | null | undefined;
        id: string;
        last_name: string;
        name: string;
        phone?: string | null | undefined;
        social_links: Array<SocialLink$.Inbound>;
        title: string;
        updated_at: string;
    };

    export const inboundSchema: z.ZodType<Candidate, z.ZodTypeDef, Inbound> = z
        .object({
            application_ids: z.nullable(z.array(z.string())).optional(),
            company: z.nullable(z.string()).optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            email: z.string(),
            emails: z.array(CandidateEmail$.inboundSchema),
            first_name: z.string(),
            hired_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            id: z.string(),
            last_name: z.string(),
            name: z.string(),
            phone: z.nullable(z.string()).optional(),
            social_links: z.array(SocialLink$.inboundSchema),
            title: z.string(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
        })
        .transform((v) => {
            return {
                ...(v.application_ids === undefined ? null : { applicationIds: v.application_ids }),
                ...(v.company === undefined ? null : { company: v.company }),
                createdAt: v.created_at,
                email: v.email,
                emails: v.emails,
                firstName: v.first_name,
                ...(v.hired_at === undefined ? null : { hiredAt: v.hired_at }),
                id: v.id,
                lastName: v.last_name,
                name: v.name,
                ...(v.phone === undefined ? null : { phone: v.phone }),
                socialLinks: v.social_links,
                title: v.title,
                updatedAt: v.updated_at,
            };
        });

    export type Outbound = {
        application_ids?: Array<string> | null | undefined;
        company?: string | null | undefined;
        created_at: string;
        email: string;
        emails: Array<CandidateEmail$.Outbound>;
        first_name: string;
        hired_at?: string | null | undefined;
        id: string;
        last_name: string;
        name: string;
        phone?: string | null | undefined;
        social_links: Array<SocialLink$.Outbound>;
        title: string;
        updated_at: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Candidate> = z
        .object({
            applicationIds: z.nullable(z.array(z.string())).optional(),
            company: z.nullable(z.string()).optional(),
            createdAt: z.date().transform((v) => v.toISOString()),
            email: z.string(),
            emails: z.array(CandidateEmail$.outboundSchema),
            firstName: z.string(),
            hiredAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            id: z.string(),
            lastName: z.string(),
            name: z.string(),
            phone: z.nullable(z.string()).optional(),
            socialLinks: z.array(SocialLink$.outboundSchema),
            title: z.string(),
            updatedAt: z.date().transform((v) => v.toISOString()),
        })
        .transform((v) => {
            return {
                ...(v.applicationIds === undefined ? null : { application_ids: v.applicationIds }),
                ...(v.company === undefined ? null : { company: v.company }),
                created_at: v.createdAt,
                email: v.email,
                emails: v.emails,
                first_name: v.firstName,
                ...(v.hiredAt === undefined ? null : { hired_at: v.hiredAt }),
                id: v.id,
                last_name: v.lastName,
                name: v.name,
                ...(v.phone === undefined ? null : { phone: v.phone }),
                social_links: v.socialLinks,
                title: v.title,
                updated_at: v.updatedAt,
            };
        });
}
