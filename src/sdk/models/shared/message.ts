/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type PushMessageContentsSchemas = {
    body?: string | null | undefined;
};

export type Schemas = {
    body?: string | null | undefined;
    from?: string | null | undefined;
    preheader?: string | null | undefined;
    replyTo?: string | null | undefined;
    subject?: string | null | undefined;
};

export type SmsMessageContentsSchemas = {
    body?: string | null | undefined;
    from?: string | null | undefined;
};

export type MessageMessageContent =
    | PushMessageContentsSchemas
    | SmsMessageContentsSchemas
    | Schemas;

export type Message4 = {};

/**
 * The original value from the provider used to derive the unified message type.
 */
export type MessageSourceValue = Message4 | string | number | boolean;

/**
 * The unified message type.
 */
export type MessageValue = {};

/**
 * Stackone enum identifying the type of message associated with the content.
 */
export type MessageMessageType = {
    /**
     * The original value from the provider used to derive the unified message type.
     */
    sourceValue?: Message4 | string | number | boolean | null | undefined;
    /**
     * The unified message type.
     */
    value?: MessageValue | null | undefined;
};

export type Message = {
    id?: string | null | undefined;
    messageContent?:
        | PushMessageContentsSchemas
        | SmsMessageContentsSchemas
        | Schemas
        | null
        | undefined;
    /**
     * Stackone enum identifying the type of message associated with the content.
     */
    messageType?: MessageMessageType | null | undefined;
    name?: string | null | undefined;
};

/** @internal */
export namespace PushMessageContentsSchemas$ {
    export type Inbound = {
        body?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<PushMessageContentsSchemas, z.ZodTypeDef, Inbound> = z
        .object({
            body: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.body === undefined ? null : { body: v.body }),
            };
        });

    export type Outbound = {
        body?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PushMessageContentsSchemas> = z
        .object({
            body: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.body === undefined ? null : { body: v.body }),
            };
        });
}

/** @internal */
export namespace Schemas$ {
    export type Inbound = {
        body?: string | null | undefined;
        from?: string | null | undefined;
        preheader?: string | null | undefined;
        "reply-to"?: string | null | undefined;
        subject?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<Schemas, z.ZodTypeDef, Inbound> = z
        .object({
            body: z.nullable(z.string()).optional(),
            from: z.nullable(z.string()).optional(),
            preheader: z.nullable(z.string()).optional(),
            "reply-to": z.nullable(z.string()).optional(),
            subject: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.body === undefined ? null : { body: v.body }),
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.preheader === undefined ? null : { preheader: v.preheader }),
                ...(v["reply-to"] === undefined ? null : { replyTo: v["reply-to"] }),
                ...(v.subject === undefined ? null : { subject: v.subject }),
            };
        });

    export type Outbound = {
        body?: string | null | undefined;
        from?: string | null | undefined;
        preheader?: string | null | undefined;
        "reply-to"?: string | null | undefined;
        subject?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Schemas> = z
        .object({
            body: z.nullable(z.string()).optional(),
            from: z.nullable(z.string()).optional(),
            preheader: z.nullable(z.string()).optional(),
            replyTo: z.nullable(z.string()).optional(),
            subject: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.body === undefined ? null : { body: v.body }),
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.preheader === undefined ? null : { preheader: v.preheader }),
                ...(v.replyTo === undefined ? null : { "reply-to": v.replyTo }),
                ...(v.subject === undefined ? null : { subject: v.subject }),
            };
        });
}

/** @internal */
export namespace SmsMessageContentsSchemas$ {
    export type Inbound = {
        body?: string | null | undefined;
        from?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<SmsMessageContentsSchemas, z.ZodTypeDef, Inbound> = z
        .object({
            body: z.nullable(z.string()).optional(),
            from: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.body === undefined ? null : { body: v.body }),
                ...(v.from === undefined ? null : { from: v.from }),
            };
        });

    export type Outbound = {
        body?: string | null | undefined;
        from?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SmsMessageContentsSchemas> = z
        .object({
            body: z.nullable(z.string()).optional(),
            from: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.body === undefined ? null : { body: v.body }),
                ...(v.from === undefined ? null : { from: v.from }),
            };
        });
}

/** @internal */
export namespace MessageMessageContent$ {
    export type Inbound =
        | PushMessageContentsSchemas$.Inbound
        | SmsMessageContentsSchemas$.Inbound
        | Schemas$.Inbound;

    export type Outbound =
        | PushMessageContentsSchemas$.Outbound
        | SmsMessageContentsSchemas$.Outbound
        | Schemas$.Outbound;

    export const inboundSchema: z.ZodType<MessageMessageContent, z.ZodTypeDef, Inbound> = z.union([
        z.lazy(() => PushMessageContentsSchemas$.inboundSchema),
        z.lazy(() => SmsMessageContentsSchemas$.inboundSchema),
        z.lazy(() => Schemas$.inboundSchema),
    ]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MessageMessageContent> = z.union(
        [
            z.lazy(() => PushMessageContentsSchemas$.outboundSchema),
            z.lazy(() => SmsMessageContentsSchemas$.outboundSchema),
            z.lazy(() => Schemas$.outboundSchema),
        ]
    );
}

/** @internal */
export namespace Message4$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Message4, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Message4> = z.object({});
}

/** @internal */
export namespace MessageSourceValue$ {
    export type Inbound = Message4$.Inbound | string | number | boolean;

    export type Outbound = Message4$.Outbound | string | number | boolean;

    export const inboundSchema: z.ZodType<MessageSourceValue, z.ZodTypeDef, Inbound> = z.union([
        z.lazy(() => Message4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MessageSourceValue> = z.union([
        z.lazy(() => Message4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace MessageValue$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<MessageValue, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MessageValue> = z.object({});
}

/** @internal */
export namespace MessageMessageType$ {
    export type Inbound = {
        source_value?: Message4$.Inbound | string | number | boolean | null | undefined;
        value?: MessageValue$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<MessageMessageType, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => Message4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(z.lazy(() => MessageValue$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?: Message4$.Outbound | string | number | boolean | null | undefined;
        value?: MessageValue$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MessageMessageType> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => Message4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(z.lazy(() => MessageValue$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace Message$ {
    export type Inbound = {
        id?: string | null | undefined;
        message_content?:
            | PushMessageContentsSchemas$.Inbound
            | SmsMessageContentsSchemas$.Inbound
            | Schemas$.Inbound
            | null
            | undefined;
        message_type?: MessageMessageType$.Inbound | null | undefined;
        name?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<Message, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.nullable(z.string()).optional(),
            message_content: z
                .nullable(
                    z.union([
                        z.lazy(() => PushMessageContentsSchemas$.inboundSchema),
                        z.lazy(() => SmsMessageContentsSchemas$.inboundSchema),
                        z.lazy(() => Schemas$.inboundSchema),
                    ])
                )
                .optional(),
            message_type: z.nullable(z.lazy(() => MessageMessageType$.inboundSchema)).optional(),
            name: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.message_content === undefined ? null : { messageContent: v.message_content }),
                ...(v.message_type === undefined ? null : { messageType: v.message_type }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        id?: string | null | undefined;
        message_content?:
            | PushMessageContentsSchemas$.Outbound
            | SmsMessageContentsSchemas$.Outbound
            | Schemas$.Outbound
            | null
            | undefined;
        message_type?: MessageMessageType$.Outbound | null | undefined;
        name?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Message> = z
        .object({
            id: z.nullable(z.string()).optional(),
            messageContent: z
                .nullable(
                    z.union([
                        z.lazy(() => PushMessageContentsSchemas$.outboundSchema),
                        z.lazy(() => SmsMessageContentsSchemas$.outboundSchema),
                        z.lazy(() => Schemas$.outboundSchema),
                    ])
                )
                .optional(),
            messageType: z.nullable(z.lazy(() => MessageMessageType$.outboundSchema)).optional(),
            name: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.messageContent === undefined ? null : { message_content: v.messageContent }),
                ...(v.messageType === undefined ? null : { message_type: v.messageType }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}
