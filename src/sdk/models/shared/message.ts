/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum MessageMessageType {
    Email = "email",
    Sms = "sms",
    WebPush = "web_push",
    IosPush = "ios_push",
    AndroidPush = "android_push",
    AppPush = "app_push",
    OmniChannel = "omni_channel",
    Unknown = "unknown",
    UnmappedValue = "unmapped_value",
}

export type Message = {
    id: string;
    messageContent?: any | null | undefined;
    messageType: MessageMessageType;
    name: string;
};

/** @internal */
export const MessageMessageType$ = z.nativeEnum(MessageMessageType);

/** @internal */
export namespace Message$ {
    export type Inbound = {
        id: string;
        message_content?: any | null | undefined;
        message_type: MessageMessageType;
        name: string;
    };

    export const inboundSchema: z.ZodType<Message, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            message_content: z.nullable(z.any()).optional(),
            message_type: MessageMessageType$,
            name: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.message_content === undefined ? null : { messageContent: v.message_content }),
                messageType: v.message_type,
                name: v.name,
            };
        });

    export type Outbound = {
        id: string;
        message_content?: any | null | undefined;
        message_type: MessageMessageType;
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Message> = z
        .object({
            id: z.string(),
            messageContent: z.nullable(z.any()).optional(),
            messageType: MessageMessageType$,
            name: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.messageContent === undefined ? null : { message_content: v.messageContent }),
                message_type: v.messageType,
                name: v.name,
            };
        });
}
