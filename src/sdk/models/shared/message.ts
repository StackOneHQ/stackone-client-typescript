/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type PushMessageContentsSchemas = {
    body?: string | null | undefined;
};

export type Schemas = {
    body?: string | null | undefined;
    from?: string | null | undefined;
    preheader?: string | null | undefined;
    replyTo?: string | null | undefined;
    subject?: string | null | undefined;
};

export type SmsMessageContentsSchemas = {
    body?: string | null | undefined;
    from?: string | null | undefined;
};

export type MessageMessageContent =
    | PushMessageContentsSchemas
    | SmsMessageContentsSchemas
    | Schemas;

export type Message4 = {};

/**
 * The original value from the provider used to derive the unified message type.
 */
export type MessageSourceValue = Message4 | string | number | boolean;

/**
 * The unified message type.
 */
export type MessageValue = {};

/**
 * Stackone enum identifying the type of message associated with the content.
 */
export type MessageMessageType = {
    /**
     * The original value from the provider used to derive the unified message type.
     */
    sourceValue?: Message4 | string | number | boolean | null | undefined;
    /**
     * The unified message type.
     */
    value?: MessageValue | null | undefined;
};

export type Message = {
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    messageContent?:
        | PushMessageContentsSchemas
        | SmsMessageContentsSchemas
        | Schemas
        | null
        | undefined;
    /**
     * Stackone enum identifying the type of message associated with the content.
     */
    messageType?: MessageMessageType | null | undefined;
    name?: string | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
};

/** @internal */
export namespace PushMessageContentsSchemas$ {
    export const inboundSchema: z.ZodType<PushMessageContentsSchemas, z.ZodTypeDef, unknown> =
        z.object({
            body: z.nullable(z.string()).optional(),
        });

    export type Outbound = {
        body?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PushMessageContentsSchemas> =
        z.object({
            body: z.nullable(z.string()).optional(),
        });
}

/** @internal */
export namespace Schemas$ {
    export const inboundSchema: z.ZodType<Schemas, z.ZodTypeDef, unknown> = z
        .object({
            body: z.nullable(z.string()).optional(),
            from: z.nullable(z.string()).optional(),
            preheader: z.nullable(z.string()).optional(),
            "reply-to": z.nullable(z.string()).optional(),
            subject: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                "reply-to": "replyTo",
            });
        });

    export type Outbound = {
        body?: string | null | undefined;
        from?: string | null | undefined;
        preheader?: string | null | undefined;
        "reply-to"?: string | null | undefined;
        subject?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Schemas> = z
        .object({
            body: z.nullable(z.string()).optional(),
            from: z.nullable(z.string()).optional(),
            preheader: z.nullable(z.string()).optional(),
            replyTo: z.nullable(z.string()).optional(),
            subject: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                replyTo: "reply-to",
            });
        });
}

/** @internal */
export namespace SmsMessageContentsSchemas$ {
    export const inboundSchema: z.ZodType<SmsMessageContentsSchemas, z.ZodTypeDef, unknown> =
        z.object({
            body: z.nullable(z.string()).optional(),
            from: z.nullable(z.string()).optional(),
        });

    export type Outbound = {
        body?: string | null | undefined;
        from?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SmsMessageContentsSchemas> =
        z.object({
            body: z.nullable(z.string()).optional(),
            from: z.nullable(z.string()).optional(),
        });
}

/** @internal */
export namespace MessageMessageContent$ {
    export const inboundSchema: z.ZodType<MessageMessageContent, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => PushMessageContentsSchemas$.inboundSchema),
        z.lazy(() => SmsMessageContentsSchemas$.inboundSchema),
        z.lazy(() => Schemas$.inboundSchema),
    ]);

    export type Outbound =
        | PushMessageContentsSchemas$.Outbound
        | SmsMessageContentsSchemas$.Outbound
        | Schemas$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MessageMessageContent> = z.union(
        [
            z.lazy(() => PushMessageContentsSchemas$.outboundSchema),
            z.lazy(() => SmsMessageContentsSchemas$.outboundSchema),
            z.lazy(() => Schemas$.outboundSchema),
        ]
    );
}

/** @internal */
export namespace Message4$ {
    export const inboundSchema: z.ZodType<Message4, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Message4> = z.object({});
}

/** @internal */
export namespace MessageSourceValue$ {
    export const inboundSchema: z.ZodType<MessageSourceValue, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => Message4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export type Outbound = Message4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MessageSourceValue> = z.union([
        z.lazy(() => Message4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace MessageValue$ {
    export const inboundSchema: z.ZodType<MessageValue, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MessageValue> = z.object({});
}

/** @internal */
export namespace MessageMessageType$ {
    export const inboundSchema: z.ZodType<MessageMessageType, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => Message4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(z.lazy(() => MessageValue$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?: Message4$.Outbound | string | number | boolean | null | undefined;
        value?: MessageValue$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MessageMessageType> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => Message4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(z.lazy(() => MessageValue$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}

/** @internal */
export namespace Message$ {
    export const inboundSchema: z.ZodType<Message, z.ZodTypeDef, unknown> = z
        .object({
            id: z.nullable(z.string()).optional(),
            message_content: z
                .nullable(
                    z.union([
                        z.lazy(() => PushMessageContentsSchemas$.inboundSchema),
                        z.lazy(() => SmsMessageContentsSchemas$.inboundSchema),
                        z.lazy(() => Schemas$.inboundSchema),
                    ])
                )
                .optional(),
            message_type: z.nullable(z.lazy(() => MessageMessageType$.inboundSchema)).optional(),
            name: z.nullable(z.string()).optional(),
            remote_id: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                message_content: "messageContent",
                message_type: "messageType",
                remote_id: "remoteId",
            });
        });

    export type Outbound = {
        id?: string | null | undefined;
        message_content?:
            | PushMessageContentsSchemas$.Outbound
            | SmsMessageContentsSchemas$.Outbound
            | Schemas$.Outbound
            | null
            | undefined;
        message_type?: MessageMessageType$.Outbound | null | undefined;
        name?: string | null | undefined;
        remote_id?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Message> = z
        .object({
            id: z.nullable(z.string()).optional(),
            messageContent: z
                .nullable(
                    z.union([
                        z.lazy(() => PushMessageContentsSchemas$.outboundSchema),
                        z.lazy(() => SmsMessageContentsSchemas$.outboundSchema),
                        z.lazy(() => Schemas$.outboundSchema),
                    ])
                )
                .optional(),
            messageType: z.nullable(z.lazy(() => MessageMessageType$.outboundSchema)).optional(),
            name: z.nullable(z.string()).optional(),
            remoteId: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                messageContent: "message_content",
                messageType: "message_type",
                remoteId: "remote_id",
            });
        });
}
