/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types";
import * as z from "zod";

export type RejectedReason4 = {};

/**
 * The source value of the rejected reason type.
 */
export type RejectedReasonSourceValue = RejectedReason4 | string | number | boolean;

/**
 * The type of the rejected reason.
 */
export enum RejectedReasonValue {
    RejectedByCandidate = "rejected_by_candidate",
    RejectedByOrganization = "rejected_by_organization",
    Other = "other",
    Unknown = "unknown",
    UnmappedValue = "unmapped_value",
}
/**
 * The type of the rejected reason.
 */
export type RejectedReasonValueOpen = OpenEnum<typeof RejectedReasonValue>;

export type RejectedReasonType = {
    /**
     * The source value of the rejected reason type.
     */
    sourceValue?: RejectedReason4 | string | number | boolean | null | undefined;
    /**
     * The type of the rejected reason.
     */
    value?: RejectedReasonValueOpen | null | undefined;
};

export type RejectedReason = {
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    /**
     * The label of the rejected reason.
     */
    label?: string | null | undefined;
    rejectedReasonType?: RejectedReasonType | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    /**
     * The string type of the rejected reason.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    type?: string | null | undefined;
};

/** @internal */
export namespace RejectedReason4$ {
    export const inboundSchema: z.ZodType<RejectedReason4, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RejectedReason4> = z.object({});
}

/** @internal */
export namespace RejectedReasonSourceValue$ {
    export const inboundSchema: z.ZodType<RejectedReasonSourceValue, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => RejectedReason4$.inboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);

    export type Outbound = RejectedReason4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RejectedReasonSourceValue> =
        z.union([
            z.lazy(() => RejectedReason4$.outboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);
}

/** @internal */
export namespace RejectedReasonValue$ {
    export const inboundSchema: z.ZodType<RejectedReasonValueOpen, z.ZodTypeDef, unknown> = z.union(
        [z.nativeEnum(RejectedReasonValue), z.string().transform(catchUnrecognizedEnum)]
    );

    export const outboundSchema = z.union([
        z.nativeEnum(RejectedReasonValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace RejectedReasonType$ {
    export const inboundSchema: z.ZodType<RejectedReasonType, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => RejectedReason4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(RejectedReasonValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?: RejectedReason4$.Outbound | string | number | boolean | null | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RejectedReasonType> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => RejectedReason4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(RejectedReasonValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}

/** @internal */
export namespace RejectedReason$ {
    export const inboundSchema: z.ZodType<RejectedReason, z.ZodTypeDef, unknown> = z
        .object({
            id: z.nullable(z.string()).optional(),
            label: z.nullable(z.string()).optional(),
            rejected_reason_type: z
                .nullable(z.lazy(() => RejectedReasonType$.inboundSchema))
                .optional(),
            remote_id: z.nullable(z.string()).optional(),
            type: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                rejected_reason_type: "rejectedReasonType",
                remote_id: "remoteId",
            });
        });

    export type Outbound = {
        id?: string | null | undefined;
        label?: string | null | undefined;
        rejected_reason_type?: RejectedReasonType$.Outbound | null | undefined;
        remote_id?: string | null | undefined;
        type?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RejectedReason> = z
        .object({
            id: z.nullable(z.string()).optional(),
            label: z.nullable(z.string()).optional(),
            rejectedReasonType: z
                .nullable(z.lazy(() => RejectedReasonType$.outboundSchema))
                .optional(),
            remoteId: z.nullable(z.string()).optional(),
            type: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                rejectedReasonType: "rejected_reason_type",
                remoteId: "remote_id",
            });
        });
}
