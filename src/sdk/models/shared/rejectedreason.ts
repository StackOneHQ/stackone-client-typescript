/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type RejectedReason4 = {};

/**
 * The source value of the rejected reason type.
 */
export type RejectedReasonSourceValue = RejectedReason4 | string | number | boolean;

/**
 * The type of the rejected reason.
 */
export enum RejectedReasonValue {
    RejectedByCandidate = "rejected_by_candidate",
    RejectedByOrganization = "rejected_by_organization",
    Other = "other",
    Unknown = "unknown",
    UnmappedValue = "unmapped_value",
}

export type RejectedReasonType = {
    /**
     * The source value of the rejected reason type.
     */
    sourceValue?: RejectedReason4 | string | number | boolean | null | undefined;
    /**
     * The type of the rejected reason.
     */
    value?: RejectedReasonValue | null | undefined;
};

export type RejectedReason = {
    /**
     * The ID of the rejected reason.
     */
    id?: string | null | undefined;
    /**
     * The label of the rejected reason.
     */
    label?: string | null | undefined;
    rejectedReasonType?: RejectedReasonType | null | undefined;
    /**
     * The string type of the rejected reason.
     */
    type?: string | null | undefined;
};

/** @internal */
export namespace RejectedReason4$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<RejectedReason4, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RejectedReason4> = z.object({});
}

/** @internal */
export namespace RejectedReasonSourceValue$ {
    export type Inbound = RejectedReason4$.Inbound | string | number | boolean;

    export type Outbound = RejectedReason4$.Outbound | string | number | boolean;
    export const inboundSchema: z.ZodType<RejectedReasonSourceValue, z.ZodTypeDef, Inbound> =
        z.union([
            z.lazy(() => RejectedReason4$.inboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RejectedReasonSourceValue> =
        z.union([
            z.lazy(() => RejectedReason4$.outboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);
}

/** @internal */
export const RejectedReasonValue$ = z.nativeEnum(RejectedReasonValue);

/** @internal */
export namespace RejectedReasonType$ {
    export type Inbound = {
        source_value?: RejectedReason4$.Inbound | string | number | boolean | null | undefined;
        value?: RejectedReasonValue | null | undefined;
    };

    export const inboundSchema: z.ZodType<RejectedReasonType, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => RejectedReason4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(RejectedReasonValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?: RejectedReason4$.Outbound | string | number | boolean | null | undefined;
        value?: RejectedReasonValue | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RejectedReasonType> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => RejectedReason4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(RejectedReasonValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace RejectedReason$ {
    export type Inbound = {
        id?: string | null | undefined;
        label?: string | null | undefined;
        rejected_reason_type?: RejectedReasonType$.Inbound | null | undefined;
        type?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<RejectedReason, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.nullable(z.string()).optional(),
            label: z.nullable(z.string()).optional(),
            rejected_reason_type: z
                .nullable(z.lazy(() => RejectedReasonType$.inboundSchema))
                .optional(),
            type: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.label === undefined ? null : { label: v.label }),
                ...(v.rejected_reason_type === undefined
                    ? null
                    : { rejectedReasonType: v.rejected_reason_type }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        id?: string | null | undefined;
        label?: string | null | undefined;
        rejected_reason_type?: RejectedReasonType$.Outbound | null | undefined;
        type?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RejectedReason> = z
        .object({
            id: z.nullable(z.string()).optional(),
            label: z.nullable(z.string()).optional(),
            rejectedReasonType: z
                .nullable(z.lazy(() => RejectedReasonType$.outboundSchema))
                .optional(),
            type: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.label === undefined ? null : { label: v.label }),
                ...(v.rejectedReasonType === undefined
                    ? null
                    : { rejected_reason_type: v.rejectedReasonType }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}
