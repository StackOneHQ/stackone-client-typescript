/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types/enums.js";
import * as z from "zod";

export type RejectedReason4 = {};

/**
 * The source value of the rejected reason type.
 */
export type RejectedReasonSourceValue = RejectedReason4 | string | number | boolean;

/**
 * The type of the rejected reason.
 */
export enum RejectedReasonValue {
    RejectedByCandidate = "rejected_by_candidate",
    RejectedByOrganization = "rejected_by_organization",
    Other = "other",
    Unknown = "unknown",
    UnmappedValue = "unmapped_value",
}
/**
 * The type of the rejected reason.
 */
export type RejectedReasonValueOpen = OpenEnum<typeof RejectedReasonValue>;

export type RejectedReasonType = {
    /**
     * The source value of the rejected reason type.
     */
    sourceValue?: RejectedReason4 | string | number | boolean | null | undefined;
    /**
     * The type of the rejected reason.
     */
    value?: RejectedReasonValueOpen | null | undefined;
};

export type RejectedReason = {
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    /**
     * The label of the rejected reason.
     */
    label?: string | null | undefined;
    rejectedReasonType?: RejectedReasonType | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    /**
     * The string type of the rejected reason.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    type?: string | null | undefined;
};

/** @internal */
export const RejectedReason4$inboundSchema: z.ZodType<RejectedReason4, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type RejectedReason4$Outbound = {};

/** @internal */
export const RejectedReason4$outboundSchema: z.ZodType<
    RejectedReason4$Outbound,
    z.ZodTypeDef,
    RejectedReason4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RejectedReason4$ {
    /** @deprecated use `RejectedReason4$inboundSchema` instead. */
    export const inboundSchema = RejectedReason4$inboundSchema;
    /** @deprecated use `RejectedReason4$outboundSchema` instead. */
    export const outboundSchema = RejectedReason4$outboundSchema;
    /** @deprecated use `RejectedReason4$Outbound` instead. */
    export type Outbound = RejectedReason4$Outbound;
}

/** @internal */
export const RejectedReasonSourceValue$inboundSchema: z.ZodType<
    RejectedReasonSourceValue,
    z.ZodTypeDef,
    unknown
> = z.union([z.lazy(() => RejectedReason4$inboundSchema), z.string(), z.number(), z.boolean()]);

/** @internal */
export type RejectedReasonSourceValue$Outbound =
    | RejectedReason4$Outbound
    | string
    | number
    | boolean;

/** @internal */
export const RejectedReasonSourceValue$outboundSchema: z.ZodType<
    RejectedReasonSourceValue$Outbound,
    z.ZodTypeDef,
    RejectedReasonSourceValue
> = z.union([z.lazy(() => RejectedReason4$outboundSchema), z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RejectedReasonSourceValue$ {
    /** @deprecated use `RejectedReasonSourceValue$inboundSchema` instead. */
    export const inboundSchema = RejectedReasonSourceValue$inboundSchema;
    /** @deprecated use `RejectedReasonSourceValue$outboundSchema` instead. */
    export const outboundSchema = RejectedReasonSourceValue$outboundSchema;
    /** @deprecated use `RejectedReasonSourceValue$Outbound` instead. */
    export type Outbound = RejectedReasonSourceValue$Outbound;
}

/** @internal */
export const RejectedReasonValue$inboundSchema: z.ZodType<
    RejectedReasonValueOpen,
    z.ZodTypeDef,
    unknown
> = z.union([z.nativeEnum(RejectedReasonValue), z.string().transform(catchUnrecognizedEnum)]);

/** @internal */
export const RejectedReasonValue$outboundSchema: z.ZodType<
    RejectedReasonValueOpen,
    z.ZodTypeDef,
    RejectedReasonValueOpen
> = z.union([z.nativeEnum(RejectedReasonValue), z.string().and(z.custom<Unrecognized<string>>())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RejectedReasonValue$ {
    /** @deprecated use `RejectedReasonValue$inboundSchema` instead. */
    export const inboundSchema = RejectedReasonValue$inboundSchema;
    /** @deprecated use `RejectedReasonValue$outboundSchema` instead. */
    export const outboundSchema = RejectedReasonValue$outboundSchema;
}

/** @internal */
export const RejectedReasonType$inboundSchema: z.ZodType<
    RejectedReasonType,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        source_value: z
            .nullable(
                z.union([
                    z.lazy(() => RejectedReason4$inboundSchema),
                    z.string(),
                    z.number(),
                    z.boolean(),
                ])
            )
            .optional(),
        value: z.nullable(RejectedReasonValue$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            source_value: "sourceValue",
        });
    });

/** @internal */
export type RejectedReasonType$Outbound = {
    source_value?: RejectedReason4$Outbound | string | number | boolean | null | undefined;
    value?: string | null | undefined;
};

/** @internal */
export const RejectedReasonType$outboundSchema: z.ZodType<
    RejectedReasonType$Outbound,
    z.ZodTypeDef,
    RejectedReasonType
> = z
    .object({
        sourceValue: z
            .nullable(
                z.union([
                    z.lazy(() => RejectedReason4$outboundSchema),
                    z.string(),
                    z.number(),
                    z.boolean(),
                ])
            )
            .optional(),
        value: z.nullable(RejectedReasonValue$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            sourceValue: "source_value",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RejectedReasonType$ {
    /** @deprecated use `RejectedReasonType$inboundSchema` instead. */
    export const inboundSchema = RejectedReasonType$inboundSchema;
    /** @deprecated use `RejectedReasonType$outboundSchema` instead. */
    export const outboundSchema = RejectedReasonType$outboundSchema;
    /** @deprecated use `RejectedReasonType$Outbound` instead. */
    export type Outbound = RejectedReasonType$Outbound;
}

/** @internal */
export const RejectedReason$inboundSchema: z.ZodType<RejectedReason, z.ZodTypeDef, unknown> = z
    .object({
        id: z.nullable(z.string()).optional(),
        label: z.nullable(z.string()).optional(),
        rejected_reason_type: z.nullable(z.lazy(() => RejectedReasonType$inboundSchema)).optional(),
        remote_id: z.nullable(z.string()).optional(),
        type: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            rejected_reason_type: "rejectedReasonType",
            remote_id: "remoteId",
        });
    });

/** @internal */
export type RejectedReason$Outbound = {
    id?: string | null | undefined;
    label?: string | null | undefined;
    rejected_reason_type?: RejectedReasonType$Outbound | null | undefined;
    remote_id?: string | null | undefined;
    type?: string | null | undefined;
};

/** @internal */
export const RejectedReason$outboundSchema: z.ZodType<
    RejectedReason$Outbound,
    z.ZodTypeDef,
    RejectedReason
> = z
    .object({
        id: z.nullable(z.string()).optional(),
        label: z.nullable(z.string()).optional(),
        rejectedReasonType: z.nullable(z.lazy(() => RejectedReasonType$outboundSchema)).optional(),
        remoteId: z.nullable(z.string()).optional(),
        type: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            rejectedReasonType: "rejected_reason_type",
            remoteId: "remote_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RejectedReason$ {
    /** @deprecated use `RejectedReason$inboundSchema` instead. */
    export const inboundSchema = RejectedReason$inboundSchema;
    /** @deprecated use `RejectedReason$outboundSchema` instead. */
    export const outboundSchema = RejectedReason$outboundSchema;
    /** @deprecated use `RejectedReason$Outbound` instead. */
    export type Outbound = RejectedReason$Outbound;
}
