/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateHRISBenefit4 = {};

export type CreateHRISBenefitSourceValue =
  | string
  | number
  | boolean
  | CreateHRISBenefit4
  | Array<any>;

/**
 * The type of the benefit
 */
export enum CreateHRISBenefitValue {
  RetirementSavings = "retirement_savings",
  HealthSavings = "health_savings",
  Other = "other",
  HealthInsurance = "health_insurance",
  Insurance = "insurance",
  UnmappedValue = "unmapped_value",
}
/**
 * The type of the benefit
 */
export type CreateHRISBenefitValueOpen = OpenEnum<
  typeof CreateHRISBenefitValue
>;

/**
 * The type of the benefit
 */
export type BenefitType = {
  sourceValue?:
    | string
    | number
    | boolean
    | CreateHRISBenefit4
    | Array<any>
    | null
    | undefined;
  /**
   * The type of the benefit
   */
  value?: CreateHRISBenefitValueOpen | null | undefined;
};

export type CreateHRISBenefit = {
  /**
   * The type of the benefit
   */
  benefitType?: BenefitType | null | undefined;
  /**
   * The date and time the benefit was created
   */
  createdAt?: Date | null | undefined;
  /**
   * The description of the benefit
   */
  description?: string | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The name of the benefit
   */
  name?: string | null | undefined;
  /**
   * The provider of the benefit
   */
  provider?: string | null | undefined;
  /**
   * The date and time the benefit was last updated
   */
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const CreateHRISBenefit4$inboundSchema: z.ZodType<
  CreateHRISBenefit4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateHRISBenefit4$Outbound = {};

/** @internal */
export const CreateHRISBenefit4$outboundSchema: z.ZodType<
  CreateHRISBenefit4$Outbound,
  z.ZodTypeDef,
  CreateHRISBenefit4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateHRISBenefit4$ {
  /** @deprecated use `CreateHRISBenefit4$inboundSchema` instead. */
  export const inboundSchema = CreateHRISBenefit4$inboundSchema;
  /** @deprecated use `CreateHRISBenefit4$outboundSchema` instead. */
  export const outboundSchema = CreateHRISBenefit4$outboundSchema;
  /** @deprecated use `CreateHRISBenefit4$Outbound` instead. */
  export type Outbound = CreateHRISBenefit4$Outbound;
}

export function createHRISBenefit4ToJSON(
  createHRISBenefit4: CreateHRISBenefit4,
): string {
  return JSON.stringify(
    CreateHRISBenefit4$outboundSchema.parse(createHRISBenefit4),
  );
}

export function createHRISBenefit4FromJSON(
  jsonString: string,
): SafeParseResult<CreateHRISBenefit4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateHRISBenefit4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateHRISBenefit4' from JSON`,
  );
}

/** @internal */
export const CreateHRISBenefitSourceValue$inboundSchema: z.ZodType<
  CreateHRISBenefitSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => CreateHRISBenefit4$inboundSchema),
  z.array(z.any()),
]);

/** @internal */
export type CreateHRISBenefitSourceValue$Outbound =
  | string
  | number
  | boolean
  | CreateHRISBenefit4$Outbound
  | Array<any>;

/** @internal */
export const CreateHRISBenefitSourceValue$outboundSchema: z.ZodType<
  CreateHRISBenefitSourceValue$Outbound,
  z.ZodTypeDef,
  CreateHRISBenefitSourceValue
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => CreateHRISBenefit4$outboundSchema),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateHRISBenefitSourceValue$ {
  /** @deprecated use `CreateHRISBenefitSourceValue$inboundSchema` instead. */
  export const inboundSchema = CreateHRISBenefitSourceValue$inboundSchema;
  /** @deprecated use `CreateHRISBenefitSourceValue$outboundSchema` instead. */
  export const outboundSchema = CreateHRISBenefitSourceValue$outboundSchema;
  /** @deprecated use `CreateHRISBenefitSourceValue$Outbound` instead. */
  export type Outbound = CreateHRISBenefitSourceValue$Outbound;
}

export function createHRISBenefitSourceValueToJSON(
  createHRISBenefitSourceValue: CreateHRISBenefitSourceValue,
): string {
  return JSON.stringify(
    CreateHRISBenefitSourceValue$outboundSchema.parse(
      createHRISBenefitSourceValue,
    ),
  );
}

export function createHRISBenefitSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<CreateHRISBenefitSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateHRISBenefitSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateHRISBenefitSourceValue' from JSON`,
  );
}

/** @internal */
export const CreateHRISBenefitValue$inboundSchema: z.ZodType<
  CreateHRISBenefitValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(CreateHRISBenefitValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const CreateHRISBenefitValue$outboundSchema: z.ZodType<
  CreateHRISBenefitValueOpen,
  z.ZodTypeDef,
  CreateHRISBenefitValueOpen
> = z.union([
  z.nativeEnum(CreateHRISBenefitValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateHRISBenefitValue$ {
  /** @deprecated use `CreateHRISBenefitValue$inboundSchema` instead. */
  export const inboundSchema = CreateHRISBenefitValue$inboundSchema;
  /** @deprecated use `CreateHRISBenefitValue$outboundSchema` instead. */
  export const outboundSchema = CreateHRISBenefitValue$outboundSchema;
}

/** @internal */
export const BenefitType$inboundSchema: z.ZodType<
  BenefitType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => CreateHRISBenefit4$inboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(CreateHRISBenefitValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type BenefitType$Outbound = {
  source_value?:
    | string
    | number
    | boolean
    | CreateHRISBenefit4$Outbound
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const BenefitType$outboundSchema: z.ZodType<
  BenefitType$Outbound,
  z.ZodTypeDef,
  BenefitType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => CreateHRISBenefit4$outboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(CreateHRISBenefitValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BenefitType$ {
  /** @deprecated use `BenefitType$inboundSchema` instead. */
  export const inboundSchema = BenefitType$inboundSchema;
  /** @deprecated use `BenefitType$outboundSchema` instead. */
  export const outboundSchema = BenefitType$outboundSchema;
  /** @deprecated use `BenefitType$Outbound` instead. */
  export type Outbound = BenefitType$Outbound;
}

export function benefitTypeToJSON(benefitType: BenefitType): string {
  return JSON.stringify(BenefitType$outboundSchema.parse(benefitType));
}

export function benefitTypeFromJSON(
  jsonString: string,
): SafeParseResult<BenefitType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BenefitType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BenefitType' from JSON`,
  );
}

/** @internal */
export const CreateHRISBenefit$inboundSchema: z.ZodType<
  CreateHRISBenefit,
  z.ZodTypeDef,
  unknown
> = z.object({
  benefit_type: z.nullable(z.lazy(() => BenefitType$inboundSchema)).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  description: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  provider: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "benefit_type": "benefitType",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type CreateHRISBenefit$Outbound = {
  benefit_type?: BenefitType$Outbound | null | undefined;
  created_at?: string | null | undefined;
  description?: string | null | undefined;
  id?: string | null | undefined;
  name?: string | null | undefined;
  provider?: string | null | undefined;
  updated_at?: string | null | undefined;
};

/** @internal */
export const CreateHRISBenefit$outboundSchema: z.ZodType<
  CreateHRISBenefit$Outbound,
  z.ZodTypeDef,
  CreateHRISBenefit
> = z.object({
  benefitType: z.nullable(z.lazy(() => BenefitType$outboundSchema)).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  description: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  provider: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    benefitType: "benefit_type",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateHRISBenefit$ {
  /** @deprecated use `CreateHRISBenefit$inboundSchema` instead. */
  export const inboundSchema = CreateHRISBenefit$inboundSchema;
  /** @deprecated use `CreateHRISBenefit$outboundSchema` instead. */
  export const outboundSchema = CreateHRISBenefit$outboundSchema;
  /** @deprecated use `CreateHRISBenefit$Outbound` instead. */
  export type Outbound = CreateHRISBenefit$Outbound;
}

export function createHRISBenefitToJSON(
  createHRISBenefit: CreateHRISBenefit,
): string {
  return JSON.stringify(
    CreateHRISBenefit$outboundSchema.parse(createHRISBenefit),
  );
}

export function createHRISBenefitFromJSON(
  jsonString: string,
): SafeParseResult<CreateHRISBenefit, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateHRISBenefit$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateHRISBenefit' from JSON`,
  );
}
