/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ActionMetaItem,
  ActionMetaItem$inboundSchema,
  ActionMetaItem$Outbound,
  ActionMetaItem$outboundSchema,
} from "./actionmetaitem.js";
import {
  AuthenticationMetaItem,
  AuthenticationMetaItem$inboundSchema,
  AuthenticationMetaItem$Outbound,
  AuthenticationMetaItem$outboundSchema,
} from "./authenticationmetaitem.js";

export type ActionsMeta = {
  /**
   * The list of actions available for this provider
   */
  actions?: Array<ActionMetaItem> | null | undefined;
  /**
   * The authentication methods supported by the provider
   */
  authentication?: Array<AuthenticationMetaItem> | null | undefined;
  /**
   * The description of the provider
   */
  description?: string | null | undefined;
  /**
   * The icon URL for the provider
   */
  icon?: string | null | undefined;
  /**
   * The unique key for the provider
   */
  key?: string | null | undefined;
  /**
   * The name of the provider
   */
  name?: string | null | undefined;
  /**
   * The version of the actions metadata
   */
  version?: string | null | undefined;
};

/** @internal */
export const ActionsMeta$inboundSchema: z.ZodType<
  ActionsMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  actions: z.nullable(z.array(ActionMetaItem$inboundSchema)).optional(),
  authentication: z.nullable(z.array(AuthenticationMetaItem$inboundSchema))
    .optional(),
  description: z.nullable(z.string()).optional(),
  icon: z.nullable(z.string()).optional(),
  key: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  version: z.nullable(z.string()).optional(),
});

/** @internal */
export type ActionsMeta$Outbound = {
  actions?: Array<ActionMetaItem$Outbound> | null | undefined;
  authentication?: Array<AuthenticationMetaItem$Outbound> | null | undefined;
  description?: string | null | undefined;
  icon?: string | null | undefined;
  key?: string | null | undefined;
  name?: string | null | undefined;
  version?: string | null | undefined;
};

/** @internal */
export const ActionsMeta$outboundSchema: z.ZodType<
  ActionsMeta$Outbound,
  z.ZodTypeDef,
  ActionsMeta
> = z.object({
  actions: z.nullable(z.array(ActionMetaItem$outboundSchema)).optional(),
  authentication: z.nullable(z.array(AuthenticationMetaItem$outboundSchema))
    .optional(),
  description: z.nullable(z.string()).optional(),
  icon: z.nullable(z.string()).optional(),
  key: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  version: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActionsMeta$ {
  /** @deprecated use `ActionsMeta$inboundSchema` instead. */
  export const inboundSchema = ActionsMeta$inboundSchema;
  /** @deprecated use `ActionsMeta$outboundSchema` instead. */
  export const outboundSchema = ActionsMeta$outboundSchema;
  /** @deprecated use `ActionsMeta$Outbound` instead. */
  export type Outbound = ActionsMeta$Outbound;
}

export function actionsMetaToJSON(actionsMeta: ActionsMeta): string {
  return JSON.stringify(ActionsMeta$outboundSchema.parse(actionsMeta));
}

export function actionsMetaFromJSON(
  jsonString: string,
): SafeParseResult<ActionsMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActionsMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActionsMeta' from JSON`,
  );
}
