/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { NoteContentApiModel, NoteContentApiModel$ } from "./notecontentapimodel";
import { z } from "zod";

/**
 * The visibility of the notes.
 */
export enum AtsCreateNotesRequestDtoValue {
    Private = "private",
    Public = "public",
}

/**
 * Visibility of the note
 */
export type Visibility = {
    /**
     * The source value of the notes visibility.
     */
    sourceValue?: string | null | undefined;
    /**
     * The visibility of the notes.
     */
    value?: AtsCreateNotesRequestDtoValue | null | undefined;
};

export type AtsCreateNotesRequestDto = {
    /**
     * Unique identifier of the author
     */
    authorId?: string | null | undefined;
    content?: Array<NoteContentApiModel> | null | undefined;
    /**
     * Visibility of the note
     */
    visibility?: Visibility | null | undefined;
};

/** @internal */
export const AtsCreateNotesRequestDtoValue$ = z.nativeEnum(AtsCreateNotesRequestDtoValue);

/** @internal */
export namespace Visibility$ {
    export type Inbound = {
        source_value?: string | null | undefined;
        value?: AtsCreateNotesRequestDtoValue | null | undefined;
    };

    export const inboundSchema: z.ZodType<Visibility, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z.nullable(z.string()).optional(),
            value: z.nullable(AtsCreateNotesRequestDtoValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?: string | null | undefined;
        value?: AtsCreateNotesRequestDtoValue | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Visibility> = z
        .object({
            sourceValue: z.nullable(z.string()).optional(),
            value: z.nullable(AtsCreateNotesRequestDtoValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace AtsCreateNotesRequestDto$ {
    export type Inbound = {
        author_id?: string | null | undefined;
        content?: Array<NoteContentApiModel$.Inbound> | null | undefined;
        visibility?: Visibility$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<AtsCreateNotesRequestDto, z.ZodTypeDef, Inbound> = z
        .object({
            author_id: z.nullable(z.string()).optional(),
            content: z.nullable(z.array(NoteContentApiModel$.inboundSchema)).optional(),
            visibility: z.nullable(z.lazy(() => Visibility$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.author_id === undefined ? null : { authorId: v.author_id }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.visibility === undefined ? null : { visibility: v.visibility }),
            };
        });

    export type Outbound = {
        author_id?: string | null | undefined;
        content?: Array<NoteContentApiModel$.Outbound> | null | undefined;
        visibility?: Visibility$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AtsCreateNotesRequestDto> = z
        .object({
            authorId: z.nullable(z.string()).optional(),
            content: z.nullable(z.array(NoteContentApiModel$.outboundSchema)).optional(),
            visibility: z.nullable(z.lazy(() => Visibility$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.authorId === undefined ? null : { author_id: v.authorId }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.visibility === undefined ? null : { visibility: v.visibility }),
            };
        });
}
