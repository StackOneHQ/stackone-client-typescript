/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NoteContentApiModel,
  NoteContentApiModel$inboundSchema,
  NoteContentApiModel$Outbound,
  NoteContentApiModel$outboundSchema,
} from "./notecontentapimodel.js";

export type AtsCreateNotesRequestDto4 = {};

/**
 * The source value of the notes visibility.
 */
export type AtsCreateNotesRequestDtoSourceValue =
  | string
  | number
  | boolean
  | AtsCreateNotesRequestDto4
  | Array<any>;

/**
 * The visibility of the notes.
 */
export enum AtsCreateNotesRequestDtoValue {
  Private = "private",
  Public = "public",
  UnmappedValue = "unmapped_value",
}
/**
 * The visibility of the notes.
 */
export type AtsCreateNotesRequestDtoValueOpen = OpenEnum<
  typeof AtsCreateNotesRequestDtoValue
>;

/**
 * Visibility of the note
 */
export type Visibility = {
  /**
   * The source value of the notes visibility.
   */
  sourceValue?:
    | string
    | number
    | boolean
    | AtsCreateNotesRequestDto4
    | Array<any>
    | null
    | undefined;
  /**
   * The visibility of the notes.
   */
  value?: AtsCreateNotesRequestDtoValueOpen | null | undefined;
};

export type AtsCreateNotesRequestDto = {
  /**
   * Unique identifier of the author
   */
  authorId?: string | null | undefined;
  content?: Array<NoteContentApiModel> | null | undefined;
  /**
   * Value to pass through to the provider
   */
  passthrough?: { [k: string]: any } | null | undefined;
  /**
   * Visibility of the note
   */
  visibility?: Visibility | null | undefined;
};

/** @internal */
export const AtsCreateNotesRequestDto4$inboundSchema: z.ZodType<
  AtsCreateNotesRequestDto4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AtsCreateNotesRequestDto4$Outbound = {};

/** @internal */
export const AtsCreateNotesRequestDto4$outboundSchema: z.ZodType<
  AtsCreateNotesRequestDto4$Outbound,
  z.ZodTypeDef,
  AtsCreateNotesRequestDto4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsCreateNotesRequestDto4$ {
  /** @deprecated use `AtsCreateNotesRequestDto4$inboundSchema` instead. */
  export const inboundSchema = AtsCreateNotesRequestDto4$inboundSchema;
  /** @deprecated use `AtsCreateNotesRequestDto4$outboundSchema` instead. */
  export const outboundSchema = AtsCreateNotesRequestDto4$outboundSchema;
  /** @deprecated use `AtsCreateNotesRequestDto4$Outbound` instead. */
  export type Outbound = AtsCreateNotesRequestDto4$Outbound;
}

export function atsCreateNotesRequestDto4ToJSON(
  atsCreateNotesRequestDto4: AtsCreateNotesRequestDto4,
): string {
  return JSON.stringify(
    AtsCreateNotesRequestDto4$outboundSchema.parse(atsCreateNotesRequestDto4),
  );
}

export function atsCreateNotesRequestDto4FromJSON(
  jsonString: string,
): SafeParseResult<AtsCreateNotesRequestDto4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsCreateNotesRequestDto4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsCreateNotesRequestDto4' from JSON`,
  );
}

/** @internal */
export const AtsCreateNotesRequestDtoSourceValue$inboundSchema: z.ZodType<
  AtsCreateNotesRequestDtoSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => AtsCreateNotesRequestDto4$inboundSchema),
  z.array(z.any()),
]);

/** @internal */
export type AtsCreateNotesRequestDtoSourceValue$Outbound =
  | string
  | number
  | boolean
  | AtsCreateNotesRequestDto4$Outbound
  | Array<any>;

/** @internal */
export const AtsCreateNotesRequestDtoSourceValue$outboundSchema: z.ZodType<
  AtsCreateNotesRequestDtoSourceValue$Outbound,
  z.ZodTypeDef,
  AtsCreateNotesRequestDtoSourceValue
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => AtsCreateNotesRequestDto4$outboundSchema),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsCreateNotesRequestDtoSourceValue$ {
  /** @deprecated use `AtsCreateNotesRequestDtoSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    AtsCreateNotesRequestDtoSourceValue$inboundSchema;
  /** @deprecated use `AtsCreateNotesRequestDtoSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    AtsCreateNotesRequestDtoSourceValue$outboundSchema;
  /** @deprecated use `AtsCreateNotesRequestDtoSourceValue$Outbound` instead. */
  export type Outbound = AtsCreateNotesRequestDtoSourceValue$Outbound;
}

export function atsCreateNotesRequestDtoSourceValueToJSON(
  atsCreateNotesRequestDtoSourceValue: AtsCreateNotesRequestDtoSourceValue,
): string {
  return JSON.stringify(
    AtsCreateNotesRequestDtoSourceValue$outboundSchema.parse(
      atsCreateNotesRequestDtoSourceValue,
    ),
  );
}

export function atsCreateNotesRequestDtoSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<AtsCreateNotesRequestDtoSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AtsCreateNotesRequestDtoSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsCreateNotesRequestDtoSourceValue' from JSON`,
  );
}

/** @internal */
export const AtsCreateNotesRequestDtoValue$inboundSchema: z.ZodType<
  AtsCreateNotesRequestDtoValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AtsCreateNotesRequestDtoValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AtsCreateNotesRequestDtoValue$outboundSchema: z.ZodType<
  AtsCreateNotesRequestDtoValueOpen,
  z.ZodTypeDef,
  AtsCreateNotesRequestDtoValueOpen
> = z.union([
  z.nativeEnum(AtsCreateNotesRequestDtoValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsCreateNotesRequestDtoValue$ {
  /** @deprecated use `AtsCreateNotesRequestDtoValue$inboundSchema` instead. */
  export const inboundSchema = AtsCreateNotesRequestDtoValue$inboundSchema;
  /** @deprecated use `AtsCreateNotesRequestDtoValue$outboundSchema` instead. */
  export const outboundSchema = AtsCreateNotesRequestDtoValue$outboundSchema;
}

/** @internal */
export const Visibility$inboundSchema: z.ZodType<
  Visibility,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => AtsCreateNotesRequestDto4$inboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(AtsCreateNotesRequestDtoValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type Visibility$Outbound = {
  source_value?:
    | string
    | number
    | boolean
    | AtsCreateNotesRequestDto4$Outbound
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const Visibility$outboundSchema: z.ZodType<
  Visibility$Outbound,
  z.ZodTypeDef,
  Visibility
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => AtsCreateNotesRequestDto4$outboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(AtsCreateNotesRequestDtoValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Visibility$ {
  /** @deprecated use `Visibility$inboundSchema` instead. */
  export const inboundSchema = Visibility$inboundSchema;
  /** @deprecated use `Visibility$outboundSchema` instead. */
  export const outboundSchema = Visibility$outboundSchema;
  /** @deprecated use `Visibility$Outbound` instead. */
  export type Outbound = Visibility$Outbound;
}

export function visibilityToJSON(visibility: Visibility): string {
  return JSON.stringify(Visibility$outboundSchema.parse(visibility));
}

export function visibilityFromJSON(
  jsonString: string,
): SafeParseResult<Visibility, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Visibility$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Visibility' from JSON`,
  );
}

/** @internal */
export const AtsCreateNotesRequestDto$inboundSchema: z.ZodType<
  AtsCreateNotesRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  author_id: z.nullable(z.string()).optional(),
  content: z.nullable(z.array(NoteContentApiModel$inboundSchema)).optional(),
  passthrough: z.nullable(z.record(z.any())).optional(),
  visibility: z.nullable(z.lazy(() => Visibility$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "author_id": "authorId",
  });
});

/** @internal */
export type AtsCreateNotesRequestDto$Outbound = {
  author_id?: string | null | undefined;
  content?: Array<NoteContentApiModel$Outbound> | null | undefined;
  passthrough?: { [k: string]: any } | null | undefined;
  visibility?: Visibility$Outbound | null | undefined;
};

/** @internal */
export const AtsCreateNotesRequestDto$outboundSchema: z.ZodType<
  AtsCreateNotesRequestDto$Outbound,
  z.ZodTypeDef,
  AtsCreateNotesRequestDto
> = z.object({
  authorId: z.nullable(z.string()).optional(),
  content: z.nullable(z.array(NoteContentApiModel$outboundSchema)).optional(),
  passthrough: z.nullable(z.record(z.any())).optional(),
  visibility: z.nullable(z.lazy(() => Visibility$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    authorId: "author_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsCreateNotesRequestDto$ {
  /** @deprecated use `AtsCreateNotesRequestDto$inboundSchema` instead. */
  export const inboundSchema = AtsCreateNotesRequestDto$inboundSchema;
  /** @deprecated use `AtsCreateNotesRequestDto$outboundSchema` instead. */
  export const outboundSchema = AtsCreateNotesRequestDto$outboundSchema;
  /** @deprecated use `AtsCreateNotesRequestDto$Outbound` instead. */
  export type Outbound = AtsCreateNotesRequestDto$Outbound;
}

export function atsCreateNotesRequestDtoToJSON(
  atsCreateNotesRequestDto: AtsCreateNotesRequestDto,
): string {
  return JSON.stringify(
    AtsCreateNotesRequestDto$outboundSchema.parse(atsCreateNotesRequestDto),
  );
}

export function atsCreateNotesRequestDtoFromJSON(
  jsonString: string,
): SafeParseResult<AtsCreateNotesRequestDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsCreateNotesRequestDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsCreateNotesRequestDto' from JSON`,
  );
}
