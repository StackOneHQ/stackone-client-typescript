/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types";
import { NoteContentApiModel, NoteContentApiModel$ } from "./notecontentapimodel";
import * as z from "zod";

export type AtsCreateNotesRequestDto4 = {};

/**
 * The source value of the notes visibility.
 */
export type AtsCreateNotesRequestDtoSourceValue =
    | AtsCreateNotesRequestDto4
    | string
    | number
    | boolean;

/**
 * The visibility of the notes.
 */
export enum AtsCreateNotesRequestDtoValue {
    Private = "private",
    Public = "public",
}
/**
 * The visibility of the notes.
 */
export type AtsCreateNotesRequestDtoValueOpen = OpenEnum<typeof AtsCreateNotesRequestDtoValue>;

/**
 * Visibility of the note
 */
export type Visibility = {
    /**
     * The source value of the notes visibility.
     */
    sourceValue?: AtsCreateNotesRequestDto4 | string | number | boolean | null | undefined;
    /**
     * The visibility of the notes.
     */
    value?: AtsCreateNotesRequestDtoValueOpen | null | undefined;
};

export type AtsCreateNotesRequestDto = {
    /**
     * Unique identifier of the author
     */
    authorId?: string | null | undefined;
    content?: Array<NoteContentApiModel> | null | undefined;
    /**
     * Value to pass through to the provider
     */
    passthrough?: { [k: string]: any } | null | undefined;
    /**
     * Visibility of the note
     */
    visibility?: Visibility | null | undefined;
};

/** @internal */
export namespace AtsCreateNotesRequestDto4$ {
    export const inboundSchema: z.ZodType<AtsCreateNotesRequestDto4, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AtsCreateNotesRequestDto4> =
        z.object({});
}

/** @internal */
export namespace AtsCreateNotesRequestDtoSourceValue$ {
    export const inboundSchema: z.ZodType<
        AtsCreateNotesRequestDtoSourceValue,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.lazy(() => AtsCreateNotesRequestDto4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export type Outbound = AtsCreateNotesRequestDto4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AtsCreateNotesRequestDtoSourceValue
    > = z.union([
        z.lazy(() => AtsCreateNotesRequestDto4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace AtsCreateNotesRequestDtoValue$ {
    export const inboundSchema: z.ZodType<
        AtsCreateNotesRequestDtoValueOpen,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.nativeEnum(AtsCreateNotesRequestDtoValue),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema = z.union([
        z.nativeEnum(AtsCreateNotesRequestDtoValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace Visibility$ {
    export const inboundSchema: z.ZodType<Visibility, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => AtsCreateNotesRequestDto4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(AtsCreateNotesRequestDtoValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?:
            | AtsCreateNotesRequestDto4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Visibility> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => AtsCreateNotesRequestDto4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(AtsCreateNotesRequestDtoValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}

/** @internal */
export namespace AtsCreateNotesRequestDto$ {
    export const inboundSchema: z.ZodType<AtsCreateNotesRequestDto, z.ZodTypeDef, unknown> = z
        .object({
            author_id: z.nullable(z.string()).optional(),
            content: z.nullable(z.array(NoteContentApiModel$.inboundSchema)).optional(),
            passthrough: z.nullable(z.record(z.any())).optional(),
            visibility: z.nullable(z.lazy(() => Visibility$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                author_id: "authorId",
            });
        });

    export type Outbound = {
        author_id?: string | null | undefined;
        content?: Array<NoteContentApiModel$.Outbound> | null | undefined;
        passthrough?: { [k: string]: any } | null | undefined;
        visibility?: Visibility$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AtsCreateNotesRequestDto> = z
        .object({
            authorId: z.nullable(z.string()).optional(),
            content: z.nullable(z.array(NoteContentApiModel$.outboundSchema)).optional(),
            passthrough: z.nullable(z.record(z.any())).optional(),
            visibility: z.nullable(z.lazy(() => Visibility$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                authorId: "author_id",
            });
        });
}
