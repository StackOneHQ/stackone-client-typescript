/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../../lib/base64.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DownloadHeadersApiModel,
  DownloadHeadersApiModel$inboundSchema,
  DownloadHeadersApiModel$Outbound,
  DownloadHeadersApiModel$outboundSchema,
} from "./downloadheadersapimodel.js";

export type DownloadApiModel = {
  /**
   * The file data in binary format
   */
  data: Uint8Array | string;
  /**
   * Headers related to the download
   */
  headers: DownloadHeadersApiModel;
};

/** @internal */
export const DownloadApiModel$inboundSchema: z.ZodType<
  DownloadApiModel,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: b64$.zodInbound,
  headers: DownloadHeadersApiModel$inboundSchema,
});

/** @internal */
export type DownloadApiModel$Outbound = {
  data: Uint8Array;
  headers: DownloadHeadersApiModel$Outbound;
};

/** @internal */
export const DownloadApiModel$outboundSchema: z.ZodType<
  DownloadApiModel$Outbound,
  z.ZodTypeDef,
  DownloadApiModel
> = z.object({
  data: b64$.zodOutbound,
  headers: DownloadHeadersApiModel$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DownloadApiModel$ {
  /** @deprecated use `DownloadApiModel$inboundSchema` instead. */
  export const inboundSchema = DownloadApiModel$inboundSchema;
  /** @deprecated use `DownloadApiModel$outboundSchema` instead. */
  export const outboundSchema = DownloadApiModel$outboundSchema;
  /** @deprecated use `DownloadApiModel$Outbound` instead. */
  export type Outbound = DownloadApiModel$Outbound;
}

export function downloadApiModelToJSON(
  downloadApiModel: DownloadApiModel,
): string {
  return JSON.stringify(
    DownloadApiModel$outboundSchema.parse(downloadApiModel),
  );
}

export function downloadApiModelFromJSON(
  jsonString: string,
): SafeParseResult<DownloadApiModel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DownloadApiModel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DownloadApiModel' from JSON`,
  );
}
