/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Attachment,
  Attachment$inboundSchema,
  Attachment$Outbound,
  Attachment$outboundSchema,
} from "./attachment.js";

export type AssessmentResultCandidate = {
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Candidate profile url
   */
  profileUrl?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
};

export type AssessmentResult4 = {};

/**
 * The source value of the test result.
 */
export type AssessmentResultSourceValue =
  | AssessmentResult4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The result of the test.
 */
export enum AssessmentResultValue {
  Initiated = "initiated",
  InProgress = "in_progress",
  Cancelled = "cancelled",
  Completed = "completed",
  Expired = "expired",
  Failed = "failed",
  Passed = "passed",
  UnmappedValue = "unmapped_value",
}
/**
 * The result of the test.
 */
export type AssessmentResultValueOpen = OpenEnum<typeof AssessmentResultValue>;

export type Result = {
  /**
   * The source value of the test result.
   */
  sourceValue?:
    | AssessmentResult4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The result of the test.
   */
  value?: AssessmentResultValueOpen | null | undefined;
};

export type Score = {
  /**
   * The label of the score
   */
  label?: string | null | undefined;
  /**
   * The maximum value of the score
   */
  max?: string | null | undefined;
  /**
   * The minimum value of the score
   */
  min?: string | null | undefined;
  /**
   * The value is the actual score
   */
  value?: string | null | undefined;
};

export type AssessmentResult = {
  attachments?: Array<Attachment> | null | undefined;
  candidate?: AssessmentResultCandidate | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  result?: Result | null | undefined;
  /**
   * The test`s result url
   */
  resultUrl?: string | null | undefined;
  score?: Score | null | undefined;
  /**
   * The start date of the candidate test
   */
  startDate?: Date | null | undefined;
  /**
   * The submission date of the candidate test
   */
  submissionDate?: Date | null | undefined;
  /**
   * The summary about the result of the test
   */
  summary?: string | null | undefined;
};

/** @internal */
export const AssessmentResultCandidate$inboundSchema: z.ZodType<
  AssessmentResultCandidate,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  profile_url: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "profile_url": "profileUrl",
    "remote_id": "remoteId",
  });
});

/** @internal */
export type AssessmentResultCandidate$Outbound = {
  id?: string | null | undefined;
  profile_url?: string | null | undefined;
  remote_id?: string | null | undefined;
};

/** @internal */
export const AssessmentResultCandidate$outboundSchema: z.ZodType<
  AssessmentResultCandidate$Outbound,
  z.ZodTypeDef,
  AssessmentResultCandidate
> = z.object({
  id: z.nullable(z.string()).optional(),
  profileUrl: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    profileUrl: "profile_url",
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentResultCandidate$ {
  /** @deprecated use `AssessmentResultCandidate$inboundSchema` instead. */
  export const inboundSchema = AssessmentResultCandidate$inboundSchema;
  /** @deprecated use `AssessmentResultCandidate$outboundSchema` instead. */
  export const outboundSchema = AssessmentResultCandidate$outboundSchema;
  /** @deprecated use `AssessmentResultCandidate$Outbound` instead. */
  export type Outbound = AssessmentResultCandidate$Outbound;
}

export function assessmentResultCandidateToJSON(
  assessmentResultCandidate: AssessmentResultCandidate,
): string {
  return JSON.stringify(
    AssessmentResultCandidate$outboundSchema.parse(assessmentResultCandidate),
  );
}

export function assessmentResultCandidateFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentResultCandidate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentResultCandidate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentResultCandidate' from JSON`,
  );
}

/** @internal */
export const AssessmentResult4$inboundSchema: z.ZodType<
  AssessmentResult4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AssessmentResult4$Outbound = {};

/** @internal */
export const AssessmentResult4$outboundSchema: z.ZodType<
  AssessmentResult4$Outbound,
  z.ZodTypeDef,
  AssessmentResult4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentResult4$ {
  /** @deprecated use `AssessmentResult4$inboundSchema` instead. */
  export const inboundSchema = AssessmentResult4$inboundSchema;
  /** @deprecated use `AssessmentResult4$outboundSchema` instead. */
  export const outboundSchema = AssessmentResult4$outboundSchema;
  /** @deprecated use `AssessmentResult4$Outbound` instead. */
  export type Outbound = AssessmentResult4$Outbound;
}

export function assessmentResult4ToJSON(
  assessmentResult4: AssessmentResult4,
): string {
  return JSON.stringify(
    AssessmentResult4$outboundSchema.parse(assessmentResult4),
  );
}

export function assessmentResult4FromJSON(
  jsonString: string,
): SafeParseResult<AssessmentResult4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentResult4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentResult4' from JSON`,
  );
}

/** @internal */
export const AssessmentResultSourceValue$inboundSchema: z.ZodType<
  AssessmentResultSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => AssessmentResult4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type AssessmentResultSourceValue$Outbound =
  | AssessmentResult4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const AssessmentResultSourceValue$outboundSchema: z.ZodType<
  AssessmentResultSourceValue$Outbound,
  z.ZodTypeDef,
  AssessmentResultSourceValue
> = z.union([
  z.lazy(() => AssessmentResult4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentResultSourceValue$ {
  /** @deprecated use `AssessmentResultSourceValue$inboundSchema` instead. */
  export const inboundSchema = AssessmentResultSourceValue$inboundSchema;
  /** @deprecated use `AssessmentResultSourceValue$outboundSchema` instead. */
  export const outboundSchema = AssessmentResultSourceValue$outboundSchema;
  /** @deprecated use `AssessmentResultSourceValue$Outbound` instead. */
  export type Outbound = AssessmentResultSourceValue$Outbound;
}

export function assessmentResultSourceValueToJSON(
  assessmentResultSourceValue: AssessmentResultSourceValue,
): string {
  return JSON.stringify(
    AssessmentResultSourceValue$outboundSchema.parse(
      assessmentResultSourceValue,
    ),
  );
}

export function assessmentResultSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentResultSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentResultSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentResultSourceValue' from JSON`,
  );
}

/** @internal */
export const AssessmentResultValue$inboundSchema: z.ZodType<
  AssessmentResultValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AssessmentResultValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AssessmentResultValue$outboundSchema: z.ZodType<
  AssessmentResultValueOpen,
  z.ZodTypeDef,
  AssessmentResultValueOpen
> = z.union([
  z.nativeEnum(AssessmentResultValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentResultValue$ {
  /** @deprecated use `AssessmentResultValue$inboundSchema` instead. */
  export const inboundSchema = AssessmentResultValue$inboundSchema;
  /** @deprecated use `AssessmentResultValue$outboundSchema` instead. */
  export const outboundSchema = AssessmentResultValue$outboundSchema;
}

/** @internal */
export const Result$inboundSchema: z.ZodType<Result, z.ZodTypeDef, unknown> = z
  .object({
    source_value: z.nullable(
      z.union([
        z.lazy(() => AssessmentResult4$inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
        z.array(z.any()),
      ]),
    ).optional(),
    value: z.nullable(AssessmentResultValue$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "source_value": "sourceValue",
    });
  });

/** @internal */
export type Result$Outbound = {
  source_value?:
    | AssessmentResult4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const Result$outboundSchema: z.ZodType<
  Result$Outbound,
  z.ZodTypeDef,
  Result
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => AssessmentResult4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(AssessmentResultValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Result$ {
  /** @deprecated use `Result$inboundSchema` instead. */
  export const inboundSchema = Result$inboundSchema;
  /** @deprecated use `Result$outboundSchema` instead. */
  export const outboundSchema = Result$outboundSchema;
  /** @deprecated use `Result$Outbound` instead. */
  export type Outbound = Result$Outbound;
}

export function resultToJSON(result: Result): string {
  return JSON.stringify(Result$outboundSchema.parse(result));
}

export function resultFromJSON(
  jsonString: string,
): SafeParseResult<Result, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Result$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Result' from JSON`,
  );
}

/** @internal */
export const Score$inboundSchema: z.ZodType<Score, z.ZodTypeDef, unknown> = z
  .object({
    label: z.nullable(z.string()).optional(),
    max: z.nullable(z.string()).optional(),
    min: z.nullable(z.string()).optional(),
    value: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Score$Outbound = {
  label?: string | null | undefined;
  max?: string | null | undefined;
  min?: string | null | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const Score$outboundSchema: z.ZodType<
  Score$Outbound,
  z.ZodTypeDef,
  Score
> = z.object({
  label: z.nullable(z.string()).optional(),
  max: z.nullable(z.string()).optional(),
  min: z.nullable(z.string()).optional(),
  value: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Score$ {
  /** @deprecated use `Score$inboundSchema` instead. */
  export const inboundSchema = Score$inboundSchema;
  /** @deprecated use `Score$outboundSchema` instead. */
  export const outboundSchema = Score$outboundSchema;
  /** @deprecated use `Score$Outbound` instead. */
  export type Outbound = Score$Outbound;
}

export function scoreToJSON(score: Score): string {
  return JSON.stringify(Score$outboundSchema.parse(score));
}

export function scoreFromJSON(
  jsonString: string,
): SafeParseResult<Score, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Score$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Score' from JSON`,
  );
}

/** @internal */
export const AssessmentResult$inboundSchema: z.ZodType<
  AssessmentResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  attachments: z.nullable(z.array(Attachment$inboundSchema)).optional(),
  candidate: z.nullable(z.lazy(() => AssessmentResultCandidate$inboundSchema))
    .optional(),
  id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  result: z.nullable(z.lazy(() => Result$inboundSchema)).optional(),
  result_url: z.nullable(z.string()).optional(),
  score: z.nullable(z.lazy(() => Score$inboundSchema)).optional(),
  start_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  submission_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  summary: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "remote_id": "remoteId",
    "result_url": "resultUrl",
    "start_date": "startDate",
    "submission_date": "submissionDate",
  });
});

/** @internal */
export type AssessmentResult$Outbound = {
  attachments?: Array<Attachment$Outbound> | null | undefined;
  candidate?: AssessmentResultCandidate$Outbound | null | undefined;
  id?: string | null | undefined;
  remote_id?: string | null | undefined;
  result?: Result$Outbound | null | undefined;
  result_url?: string | null | undefined;
  score?: Score$Outbound | null | undefined;
  start_date?: string | null | undefined;
  submission_date?: string | null | undefined;
  summary?: string | null | undefined;
};

/** @internal */
export const AssessmentResult$outboundSchema: z.ZodType<
  AssessmentResult$Outbound,
  z.ZodTypeDef,
  AssessmentResult
> = z.object({
  attachments: z.nullable(z.array(Attachment$outboundSchema)).optional(),
  candidate: z.nullable(z.lazy(() => AssessmentResultCandidate$outboundSchema))
    .optional(),
  id: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  result: z.nullable(z.lazy(() => Result$outboundSchema)).optional(),
  resultUrl: z.nullable(z.string()).optional(),
  score: z.nullable(z.lazy(() => Score$outboundSchema)).optional(),
  startDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  submissionDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  summary: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    remoteId: "remote_id",
    resultUrl: "result_url",
    startDate: "start_date",
    submissionDate: "submission_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentResult$ {
  /** @deprecated use `AssessmentResult$inboundSchema` instead. */
  export const inboundSchema = AssessmentResult$inboundSchema;
  /** @deprecated use `AssessmentResult$outboundSchema` instead. */
  export const outboundSchema = AssessmentResult$outboundSchema;
  /** @deprecated use `AssessmentResult$Outbound` instead. */
  export type Outbound = AssessmentResult$Outbound;
}

export function assessmentResultToJSON(
  assessmentResult: AssessmentResult,
): string {
  return JSON.stringify(
    AssessmentResult$outboundSchema.parse(assessmentResult),
  );
}

export function assessmentResultFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentResult' from JSON`,
  );
}
