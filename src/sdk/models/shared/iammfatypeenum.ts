/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types";
import * as z from "zod";

export type IamMfaTypeEnum4 = {};

export type IamMfaTypeEnumSourceValue = IamMfaTypeEnum4 | string | number | boolean;

/**
 * The unified value for the type of multi-factor authentication. If the provider does not send back a type but does specify that MFA is set-up for this user, the value will be set to 'unknown'.'
 */
export enum IamMfaTypeEnumValue {
    Sms = "sms",
    Email = "email",
    Push = "push",
    Totp = "totp",
    Unknown = "unknown",
    UnmappedValue = "unmapped_value",
}
/**
 * The unified value for the type of multi-factor authentication. If the provider does not send back a type but does specify that MFA is set-up for this user, the value will be set to 'unknown'.'
 */
export type IamMfaTypeEnumValueOpen = OpenEnum<typeof IamMfaTypeEnumValue>;

export type IamMfaTypeEnum = {
    sourceValue?: IamMfaTypeEnum4 | string | number | boolean | null | undefined;
    /**
     * The unified value for the type of multi-factor authentication. If the provider does not send back a type but does specify that MFA is set-up for this user, the value will be set to 'unknown'.'
     */
    value?: IamMfaTypeEnumValueOpen | null | undefined;
};

/** @internal */
export namespace IamMfaTypeEnum4$ {
    export const inboundSchema: z.ZodType<IamMfaTypeEnum4, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IamMfaTypeEnum4> = z.object({});
}

/** @internal */
export namespace IamMfaTypeEnumSourceValue$ {
    export const inboundSchema: z.ZodType<IamMfaTypeEnumSourceValue, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => IamMfaTypeEnum4$.inboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);

    export type Outbound = IamMfaTypeEnum4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IamMfaTypeEnumSourceValue> =
        z.union([
            z.lazy(() => IamMfaTypeEnum4$.outboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);
}

/** @internal */
export namespace IamMfaTypeEnumValue$ {
    export const inboundSchema: z.ZodType<IamMfaTypeEnumValueOpen, z.ZodTypeDef, unknown> = z.union(
        [z.nativeEnum(IamMfaTypeEnumValue), z.string().transform(catchUnrecognizedEnum)]
    );

    export const outboundSchema = z.union([
        z.nativeEnum(IamMfaTypeEnumValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace IamMfaTypeEnum$ {
    export const inboundSchema: z.ZodType<IamMfaTypeEnum, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => IamMfaTypeEnum4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(IamMfaTypeEnumValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?: IamMfaTypeEnum4$.Outbound | string | number | boolean | null | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IamMfaTypeEnum> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => IamMfaTypeEnum4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(IamMfaTypeEnumValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}
