/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * The status of the job.
 */
export enum JobStatusEnumValue {
    Published = "published",
    Draft = "draft",
    Pending = "pending",
    Internal = "internal",
    Archived = "archived",
    Closed = "closed",
    Open = "open",
    UnmappedValue = "unmapped_value",
}

export type JobStatusEnum = {
    /**
     * The source value of the job status.
     */
    sourceValue: string;
    /**
     * The status of the job.
     */
    value: JobStatusEnumValue;
};

/** @internal */
export const JobStatusEnumValue$ = z.nativeEnum(JobStatusEnumValue);

/** @internal */
export namespace JobStatusEnum$ {
    export type Inbound = {
        source_value: string;
        value: JobStatusEnumValue;
    };

    export const inboundSchema: z.ZodType<JobStatusEnum, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z.string(),
            value: JobStatusEnumValue$,
        })
        .transform((v) => {
            return {
                sourceValue: v.source_value,
                value: v.value,
            };
        });

    export type Outbound = {
        source_value: string;
        value: JobStatusEnumValue;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobStatusEnum> = z
        .object({
            sourceValue: z.string(),
            value: JobStatusEnumValue$,
        })
        .transform((v) => {
            return {
                source_value: v.sourceValue,
                value: v.value,
            };
        });
}
