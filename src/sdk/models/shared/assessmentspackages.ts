/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AssessmentsPackages = {
  /**
   * Package description
   */
  description?: string | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Package name
   */
  name?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
};

/** @internal */
export const AssessmentsPackages$inboundSchema: z.ZodType<
  AssessmentsPackages,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "remote_id": "remoteId",
  });
});

/** @internal */
export type AssessmentsPackages$Outbound = {
  description?: string | null | undefined;
  id?: string | null | undefined;
  name?: string | null | undefined;
  remote_id?: string | null | undefined;
};

/** @internal */
export const AssessmentsPackages$outboundSchema: z.ZodType<
  AssessmentsPackages$Outbound,
  z.ZodTypeDef,
  AssessmentsPackages
> = z.object({
  description: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentsPackages$ {
  /** @deprecated use `AssessmentsPackages$inboundSchema` instead. */
  export const inboundSchema = AssessmentsPackages$inboundSchema;
  /** @deprecated use `AssessmentsPackages$outboundSchema` instead. */
  export const outboundSchema = AssessmentsPackages$outboundSchema;
  /** @deprecated use `AssessmentsPackages$Outbound` instead. */
  export type Outbound = AssessmentsPackages$Outbound;
}

export function assessmentsPackagesToJSON(
  assessmentsPackages: AssessmentsPackages,
): string {
  return JSON.stringify(
    AssessmentsPackages$outboundSchema.parse(assessmentsPackages),
  );
}

export function assessmentsPackagesFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentsPackages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentsPackages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentsPackages' from JSON`,
  );
}
