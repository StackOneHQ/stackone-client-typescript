/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Input parameters for the action
 */
export type Input = {
  /**
   * Request body for the action
   */
  body?: { [k: string]: any } | null | undefined;
  /**
   * Headers for the action
   */
  headers?: { [k: string]: any } | null | undefined;
  /**
   * Query parameters for the action
   */
  query?: { [k: string]: any } | null | undefined;
};

export type ActionsRpcRequestDto = {
  /**
   * The action to execute
   */
  action: string;
  /**
   * Input parameters for the action
   */
  input?: Input | null | undefined;
};

/** @internal */
export const Input$inboundSchema: z.ZodType<Input, z.ZodTypeDef, unknown> = z
  .object({
    body: z.nullable(z.record(z.any())).optional(),
    headers: z.nullable(z.record(z.any())).optional(),
    query: z.nullable(z.record(z.any())).optional(),
  });

/** @internal */
export type Input$Outbound = {
  body?: { [k: string]: any } | null | undefined;
  headers?: { [k: string]: any } | null | undefined;
  query?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const Input$outboundSchema: z.ZodType<
  Input$Outbound,
  z.ZodTypeDef,
  Input
> = z.object({
  body: z.nullable(z.record(z.any())).optional(),
  headers: z.nullable(z.record(z.any())).optional(),
  query: z.nullable(z.record(z.any())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Input$ {
  /** @deprecated use `Input$inboundSchema` instead. */
  export const inboundSchema = Input$inboundSchema;
  /** @deprecated use `Input$outboundSchema` instead. */
  export const outboundSchema = Input$outboundSchema;
  /** @deprecated use `Input$Outbound` instead. */
  export type Outbound = Input$Outbound;
}

export function inputToJSON(input: Input): string {
  return JSON.stringify(Input$outboundSchema.parse(input));
}

export function inputFromJSON(
  jsonString: string,
): SafeParseResult<Input, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Input$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Input' from JSON`,
  );
}

/** @internal */
export const ActionsRpcRequestDto$inboundSchema: z.ZodType<
  ActionsRpcRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: z.string(),
  input: z.nullable(z.lazy(() => Input$inboundSchema)).optional(),
});

/** @internal */
export type ActionsRpcRequestDto$Outbound = {
  action: string;
  input?: Input$Outbound | null | undefined;
};

/** @internal */
export const ActionsRpcRequestDto$outboundSchema: z.ZodType<
  ActionsRpcRequestDto$Outbound,
  z.ZodTypeDef,
  ActionsRpcRequestDto
> = z.object({
  action: z.string(),
  input: z.nullable(z.lazy(() => Input$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActionsRpcRequestDto$ {
  /** @deprecated use `ActionsRpcRequestDto$inboundSchema` instead. */
  export const inboundSchema = ActionsRpcRequestDto$inboundSchema;
  /** @deprecated use `ActionsRpcRequestDto$outboundSchema` instead. */
  export const outboundSchema = ActionsRpcRequestDto$outboundSchema;
  /** @deprecated use `ActionsRpcRequestDto$Outbound` instead. */
  export type Outbound = ActionsRpcRequestDto$Outbound;
}

export function actionsRpcRequestDtoToJSON(
  actionsRpcRequestDto: ActionsRpcRequestDto,
): string {
  return JSON.stringify(
    ActionsRpcRequestDto$outboundSchema.parse(actionsRpcRequestDto),
  );
}

export function actionsRpcRequestDtoFromJSON(
  jsonString: string,
): SafeParseResult<ActionsRpcRequestDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActionsRpcRequestDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActionsRpcRequestDto' from JSON`,
  );
}
