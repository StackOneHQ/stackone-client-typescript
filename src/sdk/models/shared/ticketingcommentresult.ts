/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RawResponse,
  RawResponse$inboundSchema,
  RawResponse$Outbound,
  RawResponse$outboundSchema,
} from "./rawresponse.js";
import {
  TicketingContent,
  TicketingContent$inboundSchema,
  TicketingContent$Outbound,
  TicketingContent$outboundSchema,
} from "./ticketingcontent.js";

export type TicketingCommentResultData = {
  /**
   * Array of content associated with the comment
   */
  content?: Array<TicketingContent> | null | undefined;
  /**
   * The timestamp when the record was created
   */
  createdAt?: Date | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Whether the comment is internal
   */
  internal?: boolean | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * The ticket ID associated with the comment
   */
  ticketId: string;
  /**
   * The timestamp when the record was last updated
   */
  updatedAt?: Date | null | undefined;
  /**
   * The user who created the comment
   */
  userId?: string | null | undefined;
};

export type TicketingCommentResult = {
  data?: TicketingCommentResultData | null | undefined;
  raw?: Array<RawResponse> | null | undefined;
};

/** @internal */
export const TicketingCommentResultData$inboundSchema: z.ZodType<
  TicketingCommentResultData,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(z.array(TicketingContent$inboundSchema)).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  internal: z.nullable(z.boolean()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  ticket_id: z.string(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  user_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "remote_id": "remoteId",
    "ticket_id": "ticketId",
    "updated_at": "updatedAt",
    "user_id": "userId",
  });
});

/** @internal */
export type TicketingCommentResultData$Outbound = {
  content?: Array<TicketingContent$Outbound> | null | undefined;
  created_at?: string | null | undefined;
  id?: string | null | undefined;
  internal?: boolean | null | undefined;
  remote_id?: string | null | undefined;
  ticket_id: string;
  updated_at?: string | null | undefined;
  user_id?: string | null | undefined;
};

/** @internal */
export const TicketingCommentResultData$outboundSchema: z.ZodType<
  TicketingCommentResultData$Outbound,
  z.ZodTypeDef,
  TicketingCommentResultData
> = z.object({
  content: z.nullable(z.array(TicketingContent$outboundSchema)).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  id: z.nullable(z.string()).optional(),
  internal: z.nullable(z.boolean()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  ticketId: z.string(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  userId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    remoteId: "remote_id",
    ticketId: "ticket_id",
    updatedAt: "updated_at",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingCommentResultData$ {
  /** @deprecated use `TicketingCommentResultData$inboundSchema` instead. */
  export const inboundSchema = TicketingCommentResultData$inboundSchema;
  /** @deprecated use `TicketingCommentResultData$outboundSchema` instead. */
  export const outboundSchema = TicketingCommentResultData$outboundSchema;
  /** @deprecated use `TicketingCommentResultData$Outbound` instead. */
  export type Outbound = TicketingCommentResultData$Outbound;
}

export function ticketingCommentResultDataToJSON(
  ticketingCommentResultData: TicketingCommentResultData,
): string {
  return JSON.stringify(
    TicketingCommentResultData$outboundSchema.parse(ticketingCommentResultData),
  );
}

export function ticketingCommentResultDataFromJSON(
  jsonString: string,
): SafeParseResult<TicketingCommentResultData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingCommentResultData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingCommentResultData' from JSON`,
  );
}

/** @internal */
export const TicketingCommentResult$inboundSchema: z.ZodType<
  TicketingCommentResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(z.lazy(() => TicketingCommentResultData$inboundSchema))
    .optional(),
  raw: z.nullable(z.array(RawResponse$inboundSchema)).optional(),
});

/** @internal */
export type TicketingCommentResult$Outbound = {
  data?: TicketingCommentResultData$Outbound | null | undefined;
  raw?: Array<RawResponse$Outbound> | null | undefined;
};

/** @internal */
export const TicketingCommentResult$outboundSchema: z.ZodType<
  TicketingCommentResult$Outbound,
  z.ZodTypeDef,
  TicketingCommentResult
> = z.object({
  data: z.nullable(z.lazy(() => TicketingCommentResultData$outboundSchema))
    .optional(),
  raw: z.nullable(z.array(RawResponse$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingCommentResult$ {
  /** @deprecated use `TicketingCommentResult$inboundSchema` instead. */
  export const inboundSchema = TicketingCommentResult$inboundSchema;
  /** @deprecated use `TicketingCommentResult$outboundSchema` instead. */
  export const outboundSchema = TicketingCommentResult$outboundSchema;
  /** @deprecated use `TicketingCommentResult$Outbound` instead. */
  export type Outbound = TicketingCommentResult$Outbound;
}

export function ticketingCommentResultToJSON(
  ticketingCommentResult: TicketingCommentResult,
): string {
  return JSON.stringify(
    TicketingCommentResult$outboundSchema.parse(ticketingCommentResult),
  );
}

export function ticketingCommentResultFromJSON(
  jsonString: string,
): SafeParseResult<TicketingCommentResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingCommentResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingCommentResult' from JSON`,
  );
}
