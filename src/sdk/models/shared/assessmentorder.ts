/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CandidateEmail,
  CandidateEmail$inboundSchema,
  CandidateEmail$Outbound,
  CandidateEmail$outboundSchema,
} from "./candidateemail.js";
import {
  JobHiringTeam,
  JobHiringTeam$inboundSchema,
  JobHiringTeam$Outbound,
  JobHiringTeam$outboundSchema,
} from "./jobhiringteam.js";

export type AssessmentOrder4 = {};

/**
 * The source value of the application status.
 */
export type AssessmentOrderSourceValue =
  | AssessmentOrder4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The status of the application.
 */
export enum AssessmentOrderValue {
  Active = "active",
  Assessment = "assessment",
  BackgroundCheck = "background_check",
  Converted = "converted",
  DeclinedByCandidate = "declined_by_candidate",
  Hired = "hired",
  Interview = "interview",
  Lead = "lead",
  Offer = "offer",
  ReferenceCheck = "reference_check",
  Rejected = "rejected",
  Review = "review",
  Screen = "screen",
  New = "new",
  Onboarding = "onboarding",
  Created = "created",
  Accepted = "accepted",
  ShortList = "short_list",
  Approved = "approved",
  UnmappedValue = "unmapped_value",
}
/**
 * The status of the application.
 */
export type AssessmentOrderValueOpen = OpenEnum<typeof AssessmentOrderValue>;

export type AssessmentOrderApplicationStatus = {
  /**
   * The source value of the application status.
   */
  sourceValue?:
    | AssessmentOrder4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The status of the application.
   */
  value?: AssessmentOrderValueOpen | null | undefined;
};

export type AssessmentOrderApplication = {
  applicationStatus?: AssessmentOrderApplicationStatus | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Value to pass through to the provider
   */
  passthrough?: { [k: string]: any } | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
};

export type AssessmentOrderCandidate = {
  /**
   * List of candidate emails
   */
  emails?: Array<CandidateEmail> | null | undefined;
  /**
   * Candidate first name
   */
  firstName?: string | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Candidate last name
   */
  lastName?: string | null | undefined;
  /**
   * Value to pass through to the provider
   */
  passthrough?: { [k: string]: any } | null | undefined;
  /**
   * Candidate profile url
   */
  profileUrl?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
};

export type AssessmentOrderJob = {
  /**
   * Hiring team for the job.
   */
  hiringTeam?: Array<JobHiringTeam> | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Value to pass through to the provider
   */
  passthrough?: { [k: string]: any } | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * Title of the job
   */
  title?: string | null | undefined;
};

export type AssessmentOrderPackage = {
  /**
   * Package description
   */
  description?: string | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Package name
   */
  name?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
};

export type Requester = {
  /**
   * Email of the hiring team member.
   */
  email?: string | null | undefined;
  /**
   * First name of the hiring team member.
   */
  firstName?: string | null | undefined;
  /**
   * Last name of the hiring team member.
   */
  lastName?: string | null | undefined;
  /**
   * Provider's unique identifier of the user
   */
  remoteUserId?: string | null | undefined;
  /**
   * Role of the hiring team member.
   */
  role?: string | null | undefined;
  /**
   * User ID of the hiring team member.
   */
  userId?: string | null | undefined;
};

export type AssessmentOrder = {
  application?: AssessmentOrderApplication | null | undefined;
  candidate?: AssessmentOrderCandidate | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  job?: AssessmentOrderJob | null | undefined;
  package?: AssessmentOrderPackage | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  requester?: Requester | null | undefined;
  /**
   * Results update url
   */
  resultsUpdateUrl?: string | null | undefined;
};

/** @internal */
export const AssessmentOrder4$inboundSchema: z.ZodType<
  AssessmentOrder4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AssessmentOrder4$Outbound = {};

/** @internal */
export const AssessmentOrder4$outboundSchema: z.ZodType<
  AssessmentOrder4$Outbound,
  z.ZodTypeDef,
  AssessmentOrder4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentOrder4$ {
  /** @deprecated use `AssessmentOrder4$inboundSchema` instead. */
  export const inboundSchema = AssessmentOrder4$inboundSchema;
  /** @deprecated use `AssessmentOrder4$outboundSchema` instead. */
  export const outboundSchema = AssessmentOrder4$outboundSchema;
  /** @deprecated use `AssessmentOrder4$Outbound` instead. */
  export type Outbound = AssessmentOrder4$Outbound;
}

export function assessmentOrder4ToJSON(
  assessmentOrder4: AssessmentOrder4,
): string {
  return JSON.stringify(
    AssessmentOrder4$outboundSchema.parse(assessmentOrder4),
  );
}

export function assessmentOrder4FromJSON(
  jsonString: string,
): SafeParseResult<AssessmentOrder4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentOrder4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentOrder4' from JSON`,
  );
}

/** @internal */
export const AssessmentOrderSourceValue$inboundSchema: z.ZodType<
  AssessmentOrderSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => AssessmentOrder4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type AssessmentOrderSourceValue$Outbound =
  | AssessmentOrder4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const AssessmentOrderSourceValue$outboundSchema: z.ZodType<
  AssessmentOrderSourceValue$Outbound,
  z.ZodTypeDef,
  AssessmentOrderSourceValue
> = z.union([
  z.lazy(() => AssessmentOrder4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentOrderSourceValue$ {
  /** @deprecated use `AssessmentOrderSourceValue$inboundSchema` instead. */
  export const inboundSchema = AssessmentOrderSourceValue$inboundSchema;
  /** @deprecated use `AssessmentOrderSourceValue$outboundSchema` instead. */
  export const outboundSchema = AssessmentOrderSourceValue$outboundSchema;
  /** @deprecated use `AssessmentOrderSourceValue$Outbound` instead. */
  export type Outbound = AssessmentOrderSourceValue$Outbound;
}

export function assessmentOrderSourceValueToJSON(
  assessmentOrderSourceValue: AssessmentOrderSourceValue,
): string {
  return JSON.stringify(
    AssessmentOrderSourceValue$outboundSchema.parse(assessmentOrderSourceValue),
  );
}

export function assessmentOrderSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentOrderSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentOrderSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentOrderSourceValue' from JSON`,
  );
}

/** @internal */
export const AssessmentOrderValue$inboundSchema: z.ZodType<
  AssessmentOrderValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AssessmentOrderValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AssessmentOrderValue$outboundSchema: z.ZodType<
  AssessmentOrderValueOpen,
  z.ZodTypeDef,
  AssessmentOrderValueOpen
> = z.union([
  z.nativeEnum(AssessmentOrderValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentOrderValue$ {
  /** @deprecated use `AssessmentOrderValue$inboundSchema` instead. */
  export const inboundSchema = AssessmentOrderValue$inboundSchema;
  /** @deprecated use `AssessmentOrderValue$outboundSchema` instead. */
  export const outboundSchema = AssessmentOrderValue$outboundSchema;
}

/** @internal */
export const AssessmentOrderApplicationStatus$inboundSchema: z.ZodType<
  AssessmentOrderApplicationStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => AssessmentOrder4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(AssessmentOrderValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type AssessmentOrderApplicationStatus$Outbound = {
  source_value?:
    | AssessmentOrder4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const AssessmentOrderApplicationStatus$outboundSchema: z.ZodType<
  AssessmentOrderApplicationStatus$Outbound,
  z.ZodTypeDef,
  AssessmentOrderApplicationStatus
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => AssessmentOrder4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(AssessmentOrderValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentOrderApplicationStatus$ {
  /** @deprecated use `AssessmentOrderApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = AssessmentOrderApplicationStatus$inboundSchema;
  /** @deprecated use `AssessmentOrderApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = AssessmentOrderApplicationStatus$outboundSchema;
  /** @deprecated use `AssessmentOrderApplicationStatus$Outbound` instead. */
  export type Outbound = AssessmentOrderApplicationStatus$Outbound;
}

export function assessmentOrderApplicationStatusToJSON(
  assessmentOrderApplicationStatus: AssessmentOrderApplicationStatus,
): string {
  return JSON.stringify(
    AssessmentOrderApplicationStatus$outboundSchema.parse(
      assessmentOrderApplicationStatus,
    ),
  );
}

export function assessmentOrderApplicationStatusFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentOrderApplicationStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentOrderApplicationStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentOrderApplicationStatus' from JSON`,
  );
}

/** @internal */
export const AssessmentOrderApplication$inboundSchema: z.ZodType<
  AssessmentOrderApplication,
  z.ZodTypeDef,
  unknown
> = z.object({
  application_status: z.nullable(
    z.lazy(() => AssessmentOrderApplicationStatus$inboundSchema),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  passthrough: z.nullable(z.record(z.any())).optional(),
  remote_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "application_status": "applicationStatus",
    "remote_id": "remoteId",
  });
});

/** @internal */
export type AssessmentOrderApplication$Outbound = {
  application_status?:
    | AssessmentOrderApplicationStatus$Outbound
    | null
    | undefined;
  id?: string | null | undefined;
  passthrough?: { [k: string]: any } | null | undefined;
  remote_id?: string | null | undefined;
};

/** @internal */
export const AssessmentOrderApplication$outboundSchema: z.ZodType<
  AssessmentOrderApplication$Outbound,
  z.ZodTypeDef,
  AssessmentOrderApplication
> = z.object({
  applicationStatus: z.nullable(
    z.lazy(() => AssessmentOrderApplicationStatus$outboundSchema),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  passthrough: z.nullable(z.record(z.any())).optional(),
  remoteId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    applicationStatus: "application_status",
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentOrderApplication$ {
  /** @deprecated use `AssessmentOrderApplication$inboundSchema` instead. */
  export const inboundSchema = AssessmentOrderApplication$inboundSchema;
  /** @deprecated use `AssessmentOrderApplication$outboundSchema` instead. */
  export const outboundSchema = AssessmentOrderApplication$outboundSchema;
  /** @deprecated use `AssessmentOrderApplication$Outbound` instead. */
  export type Outbound = AssessmentOrderApplication$Outbound;
}

export function assessmentOrderApplicationToJSON(
  assessmentOrderApplication: AssessmentOrderApplication,
): string {
  return JSON.stringify(
    AssessmentOrderApplication$outboundSchema.parse(assessmentOrderApplication),
  );
}

export function assessmentOrderApplicationFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentOrderApplication, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentOrderApplication$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentOrderApplication' from JSON`,
  );
}

/** @internal */
export const AssessmentOrderCandidate$inboundSchema: z.ZodType<
  AssessmentOrderCandidate,
  z.ZodTypeDef,
  unknown
> = z.object({
  emails: z.nullable(z.array(CandidateEmail$inboundSchema)).optional(),
  first_name: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  passthrough: z.nullable(z.record(z.any())).optional(),
  profile_url: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "profile_url": "profileUrl",
    "remote_id": "remoteId",
  });
});

/** @internal */
export type AssessmentOrderCandidate$Outbound = {
  emails?: Array<CandidateEmail$Outbound> | null | undefined;
  first_name?: string | null | undefined;
  id?: string | null | undefined;
  last_name?: string | null | undefined;
  passthrough?: { [k: string]: any } | null | undefined;
  profile_url?: string | null | undefined;
  remote_id?: string | null | undefined;
};

/** @internal */
export const AssessmentOrderCandidate$outboundSchema: z.ZodType<
  AssessmentOrderCandidate$Outbound,
  z.ZodTypeDef,
  AssessmentOrderCandidate
> = z.object({
  emails: z.nullable(z.array(CandidateEmail$outboundSchema)).optional(),
  firstName: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  passthrough: z.nullable(z.record(z.any())).optional(),
  profileUrl: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    profileUrl: "profile_url",
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentOrderCandidate$ {
  /** @deprecated use `AssessmentOrderCandidate$inboundSchema` instead. */
  export const inboundSchema = AssessmentOrderCandidate$inboundSchema;
  /** @deprecated use `AssessmentOrderCandidate$outboundSchema` instead. */
  export const outboundSchema = AssessmentOrderCandidate$outboundSchema;
  /** @deprecated use `AssessmentOrderCandidate$Outbound` instead. */
  export type Outbound = AssessmentOrderCandidate$Outbound;
}

export function assessmentOrderCandidateToJSON(
  assessmentOrderCandidate: AssessmentOrderCandidate,
): string {
  return JSON.stringify(
    AssessmentOrderCandidate$outboundSchema.parse(assessmentOrderCandidate),
  );
}

export function assessmentOrderCandidateFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentOrderCandidate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentOrderCandidate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentOrderCandidate' from JSON`,
  );
}

/** @internal */
export const AssessmentOrderJob$inboundSchema: z.ZodType<
  AssessmentOrderJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  hiring_team: z.nullable(z.array(JobHiringTeam$inboundSchema)).optional(),
  id: z.nullable(z.string()).optional(),
  passthrough: z.nullable(z.record(z.any())).optional(),
  remote_id: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "hiring_team": "hiringTeam",
    "remote_id": "remoteId",
  });
});

/** @internal */
export type AssessmentOrderJob$Outbound = {
  hiring_team?: Array<JobHiringTeam$Outbound> | null | undefined;
  id?: string | null | undefined;
  passthrough?: { [k: string]: any } | null | undefined;
  remote_id?: string | null | undefined;
  title?: string | null | undefined;
};

/** @internal */
export const AssessmentOrderJob$outboundSchema: z.ZodType<
  AssessmentOrderJob$Outbound,
  z.ZodTypeDef,
  AssessmentOrderJob
> = z.object({
  hiringTeam: z.nullable(z.array(JobHiringTeam$outboundSchema)).optional(),
  id: z.nullable(z.string()).optional(),
  passthrough: z.nullable(z.record(z.any())).optional(),
  remoteId: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    hiringTeam: "hiring_team",
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentOrderJob$ {
  /** @deprecated use `AssessmentOrderJob$inboundSchema` instead. */
  export const inboundSchema = AssessmentOrderJob$inboundSchema;
  /** @deprecated use `AssessmentOrderJob$outboundSchema` instead. */
  export const outboundSchema = AssessmentOrderJob$outboundSchema;
  /** @deprecated use `AssessmentOrderJob$Outbound` instead. */
  export type Outbound = AssessmentOrderJob$Outbound;
}

export function assessmentOrderJobToJSON(
  assessmentOrderJob: AssessmentOrderJob,
): string {
  return JSON.stringify(
    AssessmentOrderJob$outboundSchema.parse(assessmentOrderJob),
  );
}

export function assessmentOrderJobFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentOrderJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentOrderJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentOrderJob' from JSON`,
  );
}

/** @internal */
export const AssessmentOrderPackage$inboundSchema: z.ZodType<
  AssessmentOrderPackage,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "remote_id": "remoteId",
  });
});

/** @internal */
export type AssessmentOrderPackage$Outbound = {
  description?: string | null | undefined;
  id?: string | null | undefined;
  name?: string | null | undefined;
  remote_id?: string | null | undefined;
};

/** @internal */
export const AssessmentOrderPackage$outboundSchema: z.ZodType<
  AssessmentOrderPackage$Outbound,
  z.ZodTypeDef,
  AssessmentOrderPackage
> = z.object({
  description: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentOrderPackage$ {
  /** @deprecated use `AssessmentOrderPackage$inboundSchema` instead. */
  export const inboundSchema = AssessmentOrderPackage$inboundSchema;
  /** @deprecated use `AssessmentOrderPackage$outboundSchema` instead. */
  export const outboundSchema = AssessmentOrderPackage$outboundSchema;
  /** @deprecated use `AssessmentOrderPackage$Outbound` instead. */
  export type Outbound = AssessmentOrderPackage$Outbound;
}

export function assessmentOrderPackageToJSON(
  assessmentOrderPackage: AssessmentOrderPackage,
): string {
  return JSON.stringify(
    AssessmentOrderPackage$outboundSchema.parse(assessmentOrderPackage),
  );
}

export function assessmentOrderPackageFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentOrderPackage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentOrderPackage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentOrderPackage' from JSON`,
  );
}

/** @internal */
export const Requester$inboundSchema: z.ZodType<
  Requester,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  remote_user_id: z.nullable(z.string()).optional(),
  role: z.nullable(z.string()).optional(),
  user_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "remote_user_id": "remoteUserId",
    "user_id": "userId",
  });
});

/** @internal */
export type Requester$Outbound = {
  email?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  remote_user_id?: string | null | undefined;
  role?: string | null | undefined;
  user_id?: string | null | undefined;
};

/** @internal */
export const Requester$outboundSchema: z.ZodType<
  Requester$Outbound,
  z.ZodTypeDef,
  Requester
> = z.object({
  email: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  remoteUserId: z.nullable(z.string()).optional(),
  role: z.nullable(z.string()).optional(),
  userId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    remoteUserId: "remote_user_id",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Requester$ {
  /** @deprecated use `Requester$inboundSchema` instead. */
  export const inboundSchema = Requester$inboundSchema;
  /** @deprecated use `Requester$outboundSchema` instead. */
  export const outboundSchema = Requester$outboundSchema;
  /** @deprecated use `Requester$Outbound` instead. */
  export type Outbound = Requester$Outbound;
}

export function requesterToJSON(requester: Requester): string {
  return JSON.stringify(Requester$outboundSchema.parse(requester));
}

export function requesterFromJSON(
  jsonString: string,
): SafeParseResult<Requester, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Requester$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Requester' from JSON`,
  );
}

/** @internal */
export const AssessmentOrder$inboundSchema: z.ZodType<
  AssessmentOrder,
  z.ZodTypeDef,
  unknown
> = z.object({
  application: z.nullable(
    z.lazy(() => AssessmentOrderApplication$inboundSchema),
  ).optional(),
  candidate: z.nullable(z.lazy(() => AssessmentOrderCandidate$inboundSchema))
    .optional(),
  id: z.nullable(z.string()).optional(),
  job: z.nullable(z.lazy(() => AssessmentOrderJob$inboundSchema)).optional(),
  package: z.nullable(z.lazy(() => AssessmentOrderPackage$inboundSchema))
    .optional(),
  remote_id: z.nullable(z.string()).optional(),
  requester: z.nullable(z.lazy(() => Requester$inboundSchema)).optional(),
  results_update_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "remote_id": "remoteId",
    "results_update_url": "resultsUpdateUrl",
  });
});

/** @internal */
export type AssessmentOrder$Outbound = {
  application?: AssessmentOrderApplication$Outbound | null | undefined;
  candidate?: AssessmentOrderCandidate$Outbound | null | undefined;
  id?: string | null | undefined;
  job?: AssessmentOrderJob$Outbound | null | undefined;
  package?: AssessmentOrderPackage$Outbound | null | undefined;
  remote_id?: string | null | undefined;
  requester?: Requester$Outbound | null | undefined;
  results_update_url?: string | null | undefined;
};

/** @internal */
export const AssessmentOrder$outboundSchema: z.ZodType<
  AssessmentOrder$Outbound,
  z.ZodTypeDef,
  AssessmentOrder
> = z.object({
  application: z.nullable(
    z.lazy(() => AssessmentOrderApplication$outboundSchema),
  ).optional(),
  candidate: z.nullable(z.lazy(() => AssessmentOrderCandidate$outboundSchema))
    .optional(),
  id: z.nullable(z.string()).optional(),
  job: z.nullable(z.lazy(() => AssessmentOrderJob$outboundSchema)).optional(),
  package: z.nullable(z.lazy(() => AssessmentOrderPackage$outboundSchema))
    .optional(),
  remoteId: z.nullable(z.string()).optional(),
  requester: z.nullable(z.lazy(() => Requester$outboundSchema)).optional(),
  resultsUpdateUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    remoteId: "remote_id",
    resultsUpdateUrl: "results_update_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentOrder$ {
  /** @deprecated use `AssessmentOrder$inboundSchema` instead. */
  export const inboundSchema = AssessmentOrder$inboundSchema;
  /** @deprecated use `AssessmentOrder$outboundSchema` instead. */
  export const outboundSchema = AssessmentOrder$outboundSchema;
  /** @deprecated use `AssessmentOrder$Outbound` instead. */
  export type Outbound = AssessmentOrder$Outbound;
}

export function assessmentOrderToJSON(
  assessmentOrder: AssessmentOrder,
): string {
  return JSON.stringify(AssessmentOrder$outboundSchema.parse(assessmentOrder));
}

export function assessmentOrderFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentOrder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentOrder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentOrder' from JSON`,
  );
}
