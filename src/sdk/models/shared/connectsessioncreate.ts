/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export enum ConnectSessionCreateCategories {
    Ats = "ats",
    Hris = "hris",
    HrisLegacy = "hris-legacy",
    Crm = "crm",
    Iam = "iam",
    Marketing = "marketing",
    Lms = "lms",
    Stackone = "stackone",
}

/**
 * The metadata for the connection
 */
export type Metadata = {};

export type ConnectSessionCreate = {
    /**
     * The unique identifier for the account associated with this connect session. When this field is present, the hub will launch in edit mode using the retrieved token.
     */
    accountId?: string | null | undefined;
    /**
     * The categories of the provider to connect to
     */
    categories?: Array<ConnectSessionCreateCategories> | null | undefined;
    /**
     * How long the session should be valid for in seconds
     */
    expiresIn?: number | null | undefined;
    /**
     * The label to be applied to the account associated with this connect session.
     */
    label?: string | null | undefined;
    /**
     * The metadata for the connection
     */
    metadata?: Metadata | null | undefined;
    /**
     * If set, this connect session will allow creation of multiple accounts with the same origin owner id and provider. Has no effect if account_id is set.
     */
    multiple?: boolean | null | undefined;
    /**
     * The origin owner identifier
     */
    originOwnerId: string;
    /**
     * The origin owner name
     */
    originOwnerName: string;
    /**
     * The origin username
     */
    originUsername?: string | null | undefined;
    /**
     * The provider to connect to
     */
    provider?: string | null | undefined;
};

/** @internal */
export namespace ConnectSessionCreateCategories$ {
    export const inboundSchema: z.ZodNativeEnum<typeof ConnectSessionCreateCategories> =
        z.nativeEnum(ConnectSessionCreateCategories);
    export const outboundSchema: z.ZodNativeEnum<typeof ConnectSessionCreateCategories> =
        inboundSchema;
}

/** @internal */
export namespace Metadata$ {
    export const inboundSchema: z.ZodType<Metadata, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Metadata> = z.object({});
}

/** @internal */
export namespace ConnectSessionCreate$ {
    export const inboundSchema: z.ZodType<ConnectSessionCreate, z.ZodTypeDef, unknown> = z
        .object({
            account_id: z.nullable(z.string()).optional(),
            categories: z
                .nullable(z.array(ConnectSessionCreateCategories$.inboundSchema))
                .optional(),
            expires_in: z.nullable(z.number().default(1800)),
            label: z.nullable(z.string()).optional(),
            metadata: z.nullable(z.lazy(() => Metadata$.inboundSchema)).optional(),
            multiple: z.nullable(z.boolean().default(false)),
            origin_owner_id: z.string(),
            origin_owner_name: z.string(),
            origin_username: z.nullable(z.string()).optional(),
            provider: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                account_id: "accountId",
                expires_in: "expiresIn",
                origin_owner_id: "originOwnerId",
                origin_owner_name: "originOwnerName",
                origin_username: "originUsername",
            });
        });

    export type Outbound = {
        account_id?: string | null | undefined;
        categories?: Array<string> | null | undefined;
        expires_in: number | null;
        label?: string | null | undefined;
        metadata?: Metadata$.Outbound | null | undefined;
        multiple: boolean | null;
        origin_owner_id: string;
        origin_owner_name: string;
        origin_username?: string | null | undefined;
        provider?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectSessionCreate> = z
        .object({
            accountId: z.nullable(z.string()).optional(),
            categories: z
                .nullable(z.array(ConnectSessionCreateCategories$.outboundSchema))
                .optional(),
            expiresIn: z.nullable(z.number().default(1800)),
            label: z.nullable(z.string()).optional(),
            metadata: z.nullable(z.lazy(() => Metadata$.outboundSchema)).optional(),
            multiple: z.nullable(z.boolean().default(false)),
            originOwnerId: z.string(),
            originOwnerName: z.string(),
            originUsername: z.nullable(z.string()).optional(),
            provider: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                accountId: "account_id",
                expiresIn: "expires_in",
                originOwnerId: "origin_owner_id",
                originOwnerName: "origin_owner_name",
                originUsername: "origin_username",
            });
        });
}
