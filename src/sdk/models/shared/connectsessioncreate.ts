/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum ConnectSessionCreateCategories {
    Ats = "ats",
    Hris = "hris",
    HrisLegacy = "hris-legacy",
    Crm = "crm",
    Marketing = "marketing",
    Stackone = "stackone",
}

/**
 * The metadata for the connection
 */
export type Metadata = {};

export type ConnectSessionCreate = {
    /**
     * The unique identifier for the account associated with this connect session. When this field is present, the hub will launch in edit mode using the retrieved token.
     */
    accountId?: string | undefined;
    /**
     * The categories of the provider to connect to
     */
    categories?: Array<ConnectSessionCreateCategories> | undefined;
    /**
     * How long the session should be valid for in seconds
     */
    expiresIn?: number | undefined;
    /**
     * The metadata for the connection
     */
    metadata?: Metadata | undefined;
    /**
     * The origin owner identifier
     */
    originOwnerId: string;
    /**
     * The origin owner name
     */
    originOwnerName: string;
    /**
     * The origin username
     */
    originUsername?: string | undefined;
    /**
     * The provider to connect to
     */
    provider?: string | undefined;
};

/** @internal */
export const ConnectSessionCreateCategories$ = z.nativeEnum(ConnectSessionCreateCategories);

/** @internal */
export namespace Metadata$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Metadata, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Metadata> = z.object({});
}

/** @internal */
export namespace ConnectSessionCreate$ {
    export type Inbound = {
        account_id?: string | undefined;
        categories?: Array<ConnectSessionCreateCategories> | undefined;
        expires_in?: number | undefined;
        metadata?: Metadata$.Inbound | undefined;
        origin_owner_id: string;
        origin_owner_name: string;
        origin_username?: string | undefined;
        provider?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ConnectSessionCreate, z.ZodTypeDef, Inbound> = z
        .object({
            account_id: z.string().optional(),
            categories: z.array(ConnectSessionCreateCategories$).optional(),
            expires_in: z.number().optional(),
            metadata: z.lazy(() => Metadata$.inboundSchema).optional(),
            origin_owner_id: z.string(),
            origin_owner_name: z.string(),
            origin_username: z.string().optional(),
            provider: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.account_id === undefined ? null : { accountId: v.account_id }),
                ...(v.categories === undefined ? null : { categories: v.categories }),
                ...(v.expires_in === undefined ? null : { expiresIn: v.expires_in }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                originOwnerId: v.origin_owner_id,
                originOwnerName: v.origin_owner_name,
                ...(v.origin_username === undefined ? null : { originUsername: v.origin_username }),
                ...(v.provider === undefined ? null : { provider: v.provider }),
            };
        });

    export type Outbound = {
        account_id?: string | undefined;
        categories?: Array<ConnectSessionCreateCategories> | undefined;
        expires_in?: number | undefined;
        metadata?: Metadata$.Outbound | undefined;
        origin_owner_id: string;
        origin_owner_name: string;
        origin_username?: string | undefined;
        provider?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectSessionCreate> = z
        .object({
            accountId: z.string().optional(),
            categories: z.array(ConnectSessionCreateCategories$).optional(),
            expiresIn: z.number().optional(),
            metadata: z.lazy(() => Metadata$.outboundSchema).optional(),
            originOwnerId: z.string(),
            originOwnerName: z.string(),
            originUsername: z.string().optional(),
            provider: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.accountId === undefined ? null : { account_id: v.accountId }),
                ...(v.categories === undefined ? null : { categories: v.categories }),
                ...(v.expiresIn === undefined ? null : { expires_in: v.expiresIn }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                origin_owner_id: v.originOwnerId,
                origin_owner_name: v.originOwnerName,
                ...(v.originUsername === undefined ? null : { origin_username: v.originUsername }),
                ...(v.provider === undefined ? null : { provider: v.provider }),
            };
        });
}
