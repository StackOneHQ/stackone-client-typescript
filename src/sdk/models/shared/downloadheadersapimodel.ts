/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DownloadHeadersApiModel = {
  /**
   * Value of the Content-Disposition header
   */
  contentDisposition?: string | null | undefined;
  /**
   * Encoding of the content
   */
  contentEncoding?: string | null | undefined;
  /**
   * Size of the content in bytes
   */
  contentLength?: number | null | undefined;
  /**
   * Range of the content being sent
   */
  contentRange?: string | null | undefined;
  /**
   * MIME type of the file
   */
  contentType?: string | null | undefined;
  /**
   * Transfer encoding type
   */
  transferEncoding?: string | null | undefined;
};

/** @internal */
export const DownloadHeadersApiModel$inboundSchema: z.ZodType<
  DownloadHeadersApiModel,
  z.ZodTypeDef,
  unknown
> = z.object({
  "content-disposition": z.nullable(z.string()).optional(),
  "content-encoding": z.nullable(z.string()).optional(),
  "content-length": z.nullable(z.number()).optional(),
  "content-range": z.nullable(z.string()).optional(),
  "content-type": z.nullable(z.string()).optional(),
  "transfer-encoding": z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "content-disposition": "contentDisposition",
    "content-encoding": "contentEncoding",
    "content-length": "contentLength",
    "content-range": "contentRange",
    "content-type": "contentType",
    "transfer-encoding": "transferEncoding",
  });
});

/** @internal */
export type DownloadHeadersApiModel$Outbound = {
  "content-disposition"?: string | null | undefined;
  "content-encoding"?: string | null | undefined;
  "content-length"?: number | null | undefined;
  "content-range"?: string | null | undefined;
  "content-type"?: string | null | undefined;
  "transfer-encoding"?: string | null | undefined;
};

/** @internal */
export const DownloadHeadersApiModel$outboundSchema: z.ZodType<
  DownloadHeadersApiModel$Outbound,
  z.ZodTypeDef,
  DownloadHeadersApiModel
> = z.object({
  contentDisposition: z.nullable(z.string()).optional(),
  contentEncoding: z.nullable(z.string()).optional(),
  contentLength: z.nullable(z.number()).optional(),
  contentRange: z.nullable(z.string()).optional(),
  contentType: z.nullable(z.string()).optional(),
  transferEncoding: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    contentDisposition: "content-disposition",
    contentEncoding: "content-encoding",
    contentLength: "content-length",
    contentRange: "content-range",
    contentType: "content-type",
    transferEncoding: "transfer-encoding",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DownloadHeadersApiModel$ {
  /** @deprecated use `DownloadHeadersApiModel$inboundSchema` instead. */
  export const inboundSchema = DownloadHeadersApiModel$inboundSchema;
  /** @deprecated use `DownloadHeadersApiModel$outboundSchema` instead. */
  export const outboundSchema = DownloadHeadersApiModel$outboundSchema;
  /** @deprecated use `DownloadHeadersApiModel$Outbound` instead. */
  export type Outbound = DownloadHeadersApiModel$Outbound;
}

export function downloadHeadersApiModelToJSON(
  downloadHeadersApiModel: DownloadHeadersApiModel,
): string {
  return JSON.stringify(
    DownloadHeadersApiModel$outboundSchema.parse(downloadHeadersApiModel),
  );
}

export function downloadHeadersApiModelFromJSON(
  jsonString: string,
): SafeParseResult<DownloadHeadersApiModel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DownloadHeadersApiModel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DownloadHeadersApiModel' from JSON`,
  );
}
