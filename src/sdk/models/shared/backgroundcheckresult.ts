/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Attachment,
  Attachment$inboundSchema,
  Attachment$Outbound,
  Attachment$outboundSchema,
} from "./attachment.js";

export type BackgroundCheckResultCandidate = {
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Candidate profile url
   */
  profileUrl?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
};

export type BackgroundCheckResult4 = {};

/**
 * The source value of the test result.
 */
export type BackgroundCheckResultSourceValue =
  | BackgroundCheckResult4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The result of the test.
 */
export enum BackgroundCheckResultValue {
  Cancelled = "cancelled",
  Expired = "expired",
  Failed = "failed",
  Passed = "passed",
}
/**
 * The result of the test.
 */
export type BackgroundCheckResultValueOpen = OpenEnum<
  typeof BackgroundCheckResultValue
>;

export type BackgroundCheckResultResult = {
  /**
   * The source value of the test result.
   */
  sourceValue?:
    | BackgroundCheckResult4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The result of the test.
   */
  value?: BackgroundCheckResultValueOpen | null | undefined;
};

export type BackgroundCheckResultScore = {
  /**
   * The label of the score
   */
  label?: string | null | undefined;
  /**
   * The maximum value of the score
   */
  max?: string | null | undefined;
  /**
   * The minimum value of the score
   */
  min?: string | null | undefined;
  /**
   * The value is the actual score
   */
  value?: string | null | undefined;
};

export type BackgroundCheckResult = {
  attachments?: Array<Attachment> | null | undefined;
  candidate?: BackgroundCheckResultCandidate | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  result?: BackgroundCheckResultResult | null | undefined;
  /**
   * The test`s result url
   */
  resultUrl?: string | null | undefined;
  score?: BackgroundCheckResultScore | null | undefined;
  /**
   * The start date of the candidate test
   */
  startDate?: Date | null | undefined;
  /**
   * The submission date of the candidate test
   */
  submissionDate?: Date | null | undefined;
  /**
   * The summary about the result of the test
   */
  summary?: string | null | undefined;
};

/** @internal */
export const BackgroundCheckResultCandidate$inboundSchema: z.ZodType<
  BackgroundCheckResultCandidate,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  profile_url: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "profile_url": "profileUrl",
    "remote_id": "remoteId",
  });
});

/** @internal */
export type BackgroundCheckResultCandidate$Outbound = {
  id?: string | null | undefined;
  profile_url?: string | null | undefined;
  remote_id?: string | null | undefined;
};

/** @internal */
export const BackgroundCheckResultCandidate$outboundSchema: z.ZodType<
  BackgroundCheckResultCandidate$Outbound,
  z.ZodTypeDef,
  BackgroundCheckResultCandidate
> = z.object({
  id: z.nullable(z.string()).optional(),
  profileUrl: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    profileUrl: "profile_url",
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackgroundCheckResultCandidate$ {
  /** @deprecated use `BackgroundCheckResultCandidate$inboundSchema` instead. */
  export const inboundSchema = BackgroundCheckResultCandidate$inboundSchema;
  /** @deprecated use `BackgroundCheckResultCandidate$outboundSchema` instead. */
  export const outboundSchema = BackgroundCheckResultCandidate$outboundSchema;
  /** @deprecated use `BackgroundCheckResultCandidate$Outbound` instead. */
  export type Outbound = BackgroundCheckResultCandidate$Outbound;
}

export function backgroundCheckResultCandidateToJSON(
  backgroundCheckResultCandidate: BackgroundCheckResultCandidate,
): string {
  return JSON.stringify(
    BackgroundCheckResultCandidate$outboundSchema.parse(
      backgroundCheckResultCandidate,
    ),
  );
}

export function backgroundCheckResultCandidateFromJSON(
  jsonString: string,
): SafeParseResult<BackgroundCheckResultCandidate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BackgroundCheckResultCandidate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackgroundCheckResultCandidate' from JSON`,
  );
}

/** @internal */
export const BackgroundCheckResult4$inboundSchema: z.ZodType<
  BackgroundCheckResult4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type BackgroundCheckResult4$Outbound = {};

/** @internal */
export const BackgroundCheckResult4$outboundSchema: z.ZodType<
  BackgroundCheckResult4$Outbound,
  z.ZodTypeDef,
  BackgroundCheckResult4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackgroundCheckResult4$ {
  /** @deprecated use `BackgroundCheckResult4$inboundSchema` instead. */
  export const inboundSchema = BackgroundCheckResult4$inboundSchema;
  /** @deprecated use `BackgroundCheckResult4$outboundSchema` instead. */
  export const outboundSchema = BackgroundCheckResult4$outboundSchema;
  /** @deprecated use `BackgroundCheckResult4$Outbound` instead. */
  export type Outbound = BackgroundCheckResult4$Outbound;
}

export function backgroundCheckResult4ToJSON(
  backgroundCheckResult4: BackgroundCheckResult4,
): string {
  return JSON.stringify(
    BackgroundCheckResult4$outboundSchema.parse(backgroundCheckResult4),
  );
}

export function backgroundCheckResult4FromJSON(
  jsonString: string,
): SafeParseResult<BackgroundCheckResult4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BackgroundCheckResult4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackgroundCheckResult4' from JSON`,
  );
}

/** @internal */
export const BackgroundCheckResultSourceValue$inboundSchema: z.ZodType<
  BackgroundCheckResultSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => BackgroundCheckResult4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type BackgroundCheckResultSourceValue$Outbound =
  | BackgroundCheckResult4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const BackgroundCheckResultSourceValue$outboundSchema: z.ZodType<
  BackgroundCheckResultSourceValue$Outbound,
  z.ZodTypeDef,
  BackgroundCheckResultSourceValue
> = z.union([
  z.lazy(() => BackgroundCheckResult4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackgroundCheckResultSourceValue$ {
  /** @deprecated use `BackgroundCheckResultSourceValue$inboundSchema` instead. */
  export const inboundSchema = BackgroundCheckResultSourceValue$inboundSchema;
  /** @deprecated use `BackgroundCheckResultSourceValue$outboundSchema` instead. */
  export const outboundSchema = BackgroundCheckResultSourceValue$outboundSchema;
  /** @deprecated use `BackgroundCheckResultSourceValue$Outbound` instead. */
  export type Outbound = BackgroundCheckResultSourceValue$Outbound;
}

export function backgroundCheckResultSourceValueToJSON(
  backgroundCheckResultSourceValue: BackgroundCheckResultSourceValue,
): string {
  return JSON.stringify(
    BackgroundCheckResultSourceValue$outboundSchema.parse(
      backgroundCheckResultSourceValue,
    ),
  );
}

export function backgroundCheckResultSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<BackgroundCheckResultSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BackgroundCheckResultSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackgroundCheckResultSourceValue' from JSON`,
  );
}

/** @internal */
export const BackgroundCheckResultValue$inboundSchema: z.ZodType<
  BackgroundCheckResultValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(BackgroundCheckResultValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const BackgroundCheckResultValue$outboundSchema: z.ZodType<
  BackgroundCheckResultValueOpen,
  z.ZodTypeDef,
  BackgroundCheckResultValueOpen
> = z.union([
  z.nativeEnum(BackgroundCheckResultValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackgroundCheckResultValue$ {
  /** @deprecated use `BackgroundCheckResultValue$inboundSchema` instead. */
  export const inboundSchema = BackgroundCheckResultValue$inboundSchema;
  /** @deprecated use `BackgroundCheckResultValue$outboundSchema` instead. */
  export const outboundSchema = BackgroundCheckResultValue$outboundSchema;
}

/** @internal */
export const BackgroundCheckResultResult$inboundSchema: z.ZodType<
  BackgroundCheckResultResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => BackgroundCheckResult4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(BackgroundCheckResultValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type BackgroundCheckResultResult$Outbound = {
  source_value?:
    | BackgroundCheckResult4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const BackgroundCheckResultResult$outboundSchema: z.ZodType<
  BackgroundCheckResultResult$Outbound,
  z.ZodTypeDef,
  BackgroundCheckResultResult
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => BackgroundCheckResult4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(BackgroundCheckResultValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackgroundCheckResultResult$ {
  /** @deprecated use `BackgroundCheckResultResult$inboundSchema` instead. */
  export const inboundSchema = BackgroundCheckResultResult$inboundSchema;
  /** @deprecated use `BackgroundCheckResultResult$outboundSchema` instead. */
  export const outboundSchema = BackgroundCheckResultResult$outboundSchema;
  /** @deprecated use `BackgroundCheckResultResult$Outbound` instead. */
  export type Outbound = BackgroundCheckResultResult$Outbound;
}

export function backgroundCheckResultResultToJSON(
  backgroundCheckResultResult: BackgroundCheckResultResult,
): string {
  return JSON.stringify(
    BackgroundCheckResultResult$outboundSchema.parse(
      backgroundCheckResultResult,
    ),
  );
}

export function backgroundCheckResultResultFromJSON(
  jsonString: string,
): SafeParseResult<BackgroundCheckResultResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BackgroundCheckResultResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackgroundCheckResultResult' from JSON`,
  );
}

/** @internal */
export const BackgroundCheckResultScore$inboundSchema: z.ZodType<
  BackgroundCheckResultScore,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.nullable(z.string()).optional(),
  max: z.nullable(z.string()).optional(),
  min: z.nullable(z.string()).optional(),
  value: z.nullable(z.string()).optional(),
});

/** @internal */
export type BackgroundCheckResultScore$Outbound = {
  label?: string | null | undefined;
  max?: string | null | undefined;
  min?: string | null | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const BackgroundCheckResultScore$outboundSchema: z.ZodType<
  BackgroundCheckResultScore$Outbound,
  z.ZodTypeDef,
  BackgroundCheckResultScore
> = z.object({
  label: z.nullable(z.string()).optional(),
  max: z.nullable(z.string()).optional(),
  min: z.nullable(z.string()).optional(),
  value: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackgroundCheckResultScore$ {
  /** @deprecated use `BackgroundCheckResultScore$inboundSchema` instead. */
  export const inboundSchema = BackgroundCheckResultScore$inboundSchema;
  /** @deprecated use `BackgroundCheckResultScore$outboundSchema` instead. */
  export const outboundSchema = BackgroundCheckResultScore$outboundSchema;
  /** @deprecated use `BackgroundCheckResultScore$Outbound` instead. */
  export type Outbound = BackgroundCheckResultScore$Outbound;
}

export function backgroundCheckResultScoreToJSON(
  backgroundCheckResultScore: BackgroundCheckResultScore,
): string {
  return JSON.stringify(
    BackgroundCheckResultScore$outboundSchema.parse(backgroundCheckResultScore),
  );
}

export function backgroundCheckResultScoreFromJSON(
  jsonString: string,
): SafeParseResult<BackgroundCheckResultScore, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BackgroundCheckResultScore$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackgroundCheckResultScore' from JSON`,
  );
}

/** @internal */
export const BackgroundCheckResult$inboundSchema: z.ZodType<
  BackgroundCheckResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  attachments: z.nullable(z.array(Attachment$inboundSchema)).optional(),
  candidate: z.nullable(
    z.lazy(() => BackgroundCheckResultCandidate$inboundSchema),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  result: z.nullable(z.lazy(() => BackgroundCheckResultResult$inboundSchema))
    .optional(),
  result_url: z.nullable(z.string()).optional(),
  score: z.nullable(z.lazy(() => BackgroundCheckResultScore$inboundSchema))
    .optional(),
  start_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  submission_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  summary: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "remote_id": "remoteId",
    "result_url": "resultUrl",
    "start_date": "startDate",
    "submission_date": "submissionDate",
  });
});

/** @internal */
export type BackgroundCheckResult$Outbound = {
  attachments?: Array<Attachment$Outbound> | null | undefined;
  candidate?: BackgroundCheckResultCandidate$Outbound | null | undefined;
  id?: string | null | undefined;
  remote_id?: string | null | undefined;
  result?: BackgroundCheckResultResult$Outbound | null | undefined;
  result_url?: string | null | undefined;
  score?: BackgroundCheckResultScore$Outbound | null | undefined;
  start_date?: string | null | undefined;
  submission_date?: string | null | undefined;
  summary?: string | null | undefined;
};

/** @internal */
export const BackgroundCheckResult$outboundSchema: z.ZodType<
  BackgroundCheckResult$Outbound,
  z.ZodTypeDef,
  BackgroundCheckResult
> = z.object({
  attachments: z.nullable(z.array(Attachment$outboundSchema)).optional(),
  candidate: z.nullable(
    z.lazy(() => BackgroundCheckResultCandidate$outboundSchema),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  result: z.nullable(z.lazy(() => BackgroundCheckResultResult$outboundSchema))
    .optional(),
  resultUrl: z.nullable(z.string()).optional(),
  score: z.nullable(z.lazy(() => BackgroundCheckResultScore$outboundSchema))
    .optional(),
  startDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  submissionDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  summary: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    remoteId: "remote_id",
    resultUrl: "result_url",
    startDate: "start_date",
    submissionDate: "submission_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackgroundCheckResult$ {
  /** @deprecated use `BackgroundCheckResult$inboundSchema` instead. */
  export const inboundSchema = BackgroundCheckResult$inboundSchema;
  /** @deprecated use `BackgroundCheckResult$outboundSchema` instead. */
  export const outboundSchema = BackgroundCheckResult$outboundSchema;
  /** @deprecated use `BackgroundCheckResult$Outbound` instead. */
  export type Outbound = BackgroundCheckResult$Outbound;
}

export function backgroundCheckResultToJSON(
  backgroundCheckResult: BackgroundCheckResult,
): string {
  return JSON.stringify(
    BackgroundCheckResult$outboundSchema.parse(backgroundCheckResult),
  );
}

export function backgroundCheckResultFromJSON(
  jsonString: string,
): SafeParseResult<BackgroundCheckResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BackgroundCheckResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackgroundCheckResult' from JSON`,
  );
}
