/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Skills4 = {};

export type SkillsSourceValue =
  | Skills4
  | string
  | number
  | boolean
  | Array<any>;

export enum SkillsValue {
  Primary = "primary",
  Secondary = "secondary",
  Tertiary = "tertiary",
}
export type SkillsValueOpen = OpenEnum<typeof SkillsValue>;

/**
 * The hierarchal level of the skill
 */
export type SkillsHierarchy = {
  sourceValue?:
    | Skills4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: SkillsValueOpen | null | undefined;
};

export type SkillsSchemas4 = {};

export type SkillsSchemasSourceValue =
  | SkillsSchemas4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The Locale Code of the language
 */
export enum SkillsSchemasValue {
  ARAR = "ar_AR",
  AaER = "aa_ER",
  AfNA = "af_NA",
  AfZA = "af_ZA",
  AmET = "am_ET",
  ArAE = "ar_AE",
  ArBH = "ar_BH",
  ArDJ = "ar_DJ",
  ArDZ = "ar_DZ",
  ArEG = "ar_EG",
  ArER = "ar_ER",
  ArIQ = "ar_IQ",
  ArJO = "ar_JO",
  ArKM = "ar_KM",
  ArKW = "ar_KW",
  ArLB = "ar_LB",
  ArLY = "ar_LY",
  ArMA = "ar_MA",
  ArMR = "ar_MR",
  ArOM = "ar_OM",
  ArPS = "ar_PS",
  ArQA = "ar_QA",
  ArSA = "ar_SA",
  ArSD = "ar_SD",
  ArSY = "ar_SY",
  ArTD = "ar_TD",
  ArTN = "ar_TN",
  ArYE = "ar_YE",
  AyBO = "ay_BO",
  AyPE = "ay_PE",
  AZAZ = "az_AZ",
  AzIR = "az_IR",
  BeBY = "be_BY",
  BGBG = "bg_BG",
  BiVU = "bi_VU",
  BnBD = "bn_BD",
  BnIN = "bn_IN",
  BsBA = "bs_BA",
  BsME = "bs-ME",
  BynER = "byn_ER",
  CaAD = "ca_AD",
  CaES = "ca_ES",
  CaFR = "ca_FR",
  CaIT = "ca_IT",
  ChGU = "ch_GU",
  CsCZ = "cs_CZ",
  DaDK = "da_DK",
  DeAT = "de_AT",
  DeBE = "de_BE",
  DeCH = "de_CH",
  DEDE = "de_DE",
  DeLI = "de_LI",
  DeLU = "de_LU",
  DeVA = "de_VA",
  DeMV = "de_MV",
  DvMV = "dv_MV",
  DzBT = "dz_BT",
  ElCY = "el_CY",
  ElGR = "el_GR",
  EnAG = "en_AG",
  EnAI = "en_AI",
  EnAS = "en_AS",
  EnAU = "en_AU",
  EnBB = "en_BB",
  EnBE = "en_BE",
  EnBM = "en_BM",
  EnBS = "en_BS",
  EnBW = "en_BW",
  EnBZ = "en_BZ",
  EnCA = "en_CA",
  EnCC = "en_CC",
  EnCK = "en_CK",
  EnCM = "en_CM",
  EnCW = "en_CW",
  EnCX = "en_CX",
  EnDG = "en_DG",
  EnDM = "en_DM",
  EnER = "en_ER",
  EnFJ = "en_FJ",
  EnFK = "en_FK",
  EnFM = "en_FM",
  EnGB = "en_GB",
  EnGD = "en_GD",
  EnGG = "en_GG",
  EnGH = "en_GH",
  EnGI = "en_GI",
  EnGM = "en_GM",
  EnGS = "en_GS",
  EnGU = "en_GU",
  EnGY = "en_GY",
  EnHK = "en_HK",
  EnIE = "en_IE",
  EnIM = "en_IM",
  EnIN = "en_IN",
  EnIO = "en_IO",
  EnJE = "en_JE",
  EnJM = "en_JM",
  EnKE = "en_KE",
  EnKI = "en_KI",
  EnKN = "en_KN",
  EnKY = "en_KY",
  EnLC = "en_LC",
  EnLR = "en_LR",
  EnLS = "en_LS",
  EnMF = "en_MF",
  EnMG = "en_MG",
  EnMH = "en_MH",
  EnMO = "en_MO",
  EnMP = "en_MP",
  EnMS = "en_MS",
  EnMT = "en_MT",
  EnMU = "en_MU",
  EnMW = "en_MW",
  EnMY = "en_MY",
  EnNA = "en_NA",
  EnNF = "en_NF",
  EnNG = "en_NG",
  EnNL = "en_NL",
  EnNR = "en_NR",
  EnNU = "en_NU",
  EnNZ = "en_NZ",
  EnPG = "en_PG",
  EnPH = "en_PH",
  EnPK = "en_PK",
  EnPN = "en_PN",
  EnPR = "en_PR",
  EnPW = "en_PW",
  EnRW = "en_RW",
  EnSB = "en_SB",
  EnSC = "en_SC",
  EnSD = "en_SD",
  EnSG = "en_SG",
  EnSH = "en_SH",
  EnSL = "en_SL",
  EnSS = "en_SS",
  EnSX = "en_SX",
  EnSZ = "en_SZ",
  EnTC = "en_TC",
  EnTK = "en_TK",
  EnTO = "en_TO",
  EnTT = "en_TT",
  EnTV = "en_TV",
  EnTZ = "en_TZ",
  EnUG = "en_UG",
  EnUM = "en_UM",
  EnUS = "en_US",
  EnVC = "en_VC",
  EnVG = "en_VG",
  EnVI = "en_VI",
  EnVU = "en_VU",
  EnWS = "en_WS",
  EnZA = "en_ZA",
  EnZM = "en_ZM",
  EnZW = "en_ZW",
  EsAR = "es_AR",
  EsBO = "es_BO",
  EsBZ = "es_BZ",
  EsCL = "es_CL",
  EsCO = "es_CO",
  EsCR = "es_CR",
  EsCU = "es_CU",
  EsDO = "es_DO",
  EsEA = "es_EA",
  EsEC = "es_EC",
  EsEH = "es_EH",
  ESES = "es_ES",
  EsGQ = "es_GQ",
  EsGT = "es_GT",
  EsHN = "es_HN",
  EsIC = "es_IC",
  EsLA = "es_LA",
  EsMX = "es_MX",
  EsNI = "es_NI",
  EsPA = "es_PA",
  EsPE = "es_PE",
  EsPH = "es_PH",
  EsPR = "es_PR",
  EsPY = "es_PY",
  EsSV = "es_SV",
  EsUS = "es_US",
  EsUY = "es_UY",
  EsVE = "es_VE",
  EtEE = "et_EE",
  FaAF = "fa_AF",
  FaIR = "fa_IR",
  FanGA = "fan_GA",
  FfCM = "ff_CM",
  FfGN = "ff_GN",
  FfMR = "ff_MR",
  FfSN = "ff_SN",
  FfBF = "ff_BF",
  FIFI = "fi_FI",
  FJFJ = "fj_FJ",
  FOFO = "fo_FO",
  FrBE = "fr_BE",
  FrBF = "fr_BF",
  FrBI = "fr_BI",
  FrBJ = "fr_BJ",
  FrBL = "fr_BL",
  FrCA = "fr_CA",
  FrCD = "fr_CD",
  FrCF = "fr_CF",
  FrCG = "fr_CG",
  FrCH = "fr_CH",
  FrCI = "fr_CI",
  FrCM = "fr_CM",
  FrDJ = "fr_DJ",
  FrDZ = "fr_DZ",
  FRFR = "fr_FR",
  FrGA = "fr_GA",
  FrGF = "fr_GF",
  FrGG = "fr_GG",
  FrGN = "fr_GN",
  FrGP = "fr_GP",
  FrGQ = "fr_GQ",
  FrHT = "fr_HT",
  FrKM = "fr_KM",
  FrJE = "fr_JE",
  FrLU = "fr_LU",
  FrLB = "fr_LB",
  FrMA = "fr_MA",
  FrMC = "fr_MC",
  FrMF = "fr_MF",
  FrMG = "fr_MG",
  FrML = "fr_ML",
  FrMQ = "fr_MQ",
  FrMR = "fr_MR",
  FrMU = "fr_MU",
  FrNC = "fr_NC",
  FrNE = "fr_NE",
  FrPF = "fr_PF",
  FrPM = "fr_PM",
  FrRE = "fr_RE",
  FrRW = "fr_RW",
  FrSC = "fr_SC",
  FrSN = "fr_SN",
  FrSY = "fr_SY",
  FrTD = "fr_TD",
  FrTF = "fr_TF",
  FrTG = "fr_TG",
  FrTN = "fr_TN",
  FrVU = "fr_VU",
  FrVA = "fr_VA",
  FrWF = "fr_WF",
  FrYT = "fr_YT",
  GaIE = "ga_IE",
  GnPY = "gn_PY",
  GnAR = "gn_AR",
  GuIN = "gu_IN",
  GvIM = "gv_IM",
  HeIL = "he_IL",
  HiIN = "hi_IN",
  HrBA = "hr_BA",
  HRHR = "hr_HR",
  HrME = "hr_ME",
  HTHT = "ht_HT",
  HUHU = "hu_HU",
  HyAM = "hy_AM",
  HyCY = "hy_CY",
  IDID = "id_ID",
  ISIS = "is_IS",
  ItCH = "it_CH",
  ITIT = "it_IT",
  ItSM = "it_SM",
  ItVA = "it_VA",
  JaJP = "ja_JP",
  KaGE = "ka_GE",
  KgCD = "kg_CD",
  KkKZ = "kk_KZ",
  KlGL = "kl_GL",
  KmKH = "km_KH",
  KoKP = "ko_KP",
  KoKR = "ko_KR",
  KuIQ = "ku_IQ",
  KyKG = "ky_KG",
  LaVA = "la_VA",
  LbLU = "lb_LU",
  LnAO = "ln_AO",
  LnCD = "ln_CD",
  LnCF = "ln_CF",
  LnCG = "ln_CG",
  LoLA = "lo_LA",
  LTLT = "lt_LT",
  LuCD = "lu_CD",
  LVLV = "lv_LV",
  MGMG = "mg_MG",
  MHMH = "mh_MH",
  MiNZ = "mi_NZ",
  MKMK = "mk_MK",
  MNMN = "mn_MN",
  MrIN = "mr_IN",
  MsBN = "ms_BN",
  MsMY = "ms_MY",
  MsSG = "ms_SG",
  MTMT = "mt_MT",
  MyMM = "my_MM",
  NbNO = "nb_NO",
  NbBV = "nb_BV",
  NbZW = "nb_ZW",
  NeNP = "ne_NP",
  NlAW = "nl_AW",
  NlBE = "nl_BE",
  NlBQ = "nl_BQ",
  NlCW = "nl_CW",
  NLNL = "nl_NL",
  NlSR = "nl_SR",
  NlSX = "nl_SX",
  NlMF = "nl_MF",
  NnNO = "nn_NO",
  NnBV = "nn_BV",
  NONO = "no_NO",
  NoBV = "no_BV",
  NoSJ = "no_SJ",
  NrZA = "nr_ZA",
  NyMW = "ny_MW",
  PaIN = "pa_IN",
  PaPK = "pa_PK",
  PLPL = "pl_PL",
  PsAF = "ps_AF",
  PtAO = "pt_AO",
  PtBR = "pt_BR",
  PtCH = "pt_CH",
  PtCV = "pt_CV",
  PtGQ = "pt_GQ",
  PtGW = "pt_GW",
  PtLU = "pt_LU",
  PtMO = "pt_MO",
  PtMZ = "pt_MZ",
  PTPT = "pt_PT",
  PtST = "pt_ST",
  PtTL = "pt_TL",
  QuBO = "qu_BO",
  QuEC = "qu_EC",
  QuPE = "qu_PE",
  RarCK = "rar_CK",
  RmCH = "rm_CH",
  RupMK = "rup_MK",
  RoMD = "ro_MD",
  RORO = "ro_RO",
  RuBY = "ru_BY",
  RuKG = "ru_KG",
  RuKZ = "ru_KZ",
  RuMD = "ru_MD",
  RURU = "ru_RU",
  RuUA = "ru_UA",
  RuAQ = "ru_AQ",
  RuTJ = "ru_TJ",
  RuTM = "ru_TM",
  RuUZ = "ru_UZ",
  RWRW = "rw_RW",
  SESE = "se_SE",
  SgCF = "sg_CF",
  SiLK = "si_LK",
  SKSK = "sk_SK",
  SlSI = "sl_SI",
  SmAS = "sm_AS",
  SmWS = "sm_WS",
  SnZW = "sn_ZW",
  SoDJ = "so_DJ",
  SoET = "so_ET",
  SoKE = "so_KE",
  SOSO = "so_SO",
  SqAL = "sq_AL",
  SqME = "sq_ME",
  SqXK = "sq_XK",
  SrBA = "sr_BA",
  SrME = "sr_ME",
  SrRS = "sr_RS",
  SrXK = "sr_XK",
  SsSZ = "ss_SZ",
  SsZA = "ss_ZA",
  SvAX = "sv_AX",
  SvFI = "sv_FI",
  SvSE = "sv_SE",
  SwKE = "sw_KE",
  SwTZ = "sw_TZ",
  SwUG = "sw_UG",
  SwCD = "sw_CD",
  TaIN = "ta_IN",
  TaMY = "ta_MY",
  TaSG = "ta_SG",
  TaLK = "ta_LK",
  TeIN = "te_IN",
  TgTJ = "tg_TJ",
  THTH = "th_TH",
  TiER = "ti_ER",
  TiET = "ti_ET",
  TigER = "tig_ER",
  TkTM = "tk_TM",
  TkAF = "tk_AF",
  TnBW = "tn_BW",
  TnZA = "tn_ZA",
  TOTO = "to_TO",
  TrCY = "tr_CY",
  TRTR = "tr_TR",
  TsZA = "ts_ZA",
  UkUA = "uk_UA",
  UrIN = "ur_IN",
  UrPK = "ur_PK",
  UzAF = "uz_AF",
  UZUZ = "uz_UZ",
  VeZA = "ve_ZA",
  ViVN = "vi_VN",
  XhZA = "xh_ZA",
  ZhCN = "zh_CN",
  ZhHK = "zh_HK",
  ZhMO = "zh_MO",
  ZhSG = "zh_SG",
  ZhTW = "zh_TW",
  ZuZA = "zu_ZA",
}
/**
 * The Locale Code of the language
 */
export type SkillsSchemasValueOpen = OpenEnum<typeof SkillsSchemasValue>;

/**
 * The language associated with this skill
 */
export type SkillsLanguage = {
  sourceValue?:
    | SkillsSchemas4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The Locale Code of the language
   */
  value?: SkillsSchemasValueOpen | null | undefined;
};

export type SkillsSchemasLevel4 = {};

export type SkillsSchemasLevelSourceValue =
  | SkillsSchemasLevel4
  | string
  | number
  | boolean
  | Array<any>;

export enum SkillsSchemasLevelValue {
  Primary = "primary",
  Secondary = "secondary",
  Tertiary = "tertiary",
}
export type SkillsSchemasLevelValueOpen = OpenEnum<
  typeof SkillsSchemasLevelValue
>;

/**
 * The hierarchal level of the skill
 *
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type SkillsLevel = {
  sourceValue?:
    | SkillsSchemasLevel4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: SkillsSchemasLevelValueOpen | null | undefined;
};

export type SkillsSchemasProficiency4 = {};

export type SkillsSchemasProficiencySourceValue =
  | SkillsSchemasProficiency4
  | string
  | number
  | boolean
  | Array<any>;

export enum SkillsSchemasProficiencyValue {
  One = "1",
  Two = "2",
  Three = "3",
  Four = "4",
  Five = "5",
}
export type SkillsSchemasProficiencyValueOpen = OpenEnum<
  typeof SkillsSchemasProficiencyValue
>;

/**
 * The user proficiency level of the skill ranked out of 5
 */
export type SkillsProficiency = {
  sourceValue?:
    | SkillsSchemasProficiency4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: SkillsSchemasProficiencyValueOpen | null | undefined;
};

export type Skills = {
  /**
   * Whether the skill is active and therefore available for use
   */
  active?: boolean | null | undefined;
  /**
   * The hierarchal level of the skill
   */
  hierarchy?: SkillsHierarchy | null | undefined;
  /**
   * The ID associated with this skill
   */
  id?: string | null | undefined;
  /**
   * The language associated with this skill
   */
  language?: SkillsLanguage | null | undefined;
  /**
   * The hierarchal level of the skill
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  level?: SkillsLevel | null | undefined;
  /**
   * The name associated with this skill
   */
  name?: string | null | undefined;
  /**
   * The user proficiency level of the skill ranked out of 5
   */
  proficiency?: SkillsProficiency | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
};

/** @internal */
export const Skills4$inboundSchema: z.ZodType<Skills4, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Skills4$Outbound = {};

/** @internal */
export const Skills4$outboundSchema: z.ZodType<
  Skills4$Outbound,
  z.ZodTypeDef,
  Skills4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Skills4$ {
  /** @deprecated use `Skills4$inboundSchema` instead. */
  export const inboundSchema = Skills4$inboundSchema;
  /** @deprecated use `Skills4$outboundSchema` instead. */
  export const outboundSchema = Skills4$outboundSchema;
  /** @deprecated use `Skills4$Outbound` instead. */
  export type Outbound = Skills4$Outbound;
}

export function skills4ToJSON(skills4: Skills4): string {
  return JSON.stringify(Skills4$outboundSchema.parse(skills4));
}

export function skills4FromJSON(
  jsonString: string,
): SafeParseResult<Skills4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Skills4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Skills4' from JSON`,
  );
}

/** @internal */
export const SkillsSourceValue$inboundSchema: z.ZodType<
  SkillsSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Skills4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type SkillsSourceValue$Outbound =
  | Skills4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const SkillsSourceValue$outboundSchema: z.ZodType<
  SkillsSourceValue$Outbound,
  z.ZodTypeDef,
  SkillsSourceValue
> = z.union([
  z.lazy(() => Skills4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkillsSourceValue$ {
  /** @deprecated use `SkillsSourceValue$inboundSchema` instead. */
  export const inboundSchema = SkillsSourceValue$inboundSchema;
  /** @deprecated use `SkillsSourceValue$outboundSchema` instead. */
  export const outboundSchema = SkillsSourceValue$outboundSchema;
  /** @deprecated use `SkillsSourceValue$Outbound` instead. */
  export type Outbound = SkillsSourceValue$Outbound;
}

export function skillsSourceValueToJSON(
  skillsSourceValue: SkillsSourceValue,
): string {
  return JSON.stringify(
    SkillsSourceValue$outboundSchema.parse(skillsSourceValue),
  );
}

export function skillsSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<SkillsSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkillsSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkillsSourceValue' from JSON`,
  );
}

/** @internal */
export const SkillsValue$inboundSchema: z.ZodType<
  SkillsValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(SkillsValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const SkillsValue$outboundSchema: z.ZodType<
  SkillsValueOpen,
  z.ZodTypeDef,
  SkillsValueOpen
> = z.union([
  z.nativeEnum(SkillsValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkillsValue$ {
  /** @deprecated use `SkillsValue$inboundSchema` instead. */
  export const inboundSchema = SkillsValue$inboundSchema;
  /** @deprecated use `SkillsValue$outboundSchema` instead. */
  export const outboundSchema = SkillsValue$outboundSchema;
}

/** @internal */
export const SkillsHierarchy$inboundSchema: z.ZodType<
  SkillsHierarchy,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => Skills4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(SkillsValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type SkillsHierarchy$Outbound = {
  source_value?:
    | Skills4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const SkillsHierarchy$outboundSchema: z.ZodType<
  SkillsHierarchy$Outbound,
  z.ZodTypeDef,
  SkillsHierarchy
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => Skills4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(SkillsValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkillsHierarchy$ {
  /** @deprecated use `SkillsHierarchy$inboundSchema` instead. */
  export const inboundSchema = SkillsHierarchy$inboundSchema;
  /** @deprecated use `SkillsHierarchy$outboundSchema` instead. */
  export const outboundSchema = SkillsHierarchy$outboundSchema;
  /** @deprecated use `SkillsHierarchy$Outbound` instead. */
  export type Outbound = SkillsHierarchy$Outbound;
}

export function skillsHierarchyToJSON(
  skillsHierarchy: SkillsHierarchy,
): string {
  return JSON.stringify(SkillsHierarchy$outboundSchema.parse(skillsHierarchy));
}

export function skillsHierarchyFromJSON(
  jsonString: string,
): SafeParseResult<SkillsHierarchy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkillsHierarchy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkillsHierarchy' from JSON`,
  );
}

/** @internal */
export const SkillsSchemas4$inboundSchema: z.ZodType<
  SkillsSchemas4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SkillsSchemas4$Outbound = {};

/** @internal */
export const SkillsSchemas4$outboundSchema: z.ZodType<
  SkillsSchemas4$Outbound,
  z.ZodTypeDef,
  SkillsSchemas4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkillsSchemas4$ {
  /** @deprecated use `SkillsSchemas4$inboundSchema` instead. */
  export const inboundSchema = SkillsSchemas4$inboundSchema;
  /** @deprecated use `SkillsSchemas4$outboundSchema` instead. */
  export const outboundSchema = SkillsSchemas4$outboundSchema;
  /** @deprecated use `SkillsSchemas4$Outbound` instead. */
  export type Outbound = SkillsSchemas4$Outbound;
}

export function skillsSchemas4ToJSON(skillsSchemas4: SkillsSchemas4): string {
  return JSON.stringify(SkillsSchemas4$outboundSchema.parse(skillsSchemas4));
}

export function skillsSchemas4FromJSON(
  jsonString: string,
): SafeParseResult<SkillsSchemas4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkillsSchemas4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkillsSchemas4' from JSON`,
  );
}

/** @internal */
export const SkillsSchemasSourceValue$inboundSchema: z.ZodType<
  SkillsSchemasSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => SkillsSchemas4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type SkillsSchemasSourceValue$Outbound =
  | SkillsSchemas4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const SkillsSchemasSourceValue$outboundSchema: z.ZodType<
  SkillsSchemasSourceValue$Outbound,
  z.ZodTypeDef,
  SkillsSchemasSourceValue
> = z.union([
  z.lazy(() => SkillsSchemas4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkillsSchemasSourceValue$ {
  /** @deprecated use `SkillsSchemasSourceValue$inboundSchema` instead. */
  export const inboundSchema = SkillsSchemasSourceValue$inboundSchema;
  /** @deprecated use `SkillsSchemasSourceValue$outboundSchema` instead. */
  export const outboundSchema = SkillsSchemasSourceValue$outboundSchema;
  /** @deprecated use `SkillsSchemasSourceValue$Outbound` instead. */
  export type Outbound = SkillsSchemasSourceValue$Outbound;
}

export function skillsSchemasSourceValueToJSON(
  skillsSchemasSourceValue: SkillsSchemasSourceValue,
): string {
  return JSON.stringify(
    SkillsSchemasSourceValue$outboundSchema.parse(skillsSchemasSourceValue),
  );
}

export function skillsSchemasSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<SkillsSchemasSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkillsSchemasSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkillsSchemasSourceValue' from JSON`,
  );
}

/** @internal */
export const SkillsSchemasValue$inboundSchema: z.ZodType<
  SkillsSchemasValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(SkillsSchemasValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const SkillsSchemasValue$outboundSchema: z.ZodType<
  SkillsSchemasValueOpen,
  z.ZodTypeDef,
  SkillsSchemasValueOpen
> = z.union([
  z.nativeEnum(SkillsSchemasValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkillsSchemasValue$ {
  /** @deprecated use `SkillsSchemasValue$inboundSchema` instead. */
  export const inboundSchema = SkillsSchemasValue$inboundSchema;
  /** @deprecated use `SkillsSchemasValue$outboundSchema` instead. */
  export const outboundSchema = SkillsSchemasValue$outboundSchema;
}

/** @internal */
export const SkillsLanguage$inboundSchema: z.ZodType<
  SkillsLanguage,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => SkillsSchemas4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(SkillsSchemasValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type SkillsLanguage$Outbound = {
  source_value?:
    | SkillsSchemas4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const SkillsLanguage$outboundSchema: z.ZodType<
  SkillsLanguage$Outbound,
  z.ZodTypeDef,
  SkillsLanguage
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => SkillsSchemas4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(SkillsSchemasValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkillsLanguage$ {
  /** @deprecated use `SkillsLanguage$inboundSchema` instead. */
  export const inboundSchema = SkillsLanguage$inboundSchema;
  /** @deprecated use `SkillsLanguage$outboundSchema` instead. */
  export const outboundSchema = SkillsLanguage$outboundSchema;
  /** @deprecated use `SkillsLanguage$Outbound` instead. */
  export type Outbound = SkillsLanguage$Outbound;
}

export function skillsLanguageToJSON(skillsLanguage: SkillsLanguage): string {
  return JSON.stringify(SkillsLanguage$outboundSchema.parse(skillsLanguage));
}

export function skillsLanguageFromJSON(
  jsonString: string,
): SafeParseResult<SkillsLanguage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkillsLanguage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkillsLanguage' from JSON`,
  );
}

/** @internal */
export const SkillsSchemasLevel4$inboundSchema: z.ZodType<
  SkillsSchemasLevel4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SkillsSchemasLevel4$Outbound = {};

/** @internal */
export const SkillsSchemasLevel4$outboundSchema: z.ZodType<
  SkillsSchemasLevel4$Outbound,
  z.ZodTypeDef,
  SkillsSchemasLevel4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkillsSchemasLevel4$ {
  /** @deprecated use `SkillsSchemasLevel4$inboundSchema` instead. */
  export const inboundSchema = SkillsSchemasLevel4$inboundSchema;
  /** @deprecated use `SkillsSchemasLevel4$outboundSchema` instead. */
  export const outboundSchema = SkillsSchemasLevel4$outboundSchema;
  /** @deprecated use `SkillsSchemasLevel4$Outbound` instead. */
  export type Outbound = SkillsSchemasLevel4$Outbound;
}

export function skillsSchemasLevel4ToJSON(
  skillsSchemasLevel4: SkillsSchemasLevel4,
): string {
  return JSON.stringify(
    SkillsSchemasLevel4$outboundSchema.parse(skillsSchemasLevel4),
  );
}

export function skillsSchemasLevel4FromJSON(
  jsonString: string,
): SafeParseResult<SkillsSchemasLevel4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkillsSchemasLevel4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkillsSchemasLevel4' from JSON`,
  );
}

/** @internal */
export const SkillsSchemasLevelSourceValue$inboundSchema: z.ZodType<
  SkillsSchemasLevelSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => SkillsSchemasLevel4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type SkillsSchemasLevelSourceValue$Outbound =
  | SkillsSchemasLevel4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const SkillsSchemasLevelSourceValue$outboundSchema: z.ZodType<
  SkillsSchemasLevelSourceValue$Outbound,
  z.ZodTypeDef,
  SkillsSchemasLevelSourceValue
> = z.union([
  z.lazy(() => SkillsSchemasLevel4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkillsSchemasLevelSourceValue$ {
  /** @deprecated use `SkillsSchemasLevelSourceValue$inboundSchema` instead. */
  export const inboundSchema = SkillsSchemasLevelSourceValue$inboundSchema;
  /** @deprecated use `SkillsSchemasLevelSourceValue$outboundSchema` instead. */
  export const outboundSchema = SkillsSchemasLevelSourceValue$outboundSchema;
  /** @deprecated use `SkillsSchemasLevelSourceValue$Outbound` instead. */
  export type Outbound = SkillsSchemasLevelSourceValue$Outbound;
}

export function skillsSchemasLevelSourceValueToJSON(
  skillsSchemasLevelSourceValue: SkillsSchemasLevelSourceValue,
): string {
  return JSON.stringify(
    SkillsSchemasLevelSourceValue$outboundSchema.parse(
      skillsSchemasLevelSourceValue,
    ),
  );
}

export function skillsSchemasLevelSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<SkillsSchemasLevelSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkillsSchemasLevelSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkillsSchemasLevelSourceValue' from JSON`,
  );
}

/** @internal */
export const SkillsSchemasLevelValue$inboundSchema: z.ZodType<
  SkillsSchemasLevelValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(SkillsSchemasLevelValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const SkillsSchemasLevelValue$outboundSchema: z.ZodType<
  SkillsSchemasLevelValueOpen,
  z.ZodTypeDef,
  SkillsSchemasLevelValueOpen
> = z.union([
  z.nativeEnum(SkillsSchemasLevelValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkillsSchemasLevelValue$ {
  /** @deprecated use `SkillsSchemasLevelValue$inboundSchema` instead. */
  export const inboundSchema = SkillsSchemasLevelValue$inboundSchema;
  /** @deprecated use `SkillsSchemasLevelValue$outboundSchema` instead. */
  export const outboundSchema = SkillsSchemasLevelValue$outboundSchema;
}

/** @internal */
export const SkillsLevel$inboundSchema: z.ZodType<
  SkillsLevel,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => SkillsSchemasLevel4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(SkillsSchemasLevelValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type SkillsLevel$Outbound = {
  source_value?:
    | SkillsSchemasLevel4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const SkillsLevel$outboundSchema: z.ZodType<
  SkillsLevel$Outbound,
  z.ZodTypeDef,
  SkillsLevel
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => SkillsSchemasLevel4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(SkillsSchemasLevelValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkillsLevel$ {
  /** @deprecated use `SkillsLevel$inboundSchema` instead. */
  export const inboundSchema = SkillsLevel$inboundSchema;
  /** @deprecated use `SkillsLevel$outboundSchema` instead. */
  export const outboundSchema = SkillsLevel$outboundSchema;
  /** @deprecated use `SkillsLevel$Outbound` instead. */
  export type Outbound = SkillsLevel$Outbound;
}

export function skillsLevelToJSON(skillsLevel: SkillsLevel): string {
  return JSON.stringify(SkillsLevel$outboundSchema.parse(skillsLevel));
}

export function skillsLevelFromJSON(
  jsonString: string,
): SafeParseResult<SkillsLevel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkillsLevel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkillsLevel' from JSON`,
  );
}

/** @internal */
export const SkillsSchemasProficiency4$inboundSchema: z.ZodType<
  SkillsSchemasProficiency4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SkillsSchemasProficiency4$Outbound = {};

/** @internal */
export const SkillsSchemasProficiency4$outboundSchema: z.ZodType<
  SkillsSchemasProficiency4$Outbound,
  z.ZodTypeDef,
  SkillsSchemasProficiency4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkillsSchemasProficiency4$ {
  /** @deprecated use `SkillsSchemasProficiency4$inboundSchema` instead. */
  export const inboundSchema = SkillsSchemasProficiency4$inboundSchema;
  /** @deprecated use `SkillsSchemasProficiency4$outboundSchema` instead. */
  export const outboundSchema = SkillsSchemasProficiency4$outboundSchema;
  /** @deprecated use `SkillsSchemasProficiency4$Outbound` instead. */
  export type Outbound = SkillsSchemasProficiency4$Outbound;
}

export function skillsSchemasProficiency4ToJSON(
  skillsSchemasProficiency4: SkillsSchemasProficiency4,
): string {
  return JSON.stringify(
    SkillsSchemasProficiency4$outboundSchema.parse(skillsSchemasProficiency4),
  );
}

export function skillsSchemasProficiency4FromJSON(
  jsonString: string,
): SafeParseResult<SkillsSchemasProficiency4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkillsSchemasProficiency4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkillsSchemasProficiency4' from JSON`,
  );
}

/** @internal */
export const SkillsSchemasProficiencySourceValue$inboundSchema: z.ZodType<
  SkillsSchemasProficiencySourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => SkillsSchemasProficiency4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type SkillsSchemasProficiencySourceValue$Outbound =
  | SkillsSchemasProficiency4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const SkillsSchemasProficiencySourceValue$outboundSchema: z.ZodType<
  SkillsSchemasProficiencySourceValue$Outbound,
  z.ZodTypeDef,
  SkillsSchemasProficiencySourceValue
> = z.union([
  z.lazy(() => SkillsSchemasProficiency4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkillsSchemasProficiencySourceValue$ {
  /** @deprecated use `SkillsSchemasProficiencySourceValue$inboundSchema` instead. */
  export const inboundSchema =
    SkillsSchemasProficiencySourceValue$inboundSchema;
  /** @deprecated use `SkillsSchemasProficiencySourceValue$outboundSchema` instead. */
  export const outboundSchema =
    SkillsSchemasProficiencySourceValue$outboundSchema;
  /** @deprecated use `SkillsSchemasProficiencySourceValue$Outbound` instead. */
  export type Outbound = SkillsSchemasProficiencySourceValue$Outbound;
}

export function skillsSchemasProficiencySourceValueToJSON(
  skillsSchemasProficiencySourceValue: SkillsSchemasProficiencySourceValue,
): string {
  return JSON.stringify(
    SkillsSchemasProficiencySourceValue$outboundSchema.parse(
      skillsSchemasProficiencySourceValue,
    ),
  );
}

export function skillsSchemasProficiencySourceValueFromJSON(
  jsonString: string,
): SafeParseResult<SkillsSchemasProficiencySourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SkillsSchemasProficiencySourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkillsSchemasProficiencySourceValue' from JSON`,
  );
}

/** @internal */
export const SkillsSchemasProficiencyValue$inboundSchema: z.ZodType<
  SkillsSchemasProficiencyValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(SkillsSchemasProficiencyValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const SkillsSchemasProficiencyValue$outboundSchema: z.ZodType<
  SkillsSchemasProficiencyValueOpen,
  z.ZodTypeDef,
  SkillsSchemasProficiencyValueOpen
> = z.union([
  z.nativeEnum(SkillsSchemasProficiencyValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkillsSchemasProficiencyValue$ {
  /** @deprecated use `SkillsSchemasProficiencyValue$inboundSchema` instead. */
  export const inboundSchema = SkillsSchemasProficiencyValue$inboundSchema;
  /** @deprecated use `SkillsSchemasProficiencyValue$outboundSchema` instead. */
  export const outboundSchema = SkillsSchemasProficiencyValue$outboundSchema;
}

/** @internal */
export const SkillsProficiency$inboundSchema: z.ZodType<
  SkillsProficiency,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => SkillsSchemasProficiency4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(SkillsSchemasProficiencyValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type SkillsProficiency$Outbound = {
  source_value?:
    | SkillsSchemasProficiency4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const SkillsProficiency$outboundSchema: z.ZodType<
  SkillsProficiency$Outbound,
  z.ZodTypeDef,
  SkillsProficiency
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => SkillsSchemasProficiency4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(SkillsSchemasProficiencyValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkillsProficiency$ {
  /** @deprecated use `SkillsProficiency$inboundSchema` instead. */
  export const inboundSchema = SkillsProficiency$inboundSchema;
  /** @deprecated use `SkillsProficiency$outboundSchema` instead. */
  export const outboundSchema = SkillsProficiency$outboundSchema;
  /** @deprecated use `SkillsProficiency$Outbound` instead. */
  export type Outbound = SkillsProficiency$Outbound;
}

export function skillsProficiencyToJSON(
  skillsProficiency: SkillsProficiency,
): string {
  return JSON.stringify(
    SkillsProficiency$outboundSchema.parse(skillsProficiency),
  );
}

export function skillsProficiencyFromJSON(
  jsonString: string,
): SafeParseResult<SkillsProficiency, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkillsProficiency$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkillsProficiency' from JSON`,
  );
}

/** @internal */
export const Skills$inboundSchema: z.ZodType<Skills, z.ZodTypeDef, unknown> = z
  .object({
    active: z.nullable(z.boolean()).optional(),
    hierarchy: z.nullable(z.lazy(() => SkillsHierarchy$inboundSchema))
      .optional(),
    id: z.nullable(z.string()).optional(),
    language: z.nullable(z.lazy(() => SkillsLanguage$inboundSchema)).optional(),
    level: z.nullable(z.lazy(() => SkillsLevel$inboundSchema)).optional(),
    name: z.nullable(z.string()).optional(),
    proficiency: z.nullable(z.lazy(() => SkillsProficiency$inboundSchema))
      .optional(),
    remote_id: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "remote_id": "remoteId",
    });
  });

/** @internal */
export type Skills$Outbound = {
  active?: boolean | null | undefined;
  hierarchy?: SkillsHierarchy$Outbound | null | undefined;
  id?: string | null | undefined;
  language?: SkillsLanguage$Outbound | null | undefined;
  level?: SkillsLevel$Outbound | null | undefined;
  name?: string | null | undefined;
  proficiency?: SkillsProficiency$Outbound | null | undefined;
  remote_id?: string | null | undefined;
};

/** @internal */
export const Skills$outboundSchema: z.ZodType<
  Skills$Outbound,
  z.ZodTypeDef,
  Skills
> = z.object({
  active: z.nullable(z.boolean()).optional(),
  hierarchy: z.nullable(z.lazy(() => SkillsHierarchy$outboundSchema))
    .optional(),
  id: z.nullable(z.string()).optional(),
  language: z.nullable(z.lazy(() => SkillsLanguage$outboundSchema)).optional(),
  level: z.nullable(z.lazy(() => SkillsLevel$outboundSchema)).optional(),
  name: z.nullable(z.string()).optional(),
  proficiency: z.nullable(z.lazy(() => SkillsProficiency$outboundSchema))
    .optional(),
  remoteId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Skills$ {
  /** @deprecated use `Skills$inboundSchema` instead. */
  export const inboundSchema = Skills$inboundSchema;
  /** @deprecated use `Skills$outboundSchema` instead. */
  export const outboundSchema = Skills$outboundSchema;
  /** @deprecated use `Skills$Outbound` instead. */
  export type Outbound = Skills$Outbound;
}

export function skillsToJSON(skills: Skills): string {
  return JSON.stringify(Skills$outboundSchema.parse(skills));
}

export function skillsFromJSON(
  jsonString: string,
): SafeParseResult<Skills, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Skills$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Skills' from JSON`,
  );
}
