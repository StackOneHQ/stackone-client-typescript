/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RawResponse,
  RawResponse$inboundSchema,
  RawResponse$Outbound,
  RawResponse$outboundSchema,
} from "./rawresponse.js";
import {
  Task,
  Task$inboundSchema,
  Task$Outbound,
  Task$outboundSchema,
} from "./task.js";

export type TaskResult = {
  data?: Array<Task> | null | undefined;
  raw?: Array<RawResponse> | null | undefined;
};

/** @internal */
export const TaskResult$inboundSchema: z.ZodType<
  TaskResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(z.array(Task$inboundSchema)).optional(),
  raw: z.nullable(z.array(RawResponse$inboundSchema)).optional(),
});

/** @internal */
export type TaskResult$Outbound = {
  data?: Array<Task$Outbound> | null | undefined;
  raw?: Array<RawResponse$Outbound> | null | undefined;
};

/** @internal */
export const TaskResult$outboundSchema: z.ZodType<
  TaskResult$Outbound,
  z.ZodTypeDef,
  TaskResult
> = z.object({
  data: z.nullable(z.array(Task$outboundSchema)).optional(),
  raw: z.nullable(z.array(RawResponse$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskResult$ {
  /** @deprecated use `TaskResult$inboundSchema` instead. */
  export const inboundSchema = TaskResult$inboundSchema;
  /** @deprecated use `TaskResult$outboundSchema` instead. */
  export const outboundSchema = TaskResult$outboundSchema;
  /** @deprecated use `TaskResult$Outbound` instead. */
  export type Outbound = TaskResult$Outbound;
}

export function taskResultToJSON(taskResult: TaskResult): string {
  return JSON.stringify(TaskResult$outboundSchema.parse(taskResult));
}

export function taskResultFromJSON(
  jsonString: string,
): SafeParseResult<TaskResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskResult' from JSON`,
  );
}
