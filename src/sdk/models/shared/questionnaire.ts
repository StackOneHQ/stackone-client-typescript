/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Answer, Answer$ } from "./answer";
import * as z from "zod";

export type Questionnaire = {
    answers?: Array<Answer> | null | undefined;
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
};

/** @internal */
export namespace Questionnaire$ {
    export const inboundSchema: z.ZodType<Questionnaire, z.ZodTypeDef, unknown> = z
        .object({
            answers: z.nullable(z.array(Answer$.inboundSchema)).optional(),
            id: z.nullable(z.string()).optional(),
            remote_id: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.answers === undefined ? null : { answers: v.answers }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.remote_id === undefined ? null : { remoteId: v.remote_id }),
            };
        });

    export type Outbound = {
        answers?: Array<Answer$.Outbound> | null | undefined;
        id?: string | null | undefined;
        remote_id?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Questionnaire> = z
        .object({
            answers: z.nullable(z.array(Answer$.outboundSchema)).optional(),
            id: z.nullable(z.string()).optional(),
            remoteId: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.answers === undefined ? null : { answers: v.answers }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.remoteId === undefined ? null : { remote_id: v.remoteId }),
            };
        });
}
