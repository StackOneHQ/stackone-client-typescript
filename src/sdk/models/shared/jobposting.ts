/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Compensation, Compensation$ } from "./compensation";
import {
    EmploymentContractTypeEnum,
    EmploymentContractTypeEnum$,
} from "./employmentcontracttypeenum";
import { EmploymentTypeEnum, EmploymentTypeEnum$ } from "./employmenttypeenum";
import { JobPostingStatusEnum, JobPostingStatusEnum$ } from "./jobpostingstatusenum";
import { Location, Location$ } from "./location";
import { Questionnaire, Questionnaire$ } from "./questionnaire";
import { z } from "zod";

export type Content = {
    html?: string | undefined;
    plain?: string | undefined;
};

export enum Internal {
    True = "true",
    False = "false",
}

export type JobPosting = {
    compensation?: Array<Compensation> | undefined;
    content?: Content | undefined;
    /**
     * Date of creation
     */
    createdAt?: Date | undefined;
    employmentContractType?: EmploymentContractTypeEnum | undefined;
    employmentType?: EmploymentTypeEnum | undefined;
    externalApplyUrl?: string | undefined;
    externalUrl?: string | undefined;
    id: string;
    internal?: Internal | undefined;
    jobId?: string | undefined;
    locations?: Array<Location> | undefined;
    questionnaires?: Array<Questionnaire> | undefined;
    status?: JobPostingStatusEnum | undefined;
    title?: string | undefined;
    /**
     * Date of last update
     */
    updatedAt?: Date | undefined;
};

/** @internal */
export namespace Content$ {
    export type Inbound = {
        html?: string | undefined;
        plain?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Content, z.ZodTypeDef, Inbound> = z
        .object({
            html: z.string().optional(),
            plain: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.html === undefined ? null : { html: v.html }),
                ...(v.plain === undefined ? null : { plain: v.plain }),
            };
        });

    export type Outbound = {
        html?: string | undefined;
        plain?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Content> = z
        .object({
            html: z.string().optional(),
            plain: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.html === undefined ? null : { html: v.html }),
                ...(v.plain === undefined ? null : { plain: v.plain }),
            };
        });
}

/** @internal */
export const Internal$ = z.nativeEnum(Internal);

/** @internal */
export namespace JobPosting$ {
    export type Inbound = {
        compensation?: Array<Compensation$.Inbound> | undefined;
        content?: Content$.Inbound | undefined;
        created_at?: string | undefined;
        employment_contract_type?: EmploymentContractTypeEnum$.Inbound | undefined;
        employment_type?: EmploymentTypeEnum$.Inbound | undefined;
        external_apply_url?: string | undefined;
        external_url?: string | undefined;
        id: string;
        internal?: Internal | undefined;
        job_id?: string | undefined;
        locations?: Array<Location$.Inbound> | undefined;
        questionnaires?: Array<Questionnaire$.Inbound> | undefined;
        status?: JobPostingStatusEnum$.Inbound | undefined;
        title?: string | undefined;
        updated_at?: string | undefined;
    };

    export const inboundSchema: z.ZodType<JobPosting, z.ZodTypeDef, Inbound> = z
        .object({
            compensation: z.array(Compensation$.inboundSchema).optional(),
            content: z.lazy(() => Content$.inboundSchema).optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            employment_contract_type: EmploymentContractTypeEnum$.inboundSchema.optional(),
            employment_type: EmploymentTypeEnum$.inboundSchema.optional(),
            external_apply_url: z.string().optional(),
            external_url: z.string().optional(),
            id: z.string(),
            internal: Internal$.optional(),
            job_id: z.string().optional(),
            locations: z.array(Location$.inboundSchema).optional(),
            questionnaires: z.array(Questionnaire$.inboundSchema).optional(),
            status: JobPostingStatusEnum$.inboundSchema.optional(),
            title: z.string().optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.compensation === undefined ? null : { compensation: v.compensation }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.employment_contract_type === undefined
                    ? null
                    : { employmentContractType: v.employment_contract_type }),
                ...(v.employment_type === undefined ? null : { employmentType: v.employment_type }),
                ...(v.external_apply_url === undefined
                    ? null
                    : { externalApplyUrl: v.external_apply_url }),
                ...(v.external_url === undefined ? null : { externalUrl: v.external_url }),
                id: v.id,
                ...(v.internal === undefined ? null : { internal: v.internal }),
                ...(v.job_id === undefined ? null : { jobId: v.job_id }),
                ...(v.locations === undefined ? null : { locations: v.locations }),
                ...(v.questionnaires === undefined ? null : { questionnaires: v.questionnaires }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        compensation?: Array<Compensation$.Outbound> | undefined;
        content?: Content$.Outbound | undefined;
        created_at?: string | undefined;
        employment_contract_type?: EmploymentContractTypeEnum$.Outbound | undefined;
        employment_type?: EmploymentTypeEnum$.Outbound | undefined;
        external_apply_url?: string | undefined;
        external_url?: string | undefined;
        id: string;
        internal?: Internal | undefined;
        job_id?: string | undefined;
        locations?: Array<Location$.Outbound> | undefined;
        questionnaires?: Array<Questionnaire$.Outbound> | undefined;
        status?: JobPostingStatusEnum$.Outbound | undefined;
        title?: string | undefined;
        updated_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobPosting> = z
        .object({
            compensation: z.array(Compensation$.outboundSchema).optional(),
            content: z.lazy(() => Content$.outboundSchema).optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            employmentContractType: EmploymentContractTypeEnum$.outboundSchema.optional(),
            employmentType: EmploymentTypeEnum$.outboundSchema.optional(),
            externalApplyUrl: z.string().optional(),
            externalUrl: z.string().optional(),
            id: z.string(),
            internal: Internal$.optional(),
            jobId: z.string().optional(),
            locations: z.array(Location$.outboundSchema).optional(),
            questionnaires: z.array(Questionnaire$.outboundSchema).optional(),
            status: JobPostingStatusEnum$.outboundSchema.optional(),
            title: z.string().optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.compensation === undefined ? null : { compensation: v.compensation }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.employmentContractType === undefined
                    ? null
                    : { employment_contract_type: v.employmentContractType }),
                ...(v.employmentType === undefined ? null : { employment_type: v.employmentType }),
                ...(v.externalApplyUrl === undefined
                    ? null
                    : { external_apply_url: v.externalApplyUrl }),
                ...(v.externalUrl === undefined ? null : { external_url: v.externalUrl }),
                id: v.id,
                ...(v.internal === undefined ? null : { internal: v.internal }),
                ...(v.jobId === undefined ? null : { job_id: v.jobId }),
                ...(v.locations === undefined ? null : { locations: v.locations }),
                ...(v.questionnaires === undefined ? null : { questionnaires: v.questionnaires }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}
