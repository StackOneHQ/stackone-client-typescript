/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types/enums.js";
import { JobPostingCompensation, JobPostingCompensation$ } from "./jobpostingcompensation.js";
import { JobPostingLocation, JobPostingLocation$ } from "./jobpostinglocation.js";
import { JobPostingQuestionnaire, JobPostingQuestionnaire$ } from "./jobpostingquestionnaire.js";
import * as z from "zod";

export type JobPostingContent = {
    html?: string | null | undefined;
    plain?: string | null | undefined;
};

export type JobPosting4 = {};

/**
 * The source value of the employment contract type.
 */
export type JobPostingSourceValue = JobPosting4 | string | number | boolean;

/**
 * The employment contract type.
 */
export enum JobPostingValue {
    FullTime = "full_time",
    Shifts = "shifts",
    PartTime = "part_time",
    UnmappedValue = "unmapped_value",
}
/**
 * The employment contract type.
 */
export type JobPostingValueOpen = OpenEnum<typeof JobPostingValue>;

export type JobPostingEmploymentContractType = {
    /**
     * The source value of the employment contract type.
     */
    sourceValue?: JobPosting4 | string | number | boolean | null | undefined;
    /**
     * The employment contract type.
     */
    value?: JobPostingValueOpen | null | undefined;
};

export type JobPostingSchemas4 = {};

/**
 * The source value of the employment type.
 */
export type JobPostingSchemasSourceValue = JobPostingSchemas4 | string | number | boolean;

/**
 * The type of the employment.
 */
export enum JobPostingSchemasValue {
    Contractor = "contractor",
    Intern = "intern",
    Permanent = "permanent",
    Apprentice = "apprentice",
    Freelance = "freelance",
    Terminated = "terminated",
    Temporary = "temporary",
    Seasonal = "seasonal",
    Volunteer = "volunteer",
    Probation = "probation",
    Internal = "internal",
    External = "external",
    Expatriate = "expatriate",
    EmployerOfRecord = "employer_of_record",
    Casual = "casual",
    Programme = "Programme",
    UnmappedValue = "unmapped_value",
}
/**
 * The type of the employment.
 */
export type JobPostingSchemasValueOpen = OpenEnum<typeof JobPostingSchemasValue>;

export type JobPostingEmploymentType = {
    /**
     * The source value of the employment type.
     */
    sourceValue?: JobPostingSchemas4 | string | number | boolean | null | undefined;
    /**
     * The type of the employment.
     */
    value?: JobPostingSchemasValueOpen | null | undefined;
};

export enum Internal {
    True = "true",
    False = "false",
}
export type InternalOpen = OpenEnum<typeof Internal>;

export type JobPostingSchemasStatus4 = {};

/**
 * The source value of the job postings status.
 */
export type JobPostingSchemasStatusSourceValue =
    | JobPostingSchemasStatus4
    | string
    | number
    | boolean;

/**
 * The status of the job postings.
 */
export enum JobPostingSchemasStatusValue {
    Live = "live",
    Draft = "draft",
    Pending = "pending",
    Internal = "internal",
    Rejected = "rejected",
    Closed = "closed",
    Archived = "archived",
    UnmappedValue = "unmapped_value",
}
/**
 * The status of the job postings.
 */
export type JobPostingSchemasStatusValueOpen = OpenEnum<typeof JobPostingSchemasStatusValue>;

export type JobPostingStatus = {
    /**
     * The source value of the job postings status.
     */
    sourceValue?: JobPostingSchemasStatus4 | string | number | boolean | null | undefined;
    /**
     * The status of the job postings.
     */
    value?: JobPostingSchemasStatusValueOpen | null | undefined;
};

export type JobPosting = {
    compensation?: Array<JobPostingCompensation> | null | undefined;
    content?: JobPostingContent | null | undefined;
    /**
     * Date of creation
     */
    createdAt?: Date | null | undefined;
    employmentContractType?: JobPostingEmploymentContractType | null | undefined;
    employmentType?: JobPostingEmploymentType | null | undefined;
    externalApplyUrl?: string | null | undefined;
    externalUrl?: string | null | undefined;
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    internal?: InternalOpen | null | undefined;
    jobId?: string | null | undefined;
    locations?: Array<JobPostingLocation> | null | undefined;
    questionnaires?: Array<JobPostingQuestionnaire> | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    /**
     * Provider's unique identifier of the job posting
     */
    remoteJobPostingId?: string | null | undefined;
    status?: JobPostingStatus | null | undefined;
    title?: string | null | undefined;
    /**
     * Date of last update
     */
    updatedAt?: Date | null | undefined;
};

/** @internal */
export namespace JobPostingContent$ {
    export const inboundSchema: z.ZodType<JobPostingContent, z.ZodTypeDef, unknown> = z.object({
        html: z.nullable(z.string()).optional(),
        plain: z.nullable(z.string()).optional(),
    });

    export type Outbound = {
        html?: string | null | undefined;
        plain?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobPostingContent> = z.object({
        html: z.nullable(z.string()).optional(),
        plain: z.nullable(z.string()).optional(),
    });
}

/** @internal */
export namespace JobPosting4$ {
    export const inboundSchema: z.ZodType<JobPosting4, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobPosting4> = z.object({});
}

/** @internal */
export namespace JobPostingSourceValue$ {
    export const inboundSchema: z.ZodType<JobPostingSourceValue, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => JobPosting4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export type Outbound = JobPosting4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobPostingSourceValue> = z.union(
        [z.lazy(() => JobPosting4$.outboundSchema), z.string(), z.number(), z.boolean()]
    );
}

/** @internal */
export namespace JobPostingValue$ {
    export const inboundSchema: z.ZodType<JobPostingValueOpen, z.ZodTypeDef, unknown> = z.union([
        z.nativeEnum(JobPostingValue),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema: z.ZodType<JobPostingValueOpen, z.ZodTypeDef, JobPostingValueOpen> =
        z.union([z.nativeEnum(JobPostingValue), z.string().and(z.custom<Unrecognized<string>>())]);
}

/** @internal */
export namespace JobPostingEmploymentContractType$ {
    export const inboundSchema: z.ZodType<JobPostingEmploymentContractType, z.ZodTypeDef, unknown> =
        z
            .object({
                source_value: z
                    .nullable(
                        z.union([
                            z.lazy(() => JobPosting4$.inboundSchema),
                            z.string(),
                            z.number(),
                            z.boolean(),
                        ])
                    )
                    .optional(),
                value: z.nullable(JobPostingValue$.inboundSchema).optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    source_value: "sourceValue",
                });
            });

    export type Outbound = {
        source_value?: JobPosting4$.Outbound | string | number | boolean | null | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        JobPostingEmploymentContractType
    > = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => JobPosting4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(JobPostingValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}

/** @internal */
export namespace JobPostingSchemas4$ {
    export const inboundSchema: z.ZodType<JobPostingSchemas4, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobPostingSchemas4> = z.object(
        {}
    );
}

/** @internal */
export namespace JobPostingSchemasSourceValue$ {
    export const inboundSchema: z.ZodType<JobPostingSchemasSourceValue, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => JobPostingSchemas4$.inboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);

    export type Outbound = JobPostingSchemas4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobPostingSchemasSourceValue> =
        z.union([
            z.lazy(() => JobPostingSchemas4$.outboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);
}

/** @internal */
export namespace JobPostingSchemasValue$ {
    export const inboundSchema: z.ZodType<JobPostingSchemasValueOpen, z.ZodTypeDef, unknown> =
        z.union([
            z.nativeEnum(JobPostingSchemasValue),
            z.string().transform(catchUnrecognizedEnum),
        ]);

    export const outboundSchema: z.ZodType<
        JobPostingSchemasValueOpen,
        z.ZodTypeDef,
        JobPostingSchemasValueOpen
    > = z.union([
        z.nativeEnum(JobPostingSchemasValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace JobPostingEmploymentType$ {
    export const inboundSchema: z.ZodType<JobPostingEmploymentType, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => JobPostingSchemas4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(JobPostingSchemasValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?: JobPostingSchemas4$.Outbound | string | number | boolean | null | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobPostingEmploymentType> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => JobPostingSchemas4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(JobPostingSchemasValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}

/** @internal */
export namespace Internal$ {
    export const inboundSchema: z.ZodType<InternalOpen, z.ZodTypeDef, unknown> = z.union([
        z.nativeEnum(Internal),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema: z.ZodType<InternalOpen, z.ZodTypeDef, InternalOpen> = z.union([
        z.nativeEnum(Internal),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace JobPostingSchemasStatus4$ {
    export const inboundSchema: z.ZodType<JobPostingSchemasStatus4, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobPostingSchemasStatus4> =
        z.object({});
}

/** @internal */
export namespace JobPostingSchemasStatusSourceValue$ {
    export const inboundSchema: z.ZodType<
        JobPostingSchemasStatusSourceValue,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.lazy(() => JobPostingSchemasStatus4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export type Outbound = JobPostingSchemasStatus4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        JobPostingSchemasStatusSourceValue
    > = z.union([
        z.lazy(() => JobPostingSchemasStatus4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace JobPostingSchemasStatusValue$ {
    export const inboundSchema: z.ZodType<JobPostingSchemasStatusValueOpen, z.ZodTypeDef, unknown> =
        z.union([
            z.nativeEnum(JobPostingSchemasStatusValue),
            z.string().transform(catchUnrecognizedEnum),
        ]);

    export const outboundSchema: z.ZodType<
        JobPostingSchemasStatusValueOpen,
        z.ZodTypeDef,
        JobPostingSchemasStatusValueOpen
    > = z.union([
        z.nativeEnum(JobPostingSchemasStatusValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace JobPostingStatus$ {
    export const inboundSchema: z.ZodType<JobPostingStatus, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => JobPostingSchemasStatus4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(JobPostingSchemasStatusValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?:
            | JobPostingSchemasStatus4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobPostingStatus> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => JobPostingSchemasStatus4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(JobPostingSchemasStatusValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}

/** @internal */
export namespace JobPosting$ {
    export const inboundSchema: z.ZodType<JobPosting, z.ZodTypeDef, unknown> = z
        .object({
            compensation: z.nullable(z.array(JobPostingCompensation$.inboundSchema)).optional(),
            content: z.nullable(z.lazy(() => JobPostingContent$.inboundSchema)).optional(),
            created_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            employment_contract_type: z
                .nullable(z.lazy(() => JobPostingEmploymentContractType$.inboundSchema))
                .optional(),
            employment_type: z
                .nullable(z.lazy(() => JobPostingEmploymentType$.inboundSchema))
                .optional(),
            external_apply_url: z.nullable(z.string()).optional(),
            external_url: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            internal: z.nullable(Internal$.inboundSchema).optional(),
            job_id: z.nullable(z.string()).optional(),
            locations: z.nullable(z.array(JobPostingLocation$.inboundSchema)).optional(),
            questionnaires: z.nullable(z.array(JobPostingQuestionnaire$.inboundSchema)).optional(),
            remote_id: z.nullable(z.string()).optional(),
            remote_job_posting_id: z.nullable(z.string()).optional(),
            status: z.nullable(z.lazy(() => JobPostingStatus$.inboundSchema)).optional(),
            title: z.nullable(z.string()).optional(),
            updated_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                created_at: "createdAt",
                employment_contract_type: "employmentContractType",
                employment_type: "employmentType",
                external_apply_url: "externalApplyUrl",
                external_url: "externalUrl",
                job_id: "jobId",
                remote_id: "remoteId",
                remote_job_posting_id: "remoteJobPostingId",
                updated_at: "updatedAt",
            });
        });

    export type Outbound = {
        compensation?: Array<JobPostingCompensation$.Outbound> | null | undefined;
        content?: JobPostingContent$.Outbound | null | undefined;
        created_at?: string | null | undefined;
        employment_contract_type?: JobPostingEmploymentContractType$.Outbound | null | undefined;
        employment_type?: JobPostingEmploymentType$.Outbound | null | undefined;
        external_apply_url?: string | null | undefined;
        external_url?: string | null | undefined;
        id?: string | null | undefined;
        internal?: string | null | undefined;
        job_id?: string | null | undefined;
        locations?: Array<JobPostingLocation$.Outbound> | null | undefined;
        questionnaires?: Array<JobPostingQuestionnaire$.Outbound> | null | undefined;
        remote_id?: string | null | undefined;
        remote_job_posting_id?: string | null | undefined;
        status?: JobPostingStatus$.Outbound | null | undefined;
        title?: string | null | undefined;
        updated_at?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobPosting> = z
        .object({
            compensation: z.nullable(z.array(JobPostingCompensation$.outboundSchema)).optional(),
            content: z.nullable(z.lazy(() => JobPostingContent$.outboundSchema)).optional(),
            createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            employmentContractType: z
                .nullable(z.lazy(() => JobPostingEmploymentContractType$.outboundSchema))
                .optional(),
            employmentType: z
                .nullable(z.lazy(() => JobPostingEmploymentType$.outboundSchema))
                .optional(),
            externalApplyUrl: z.nullable(z.string()).optional(),
            externalUrl: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            internal: z.nullable(Internal$.outboundSchema).optional(),
            jobId: z.nullable(z.string()).optional(),
            locations: z.nullable(z.array(JobPostingLocation$.outboundSchema)).optional(),
            questionnaires: z.nullable(z.array(JobPostingQuestionnaire$.outboundSchema)).optional(),
            remoteId: z.nullable(z.string()).optional(),
            remoteJobPostingId: z.nullable(z.string()).optional(),
            status: z.nullable(z.lazy(() => JobPostingStatus$.outboundSchema)).optional(),
            title: z.nullable(z.string()).optional(),
            updatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                createdAt: "created_at",
                employmentContractType: "employment_contract_type",
                employmentType: "employment_type",
                externalApplyUrl: "external_apply_url",
                externalUrl: "external_url",
                jobId: "job_id",
                remoteId: "remote_id",
                remoteJobPostingId: "remote_job_posting_id",
                updatedAt: "updated_at",
            });
        });
}
