/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * The type of the rejected reason.
 */
export enum RejectedReasonTypeEnumValue {
    RejectedByCandidate = "rejected_by_candidate",
    RejectedByOrganization = "rejected_by_organization",
    Other = "other",
    Unknown = "unknown",
    UnmappedValue = "unmapped_value",
}

export type RejectedReasonTypeEnum = {
    /**
     * The source value of the rejected reason type.
     */
    sourceValue: string;
    /**
     * The type of the rejected reason.
     */
    value: RejectedReasonTypeEnumValue;
};

/** @internal */
export const RejectedReasonTypeEnumValue$ = z.nativeEnum(RejectedReasonTypeEnumValue);

/** @internal */
export namespace RejectedReasonTypeEnum$ {
    export type Inbound = {
        source_value: string;
        value: RejectedReasonTypeEnumValue;
    };

    export const inboundSchema: z.ZodType<RejectedReasonTypeEnum, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z.string(),
            value: RejectedReasonTypeEnumValue$,
        })
        .transform((v) => {
            return {
                sourceValue: v.source_value,
                value: v.value,
            };
        });

    export type Outbound = {
        source_value: string;
        value: RejectedReasonTypeEnumValue;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RejectedReasonTypeEnum> = z
        .object({
            sourceValue: z.string(),
            value: RejectedReasonTypeEnumValue$,
        })
        .transform((v) => {
            return {
                source_value: v.sourceValue,
                value: v.value,
            };
        });
}
