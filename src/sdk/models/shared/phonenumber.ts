/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Type of phone number
 */
export enum PhoneNumberType {
    Personal = "personal",
    Work = "work",
    Mobile = "mobile",
    Home = "home",
    Unknown = "unknown",
    Other = "other",
}

export type PhoneNumber = {
    /**
     * Phone number string
     */
    phone?: string | null | undefined;
    /**
     * Type of phone number
     */
    type?: PhoneNumberType | null | undefined;
};

/** @internal */
export namespace PhoneNumberType$ {
    export const inboundSchema = z.nativeEnum(PhoneNumberType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PhoneNumber$ {
    export const inboundSchema: z.ZodType<PhoneNumber, z.ZodTypeDef, unknown> = z
        .object({
            phone: z.nullable(z.string()).optional(),
            type: z.nullable(PhoneNumberType$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        phone?: string | null | undefined;
        type?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PhoneNumber> = z
        .object({
            phone: z.nullable(z.string()).optional(),
            type: z.nullable(PhoneNumberType$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}
