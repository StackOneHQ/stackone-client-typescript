/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of the field
 */
export enum FieldType {
    ShortText = "short_text",
    LongText = "long_text",
    MultiSelect = "multi_select",
    SingleSelect = "single_select",
    Boolean = "boolean",
    Number = "number",
    Date = "date",
    Phone = "phone",
    Email = "email",
    Score = "score",
    Location = "location",
    UnmappedValue = "unmapped_value",
}
/**
 * The type of the field
 */
export type FieldTypeOpen = OpenEnum<typeof FieldType>;

export type Field = {
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    /**
     * The label of the field
     */
    label?: string | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    /**
     * Indicates if the field is required
     */
    required?: boolean | null | undefined;
    /**
     * The type of the field
     */
    type?: FieldTypeOpen | null | undefined;
    /**
     * The possible values for the field
     */
    values?: Array<string> | null | undefined;
};

/** @internal */
export namespace FieldType$ {
    export const inboundSchema: z.ZodType<FieldTypeOpen, z.ZodTypeDef, unknown> = z.union([
        z.nativeEnum(FieldType),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema: z.ZodType<FieldTypeOpen, z.ZodTypeDef, FieldTypeOpen> = z.union([
        z.nativeEnum(FieldType),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace Field$ {
    export const inboundSchema: z.ZodType<Field, z.ZodTypeDef, unknown> = z
        .object({
            id: z.nullable(z.string()).optional(),
            label: z.nullable(z.string()).optional(),
            remote_id: z.nullable(z.string()).optional(),
            required: z.nullable(z.boolean()).optional(),
            type: z.nullable(FieldType$.inboundSchema).optional(),
            values: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                remote_id: "remoteId",
            });
        });

    export type Outbound = {
        id?: string | null | undefined;
        label?: string | null | undefined;
        remote_id?: string | null | undefined;
        required?: boolean | null | undefined;
        type?: string | null | undefined;
        values?: Array<string> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Field> = z
        .object({
            id: z.nullable(z.string()).optional(),
            label: z.nullable(z.string()).optional(),
            remoteId: z.nullable(z.string()).optional(),
            required: z.nullable(z.boolean()).optional(),
            type: z.nullable(FieldType$.outboundSchema).optional(),
            values: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                remoteId: "remote_id",
            });
        });
}
