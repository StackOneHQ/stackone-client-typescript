/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of the field
 */
export enum FieldType {
    ShortText = "short_text",
    LongText = "long_text",
    MultiSelect = "multi_select",
    SingleSelect = "single_select",
    Boolean = "boolean",
    Number = "number",
    Date = "date",
    Phone = "phone",
    Email = "email",
    Score = "score",
    Location = "location",
    UnmappedValue = "unmapped_value",
}

export type Field = {
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    /**
     * The label of the field
     */
    label?: string | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    /**
     * Indicates if the field is required
     */
    required?: boolean | null | undefined;
    /**
     * The type of the field
     */
    type?: FieldType | null | undefined;
    /**
     * The possible values for the field
     */
    values?: Array<string> | null | undefined;
};

/** @internal */
export namespace FieldType$ {
    export const inboundSchema = z.nativeEnum(FieldType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Field$ {
    export const inboundSchema: z.ZodType<Field, z.ZodTypeDef, unknown> = z
        .object({
            id: z.nullable(z.string()).optional(),
            label: z.nullable(z.string()).optional(),
            remote_id: z.nullable(z.string()).optional(),
            required: z.nullable(z.boolean()).optional(),
            type: z.nullable(FieldType$.inboundSchema).optional(),
            values: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.label === undefined ? null : { label: v.label }),
                ...(v.remote_id === undefined ? null : { remoteId: v.remote_id }),
                ...(v.required === undefined ? null : { required: v.required }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.values === undefined ? null : { values: v.values }),
            };
        });

    export type Outbound = {
        id?: string | null | undefined;
        label?: string | null | undefined;
        remote_id?: string | null | undefined;
        required?: boolean | null | undefined;
        type?: string | null | undefined;
        values?: Array<string> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Field> = z
        .object({
            id: z.nullable(z.string()).optional(),
            label: z.nullable(z.string()).optional(),
            remoteId: z.nullable(z.string()).optional(),
            required: z.nullable(z.boolean()).optional(),
            type: z.nullable(FieldType$.outboundSchema).optional(),
            values: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.label === undefined ? null : { label: v.label }),
                ...(v.remoteId === undefined ? null : { remote_id: v.remoteId }),
                ...(v.required === undefined ? null : { required: v.required }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.values === undefined ? null : { values: v.values }),
            };
        });
}
