/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RawResponse,
  RawResponse$inboundSchema,
  RawResponse$Outbound,
  RawResponse$outboundSchema,
} from "./rawresponse.js";

export enum MessagingConversationResult2 {
  True = "true",
  False = "false",
}

/**
 * Whether the conversation is private
 */
export type MessagingConversationResultPrivate =
  | boolean
  | MessagingConversationResult2;

export type MessagingConversationResultData = {
  /**
   * Timestamp when the conversation was created
   */
  createdAt?: Date | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Timestamp of the last message in the conversation
   */
  lastMessageAt?: Date | null | undefined;
  /**
   * Name or title of the conversation
   */
  name?: string | null | undefined;
  /**
   * List of participant user IDs in the conversation
   */
  participants?: Array<string> | null | undefined;
  /**
   * Whether the conversation is private
   */
  private?: boolean | MessagingConversationResult2 | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
};

export type MessagingConversationResult = {
  data?: MessagingConversationResultData | null | undefined;
  raw?: Array<RawResponse> | null | undefined;
};

/** @internal */
export const MessagingConversationResult2$inboundSchema: z.ZodNativeEnum<
  typeof MessagingConversationResult2
> = z.nativeEnum(MessagingConversationResult2);

/** @internal */
export const MessagingConversationResult2$outboundSchema: z.ZodNativeEnum<
  typeof MessagingConversationResult2
> = MessagingConversationResult2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingConversationResult2$ {
  /** @deprecated use `MessagingConversationResult2$inboundSchema` instead. */
  export const inboundSchema = MessagingConversationResult2$inboundSchema;
  /** @deprecated use `MessagingConversationResult2$outboundSchema` instead. */
  export const outboundSchema = MessagingConversationResult2$outboundSchema;
}

/** @internal */
export const MessagingConversationResultPrivate$inboundSchema: z.ZodType<
  MessagingConversationResultPrivate,
  z.ZodTypeDef,
  unknown
> = z.union([z.boolean(), MessagingConversationResult2$inboundSchema]);

/** @internal */
export type MessagingConversationResultPrivate$Outbound = boolean | string;

/** @internal */
export const MessagingConversationResultPrivate$outboundSchema: z.ZodType<
  MessagingConversationResultPrivate$Outbound,
  z.ZodTypeDef,
  MessagingConversationResultPrivate
> = z.union([z.boolean(), MessagingConversationResult2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingConversationResultPrivate$ {
  /** @deprecated use `MessagingConversationResultPrivate$inboundSchema` instead. */
  export const inboundSchema = MessagingConversationResultPrivate$inboundSchema;
  /** @deprecated use `MessagingConversationResultPrivate$outboundSchema` instead. */
  export const outboundSchema =
    MessagingConversationResultPrivate$outboundSchema;
  /** @deprecated use `MessagingConversationResultPrivate$Outbound` instead. */
  export type Outbound = MessagingConversationResultPrivate$Outbound;
}

export function messagingConversationResultPrivateToJSON(
  messagingConversationResultPrivate: MessagingConversationResultPrivate,
): string {
  return JSON.stringify(
    MessagingConversationResultPrivate$outboundSchema.parse(
      messagingConversationResultPrivate,
    ),
  );
}

export function messagingConversationResultPrivateFromJSON(
  jsonString: string,
): SafeParseResult<MessagingConversationResultPrivate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MessagingConversationResultPrivate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessagingConversationResultPrivate' from JSON`,
  );
}

/** @internal */
export const MessagingConversationResultData$inboundSchema: z.ZodType<
  MessagingConversationResultData,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  last_message_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  name: z.nullable(z.string()).optional(),
  participants: z.nullable(z.array(z.string())).optional(),
  private: z.nullable(
    z.union([z.boolean(), MessagingConversationResult2$inboundSchema]),
  ).optional(),
  remote_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "last_message_at": "lastMessageAt",
    "remote_id": "remoteId",
  });
});

/** @internal */
export type MessagingConversationResultData$Outbound = {
  created_at?: string | null | undefined;
  id?: string | null | undefined;
  last_message_at?: string | null | undefined;
  name?: string | null | undefined;
  participants?: Array<string> | null | undefined;
  private?: boolean | string | null | undefined;
  remote_id?: string | null | undefined;
};

/** @internal */
export const MessagingConversationResultData$outboundSchema: z.ZodType<
  MessagingConversationResultData$Outbound,
  z.ZodTypeDef,
  MessagingConversationResultData
> = z.object({
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  id: z.nullable(z.string()).optional(),
  lastMessageAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  name: z.nullable(z.string()).optional(),
  participants: z.nullable(z.array(z.string())).optional(),
  private: z.nullable(
    z.union([z.boolean(), MessagingConversationResult2$outboundSchema]),
  ).optional(),
  remoteId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    lastMessageAt: "last_message_at",
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingConversationResultData$ {
  /** @deprecated use `MessagingConversationResultData$inboundSchema` instead. */
  export const inboundSchema = MessagingConversationResultData$inboundSchema;
  /** @deprecated use `MessagingConversationResultData$outboundSchema` instead. */
  export const outboundSchema = MessagingConversationResultData$outboundSchema;
  /** @deprecated use `MessagingConversationResultData$Outbound` instead. */
  export type Outbound = MessagingConversationResultData$Outbound;
}

export function messagingConversationResultDataToJSON(
  messagingConversationResultData: MessagingConversationResultData,
): string {
  return JSON.stringify(
    MessagingConversationResultData$outboundSchema.parse(
      messagingConversationResultData,
    ),
  );
}

export function messagingConversationResultDataFromJSON(
  jsonString: string,
): SafeParseResult<MessagingConversationResultData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessagingConversationResultData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessagingConversationResultData' from JSON`,
  );
}

/** @internal */
export const MessagingConversationResult$inboundSchema: z.ZodType<
  MessagingConversationResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(z.lazy(() => MessagingConversationResultData$inboundSchema))
    .optional(),
  raw: z.nullable(z.array(RawResponse$inboundSchema)).optional(),
});

/** @internal */
export type MessagingConversationResult$Outbound = {
  data?: MessagingConversationResultData$Outbound | null | undefined;
  raw?: Array<RawResponse$Outbound> | null | undefined;
};

/** @internal */
export const MessagingConversationResult$outboundSchema: z.ZodType<
  MessagingConversationResult$Outbound,
  z.ZodTypeDef,
  MessagingConversationResult
> = z.object({
  data: z.nullable(z.lazy(() => MessagingConversationResultData$outboundSchema))
    .optional(),
  raw: z.nullable(z.array(RawResponse$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingConversationResult$ {
  /** @deprecated use `MessagingConversationResult$inboundSchema` instead. */
  export const inboundSchema = MessagingConversationResult$inboundSchema;
  /** @deprecated use `MessagingConversationResult$outboundSchema` instead. */
  export const outboundSchema = MessagingConversationResult$outboundSchema;
  /** @deprecated use `MessagingConversationResult$Outbound` instead. */
  export type Outbound = MessagingConversationResult$Outbound;
}

export function messagingConversationResultToJSON(
  messagingConversationResult: MessagingConversationResult,
): string {
  return JSON.stringify(
    MessagingConversationResult$outboundSchema.parse(
      messagingConversationResult,
    ),
  );
}

export function messagingConversationResultFromJSON(
  jsonString: string,
): SafeParseResult<MessagingConversationResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessagingConversationResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessagingConversationResult' from JSON`,
  );
}
