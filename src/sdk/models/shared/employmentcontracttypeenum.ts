/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * The employment contract type.
 */
export enum EmploymentContractTypeEnumValue {
    FullTime = "full_time",
    Shifts = "shifts",
    PartTime = "part_time",
    UnmappedValue = "unmapped_value",
}

export type EmploymentContractTypeEnum = {
    /**
     * The source value of the employment contract type.
     */
    sourceValue: string;
    /**
     * The employment contract type.
     */
    value: EmploymentContractTypeEnumValue;
};

/** @internal */
export const EmploymentContractTypeEnumValue$ = z.nativeEnum(EmploymentContractTypeEnumValue);

/** @internal */
export namespace EmploymentContractTypeEnum$ {
    export type Inbound = {
        source_value: string;
        value: EmploymentContractTypeEnumValue;
    };

    export const inboundSchema: z.ZodType<EmploymentContractTypeEnum, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z.string(),
            value: EmploymentContractTypeEnumValue$,
        })
        .transform((v) => {
            return {
                sourceValue: v.source_value,
                value: v.value,
            };
        });

    export type Outbound = {
        source_value: string;
        value: EmploymentContractTypeEnumValue;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmploymentContractTypeEnum> = z
        .object({
            sourceValue: z.string(),
            value: EmploymentContractTypeEnumValue$,
        })
        .transform((v) => {
            return {
                source_value: v.sourceValue,
                value: v.value,
            };
        });
}
