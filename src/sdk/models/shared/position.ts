/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Position4 = {};

/**
 * The source value of the position status.
 */
export type PositionSourceValue =
  | string
  | number
  | boolean
  | Position4
  | Array<any>;

/**
 * The status of the position.
 */
export enum PositionValue {
  Open = "open",
  Closed = "closed",
  Paused = "paused",
  UnmappedValue = "unmapped_value",
}
/**
 * The status of the position.
 */
export type PositionValueOpen = OpenEnum<typeof PositionValue>;

/**
 * Status of the position
 */
export type PositionStatus = {
  /**
   * The source value of the position status.
   */
  sourceValue?:
    | string
    | number
    | boolean
    | Position4
    | Array<any>
    | null
    | undefined;
  /**
   * The status of the position.
   */
  value?: PositionValueOpen | null | undefined;
};

export type Position = {
  /**
   * Department ID associated with the position
   */
  departmentId?: string | null | undefined;
  /**
   * Description of the position
   */
  description?: string | null | undefined;
  /**
   * Employment type for the position
   */
  employmentType?: string | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Job ID from the HRIS provider
   */
  jobId?: string | null | undefined;
  /**
   * Location ID associated with the position
   */
  locationId?: string | null | undefined;
  /**
   * Date when the position was posted
   */
  postedDate?: Date | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * Status of the position
   */
  status?: PositionStatus | null | undefined;
  /**
   * Title of the position
   */
  title?: string | null | undefined;
};

/** @internal */
export const Position4$inboundSchema: z.ZodType<
  Position4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Position4$Outbound = {};

/** @internal */
export const Position4$outboundSchema: z.ZodType<
  Position4$Outbound,
  z.ZodTypeDef,
  Position4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Position4$ {
  /** @deprecated use `Position4$inboundSchema` instead. */
  export const inboundSchema = Position4$inboundSchema;
  /** @deprecated use `Position4$outboundSchema` instead. */
  export const outboundSchema = Position4$outboundSchema;
  /** @deprecated use `Position4$Outbound` instead. */
  export type Outbound = Position4$Outbound;
}

export function position4ToJSON(position4: Position4): string {
  return JSON.stringify(Position4$outboundSchema.parse(position4));
}

export function position4FromJSON(
  jsonString: string,
): SafeParseResult<Position4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Position4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Position4' from JSON`,
  );
}

/** @internal */
export const PositionSourceValue$inboundSchema: z.ZodType<
  PositionSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => Position4$inboundSchema),
  z.array(z.any()),
]);

/** @internal */
export type PositionSourceValue$Outbound =
  | string
  | number
  | boolean
  | Position4$Outbound
  | Array<any>;

/** @internal */
export const PositionSourceValue$outboundSchema: z.ZodType<
  PositionSourceValue$Outbound,
  z.ZodTypeDef,
  PositionSourceValue
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => Position4$outboundSchema),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PositionSourceValue$ {
  /** @deprecated use `PositionSourceValue$inboundSchema` instead. */
  export const inboundSchema = PositionSourceValue$inboundSchema;
  /** @deprecated use `PositionSourceValue$outboundSchema` instead. */
  export const outboundSchema = PositionSourceValue$outboundSchema;
  /** @deprecated use `PositionSourceValue$Outbound` instead. */
  export type Outbound = PositionSourceValue$Outbound;
}

export function positionSourceValueToJSON(
  positionSourceValue: PositionSourceValue,
): string {
  return JSON.stringify(
    PositionSourceValue$outboundSchema.parse(positionSourceValue),
  );
}

export function positionSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<PositionSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PositionSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PositionSourceValue' from JSON`,
  );
}

/** @internal */
export const PositionValue$inboundSchema: z.ZodType<
  PositionValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(PositionValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const PositionValue$outboundSchema: z.ZodType<
  PositionValueOpen,
  z.ZodTypeDef,
  PositionValueOpen
> = z.union([
  z.nativeEnum(PositionValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PositionValue$ {
  /** @deprecated use `PositionValue$inboundSchema` instead. */
  export const inboundSchema = PositionValue$inboundSchema;
  /** @deprecated use `PositionValue$outboundSchema` instead. */
  export const outboundSchema = PositionValue$outboundSchema;
}

/** @internal */
export const PositionStatus$inboundSchema: z.ZodType<
  PositionStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => Position4$inboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(PositionValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type PositionStatus$Outbound = {
  source_value?:
    | string
    | number
    | boolean
    | Position4$Outbound
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const PositionStatus$outboundSchema: z.ZodType<
  PositionStatus$Outbound,
  z.ZodTypeDef,
  PositionStatus
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => Position4$outboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(PositionValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PositionStatus$ {
  /** @deprecated use `PositionStatus$inboundSchema` instead. */
  export const inboundSchema = PositionStatus$inboundSchema;
  /** @deprecated use `PositionStatus$outboundSchema` instead. */
  export const outboundSchema = PositionStatus$outboundSchema;
  /** @deprecated use `PositionStatus$Outbound` instead. */
  export type Outbound = PositionStatus$Outbound;
}

export function positionStatusToJSON(positionStatus: PositionStatus): string {
  return JSON.stringify(PositionStatus$outboundSchema.parse(positionStatus));
}

export function positionStatusFromJSON(
  jsonString: string,
): SafeParseResult<PositionStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PositionStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PositionStatus' from JSON`,
  );
}

/** @internal */
export const Position$inboundSchema: z.ZodType<
  Position,
  z.ZodTypeDef,
  unknown
> = z.object({
  department_id: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  employment_type: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  job_id: z.nullable(z.string()).optional(),
  location_id: z.nullable(z.string()).optional(),
  posted_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  remote_id: z.nullable(z.string()).optional(),
  status: z.nullable(z.lazy(() => PositionStatus$inboundSchema)).optional(),
  title: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "department_id": "departmentId",
    "employment_type": "employmentType",
    "job_id": "jobId",
    "location_id": "locationId",
    "posted_date": "postedDate",
    "remote_id": "remoteId",
  });
});

/** @internal */
export type Position$Outbound = {
  department_id?: string | null | undefined;
  description?: string | null | undefined;
  employment_type?: string | null | undefined;
  id?: string | null | undefined;
  job_id?: string | null | undefined;
  location_id?: string | null | undefined;
  posted_date?: string | null | undefined;
  remote_id?: string | null | undefined;
  status?: PositionStatus$Outbound | null | undefined;
  title?: string | null | undefined;
};

/** @internal */
export const Position$outboundSchema: z.ZodType<
  Position$Outbound,
  z.ZodTypeDef,
  Position
> = z.object({
  departmentId: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  employmentType: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  jobId: z.nullable(z.string()).optional(),
  locationId: z.nullable(z.string()).optional(),
  postedDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  remoteId: z.nullable(z.string()).optional(),
  status: z.nullable(z.lazy(() => PositionStatus$outboundSchema)).optional(),
  title: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    departmentId: "department_id",
    employmentType: "employment_type",
    jobId: "job_id",
    locationId: "location_id",
    postedDate: "posted_date",
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Position$ {
  /** @deprecated use `Position$inboundSchema` instead. */
  export const inboundSchema = Position$inboundSchema;
  /** @deprecated use `Position$outboundSchema` instead. */
  export const outboundSchema = Position$outboundSchema;
  /** @deprecated use `Position$Outbound` instead. */
  export type Outbound = Position$Outbound;
}

export function positionToJSON(position: Position): string {
  return JSON.stringify(Position$outboundSchema.parse(position));
}

export function positionFromJSON(
  jsonString: string,
): SafeParseResult<Position, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Position$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Position' from JSON`,
  );
}
