/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomMappingError = {
  /**
   * The custom mapping identifier
   */
  id?: string | null | undefined;
  /**
   * The error message
   */
  message?: string | null | undefined;
  /**
   * The target field where the error occurred
   */
  targetField?: string | null | undefined;
};

/** @internal */
export const CustomMappingError$inboundSchema: z.ZodType<
  CustomMappingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  message: z.nullable(z.string()).optional(),
  targetField: z.nullable(z.string()).optional(),
});

/** @internal */
export type CustomMappingError$Outbound = {
  id?: string | null | undefined;
  message?: string | null | undefined;
  targetField?: string | null | undefined;
};

/** @internal */
export const CustomMappingError$outboundSchema: z.ZodType<
  CustomMappingError$Outbound,
  z.ZodTypeDef,
  CustomMappingError
> = z.object({
  id: z.nullable(z.string()).optional(),
  message: z.nullable(z.string()).optional(),
  targetField: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomMappingError$ {
  /** @deprecated use `CustomMappingError$inboundSchema` instead. */
  export const inboundSchema = CustomMappingError$inboundSchema;
  /** @deprecated use `CustomMappingError$outboundSchema` instead. */
  export const outboundSchema = CustomMappingError$outboundSchema;
  /** @deprecated use `CustomMappingError$Outbound` instead. */
  export type Outbound = CustomMappingError$Outbound;
}

export function customMappingErrorToJSON(
  customMappingError: CustomMappingError,
): string {
  return JSON.stringify(
    CustomMappingError$outboundSchema.parse(customMappingError),
  );
}

export function customMappingErrorFromJSON(
  jsonString: string,
): SafeParseResult<CustomMappingError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomMappingError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomMappingError' from JSON`,
  );
}
