/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as z from "zod";

export type User = {
    email?: string | null | undefined;
    firstName?: string | null | undefined;
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    lastName?: string | null | undefined;
    name?: string | null | undefined;
    phone?: string | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
};

/** @internal */
export namespace User$ {
    export const inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown> = z
        .object({
            email: z.nullable(z.string()).optional(),
            first_name: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            last_name: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            phone: z.nullable(z.string()).optional(),
            remote_id: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                first_name: "firstName",
                last_name: "lastName",
                remote_id: "remoteId",
            });
        });

    export type Outbound = {
        email?: string | null | undefined;
        first_name?: string | null | undefined;
        id?: string | null | undefined;
        last_name?: string | null | undefined;
        name?: string | null | undefined;
        phone?: string | null | undefined;
        remote_id?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, User> = z
        .object({
            email: z.nullable(z.string()).optional(),
            firstName: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            lastName: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            phone: z.nullable(z.string()).optional(),
            remoteId: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                firstName: "first_name",
                lastName: "last_name",
                remoteId: "remote_id",
            });
        });
}
