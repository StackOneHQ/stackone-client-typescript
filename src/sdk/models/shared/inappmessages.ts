/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";

export type InAppMessagesMessageContent = {
  body?: string | null | undefined;
};

export type InAppMessages4 = {};

/**
 * The original value from the provider used to derive the unified message type.
 */
export type InAppMessagesSourceValue =
  | InAppMessages4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The unified message type.
 */
export enum InAppMessagesValue {
  Email = "email",
  Sms = "sms",
  Push = "push",
  WebPush = "web_push",
  IosPush = "ios_push",
  AndroidPush = "android_push",
  AppPush = "app_push",
  OmniChannel = "omni_channel",
  ContentBlock = "content_block",
  InApp = "in_app",
  Unknown = "unknown",
  UnmappedValue = "unmapped_value",
}
/**
 * The unified message type.
 */
export type InAppMessagesValueOpen = OpenEnum<typeof InAppMessagesValue>;

export type InAppMessagesMessageType = {
  /**
   * The original value from the provider used to derive the unified message type.
   */
  sourceValue?:
    | InAppMessages4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The unified message type.
   */
  value?: InAppMessagesValueOpen | null | undefined;
};

export type InAppMessages = {
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  messageContent?: InAppMessagesMessageContent | null | undefined;
  messageType?: InAppMessagesMessageType | null | undefined;
  name?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
};

/** @internal */
export const InAppMessagesMessageContent$inboundSchema: z.ZodType<
  InAppMessagesMessageContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  body: z.nullable(z.string()).optional(),
});

/** @internal */
export type InAppMessagesMessageContent$Outbound = {
  body?: string | null | undefined;
};

/** @internal */
export const InAppMessagesMessageContent$outboundSchema: z.ZodType<
  InAppMessagesMessageContent$Outbound,
  z.ZodTypeDef,
  InAppMessagesMessageContent
> = z.object({
  body: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InAppMessagesMessageContent$ {
  /** @deprecated use `InAppMessagesMessageContent$inboundSchema` instead. */
  export const inboundSchema = InAppMessagesMessageContent$inboundSchema;
  /** @deprecated use `InAppMessagesMessageContent$outboundSchema` instead. */
  export const outboundSchema = InAppMessagesMessageContent$outboundSchema;
  /** @deprecated use `InAppMessagesMessageContent$Outbound` instead. */
  export type Outbound = InAppMessagesMessageContent$Outbound;
}

/** @internal */
export const InAppMessages4$inboundSchema: z.ZodType<
  InAppMessages4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InAppMessages4$Outbound = {};

/** @internal */
export const InAppMessages4$outboundSchema: z.ZodType<
  InAppMessages4$Outbound,
  z.ZodTypeDef,
  InAppMessages4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InAppMessages4$ {
  /** @deprecated use `InAppMessages4$inboundSchema` instead. */
  export const inboundSchema = InAppMessages4$inboundSchema;
  /** @deprecated use `InAppMessages4$outboundSchema` instead. */
  export const outboundSchema = InAppMessages4$outboundSchema;
  /** @deprecated use `InAppMessages4$Outbound` instead. */
  export type Outbound = InAppMessages4$Outbound;
}

/** @internal */
export const InAppMessagesSourceValue$inboundSchema: z.ZodType<
  InAppMessagesSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => InAppMessages4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type InAppMessagesSourceValue$Outbound =
  | InAppMessages4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const InAppMessagesSourceValue$outboundSchema: z.ZodType<
  InAppMessagesSourceValue$Outbound,
  z.ZodTypeDef,
  InAppMessagesSourceValue
> = z.union([
  z.lazy(() => InAppMessages4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InAppMessagesSourceValue$ {
  /** @deprecated use `InAppMessagesSourceValue$inboundSchema` instead. */
  export const inboundSchema = InAppMessagesSourceValue$inboundSchema;
  /** @deprecated use `InAppMessagesSourceValue$outboundSchema` instead. */
  export const outboundSchema = InAppMessagesSourceValue$outboundSchema;
  /** @deprecated use `InAppMessagesSourceValue$Outbound` instead. */
  export type Outbound = InAppMessagesSourceValue$Outbound;
}

/** @internal */
export const InAppMessagesValue$inboundSchema: z.ZodType<
  InAppMessagesValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InAppMessagesValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InAppMessagesValue$outboundSchema: z.ZodType<
  InAppMessagesValueOpen,
  z.ZodTypeDef,
  InAppMessagesValueOpen
> = z.union([
  z.nativeEnum(InAppMessagesValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InAppMessagesValue$ {
  /** @deprecated use `InAppMessagesValue$inboundSchema` instead. */
  export const inboundSchema = InAppMessagesValue$inboundSchema;
  /** @deprecated use `InAppMessagesValue$outboundSchema` instead. */
  export const outboundSchema = InAppMessagesValue$outboundSchema;
}

/** @internal */
export const InAppMessagesMessageType$inboundSchema: z.ZodType<
  InAppMessagesMessageType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => InAppMessages4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(InAppMessagesValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type InAppMessagesMessageType$Outbound = {
  source_value?:
    | InAppMessages4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const InAppMessagesMessageType$outboundSchema: z.ZodType<
  InAppMessagesMessageType$Outbound,
  z.ZodTypeDef,
  InAppMessagesMessageType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => InAppMessages4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(InAppMessagesValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InAppMessagesMessageType$ {
  /** @deprecated use `InAppMessagesMessageType$inboundSchema` instead. */
  export const inboundSchema = InAppMessagesMessageType$inboundSchema;
  /** @deprecated use `InAppMessagesMessageType$outboundSchema` instead. */
  export const outboundSchema = InAppMessagesMessageType$outboundSchema;
  /** @deprecated use `InAppMessagesMessageType$Outbound` instead. */
  export type Outbound = InAppMessagesMessageType$Outbound;
}

/** @internal */
export const InAppMessages$inboundSchema: z.ZodType<
  InAppMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  message_content: z.nullable(
    z.lazy(() => InAppMessagesMessageContent$inboundSchema),
  ).optional(),
  message_type: z.nullable(z.lazy(() => InAppMessagesMessageType$inboundSchema))
    .optional(),
  name: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "message_content": "messageContent",
    "message_type": "messageType",
    "remote_id": "remoteId",
  });
});

/** @internal */
export type InAppMessages$Outbound = {
  id?: string | null | undefined;
  message_content?: InAppMessagesMessageContent$Outbound | null | undefined;
  message_type?: InAppMessagesMessageType$Outbound | null | undefined;
  name?: string | null | undefined;
  remote_id?: string | null | undefined;
};

/** @internal */
export const InAppMessages$outboundSchema: z.ZodType<
  InAppMessages$Outbound,
  z.ZodTypeDef,
  InAppMessages
> = z.object({
  id: z.nullable(z.string()).optional(),
  messageContent: z.nullable(
    z.lazy(() => InAppMessagesMessageContent$outboundSchema),
  ).optional(),
  messageType: z.nullable(z.lazy(() => InAppMessagesMessageType$outboundSchema))
    .optional(),
  name: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    messageContent: "message_content",
    messageType: "message_type",
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InAppMessages$ {
  /** @deprecated use `InAppMessages$inboundSchema` instead. */
  export const inboundSchema = InAppMessages$inboundSchema;
  /** @deprecated use `InAppMessages$outboundSchema` instead. */
  export const outboundSchema = InAppMessages$outboundSchema;
  /** @deprecated use `InAppMessages$Outbound` instead. */
  export type Outbound = InAppMessages$Outbound;
}
