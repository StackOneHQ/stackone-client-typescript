/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * The type of the location.
 */
export enum LocationTypeEnumValue {
    Home = "home",
    Work = "work",
    UnmappedValue = "unmapped_value",
}

export type LocationTypeEnum = {
    /**
     * The source value of the location type.
     */
    sourceValue: string;
    /**
     * The type of the location.
     */
    value: LocationTypeEnumValue;
};

/** @internal */
export const LocationTypeEnumValue$ = z.nativeEnum(LocationTypeEnumValue);

/** @internal */
export namespace LocationTypeEnum$ {
    export type Inbound = {
        source_value: string;
        value: LocationTypeEnumValue;
    };

    export const inboundSchema: z.ZodType<LocationTypeEnum, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z.string(),
            value: LocationTypeEnumValue$,
        })
        .transform((v) => {
            return {
                sourceValue: v.source_value,
                value: v.value,
            };
        });

    export type Outbound = {
        source_value: string;
        value: LocationTypeEnumValue;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LocationTypeEnum> = z
        .object({
            sourceValue: z.string(),
            value: LocationTypeEnumValue$,
        })
        .transform((v) => {
            return {
                source_value: v.sourceValue,
                value: v.value,
            };
        });
}
