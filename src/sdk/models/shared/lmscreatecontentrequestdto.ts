/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types/enums.js";
import { ContentLanguageEnum, ContentLanguageEnum$ } from "./contentlanguageenum.js";
import { CreateCategoriesApiModel, CreateCategoriesApiModel$ } from "./createcategoriesapimodel.js";
import * as z from "zod";

export enum LmsCreateContentRequestDto2 {
    True = "true",
    False = "false",
}

/**
 * Whether the content is active and available for users.
 */
export type LmsCreateContentRequestDtoActive = boolean | LmsCreateContentRequestDto2;

export type LmsCreateContentRequestDto4 = {};

export type LmsCreateContentRequestDtoSourceValue =
    | LmsCreateContentRequestDto4
    | string
    | number
    | boolean;

export enum LmsCreateContentRequestDtoValue {
    Video = "video",
    Quiz = "quiz",
    Document = "document",
}
export type LmsCreateContentRequestDtoValueOpen = OpenEnum<typeof LmsCreateContentRequestDtoValue>;

/**
 * The type of content
 */
export type LmsCreateContentRequestDtoContentType = {
    sourceValue?: LmsCreateContentRequestDto4 | string | number | boolean | null | undefined;
    value?: LmsCreateContentRequestDtoValueOpen | null | undefined;
};

export type LmsCreateContentRequestDto = {
    /**
     * Whether the content is active and available for users.
     */
    active?: boolean | LmsCreateContentRequestDto2 | null | undefined;
    /**
     * The categories associated with this content
     */
    categories?: Array<CreateCategoriesApiModel> | null | undefined;
    /**
     * The type of content
     */
    contentType?: LmsCreateContentRequestDtoContentType | null | undefined;
    /**
     * The external URL of the content
     */
    contentUrl?: string | null | undefined;
    /**
     * The parent IDs associated with this content
     */
    courseIds?: Array<string> | null | undefined;
    /**
     * The URL of the thumbnail image associated with the content.
     */
    coverUrl?: string | null | undefined;
    /**
     * The description of the content
     */
    description?: string | null | undefined;
    /**
     * The duration of the content following the ISO8601 standard. If duration_unit is applicable we will derive this from the smallest unit given in the duration string
     */
    duration?: string | null | undefined;
    /**
     * The external ID associated with this content
     */
    externalId?: string | null | undefined;
    /**
     * The languages associated with this content
     */
    languages?: Array<ContentLanguageEnum> | null | undefined;
    /**
     * The order of the individual content within a content grouping. This is not applicable for pushing individual content.
     */
    order?: number | null | undefined;
    /**
     * The title of the content
     */
    title?: string | null | undefined;
};

/** @internal */
export namespace LmsCreateContentRequestDto2$ {
    export const inboundSchema: z.ZodNativeEnum<typeof LmsCreateContentRequestDto2> = z.nativeEnum(
        LmsCreateContentRequestDto2
    );
    export const outboundSchema: z.ZodNativeEnum<typeof LmsCreateContentRequestDto2> =
        inboundSchema;
}

/** @internal */
export namespace LmsCreateContentRequestDtoActive$ {
    export const inboundSchema: z.ZodType<LmsCreateContentRequestDtoActive, z.ZodTypeDef, unknown> =
        z.union([z.boolean(), LmsCreateContentRequestDto2$.inboundSchema]);

    export type Outbound = boolean | string;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        LmsCreateContentRequestDtoActive
    > = z.union([z.boolean(), LmsCreateContentRequestDto2$.outboundSchema]);
}

/** @internal */
export namespace LmsCreateContentRequestDto4$ {
    export const inboundSchema: z.ZodType<LmsCreateContentRequestDto4, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LmsCreateContentRequestDto4> =
        z.object({});
}

/** @internal */
export namespace LmsCreateContentRequestDtoSourceValue$ {
    export const inboundSchema: z.ZodType<
        LmsCreateContentRequestDtoSourceValue,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.lazy(() => LmsCreateContentRequestDto4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export type Outbound = LmsCreateContentRequestDto4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        LmsCreateContentRequestDtoSourceValue
    > = z.union([
        z.lazy(() => LmsCreateContentRequestDto4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace LmsCreateContentRequestDtoValue$ {
    export const inboundSchema: z.ZodType<
        LmsCreateContentRequestDtoValueOpen,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.nativeEnum(LmsCreateContentRequestDtoValue),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema: z.ZodType<
        LmsCreateContentRequestDtoValueOpen,
        z.ZodTypeDef,
        LmsCreateContentRequestDtoValueOpen
    > = z.union([
        z.nativeEnum(LmsCreateContentRequestDtoValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace LmsCreateContentRequestDtoContentType$ {
    export const inboundSchema: z.ZodType<
        LmsCreateContentRequestDtoContentType,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => LmsCreateContentRequestDto4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(LmsCreateContentRequestDtoValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?:
            | LmsCreateContentRequestDto4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        LmsCreateContentRequestDtoContentType
    > = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => LmsCreateContentRequestDto4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(LmsCreateContentRequestDtoValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}

/** @internal */
export namespace LmsCreateContentRequestDto$ {
    export const inboundSchema: z.ZodType<LmsCreateContentRequestDto, z.ZodTypeDef, unknown> = z
        .object({
            active: z
                .nullable(z.union([z.boolean(), LmsCreateContentRequestDto2$.inboundSchema]))
                .optional(),
            categories: z.nullable(z.array(CreateCategoriesApiModel$.inboundSchema)).optional(),
            content_type: z
                .nullable(z.lazy(() => LmsCreateContentRequestDtoContentType$.inboundSchema))
                .optional(),
            content_url: z.nullable(z.string()).optional(),
            course_ids: z.nullable(z.array(z.string())).optional(),
            cover_url: z.nullable(z.string()).optional(),
            description: z.nullable(z.string()).optional(),
            duration: z.nullable(z.string()).optional(),
            external_id: z.nullable(z.string()).optional(),
            languages: z.nullable(z.array(ContentLanguageEnum$.inboundSchema)).optional(),
            order: z.nullable(z.number()).optional(),
            title: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                content_type: "contentType",
                content_url: "contentUrl",
                course_ids: "courseIds",
                cover_url: "coverUrl",
                external_id: "externalId",
            });
        });

    export type Outbound = {
        active?: boolean | string | null | undefined;
        categories?: Array<CreateCategoriesApiModel$.Outbound> | null | undefined;
        content_type?: LmsCreateContentRequestDtoContentType$.Outbound | null | undefined;
        content_url?: string | null | undefined;
        course_ids?: Array<string> | null | undefined;
        cover_url?: string | null | undefined;
        description?: string | null | undefined;
        duration?: string | null | undefined;
        external_id?: string | null | undefined;
        languages?: Array<ContentLanguageEnum$.Outbound> | null | undefined;
        order?: number | null | undefined;
        title?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LmsCreateContentRequestDto> = z
        .object({
            active: z
                .nullable(z.union([z.boolean(), LmsCreateContentRequestDto2$.outboundSchema]))
                .optional(),
            categories: z.nullable(z.array(CreateCategoriesApiModel$.outboundSchema)).optional(),
            contentType: z
                .nullable(z.lazy(() => LmsCreateContentRequestDtoContentType$.outboundSchema))
                .optional(),
            contentUrl: z.nullable(z.string()).optional(),
            courseIds: z.nullable(z.array(z.string())).optional(),
            coverUrl: z.nullable(z.string()).optional(),
            description: z.nullable(z.string()).optional(),
            duration: z.nullable(z.string()).optional(),
            externalId: z.nullable(z.string()).optional(),
            languages: z.nullable(z.array(ContentLanguageEnum$.outboundSchema)).optional(),
            order: z.nullable(z.number()).optional(),
            title: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "content_type",
                contentUrl: "content_url",
                courseIds: "course_ids",
                coverUrl: "cover_url",
                externalId: "external_id",
            });
        });
}
