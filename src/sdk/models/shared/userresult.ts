/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    RawResponse,
    RawResponse$inboundSchema,
    RawResponse$Outbound,
    RawResponse$outboundSchema,
} from "./rawresponse.js";
import { User, User$inboundSchema, User$Outbound, User$outboundSchema } from "./user.js";
import * as z from "zod";

export type UserResult = {
    data: User;
    raw?: Array<RawResponse> | null | undefined;
};

/** @internal */
export const UserResult$inboundSchema: z.ZodType<UserResult, z.ZodTypeDef, unknown> = z.object({
    data: User$inboundSchema,
    raw: z.nullable(z.array(RawResponse$inboundSchema)).optional(),
});

/** @internal */
export type UserResult$Outbound = {
    data: User$Outbound;
    raw?: Array<RawResponse$Outbound> | null | undefined;
};

/** @internal */
export const UserResult$outboundSchema: z.ZodType<UserResult$Outbound, z.ZodTypeDef, UserResult> =
    z.object({
        data: User$outboundSchema,
        raw: z.nullable(z.array(RawResponse$outboundSchema)).optional(),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserResult$ {
    /** @deprecated use `UserResult$inboundSchema` instead. */
    export const inboundSchema = UserResult$inboundSchema;
    /** @deprecated use `UserResult$outboundSchema` instead. */
    export const outboundSchema = UserResult$outboundSchema;
    /** @deprecated use `UserResult$Outbound` instead. */
    export type Outbound = UserResult$Outbound;
}
