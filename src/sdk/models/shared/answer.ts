/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * The type of the answer.
 */
export enum AnswerValue {
    ShortText = "short_text",
    LongText = "long_text",
    Attachment = "attachment",
    MultiSelect = "multi_select",
    SingleSelect = "single_select",
    Boolean = "boolean",
    Number = "number",
    Date = "date",
    Video = "video",
}

/**
 * Type of the answer
 */
export type TypeT = {
    /**
     * The source value of the answer type.
     */
    sourceValue?: string | null | undefined;
    /**
     * The type of the answer.
     */
    value?: AnswerValue | null | undefined;
};

export type Answer = {
    /**
     * Unique identifier of the answer
     */
    id?: string | null | undefined;
    /**
     * Type of the answer
     */
    type?: TypeT | null | undefined;
    /**
     * Values of the answer
     */
    values: Array<string>;
};

/** @internal */
export const AnswerValue$ = z.nativeEnum(AnswerValue);

/** @internal */
export namespace TypeT$ {
    export type Inbound = {
        source_value?: string | null | undefined;
        value?: AnswerValue | null | undefined;
    };

    export const inboundSchema: z.ZodType<TypeT, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z.string().nullable().optional(),
            value: AnswerValue$.nullable().optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?: string | null | undefined;
        value?: AnswerValue | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TypeT> = z
        .object({
            sourceValue: z.string().nullable().optional(),
            value: AnswerValue$.nullable().optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace Answer$ {
    export type Inbound = {
        id?: string | null | undefined;
        type?: TypeT$.Inbound | null | undefined;
        values: Array<string>;
    };

    export const inboundSchema: z.ZodType<Answer, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().nullable().optional(),
            type: z
                .lazy(() => TypeT$.inboundSchema)
                .nullable()
                .optional(),
            values: z.array(z.string()),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.type === undefined ? null : { type: v.type }),
                values: v.values,
            };
        });

    export type Outbound = {
        id?: string | null | undefined;
        type?: TypeT$.Outbound | null | undefined;
        values: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Answer> = z
        .object({
            id: z.string().nullable().optional(),
            type: z
                .lazy(() => TypeT$.outboundSchema)
                .nullable()
                .optional(),
            values: z.array(z.string()),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.type === undefined ? null : { type: v.type }),
                values: v.values,
            };
        });
}
