/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types";
import * as z from "zod";

export type Answer4 = {};

/**
 * The source value of the answer type.
 */
export type AnswerSourceValue = Answer4 | string | number | boolean;

/**
 * The type of the answer.
 */
export enum AnswerValue {
    ShortText = "short_text",
    LongText = "long_text",
    Attachment = "attachment",
    MultiSelect = "multi_select",
    SingleSelect = "single_select",
    Boolean = "boolean",
    Number = "number",
    Date = "date",
    Video = "video",
}
/**
 * The type of the answer.
 */
export type AnswerValueOpen = OpenEnum<typeof AnswerValue>;

/**
 * Type of the answer
 */
export type Type = {
    /**
     * The source value of the answer type.
     */
    sourceValue?: Answer4 | string | number | boolean | null | undefined;
    /**
     * The type of the answer.
     */
    value?: AnswerValueOpen | null | undefined;
};

export type Answer = {
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    /**
     * Type of the answer
     */
    type?: Type | null | undefined;
    /**
     * Values of the answer
     */
    values?: Array<string> | null | undefined;
};

/** @internal */
export namespace Answer4$ {
    export const inboundSchema: z.ZodType<Answer4, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Answer4> = z.object({});
}

/** @internal */
export namespace AnswerSourceValue$ {
    export const inboundSchema: z.ZodType<AnswerSourceValue, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => Answer4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export type Outbound = Answer4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AnswerSourceValue> = z.union([
        z.lazy(() => Answer4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace AnswerValue$ {
    export const inboundSchema: z.ZodType<AnswerValueOpen, z.ZodTypeDef, unknown> = z.union([
        z.nativeEnum(AnswerValue),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema = z.union([
        z.nativeEnum(AnswerValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace Type$ {
    export const inboundSchema: z.ZodType<Type, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => Answer4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(AnswerValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?: Answer4$.Outbound | string | number | boolean | null | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Type> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => Answer4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(AnswerValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}

/** @internal */
export namespace Answer$ {
    export const inboundSchema: z.ZodType<Answer, z.ZodTypeDef, unknown> = z
        .object({
            id: z.nullable(z.string()).optional(),
            remote_id: z.nullable(z.string()).optional(),
            type: z.nullable(z.lazy(() => Type$.inboundSchema)).optional(),
            values: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                remote_id: "remoteId",
            });
        });

    export type Outbound = {
        id?: string | null | undefined;
        remote_id?: string | null | undefined;
        type?: Type$.Outbound | null | undefined;
        values?: Array<string> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Answer> = z
        .object({
            id: z.nullable(z.string()).optional(),
            remoteId: z.nullable(z.string()).optional(),
            type: z.nullable(z.lazy(() => Type$.outboundSchema)).optional(),
            values: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                remoteId: "remote_id",
            });
        });
}
