/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AnswerEnum, AnswerEnum$ } from "./answerenum";
import { z } from "zod";

export type Answer = {
    /**
     * Unique identifier of the answer
     */
    id?: string | undefined;
    /**
     * Type of the answer
     */
    type?: AnswerEnum | undefined;
    /**
     * Values of the answer
     */
    values: Array<string>;
};

/** @internal */
export namespace Answer$ {
    export type Inbound = {
        id?: string | undefined;
        type?: AnswerEnum$.Inbound | undefined;
        values: Array<string>;
    };

    export const inboundSchema: z.ZodType<Answer, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            type: AnswerEnum$.inboundSchema.optional(),
            values: z.array(z.string()),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.type === undefined ? null : { type: v.type }),
                values: v.values,
            };
        });

    export type Outbound = {
        id?: string | undefined;
        type?: AnswerEnum$.Outbound | undefined;
        values: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Answer> = z
        .object({
            id: z.string().optional(),
            type: AnswerEnum$.outboundSchema.optional(),
            values: z.array(z.string()),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.type === undefined ? null : { type: v.type }),
                values: v.values,
            };
        });
}
