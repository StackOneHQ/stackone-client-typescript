/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";

export type LearningObjectTypeEnum4 = {};

export type LearningObjectTypeEnumSourceValue =
  | LearningObjectTypeEnum4
  | string
  | number
  | boolean
  | Array<any>;

export enum LearningObjectTypeEnumValue {
  Content = "content",
  Course = "course",
  Collection = "collection",
}
export type LearningObjectTypeEnumValueOpen = OpenEnum<
  typeof LearningObjectTypeEnumValue
>;

export type LearningObjectTypeEnum = {
  sourceValue?:
    | LearningObjectTypeEnum4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: LearningObjectTypeEnumValueOpen | null | undefined;
};

/** @internal */
export const LearningObjectTypeEnum4$inboundSchema: z.ZodType<
  LearningObjectTypeEnum4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type LearningObjectTypeEnum4$Outbound = {};

/** @internal */
export const LearningObjectTypeEnum4$outboundSchema: z.ZodType<
  LearningObjectTypeEnum4$Outbound,
  z.ZodTypeDef,
  LearningObjectTypeEnum4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LearningObjectTypeEnum4$ {
  /** @deprecated use `LearningObjectTypeEnum4$inboundSchema` instead. */
  export const inboundSchema = LearningObjectTypeEnum4$inboundSchema;
  /** @deprecated use `LearningObjectTypeEnum4$outboundSchema` instead. */
  export const outboundSchema = LearningObjectTypeEnum4$outboundSchema;
  /** @deprecated use `LearningObjectTypeEnum4$Outbound` instead. */
  export type Outbound = LearningObjectTypeEnum4$Outbound;
}

/** @internal */
export const LearningObjectTypeEnumSourceValue$inboundSchema: z.ZodType<
  LearningObjectTypeEnumSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => LearningObjectTypeEnum4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type LearningObjectTypeEnumSourceValue$Outbound =
  | LearningObjectTypeEnum4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const LearningObjectTypeEnumSourceValue$outboundSchema: z.ZodType<
  LearningObjectTypeEnumSourceValue$Outbound,
  z.ZodTypeDef,
  LearningObjectTypeEnumSourceValue
> = z.union([
  z.lazy(() => LearningObjectTypeEnum4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LearningObjectTypeEnumSourceValue$ {
  /** @deprecated use `LearningObjectTypeEnumSourceValue$inboundSchema` instead. */
  export const inboundSchema = LearningObjectTypeEnumSourceValue$inboundSchema;
  /** @deprecated use `LearningObjectTypeEnumSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    LearningObjectTypeEnumSourceValue$outboundSchema;
  /** @deprecated use `LearningObjectTypeEnumSourceValue$Outbound` instead. */
  export type Outbound = LearningObjectTypeEnumSourceValue$Outbound;
}

/** @internal */
export const LearningObjectTypeEnumValue$inboundSchema: z.ZodType<
  LearningObjectTypeEnumValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(LearningObjectTypeEnumValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const LearningObjectTypeEnumValue$outboundSchema: z.ZodType<
  LearningObjectTypeEnumValueOpen,
  z.ZodTypeDef,
  LearningObjectTypeEnumValueOpen
> = z.union([
  z.nativeEnum(LearningObjectTypeEnumValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LearningObjectTypeEnumValue$ {
  /** @deprecated use `LearningObjectTypeEnumValue$inboundSchema` instead. */
  export const inboundSchema = LearningObjectTypeEnumValue$inboundSchema;
  /** @deprecated use `LearningObjectTypeEnumValue$outboundSchema` instead. */
  export const outboundSchema = LearningObjectTypeEnumValue$outboundSchema;
}

/** @internal */
export const LearningObjectTypeEnum$inboundSchema: z.ZodType<
  LearningObjectTypeEnum,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => LearningObjectTypeEnum4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(LearningObjectTypeEnumValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type LearningObjectTypeEnum$Outbound = {
  source_value?:
    | LearningObjectTypeEnum4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const LearningObjectTypeEnum$outboundSchema: z.ZodType<
  LearningObjectTypeEnum$Outbound,
  z.ZodTypeDef,
  LearningObjectTypeEnum
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => LearningObjectTypeEnum4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(LearningObjectTypeEnumValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LearningObjectTypeEnum$ {
  /** @deprecated use `LearningObjectTypeEnum$inboundSchema` instead. */
  export const inboundSchema = LearningObjectTypeEnum$inboundSchema;
  /** @deprecated use `LearningObjectTypeEnum$outboundSchema` instead. */
  export const outboundSchema = LearningObjectTypeEnum$outboundSchema;
  /** @deprecated use `LearningObjectTypeEnum$Outbound` instead. */
  export type Outbound = LearningObjectTypeEnum$Outbound;
}
