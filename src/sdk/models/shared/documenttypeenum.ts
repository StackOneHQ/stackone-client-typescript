/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum DocumentTypeEnumValue {
    Visa = "visa",
    Passport = "passport",
    DriverLicense = "driver_license",
    Other = "other",
    UnmappedValue = "unmapped_value",
}

export type DocumentTypeEnum = {
    sourceValue: string;
    value: DocumentTypeEnumValue;
};

/** @internal */
export const DocumentTypeEnumValue$ = z.nativeEnum(DocumentTypeEnumValue);

/** @internal */
export namespace DocumentTypeEnum$ {
    export type Inbound = {
        source_value: string;
        value: DocumentTypeEnumValue;
    };

    export const inboundSchema: z.ZodType<DocumentTypeEnum, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z.string(),
            value: DocumentTypeEnumValue$,
        })
        .transform((v) => {
            return {
                sourceValue: v.source_value,
                value: v.value,
            };
        });

    export type Outbound = {
        source_value: string;
        value: DocumentTypeEnumValue;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DocumentTypeEnum> = z
        .object({
            sourceValue: z.string(),
            value: DocumentTypeEnumValue$,
        })
        .transform((v) => {
            return {
                source_value: v.sourceValue,
                value: v.value,
            };
        });
}
