/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SchemeBasic = {
  password: string;
  username: string;
};

/** @internal */
export const SchemeBasic$inboundSchema: z.ZodType<
  SchemeBasic,
  z.ZodTypeDef,
  unknown
> = z.object({
  password: z.string(),
  username: z.string(),
});

/** @internal */
export type SchemeBasic$Outbound = {
  password: string;
  username: string;
};

/** @internal */
export const SchemeBasic$outboundSchema: z.ZodType<
  SchemeBasic$Outbound,
  z.ZodTypeDef,
  SchemeBasic
> = z.object({
  password: z.string(),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemeBasic$ {
  /** @deprecated use `SchemeBasic$inboundSchema` instead. */
  export const inboundSchema = SchemeBasic$inboundSchema;
  /** @deprecated use `SchemeBasic$outboundSchema` instead. */
  export const outboundSchema = SchemeBasic$outboundSchema;
  /** @deprecated use `SchemeBasic$Outbound` instead. */
  export type Outbound = SchemeBasic$Outbound;
}

export function schemeBasicToJSON(schemeBasic: SchemeBasic): string {
  return JSON.stringify(SchemeBasic$outboundSchema.parse(schemeBasic));
}

export function schemeBasicFromJSON(
  jsonString: string,
): SafeParseResult<SchemeBasic, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SchemeBasic$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SchemeBasic' from JSON`,
  );
}
