/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Content = {
    html?: string | null | undefined;
    plain?: string | null | undefined;
};

/** @internal */
export namespace Content$ {
    export type Inbound = {
        html?: string | null | undefined;
        plain?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<Content, z.ZodTypeDef, Inbound> = z
        .object({
            html: z.nullable(z.string()).optional(),
            plain: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.html === undefined ? null : { html: v.html }),
                ...(v.plain === undefined ? null : { plain: v.plain }),
            };
        });

    export type Outbound = {
        html?: string | null | undefined;
        plain?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Content> = z
        .object({
            html: z.nullable(z.string()).optional(),
            plain: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.html === undefined ? null : { html: v.html }),
                ...(v.plain === undefined ? null : { plain: v.plain }),
            };
        });
}
