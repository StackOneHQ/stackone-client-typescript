/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types";
import { Categories, Categories$ } from "./categories";
import { ContentLanguageEnum, ContentLanguageEnum$ } from "./contentlanguageenum";
import * as z from "zod";

export type Content4 = {};

export type ContentSourceValue = Content4 | string | number | boolean;

export enum ContentValue {
    Video = "video",
    Quiz = "quiz",
    Document = "document",
}
export type ContentValueOpen = OpenEnum<typeof ContentValue>;

/**
 * The type of content
 */
export type ContentContentType = {
    sourceValue?: Content4 | string | number | boolean | null | undefined;
    value?: ContentValueOpen | null | undefined;
};

export type Content = {
    /**
     * Whether the content is active and available for users.
     */
    active?: boolean | null | undefined;
    /**
     * The categories associated with this content
     */
    categories?: Array<Categories> | null | undefined;
    /**
     * The type of content
     */
    contentType?: ContentContentType | null | undefined;
    /**
     * The external URL of the content
     */
    contentUrl?: string | null | undefined;
    /**
     * The parent ID/IDs associated with this content
     */
    courseIds?: Array<string> | null | undefined;
    /**
     * The URL of the thumbnail image associated with the content.
     */
    coverUrl?: string | null | undefined;
    /**
     * The description of the content
     */
    description?: string | null | undefined;
    /**
     * The duration of the content following the ISO8601 standard. If duration_unit is applicable we will derive this from the smallest unit given in the duration string
     */
    duration?: string | null | undefined;
    /**
     * The external ID associated with this content
     */
    externalId?: string | null | undefined;
    /**
     * The ID associated with this content
     */
    id?: string | null | undefined;
    /**
     * The languages associated with this content
     */
    languages?: Array<ContentLanguageEnum> | null | undefined;
    /**
     * The order of the individual content within a content grouping. This is not applicable for pushing individual content.
     */
    order?: number | null | undefined;
    /**
     * Provider's unique identifier of the parent course ID associated with this content
     */
    remoteCourseIds?: Array<string> | null | undefined;
    /**
     * Provider's unique identifier of the external ID associated with this content
     */
    remoteExternalId?: string | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    /**
     * The title of the content
     */
    title?: string | null | undefined;
};

/** @internal */
export namespace Content4$ {
    export const inboundSchema: z.ZodType<Content4, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Content4> = z.object({});
}

/** @internal */
export namespace ContentSourceValue$ {
    export const inboundSchema: z.ZodType<ContentSourceValue, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => Content4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export type Outbound = Content4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContentSourceValue> = z.union([
        z.lazy(() => Content4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace ContentValue$ {
    export const inboundSchema: z.ZodType<ContentValueOpen, z.ZodTypeDef, unknown> = z.union([
        z.nativeEnum(ContentValue),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema = z.union([
        z.nativeEnum(ContentValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace ContentContentType$ {
    export const inboundSchema: z.ZodType<ContentContentType, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => Content4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(ContentValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?: Content4$.Outbound | string | number | boolean | null | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContentContentType> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => Content4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(ContentValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}

/** @internal */
export namespace Content$ {
    export const inboundSchema: z.ZodType<Content, z.ZodTypeDef, unknown> = z
        .object({
            active: z.nullable(z.boolean()).optional(),
            categories: z.nullable(z.array(Categories$.inboundSchema)).optional(),
            content_type: z.nullable(z.lazy(() => ContentContentType$.inboundSchema)).optional(),
            content_url: z.nullable(z.string()).optional(),
            course_ids: z.nullable(z.array(z.string())).optional(),
            cover_url: z.nullable(z.string()).optional(),
            description: z.nullable(z.string()).optional(),
            duration: z.nullable(z.string()).optional(),
            external_id: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            languages: z.nullable(z.array(ContentLanguageEnum$.inboundSchema)).optional(),
            order: z.nullable(z.number()).optional(),
            remote_course_ids: z.nullable(z.array(z.string())).optional(),
            remote_external_id: z.nullable(z.string()).optional(),
            remote_id: z.nullable(z.string()).optional(),
            title: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                content_type: "contentType",
                content_url: "contentUrl",
                course_ids: "courseIds",
                cover_url: "coverUrl",
                external_id: "externalId",
                remote_course_ids: "remoteCourseIds",
                remote_external_id: "remoteExternalId",
                remote_id: "remoteId",
            });
        });

    export type Outbound = {
        active?: boolean | null | undefined;
        categories?: Array<Categories$.Outbound> | null | undefined;
        content_type?: ContentContentType$.Outbound | null | undefined;
        content_url?: string | null | undefined;
        course_ids?: Array<string> | null | undefined;
        cover_url?: string | null | undefined;
        description?: string | null | undefined;
        duration?: string | null | undefined;
        external_id?: string | null | undefined;
        id?: string | null | undefined;
        languages?: Array<ContentLanguageEnum$.Outbound> | null | undefined;
        order?: number | null | undefined;
        remote_course_ids?: Array<string> | null | undefined;
        remote_external_id?: string | null | undefined;
        remote_id?: string | null | undefined;
        title?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Content> = z
        .object({
            active: z.nullable(z.boolean()).optional(),
            categories: z.nullable(z.array(Categories$.outboundSchema)).optional(),
            contentType: z.nullable(z.lazy(() => ContentContentType$.outboundSchema)).optional(),
            contentUrl: z.nullable(z.string()).optional(),
            courseIds: z.nullable(z.array(z.string())).optional(),
            coverUrl: z.nullable(z.string()).optional(),
            description: z.nullable(z.string()).optional(),
            duration: z.nullable(z.string()).optional(),
            externalId: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            languages: z.nullable(z.array(ContentLanguageEnum$.outboundSchema)).optional(),
            order: z.nullable(z.number()).optional(),
            remoteCourseIds: z.nullable(z.array(z.string())).optional(),
            remoteExternalId: z.nullable(z.string()).optional(),
            remoteId: z.nullable(z.string()).optional(),
            title: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "content_type",
                contentUrl: "content_url",
                courseIds: "course_ids",
                coverUrl: "cover_url",
                externalId: "external_id",
                remoteCourseIds: "remote_course_ids",
                remoteExternalId: "remote_external_id",
                remoteId: "remote_id",
            });
        });
}
