/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import {
  Category,
  Category$inboundSchema,
  Category$Outbound,
  Category$outboundSchema,
} from "./category.js";
import {
  LanguageEnum,
  LanguageEnum$inboundSchema,
  LanguageEnum$Outbound,
  LanguageEnum$outboundSchema,
} from "./languageenum.js";
import {
  Skills,
  Skills$inboundSchema,
  Skills$Outbound,
  Skills$outboundSchema,
} from "./skills.js";

export type Content4 = {};

export type ContentSourceValue =
  | Content4
  | string
  | number
  | boolean
  | Array<any>;

export enum ContentValue {
  Automatic = "automatic",
  Browser = "browser",
}
export type ContentValueOpen = OpenEnum<typeof ContentValue>;

/**
 * The content launch method associated with this content
 */
export type ContentLaunchMethod = {
  sourceValue?:
    | Content4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: ContentValueOpen | null | undefined;
};

export type ContentSchemas4 = {};

export type ContentSchemasSourceValue =
  | ContentSchemas4
  | string
  | number
  | boolean
  | Array<any>;

export enum ContentSchemasValue {
  Video = "video",
  Quiz = "quiz",
  Document = "document",
}
export type ContentSchemasValueOpen = OpenEnum<typeof ContentSchemasValue>;

/**
 * The type of content
 */
export type ContentContentType = {
  sourceValue?:
    | ContentSchemas4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: ContentSchemasValueOpen | null | undefined;
};

export type Content = {
  /**
   * Whether the content is active and available for users.
   */
  active?: boolean | null | undefined;
  /**
   * The categories associated with this content
   */
  categories?: Array<Category> | null | undefined;
  /**
   * The content launch method associated with this content
   */
  contentLaunchMethod?: ContentLaunchMethod | null | undefined;
  /**
   * The type of content
   */
  contentType?: ContentContentType | null | undefined;
  /**
   * The external URL of the content
   */
  contentUrl?: string | null | undefined;
  /**
   * The parent ID/IDs associated with this content
   */
  courseIds?: Array<string> | null | undefined;
  /**
   * The URL of the thumbnail image associated with the content.
   */
  coverUrl?: string | null | undefined;
  /**
   * The description of the content
   */
  description?: string | null | undefined;
  /**
   * The duration of the content following the ISO8601 standard. If duration_unit is applicable we will derive this from the smallest unit given in the duration string or the minimum unit accepted by the provider.
   */
  duration?: string | null | undefined;
  /**
   * The external ID associated with this content
   */
  externalReference?: string | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The languages associated with this content
   */
  languages?: Array<LanguageEnum> | null | undefined;
  /**
   * The order of the individual content within a content grouping. This is not applicable for pushing individual content.
   */
  order?: number | null | undefined;
  /**
   * Provider's unique identifier of the parent course ID associated with this content
   */
  remoteCourseIds?: Array<string> | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * The skills associated with this course
   */
  skills?: Array<Skills> | null | undefined;
  /**
   * The title of the content
   */
  title?: string | null | undefined;
  /**
   * Custom Unified Fields configured in your StackOne project
   */
  unifiedCustomFields?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const Content4$inboundSchema: z.ZodType<
  Content4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Content4$Outbound = {};

/** @internal */
export const Content4$outboundSchema: z.ZodType<
  Content4$Outbound,
  z.ZodTypeDef,
  Content4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Content4$ {
  /** @deprecated use `Content4$inboundSchema` instead. */
  export const inboundSchema = Content4$inboundSchema;
  /** @deprecated use `Content4$outboundSchema` instead. */
  export const outboundSchema = Content4$outboundSchema;
  /** @deprecated use `Content4$Outbound` instead. */
  export type Outbound = Content4$Outbound;
}

/** @internal */
export const ContentSourceValue$inboundSchema: z.ZodType<
  ContentSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Content4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type ContentSourceValue$Outbound =
  | Content4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const ContentSourceValue$outboundSchema: z.ZodType<
  ContentSourceValue$Outbound,
  z.ZodTypeDef,
  ContentSourceValue
> = z.union([
  z.lazy(() => Content4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentSourceValue$ {
  /** @deprecated use `ContentSourceValue$inboundSchema` instead. */
  export const inboundSchema = ContentSourceValue$inboundSchema;
  /** @deprecated use `ContentSourceValue$outboundSchema` instead. */
  export const outboundSchema = ContentSourceValue$outboundSchema;
  /** @deprecated use `ContentSourceValue$Outbound` instead. */
  export type Outbound = ContentSourceValue$Outbound;
}

/** @internal */
export const ContentValue$inboundSchema: z.ZodType<
  ContentValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ContentValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ContentValue$outboundSchema: z.ZodType<
  ContentValueOpen,
  z.ZodTypeDef,
  ContentValueOpen
> = z.union([
  z.nativeEnum(ContentValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentValue$ {
  /** @deprecated use `ContentValue$inboundSchema` instead. */
  export const inboundSchema = ContentValue$inboundSchema;
  /** @deprecated use `ContentValue$outboundSchema` instead. */
  export const outboundSchema = ContentValue$outboundSchema;
}

/** @internal */
export const ContentLaunchMethod$inboundSchema: z.ZodType<
  ContentLaunchMethod,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => Content4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(ContentValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type ContentLaunchMethod$Outbound = {
  source_value?:
    | Content4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const ContentLaunchMethod$outboundSchema: z.ZodType<
  ContentLaunchMethod$Outbound,
  z.ZodTypeDef,
  ContentLaunchMethod
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => Content4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(ContentValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentLaunchMethod$ {
  /** @deprecated use `ContentLaunchMethod$inboundSchema` instead. */
  export const inboundSchema = ContentLaunchMethod$inboundSchema;
  /** @deprecated use `ContentLaunchMethod$outboundSchema` instead. */
  export const outboundSchema = ContentLaunchMethod$outboundSchema;
  /** @deprecated use `ContentLaunchMethod$Outbound` instead. */
  export type Outbound = ContentLaunchMethod$Outbound;
}

/** @internal */
export const ContentSchemas4$inboundSchema: z.ZodType<
  ContentSchemas4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ContentSchemas4$Outbound = {};

/** @internal */
export const ContentSchemas4$outboundSchema: z.ZodType<
  ContentSchemas4$Outbound,
  z.ZodTypeDef,
  ContentSchemas4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentSchemas4$ {
  /** @deprecated use `ContentSchemas4$inboundSchema` instead. */
  export const inboundSchema = ContentSchemas4$inboundSchema;
  /** @deprecated use `ContentSchemas4$outboundSchema` instead. */
  export const outboundSchema = ContentSchemas4$outboundSchema;
  /** @deprecated use `ContentSchemas4$Outbound` instead. */
  export type Outbound = ContentSchemas4$Outbound;
}

/** @internal */
export const ContentSchemasSourceValue$inboundSchema: z.ZodType<
  ContentSchemasSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ContentSchemas4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type ContentSchemasSourceValue$Outbound =
  | ContentSchemas4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const ContentSchemasSourceValue$outboundSchema: z.ZodType<
  ContentSchemasSourceValue$Outbound,
  z.ZodTypeDef,
  ContentSchemasSourceValue
> = z.union([
  z.lazy(() => ContentSchemas4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentSchemasSourceValue$ {
  /** @deprecated use `ContentSchemasSourceValue$inboundSchema` instead. */
  export const inboundSchema = ContentSchemasSourceValue$inboundSchema;
  /** @deprecated use `ContentSchemasSourceValue$outboundSchema` instead. */
  export const outboundSchema = ContentSchemasSourceValue$outboundSchema;
  /** @deprecated use `ContentSchemasSourceValue$Outbound` instead. */
  export type Outbound = ContentSchemasSourceValue$Outbound;
}

/** @internal */
export const ContentSchemasValue$inboundSchema: z.ZodType<
  ContentSchemasValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ContentSchemasValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ContentSchemasValue$outboundSchema: z.ZodType<
  ContentSchemasValueOpen,
  z.ZodTypeDef,
  ContentSchemasValueOpen
> = z.union([
  z.nativeEnum(ContentSchemasValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentSchemasValue$ {
  /** @deprecated use `ContentSchemasValue$inboundSchema` instead. */
  export const inboundSchema = ContentSchemasValue$inboundSchema;
  /** @deprecated use `ContentSchemasValue$outboundSchema` instead. */
  export const outboundSchema = ContentSchemasValue$outboundSchema;
}

/** @internal */
export const ContentContentType$inboundSchema: z.ZodType<
  ContentContentType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => ContentSchemas4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(ContentSchemasValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type ContentContentType$Outbound = {
  source_value?:
    | ContentSchemas4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const ContentContentType$outboundSchema: z.ZodType<
  ContentContentType$Outbound,
  z.ZodTypeDef,
  ContentContentType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => ContentSchemas4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(ContentSchemasValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentContentType$ {
  /** @deprecated use `ContentContentType$inboundSchema` instead. */
  export const inboundSchema = ContentContentType$inboundSchema;
  /** @deprecated use `ContentContentType$outboundSchema` instead. */
  export const outboundSchema = ContentContentType$outboundSchema;
  /** @deprecated use `ContentContentType$Outbound` instead. */
  export type Outbound = ContentContentType$Outbound;
}

/** @internal */
export const Content$inboundSchema: z.ZodType<Content, z.ZodTypeDef, unknown> =
  z.object({
    active: z.nullable(z.boolean()).optional(),
    categories: z.nullable(z.array(Category$inboundSchema)).optional(),
    content_launch_method: z.nullable(
      z.lazy(() => ContentLaunchMethod$inboundSchema),
    ).optional(),
    content_type: z.nullable(z.lazy(() => ContentContentType$inboundSchema))
      .optional(),
    content_url: z.nullable(z.string()).optional(),
    course_ids: z.nullable(z.array(z.string())).optional(),
    cover_url: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    duration: z.nullable(z.string()).optional(),
    external_reference: z.nullable(z.string()).optional(),
    id: z.nullable(z.string()).optional(),
    languages: z.nullable(z.array(LanguageEnum$inboundSchema)).optional(),
    order: z.nullable(z.number()).optional(),
    remote_course_ids: z.nullable(z.array(z.string())).optional(),
    remote_id: z.nullable(z.string()).optional(),
    skills: z.nullable(z.array(Skills$inboundSchema)).optional(),
    title: z.nullable(z.string()).optional(),
    unified_custom_fields: z.nullable(z.record(z.any())).optional(),
  }).transform((v) => {
    return remap$(v, {
      "content_launch_method": "contentLaunchMethod",
      "content_type": "contentType",
      "content_url": "contentUrl",
      "course_ids": "courseIds",
      "cover_url": "coverUrl",
      "external_reference": "externalReference",
      "remote_course_ids": "remoteCourseIds",
      "remote_id": "remoteId",
      "unified_custom_fields": "unifiedCustomFields",
    });
  });

/** @internal */
export type Content$Outbound = {
  active?: boolean | null | undefined;
  categories?: Array<Category$Outbound> | null | undefined;
  content_launch_method?: ContentLaunchMethod$Outbound | null | undefined;
  content_type?: ContentContentType$Outbound | null | undefined;
  content_url?: string | null | undefined;
  course_ids?: Array<string> | null | undefined;
  cover_url?: string | null | undefined;
  description?: string | null | undefined;
  duration?: string | null | undefined;
  external_reference?: string | null | undefined;
  id?: string | null | undefined;
  languages?: Array<LanguageEnum$Outbound> | null | undefined;
  order?: number | null | undefined;
  remote_course_ids?: Array<string> | null | undefined;
  remote_id?: string | null | undefined;
  skills?: Array<Skills$Outbound> | null | undefined;
  title?: string | null | undefined;
  unified_custom_fields?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const Content$outboundSchema: z.ZodType<
  Content$Outbound,
  z.ZodTypeDef,
  Content
> = z.object({
  active: z.nullable(z.boolean()).optional(),
  categories: z.nullable(z.array(Category$outboundSchema)).optional(),
  contentLaunchMethod: z.nullable(
    z.lazy(() => ContentLaunchMethod$outboundSchema),
  ).optional(),
  contentType: z.nullable(z.lazy(() => ContentContentType$outboundSchema))
    .optional(),
  contentUrl: z.nullable(z.string()).optional(),
  courseIds: z.nullable(z.array(z.string())).optional(),
  coverUrl: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  duration: z.nullable(z.string()).optional(),
  externalReference: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  languages: z.nullable(z.array(LanguageEnum$outboundSchema)).optional(),
  order: z.nullable(z.number()).optional(),
  remoteCourseIds: z.nullable(z.array(z.string())).optional(),
  remoteId: z.nullable(z.string()).optional(),
  skills: z.nullable(z.array(Skills$outboundSchema)).optional(),
  title: z.nullable(z.string()).optional(),
  unifiedCustomFields: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    contentLaunchMethod: "content_launch_method",
    contentType: "content_type",
    contentUrl: "content_url",
    courseIds: "course_ids",
    coverUrl: "cover_url",
    externalReference: "external_reference",
    remoteCourseIds: "remote_course_ids",
    remoteId: "remote_id",
    unifiedCustomFields: "unified_custom_fields",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Content$ {
  /** @deprecated use `Content$inboundSchema` instead. */
  export const inboundSchema = Content$inboundSchema;
  /** @deprecated use `Content$outboundSchema` instead. */
  export const outboundSchema = Content$outboundSchema;
  /** @deprecated use `Content$Outbound` instead. */
  export type Outbound = Content$Outbound;
}
