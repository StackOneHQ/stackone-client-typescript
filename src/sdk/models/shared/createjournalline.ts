/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateJournalLine = {
  /**
   * ID of the ledger account this line references
   */
  accountId?: string | null | undefined;
  /**
   * Amount of the journal line in minor units, e.g. 10010 for 100.10 USD. Positive for debit, negative for credit
   */
  amount?: number | null | undefined;
  /**
   * Description of the journal line
   */
  description?: string | null | undefined;
  /**
   * Tax amount of the line in minor units, e.g. 10010 for 100.10 USD
   */
  taxAmount?: number | null | undefined;
  /**
   * ID of the tax rate applied
   */
  taxRateId?: string | null | undefined;
};

/** @internal */
export const CreateJournalLine$inboundSchema: z.ZodType<
  CreateJournalLine,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.nullable(z.string()).optional(),
  amount: z.nullable(z.number()).optional(),
  description: z.nullable(z.string()).optional(),
  tax_amount: z.nullable(z.number()).optional(),
  tax_rate_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "tax_amount": "taxAmount",
    "tax_rate_id": "taxRateId",
  });
});

/** @internal */
export type CreateJournalLine$Outbound = {
  account_id?: string | null | undefined;
  amount?: number | null | undefined;
  description?: string | null | undefined;
  tax_amount?: number | null | undefined;
  tax_rate_id?: string | null | undefined;
};

/** @internal */
export const CreateJournalLine$outboundSchema: z.ZodType<
  CreateJournalLine$Outbound,
  z.ZodTypeDef,
  CreateJournalLine
> = z.object({
  accountId: z.nullable(z.string()).optional(),
  amount: z.nullable(z.number()).optional(),
  description: z.nullable(z.string()).optional(),
  taxAmount: z.nullable(z.number()).optional(),
  taxRateId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    taxAmount: "tax_amount",
    taxRateId: "tax_rate_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateJournalLine$ {
  /** @deprecated use `CreateJournalLine$inboundSchema` instead. */
  export const inboundSchema = CreateJournalLine$inboundSchema;
  /** @deprecated use `CreateJournalLine$outboundSchema` instead. */
  export const outboundSchema = CreateJournalLine$outboundSchema;
  /** @deprecated use `CreateJournalLine$Outbound` instead. */
  export type Outbound = CreateJournalLine$Outbound;
}

export function createJournalLineToJSON(
  createJournalLine: CreateJournalLine,
): string {
  return JSON.stringify(
    CreateJournalLine$outboundSchema.parse(createJournalLine),
  );
}

export function createJournalLineFromJSON(
  jsonString: string,
): SafeParseResult<CreateJournalLine, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateJournalLine$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateJournalLine' from JSON`,
  );
}
