/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RawResponse,
  RawResponse$inboundSchema,
  RawResponse$Outbound,
  RawResponse$outboundSchema,
} from "./rawresponse.js";
import {
  TicketingComponent,
  TicketingComponent$inboundSchema,
  TicketingComponent$Outbound,
  TicketingComponent$outboundSchema,
} from "./ticketingcomponent.js";

export type TicketingComponentsPaginated = {
  data?: Array<TicketingComponent> | null | undefined;
  next?: string | null | undefined;
  raw?: Array<RawResponse> | null | undefined;
};

/** @internal */
export const TicketingComponentsPaginated$inboundSchema: z.ZodType<
  TicketingComponentsPaginated,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(z.array(TicketingComponent$inboundSchema)).optional(),
  next: z.nullable(z.string()).optional(),
  raw: z.nullable(z.array(RawResponse$inboundSchema)).optional(),
});

/** @internal */
export type TicketingComponentsPaginated$Outbound = {
  data?: Array<TicketingComponent$Outbound> | null | undefined;
  next?: string | null | undefined;
  raw?: Array<RawResponse$Outbound> | null | undefined;
};

/** @internal */
export const TicketingComponentsPaginated$outboundSchema: z.ZodType<
  TicketingComponentsPaginated$Outbound,
  z.ZodTypeDef,
  TicketingComponentsPaginated
> = z.object({
  data: z.nullable(z.array(TicketingComponent$outboundSchema)).optional(),
  next: z.nullable(z.string()).optional(),
  raw: z.nullable(z.array(RawResponse$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingComponentsPaginated$ {
  /** @deprecated use `TicketingComponentsPaginated$inboundSchema` instead. */
  export const inboundSchema = TicketingComponentsPaginated$inboundSchema;
  /** @deprecated use `TicketingComponentsPaginated$outboundSchema` instead. */
  export const outboundSchema = TicketingComponentsPaginated$outboundSchema;
  /** @deprecated use `TicketingComponentsPaginated$Outbound` instead. */
  export type Outbound = TicketingComponentsPaginated$Outbound;
}

export function ticketingComponentsPaginatedToJSON(
  ticketingComponentsPaginated: TicketingComponentsPaginated,
): string {
  return JSON.stringify(
    TicketingComponentsPaginated$outboundSchema.parse(
      ticketingComponentsPaginated,
    ),
  );
}

export function ticketingComponentsPaginatedFromJSON(
  jsonString: string,
): SafeParseResult<TicketingComponentsPaginated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingComponentsPaginated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingComponentsPaginated' from JSON`,
  );
}
