/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HRISLocation4 = {};

export type HRISLocationSourceValue =
  | HRISLocation4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The ISO3166-1 Alpha2 Code of the Country
 */
export enum HRISLocationValue {
  Af = "AF",
  Al = "AL",
  Dz = "DZ",
  As = "AS",
  Ad = "AD",
  Ao = "AO",
  Ai = "AI",
  Aq = "AQ",
  Ag = "AG",
  Ar = "AR",
  Am = "AM",
  Aw = "AW",
  Au = "AU",
  At = "AT",
  Az = "AZ",
  Bs = "BS",
  Bh = "BH",
  Bd = "BD",
  Bb = "BB",
  By = "BY",
  Be = "BE",
  Bz = "BZ",
  Bj = "BJ",
  Bm = "BM",
  Bt = "BT",
  Bo = "BO",
  Bq = "BQ",
  Ba = "BA",
  Bw = "BW",
  Bv = "BV",
  Br = "BR",
  Io = "IO",
  Bn = "BN",
  Bg = "BG",
  Bf = "BF",
  Bi = "BI",
  Kh = "KH",
  Cm = "CM",
  Ca = "CA",
  Cv = "CV",
  Ky = "KY",
  Cf = "CF",
  Td = "TD",
  Cl = "CL",
  Cn = "CN",
  Cx = "CX",
  Cc = "CC",
  Co = "CO",
  Km = "KM",
  Cg = "CG",
  Cd = "CD",
  Ck = "CK",
  Cr = "CR",
  Hr = "HR",
  Cu = "CU",
  Cw = "CW",
  Cy = "CY",
  Cz = "CZ",
  Ci = "CI",
  Dk = "DK",
  Dj = "DJ",
  Dm = "DM",
  Do = "DO",
  Ec = "EC",
  Eg = "EG",
  Sv = "SV",
  Gq = "GQ",
  Er = "ER",
  Ee = "EE",
  Et = "ET",
  Fk = "FK",
  Fo = "FO",
  Fj = "FJ",
  Fi = "FI",
  Fr = "FR",
  Gf = "GF",
  Pf = "PF",
  Tf = "TF",
  Ga = "GA",
  Gm = "GM",
  Ge = "GE",
  De = "DE",
  Gh = "GH",
  Gi = "GI",
  Gr = "GR",
  Gl = "GL",
  Gd = "GD",
  Gp = "GP",
  Gu = "GU",
  Gt = "GT",
  Gg = "GG",
  Gn = "GN",
  Gw = "GW",
  Gy = "GY",
  Ht = "HT",
  Hm = "HM",
  Va = "VA",
  Hn = "HN",
  Hk = "HK",
  Hu = "HU",
  Is = "IS",
  In = "IN",
  Id = "ID",
  Ir = "IR",
  Iq = "IQ",
  Ie = "IE",
  Im = "IM",
  Il = "IL",
  It = "IT",
  Jm = "JM",
  Jp = "JP",
  Je = "JE",
  Jo = "JO",
  Kz = "KZ",
  Ke = "KE",
  Ki = "KI",
  Kp = "KP",
  Kr = "KR",
  Kw = "KW",
  Kg = "KG",
  La = "LA",
  Lv = "LV",
  Lb = "LB",
  Ls = "LS",
  Lr = "LR",
  Ly = "LY",
  Li = "LI",
  Lt = "LT",
  Lu = "LU",
  Mo = "MO",
  Mk = "MK",
  Mg = "MG",
  Mw = "MW",
  My = "MY",
  Mv = "MV",
  Ml = "ML",
  Mt = "MT",
  Mh = "MH",
  Mq = "MQ",
  Mr = "MR",
  Mu = "MU",
  Yt = "YT",
  Mx = "MX",
  Fm = "FM",
  Md = "MD",
  Mc = "MC",
  Mn = "MN",
  Me = "ME",
  Ms = "MS",
  Ma = "MA",
  Mz = "MZ",
  Mm = "MM",
  Na = "NA",
  Nr = "NR",
  Np = "NP",
  Nl = "NL",
  Nc = "NC",
  Nz = "NZ",
  Ni = "NI",
  Ne = "NE",
  Ng = "NG",
  Nu = "NU",
  Nf = "NF",
  Mp = "MP",
  No = "NO",
  Om = "OM",
  Pk = "PK",
  Pw = "PW",
  Ps = "PS",
  Pa = "PA",
  Pg = "PG",
  Py = "PY",
  Pe = "PE",
  Ph = "PH",
  Pn = "PN",
  Pl = "PL",
  Pt = "PT",
  Pr = "PR",
  Qa = "QA",
  Ro = "RO",
  Ru = "RU",
  Rw = "RW",
  Re = "RE",
  Bl = "BL",
  Sh = "SH",
  Kn = "KN",
  Lc = "LC",
  Mf = "MF",
  Pm = "PM",
  Vc = "VC",
  Ws = "WS",
  Sm = "SM",
  St = "ST",
  Sa = "SA",
  Sn = "SN",
  Rs = "RS",
  Sc = "SC",
  Sl = "SL",
  Sg = "SG",
  Sx = "SX",
  Sk = "SK",
  Si = "SI",
  Sb = "SB",
  So = "SO",
  Za = "ZA",
  Gs = "GS",
  Ss = "SS",
  Es = "ES",
  Lk = "LK",
  Sd = "SD",
  Sr = "SR",
  Sj = "SJ",
  Sz = "SZ",
  Se = "SE",
  Ch = "CH",
  Sy = "SY",
  Tw = "TW",
  Tj = "TJ",
  Tz = "TZ",
  Th = "TH",
  Tl = "TL",
  Tg = "TG",
  Tk = "TK",
  To = "TO",
  Tt = "TT",
  Tn = "TN",
  Tr = "TR",
  Tm = "TM",
  Tc = "TC",
  Tv = "TV",
  Ug = "UG",
  Ua = "UA",
  Ae = "AE",
  Gb = "GB",
  Us = "US",
  Um = "UM",
  Uy = "UY",
  Uz = "UZ",
  Vu = "VU",
  Ve = "VE",
  Vn = "VN",
  Vg = "VG",
  Vi = "VI",
  Wf = "WF",
  Eh = "EH",
  Ye = "YE",
  Zm = "ZM",
  Zw = "ZW",
  UnmappedValue = "unmapped_value",
}
/**
 * The ISO3166-1 Alpha2 Code of the Country
 */
export type HRISLocationValueOpen = OpenEnum<typeof HRISLocationValue>;

/**
 * The country code
 */
export type HRISLocationCountry = {
  sourceValue?:
    | HRISLocation4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The ISO3166-1 Alpha2 Code of the Country
   */
  value?: HRISLocationValueOpen | null | undefined;
};

export type HRISLocationSchemas4 = {};

/**
 * The source value of the location type.
 */
export type HRISLocationSchemasSourceValue =
  | HRISLocationSchemas4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The type of the location.
 */
export enum HRISLocationSchemasValue {
  Home = "home",
  Work = "work",
  UnmappedValue = "unmapped_value",
}
/**
 * The type of the location.
 */
export type HRISLocationSchemasValueOpen = OpenEnum<
  typeof HRISLocationSchemasValue
>;

/**
 * The location type
 */
export type HRISLocationLocationType = {
  /**
   * The source value of the location type.
   */
  sourceValue?:
    | HRISLocationSchemas4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The type of the location.
   */
  value?: HRISLocationSchemasValueOpen | null | undefined;
};

export type HRISLocation = {
  /**
   * The city where the location is situated
   */
  city?: string | null | undefined;
  /**
   * The country code
   */
  country?: HRISLocationCountry | null | undefined;
  /**
   * The created_at date
   */
  createdAt?: Date | null | undefined;
  /**
   * The employee ID
   */
  employeeId?: string | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The location type
   */
  locationType?: HRISLocationLocationType | null | undefined;
  /**
   * The name of the location
   */
  name?: string | null | undefined;
  /**
   * The phone number of the location
   */
  phoneNumber?: string | null | undefined;
  /**
   * Provider's unique identifier of the employee
   */
  remoteEmployeeId?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * The state where the location is situated
   */
  state?: string | null | undefined;
  /**
   * The first line of the address
   */
  street1?: string | null | undefined;
  /**
   * The second line of the address
   */
  street2?: string | null | undefined;
  /**
   * Custom Unified Fields configured in your StackOne project
   */
  unifiedCustomFields?: { [k: string]: any } | null | undefined;
  /**
   * The updated_at date
   */
  updatedAt?: Date | null | undefined;
  /**
   * The ZIP code/Postal code of the location
   */
  zipCode?: string | null | undefined;
};

/** @internal */
export const HRISLocation4$inboundSchema: z.ZodType<
  HRISLocation4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HRISLocation4$Outbound = {};

/** @internal */
export const HRISLocation4$outboundSchema: z.ZodType<
  HRISLocation4$Outbound,
  z.ZodTypeDef,
  HRISLocation4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HRISLocation4$ {
  /** @deprecated use `HRISLocation4$inboundSchema` instead. */
  export const inboundSchema = HRISLocation4$inboundSchema;
  /** @deprecated use `HRISLocation4$outboundSchema` instead. */
  export const outboundSchema = HRISLocation4$outboundSchema;
  /** @deprecated use `HRISLocation4$Outbound` instead. */
  export type Outbound = HRISLocation4$Outbound;
}

export function hrisLocation4ToJSON(hrisLocation4: HRISLocation4): string {
  return JSON.stringify(HRISLocation4$outboundSchema.parse(hrisLocation4));
}

export function hrisLocation4FromJSON(
  jsonString: string,
): SafeParseResult<HRISLocation4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HRISLocation4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HRISLocation4' from JSON`,
  );
}

/** @internal */
export const HRISLocationSourceValue$inboundSchema: z.ZodType<
  HRISLocationSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => HRISLocation4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type HRISLocationSourceValue$Outbound =
  | HRISLocation4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const HRISLocationSourceValue$outboundSchema: z.ZodType<
  HRISLocationSourceValue$Outbound,
  z.ZodTypeDef,
  HRISLocationSourceValue
> = z.union([
  z.lazy(() => HRISLocation4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HRISLocationSourceValue$ {
  /** @deprecated use `HRISLocationSourceValue$inboundSchema` instead. */
  export const inboundSchema = HRISLocationSourceValue$inboundSchema;
  /** @deprecated use `HRISLocationSourceValue$outboundSchema` instead. */
  export const outboundSchema = HRISLocationSourceValue$outboundSchema;
  /** @deprecated use `HRISLocationSourceValue$Outbound` instead. */
  export type Outbound = HRISLocationSourceValue$Outbound;
}

export function hrisLocationSourceValueToJSON(
  hrisLocationSourceValue: HRISLocationSourceValue,
): string {
  return JSON.stringify(
    HRISLocationSourceValue$outboundSchema.parse(hrisLocationSourceValue),
  );
}

export function hrisLocationSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<HRISLocationSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HRISLocationSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HRISLocationSourceValue' from JSON`,
  );
}

/** @internal */
export const HRISLocationValue$inboundSchema: z.ZodType<
  HRISLocationValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(HRISLocationValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const HRISLocationValue$outboundSchema: z.ZodType<
  HRISLocationValueOpen,
  z.ZodTypeDef,
  HRISLocationValueOpen
> = z.union([
  z.nativeEnum(HRISLocationValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HRISLocationValue$ {
  /** @deprecated use `HRISLocationValue$inboundSchema` instead. */
  export const inboundSchema = HRISLocationValue$inboundSchema;
  /** @deprecated use `HRISLocationValue$outboundSchema` instead. */
  export const outboundSchema = HRISLocationValue$outboundSchema;
}

/** @internal */
export const HRISLocationCountry$inboundSchema: z.ZodType<
  HRISLocationCountry,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => HRISLocation4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(HRISLocationValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type HRISLocationCountry$Outbound = {
  source_value?:
    | HRISLocation4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const HRISLocationCountry$outboundSchema: z.ZodType<
  HRISLocationCountry$Outbound,
  z.ZodTypeDef,
  HRISLocationCountry
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => HRISLocation4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(HRISLocationValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HRISLocationCountry$ {
  /** @deprecated use `HRISLocationCountry$inboundSchema` instead. */
  export const inboundSchema = HRISLocationCountry$inboundSchema;
  /** @deprecated use `HRISLocationCountry$outboundSchema` instead. */
  export const outboundSchema = HRISLocationCountry$outboundSchema;
  /** @deprecated use `HRISLocationCountry$Outbound` instead. */
  export type Outbound = HRISLocationCountry$Outbound;
}

export function hrisLocationCountryToJSON(
  hrisLocationCountry: HRISLocationCountry,
): string {
  return JSON.stringify(
    HRISLocationCountry$outboundSchema.parse(hrisLocationCountry),
  );
}

export function hrisLocationCountryFromJSON(
  jsonString: string,
): SafeParseResult<HRISLocationCountry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HRISLocationCountry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HRISLocationCountry' from JSON`,
  );
}

/** @internal */
export const HRISLocationSchemas4$inboundSchema: z.ZodType<
  HRISLocationSchemas4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HRISLocationSchemas4$Outbound = {};

/** @internal */
export const HRISLocationSchemas4$outboundSchema: z.ZodType<
  HRISLocationSchemas4$Outbound,
  z.ZodTypeDef,
  HRISLocationSchemas4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HRISLocationSchemas4$ {
  /** @deprecated use `HRISLocationSchemas4$inboundSchema` instead. */
  export const inboundSchema = HRISLocationSchemas4$inboundSchema;
  /** @deprecated use `HRISLocationSchemas4$outboundSchema` instead. */
  export const outboundSchema = HRISLocationSchemas4$outboundSchema;
  /** @deprecated use `HRISLocationSchemas4$Outbound` instead. */
  export type Outbound = HRISLocationSchemas4$Outbound;
}

export function hrisLocationSchemas4ToJSON(
  hrisLocationSchemas4: HRISLocationSchemas4,
): string {
  return JSON.stringify(
    HRISLocationSchemas4$outboundSchema.parse(hrisLocationSchemas4),
  );
}

export function hrisLocationSchemas4FromJSON(
  jsonString: string,
): SafeParseResult<HRISLocationSchemas4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HRISLocationSchemas4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HRISLocationSchemas4' from JSON`,
  );
}

/** @internal */
export const HRISLocationSchemasSourceValue$inboundSchema: z.ZodType<
  HRISLocationSchemasSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => HRISLocationSchemas4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type HRISLocationSchemasSourceValue$Outbound =
  | HRISLocationSchemas4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const HRISLocationSchemasSourceValue$outboundSchema: z.ZodType<
  HRISLocationSchemasSourceValue$Outbound,
  z.ZodTypeDef,
  HRISLocationSchemasSourceValue
> = z.union([
  z.lazy(() => HRISLocationSchemas4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HRISLocationSchemasSourceValue$ {
  /** @deprecated use `HRISLocationSchemasSourceValue$inboundSchema` instead. */
  export const inboundSchema = HRISLocationSchemasSourceValue$inboundSchema;
  /** @deprecated use `HRISLocationSchemasSourceValue$outboundSchema` instead. */
  export const outboundSchema = HRISLocationSchemasSourceValue$outboundSchema;
  /** @deprecated use `HRISLocationSchemasSourceValue$Outbound` instead. */
  export type Outbound = HRISLocationSchemasSourceValue$Outbound;
}

export function hrisLocationSchemasSourceValueToJSON(
  hrisLocationSchemasSourceValue: HRISLocationSchemasSourceValue,
): string {
  return JSON.stringify(
    HRISLocationSchemasSourceValue$outboundSchema.parse(
      hrisLocationSchemasSourceValue,
    ),
  );
}

export function hrisLocationSchemasSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<HRISLocationSchemasSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HRISLocationSchemasSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HRISLocationSchemasSourceValue' from JSON`,
  );
}

/** @internal */
export const HRISLocationSchemasValue$inboundSchema: z.ZodType<
  HRISLocationSchemasValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(HRISLocationSchemasValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const HRISLocationSchemasValue$outboundSchema: z.ZodType<
  HRISLocationSchemasValueOpen,
  z.ZodTypeDef,
  HRISLocationSchemasValueOpen
> = z.union([
  z.nativeEnum(HRISLocationSchemasValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HRISLocationSchemasValue$ {
  /** @deprecated use `HRISLocationSchemasValue$inboundSchema` instead. */
  export const inboundSchema = HRISLocationSchemasValue$inboundSchema;
  /** @deprecated use `HRISLocationSchemasValue$outboundSchema` instead. */
  export const outboundSchema = HRISLocationSchemasValue$outboundSchema;
}

/** @internal */
export const HRISLocationLocationType$inboundSchema: z.ZodType<
  HRISLocationLocationType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => HRISLocationSchemas4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(HRISLocationSchemasValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type HRISLocationLocationType$Outbound = {
  source_value?:
    | HRISLocationSchemas4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const HRISLocationLocationType$outboundSchema: z.ZodType<
  HRISLocationLocationType$Outbound,
  z.ZodTypeDef,
  HRISLocationLocationType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => HRISLocationSchemas4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(HRISLocationSchemasValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HRISLocationLocationType$ {
  /** @deprecated use `HRISLocationLocationType$inboundSchema` instead. */
  export const inboundSchema = HRISLocationLocationType$inboundSchema;
  /** @deprecated use `HRISLocationLocationType$outboundSchema` instead. */
  export const outboundSchema = HRISLocationLocationType$outboundSchema;
  /** @deprecated use `HRISLocationLocationType$Outbound` instead. */
  export type Outbound = HRISLocationLocationType$Outbound;
}

export function hrisLocationLocationTypeToJSON(
  hrisLocationLocationType: HRISLocationLocationType,
): string {
  return JSON.stringify(
    HRISLocationLocationType$outboundSchema.parse(hrisLocationLocationType),
  );
}

export function hrisLocationLocationTypeFromJSON(
  jsonString: string,
): SafeParseResult<HRISLocationLocationType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HRISLocationLocationType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HRISLocationLocationType' from JSON`,
  );
}

/** @internal */
export const HRISLocation$inboundSchema: z.ZodType<
  HRISLocation,
  z.ZodTypeDef,
  unknown
> = z.object({
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.lazy(() => HRISLocationCountry$inboundSchema))
    .optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  employee_id: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  location_type: z.nullable(
    z.lazy(() => HRISLocationLocationType$inboundSchema),
  ).optional(),
  name: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  remote_employee_id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  street_1: z.nullable(z.string()).optional(),
  street_2: z.nullable(z.string()).optional(),
  unified_custom_fields: z.nullable(z.record(z.any())).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  zip_code: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "employee_id": "employeeId",
    "location_type": "locationType",
    "phone_number": "phoneNumber",
    "remote_employee_id": "remoteEmployeeId",
    "remote_id": "remoteId",
    "street_1": "street1",
    "street_2": "street2",
    "unified_custom_fields": "unifiedCustomFields",
    "updated_at": "updatedAt",
    "zip_code": "zipCode",
  });
});

/** @internal */
export type HRISLocation$Outbound = {
  city?: string | null | undefined;
  country?: HRISLocationCountry$Outbound | null | undefined;
  created_at?: string | null | undefined;
  employee_id?: string | null | undefined;
  id?: string | null | undefined;
  location_type?: HRISLocationLocationType$Outbound | null | undefined;
  name?: string | null | undefined;
  phone_number?: string | null | undefined;
  remote_employee_id?: string | null | undefined;
  remote_id?: string | null | undefined;
  state?: string | null | undefined;
  street_1?: string | null | undefined;
  street_2?: string | null | undefined;
  unified_custom_fields?: { [k: string]: any } | null | undefined;
  updated_at?: string | null | undefined;
  zip_code?: string | null | undefined;
};

/** @internal */
export const HRISLocation$outboundSchema: z.ZodType<
  HRISLocation$Outbound,
  z.ZodTypeDef,
  HRISLocation
> = z.object({
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.lazy(() => HRISLocationCountry$outboundSchema))
    .optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  employeeId: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  locationType: z.nullable(
    z.lazy(() => HRISLocationLocationType$outboundSchema),
  ).optional(),
  name: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  remoteEmployeeId: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  street1: z.nullable(z.string()).optional(),
  street2: z.nullable(z.string()).optional(),
  unifiedCustomFields: z.nullable(z.record(z.any())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  zipCode: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    employeeId: "employee_id",
    locationType: "location_type",
    phoneNumber: "phone_number",
    remoteEmployeeId: "remote_employee_id",
    remoteId: "remote_id",
    street1: "street_1",
    street2: "street_2",
    unifiedCustomFields: "unified_custom_fields",
    updatedAt: "updated_at",
    zipCode: "zip_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HRISLocation$ {
  /** @deprecated use `HRISLocation$inboundSchema` instead. */
  export const inboundSchema = HRISLocation$inboundSchema;
  /** @deprecated use `HRISLocation$outboundSchema` instead. */
  export const outboundSchema = HRISLocation$outboundSchema;
  /** @deprecated use `HRISLocation$Outbound` instead. */
  export type Outbound = HRISLocation$Outbound;
}

export function hrisLocationToJSON(hrisLocation: HRISLocation): string {
  return JSON.stringify(HRISLocation$outboundSchema.parse(hrisLocation));
}

export function hrisLocationFromJSON(
  jsonString: string,
): SafeParseResult<HRISLocation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HRISLocation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HRISLocation' from JSON`,
  );
}
