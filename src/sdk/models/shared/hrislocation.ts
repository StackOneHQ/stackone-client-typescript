/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type HRISLocation4 = {};

export type HRISLocationSourceValue = HRISLocation4 | string | number | boolean;

/**
 * The ISO3166-1 Alpha2 Code of the Country
 */
export enum HRISLocationValue {
    Af = "AF",
    Al = "AL",
    Dz = "DZ",
    As = "AS",
    Ad = "AD",
    Ao = "AO",
    Ai = "AI",
    Aq = "AQ",
    Ag = "AG",
    Ar = "AR",
    Am = "AM",
    Aw = "AW",
    Au = "AU",
    At = "AT",
    Az = "AZ",
    Bs = "BS",
    Bh = "BH",
    Bd = "BD",
    Bb = "BB",
    By = "BY",
    Be = "BE",
    Bz = "BZ",
    Bj = "BJ",
    Bm = "BM",
    Bt = "BT",
    Bo = "BO",
    Bq = "BQ",
    Ba = "BA",
    Bw = "BW",
    Bv = "BV",
    Br = "BR",
    Io = "IO",
    Bn = "BN",
    Bg = "BG",
    Bf = "BF",
    Bi = "BI",
    Kh = "KH",
    Cm = "CM",
    Ca = "CA",
    Cv = "CV",
    Ky = "KY",
    Cf = "CF",
    Td = "TD",
    Cl = "CL",
    Cn = "CN",
    Cx = "CX",
    Cc = "CC",
    Co = "CO",
    Km = "KM",
    Cg = "CG",
    Cd = "CD",
    Ck = "CK",
    Cr = "CR",
    Hr = "HR",
    Cu = "CU",
    Cw = "CW",
    Cy = "CY",
    Cz = "CZ",
    Ci = "CI",
    Dk = "DK",
    Dj = "DJ",
    Dm = "DM",
    Do = "DO",
    Ec = "EC",
    Eg = "EG",
    Sv = "SV",
    Gq = "GQ",
    Er = "ER",
    Ee = "EE",
    Et = "ET",
    Fk = "FK",
    Fo = "FO",
    Fj = "FJ",
    Fi = "FI",
    Fr = "FR",
    Gf = "GF",
    Pf = "PF",
    Tf = "TF",
    Ga = "GA",
    Gm = "GM",
    Ge = "GE",
    De = "DE",
    Gh = "GH",
    Gi = "GI",
    Gr = "GR",
    Gl = "GL",
    Gd = "GD",
    Gp = "GP",
    Gu = "GU",
    Gt = "GT",
    Gg = "GG",
    Gn = "GN",
    Gw = "GW",
    Gy = "GY",
    Ht = "HT",
    Hm = "HM",
    Va = "VA",
    Hn = "HN",
    Hk = "HK",
    Hu = "HU",
    Is = "IS",
    In = "IN",
    Id = "ID",
    Ir = "IR",
    Iq = "IQ",
    Ie = "IE",
    Im = "IM",
    Il = "IL",
    It = "IT",
    Jm = "JM",
    Jp = "JP",
    Je = "JE",
    Jo = "JO",
    Kz = "KZ",
    Ke = "KE",
    Ki = "KI",
    Kp = "KP",
    Kr = "KR",
    Kw = "KW",
    Kg = "KG",
    La = "LA",
    Lv = "LV",
    Lb = "LB",
    Ls = "LS",
    Lr = "LR",
    Ly = "LY",
    Li = "LI",
    Lt = "LT",
    Lu = "LU",
    Mo = "MO",
    Mk = "MK",
    Mg = "MG",
    Mw = "MW",
    My = "MY",
    Mv = "MV",
    Ml = "ML",
    Mt = "MT",
    Mh = "MH",
    Mq = "MQ",
    Mr = "MR",
    Mu = "MU",
    Yt = "YT",
    Mx = "MX",
    Fm = "FM",
    Md = "MD",
    Mc = "MC",
    Mn = "MN",
    Me = "ME",
    Ms = "MS",
    Ma = "MA",
    Mz = "MZ",
    Mm = "MM",
    Na = "NA",
    Nr = "NR",
    Np = "NP",
    Nl = "NL",
    Nc = "NC",
    Nz = "NZ",
    Ni = "NI",
    Ne = "NE",
    Ng = "NG",
    Nu = "NU",
    Nf = "NF",
    Mp = "MP",
    No = "NO",
    Om = "OM",
    Pk = "PK",
    Pw = "PW",
    Ps = "PS",
    Pa = "PA",
    Pg = "PG",
    Py = "PY",
    Pe = "PE",
    Ph = "PH",
    Pn = "PN",
    Pl = "PL",
    Pt = "PT",
    Pr = "PR",
    Qa = "QA",
    Ro = "RO",
    Ru = "RU",
    Rw = "RW",
    Re = "RE",
    Bl = "BL",
    Sh = "SH",
    Kn = "KN",
    Lc = "LC",
    Mf = "MF",
    Pm = "PM",
    Vc = "VC",
    Ws = "WS",
    Sm = "SM",
    St = "ST",
    Sa = "SA",
    Sn = "SN",
    Rs = "RS",
    Sc = "SC",
    Sl = "SL",
    Sg = "SG",
    Sx = "SX",
    Sk = "SK",
    Si = "SI",
    Sb = "SB",
    So = "SO",
    Za = "ZA",
    Gs = "GS",
    Ss = "SS",
    Es = "ES",
    Lk = "LK",
    Sd = "SD",
    Sr = "SR",
    Sj = "SJ",
    Sz = "SZ",
    Se = "SE",
    Ch = "CH",
    Sy = "SY",
    Tw = "TW",
    Tj = "TJ",
    Tz = "TZ",
    Th = "TH",
    Tl = "TL",
    Tg = "TG",
    Tk = "TK",
    To = "TO",
    Tt = "TT",
    Tn = "TN",
    Tr = "TR",
    Tm = "TM",
    Tc = "TC",
    Tv = "TV",
    Ug = "UG",
    Ua = "UA",
    Ae = "AE",
    Gb = "GB",
    Us = "US",
    Um = "UM",
    Uy = "UY",
    Uz = "UZ",
    Vu = "VU",
    Ve = "VE",
    Vn = "VN",
    Vg = "VG",
    Vi = "VI",
    Wf = "WF",
    Eh = "EH",
    Ye = "YE",
    Zm = "ZM",
    Zw = "ZW",
    UnmappedValue = "unmapped_value",
}

/**
 * The country code
 */
export type HRISLocationCountry = {
    sourceValue?: HRISLocation4 | string | number | boolean | null | undefined;
    /**
     * The ISO3166-1 Alpha2 Code of the Country
     */
    value?: HRISLocationValue | null | undefined;
};

export type HRISLocationSchemas4 = {};

/**
 * The source value of the location type.
 */
export type HRISLocationSchemasSourceValue = HRISLocationSchemas4 | string | number | boolean;

/**
 * The type of the location.
 */
export enum HRISLocationSchemasValue {
    Home = "home",
    Work = "work",
    UnmappedValue = "unmapped_value",
}

/**
 * The location type
 */
export type HRISLocationLocationType = {
    /**
     * The source value of the location type.
     */
    sourceValue?: HRISLocationSchemas4 | string | number | boolean | null | undefined;
    /**
     * The type of the location.
     */
    value?: HRISLocationSchemasValue | null | undefined;
};

export type HRISLocation = {
    /**
     * The city where the location is situated
     */
    city?: string | null | undefined;
    /**
     * The country code
     */
    country?: HRISLocationCountry | null | undefined;
    /**
     * The created_at date
     */
    createdAt?: Date | null | undefined;
    /**
     * The employee ID
     */
    employeeId?: string | null | undefined;
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    /**
     * The location type
     */
    locationType?: HRISLocationLocationType | null | undefined;
    /**
     * The name of the location
     */
    name?: string | null | undefined;
    /**
     * The phone number of the location
     */
    phoneNumber?: string | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    /**
     * The state where the location is situated
     */
    state?: string | null | undefined;
    /**
     * The first line of the address
     */
    street1?: string | null | undefined;
    /**
     * The second line of the address
     */
    street2?: string | null | undefined;
    /**
     * The updated_at date
     */
    updatedAt?: Date | null | undefined;
    /**
     * The ZIP code/Postal code of the location
     */
    zipCode?: string | null | undefined;
};

/** @internal */
export namespace HRISLocation4$ {
    export const inboundSchema: z.ZodType<HRISLocation4, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HRISLocation4> = z.object({});
}

/** @internal */
export namespace HRISLocationSourceValue$ {
    export const inboundSchema: z.ZodType<HRISLocationSourceValue, z.ZodTypeDef, unknown> = z.union(
        [z.lazy(() => HRISLocation4$.inboundSchema), z.string(), z.number(), z.boolean()]
    );

    export type Outbound = HRISLocation4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HRISLocationSourceValue> =
        z.union([z.lazy(() => HRISLocation4$.outboundSchema), z.string(), z.number(), z.boolean()]);
}

/** @internal */
export namespace HRISLocationValue$ {
    export const inboundSchema = z.nativeEnum(HRISLocationValue);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace HRISLocationCountry$ {
    export const inboundSchema: z.ZodType<HRISLocationCountry, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => HRISLocation4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(HRISLocationValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?: HRISLocation4$.Outbound | string | number | boolean | null | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HRISLocationCountry> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => HRISLocation4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(HRISLocationValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace HRISLocationSchemas4$ {
    export const inboundSchema: z.ZodType<HRISLocationSchemas4, z.ZodTypeDef, unknown> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HRISLocationSchemas4> = z.object(
        {}
    );
}

/** @internal */
export namespace HRISLocationSchemasSourceValue$ {
    export const inboundSchema: z.ZodType<HRISLocationSchemasSourceValue, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => HRISLocationSchemas4$.inboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);

    export type Outbound = HRISLocationSchemas4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HRISLocationSchemasSourceValue> =
        z.union([
            z.lazy(() => HRISLocationSchemas4$.outboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);
}

/** @internal */
export namespace HRISLocationSchemasValue$ {
    export const inboundSchema = z.nativeEnum(HRISLocationSchemasValue);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace HRISLocationLocationType$ {
    export const inboundSchema: z.ZodType<HRISLocationLocationType, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => HRISLocationSchemas4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(HRISLocationSchemasValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?:
            | HRISLocationSchemas4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HRISLocationLocationType> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => HRISLocationSchemas4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(HRISLocationSchemasValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace HRISLocation$ {
    export const inboundSchema: z.ZodType<HRISLocation, z.ZodTypeDef, unknown> = z
        .object({
            city: z.nullable(z.string()).optional(),
            country: z.nullable(z.lazy(() => HRISLocationCountry$.inboundSchema)).optional(),
            created_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            employee_id: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            location_type: z
                .nullable(z.lazy(() => HRISLocationLocationType$.inboundSchema))
                .optional(),
            name: z.nullable(z.string()).optional(),
            phone_number: z.nullable(z.string()).optional(),
            remote_id: z.nullable(z.string()).optional(),
            state: z.nullable(z.string()).optional(),
            street_1: z.nullable(z.string()).optional(),
            street_2: z.nullable(z.string()).optional(),
            updated_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            zip_code: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.employee_id === undefined ? null : { employeeId: v.employee_id }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.location_type === undefined ? null : { locationType: v.location_type }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.phone_number === undefined ? null : { phoneNumber: v.phone_number }),
                ...(v.remote_id === undefined ? null : { remoteId: v.remote_id }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.street_1 === undefined ? null : { street1: v.street_1 }),
                ...(v.street_2 === undefined ? null : { street2: v.street_2 }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
                ...(v.zip_code === undefined ? null : { zipCode: v.zip_code }),
            };
        });

    export type Outbound = {
        city?: string | null | undefined;
        country?: HRISLocationCountry$.Outbound | null | undefined;
        created_at?: string | null | undefined;
        employee_id?: string | null | undefined;
        id?: string | null | undefined;
        location_type?: HRISLocationLocationType$.Outbound | null | undefined;
        name?: string | null | undefined;
        phone_number?: string | null | undefined;
        remote_id?: string | null | undefined;
        state?: string | null | undefined;
        street_1?: string | null | undefined;
        street_2?: string | null | undefined;
        updated_at?: string | null | undefined;
        zip_code?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HRISLocation> = z
        .object({
            city: z.nullable(z.string()).optional(),
            country: z.nullable(z.lazy(() => HRISLocationCountry$.outboundSchema)).optional(),
            createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            employeeId: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            locationType: z
                .nullable(z.lazy(() => HRISLocationLocationType$.outboundSchema))
                .optional(),
            name: z.nullable(z.string()).optional(),
            phoneNumber: z.nullable(z.string()).optional(),
            remoteId: z.nullable(z.string()).optional(),
            state: z.nullable(z.string()).optional(),
            street1: z.nullable(z.string()).optional(),
            street2: z.nullable(z.string()).optional(),
            updatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            zipCode: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.employeeId === undefined ? null : { employee_id: v.employeeId }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.locationType === undefined ? null : { location_type: v.locationType }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.phoneNumber === undefined ? null : { phone_number: v.phoneNumber }),
                ...(v.remoteId === undefined ? null : { remote_id: v.remoteId }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.street1 === undefined ? null : { street_1: v.street1 }),
                ...(v.street2 === undefined ? null : { street_2: v.street2 }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
                ...(v.zipCode === undefined ? null : { zip_code: v.zipCode }),
            };
        });
}
