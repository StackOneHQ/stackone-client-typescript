/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { IamRole, IamRole$ } from "./iamrole";
import * as z from "zod";

export type IamGroup4 = {};

export type IamGroupSourceValue = IamGroup4 | string | number | boolean;

export enum IamGroupValue {
    Workspace = "workspace",
    Team = "team",
    Department = "department",
    Group = "group",
    UnmappedValue = "unmapped_value",
}

export type IamGroupType = {
    sourceValue?: IamGroup4 | string | number | boolean | null | undefined;
    value?: IamGroupValue | null | undefined;
};

export type IamGroup = {
    createdAt?: Date | null | undefined;
    description?: string | null | undefined;
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    name?: string | null | undefined;
    /**
     * The parent group id for when a group belongs to another group.
     */
    parentId?: string | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    roles?: Array<IamRole> | null | undefined;
    type?: IamGroupType | null | undefined;
    updatedAt?: Date | null | undefined;
};

/** @internal */
export namespace IamGroup4$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<IamGroup4, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IamGroup4> = z.object({});
}

/** @internal */
export namespace IamGroupSourceValue$ {
    export type Inbound = IamGroup4$.Inbound | string | number | boolean;

    export type Outbound = IamGroup4$.Outbound | string | number | boolean;
    export const inboundSchema: z.ZodType<IamGroupSourceValue, z.ZodTypeDef, Inbound> = z.union([
        z.lazy(() => IamGroup4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IamGroupSourceValue> = z.union([
        z.lazy(() => IamGroup4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export const IamGroupValue$: z.ZodNativeEnum<typeof IamGroupValue> = z.nativeEnum(IamGroupValue);

/** @internal */
export namespace IamGroupType$ {
    export type Inbound = {
        source_value?: IamGroup4$.Inbound | string | number | boolean | null | undefined;
        value?: IamGroupValue | null | undefined;
    };

    export const inboundSchema: z.ZodType<IamGroupType, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => IamGroup4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(IamGroupValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?: IamGroup4$.Outbound | string | number | boolean | null | undefined;
        value?: IamGroupValue | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IamGroupType> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => IamGroup4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(IamGroupValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace IamGroup$ {
    export type Inbound = {
        created_at?: string | null | undefined;
        description?: string | null | undefined;
        id?: string | null | undefined;
        name?: string | null | undefined;
        parent_id?: string | null | undefined;
        remote_id?: string | null | undefined;
        roles?: Array<IamRole$.Inbound> | null | undefined;
        type?: IamGroupType$.Inbound | null | undefined;
        updated_at?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<IamGroup, z.ZodTypeDef, Inbound> = z
        .object({
            created_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            description: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            parent_id: z.nullable(z.string()).optional(),
            remote_id: z.nullable(z.string()).optional(),
            roles: z.nullable(z.array(IamRole$.inboundSchema)).optional(),
            type: z.nullable(z.lazy(() => IamGroupType$.inboundSchema)).optional(),
            updated_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.parent_id === undefined ? null : { parentId: v.parent_id }),
                ...(v.remote_id === undefined ? null : { remoteId: v.remote_id }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        created_at?: string | null | undefined;
        description?: string | null | undefined;
        id?: string | null | undefined;
        name?: string | null | undefined;
        parent_id?: string | null | undefined;
        remote_id?: string | null | undefined;
        roles?: Array<IamRole$.Outbound> | null | undefined;
        type?: IamGroupType$.Outbound | null | undefined;
        updated_at?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IamGroup> = z
        .object({
            createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            description: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            parentId: z.nullable(z.string()).optional(),
            remoteId: z.nullable(z.string()).optional(),
            roles: z.nullable(z.array(IamRole$.outboundSchema)).optional(),
            type: z.nullable(z.lazy(() => IamGroupType$.outboundSchema)).optional(),
            updatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.parentId === undefined ? null : { parent_id: v.parentId }),
                ...(v.remoteId === undefined ? null : { remote_id: v.remoteId }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}
