/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { IamRole, IamRole$ } from "./iamrole";
import { RawResponse, RawResponse$ } from "./rawresponse";
import * as z from "zod";

export type IamRoleResult = {
    data: IamRole;
    raw: Array<RawResponse>;
};

/** @internal */
export namespace IamRoleResult$ {
    export type Inbound = {
        data: IamRole$.Inbound;
        raw: Array<RawResponse$.Inbound>;
    };

    export const inboundSchema: z.ZodType<IamRoleResult, z.ZodTypeDef, Inbound> = z
        .object({
            data: IamRole$.inboundSchema,
            raw: z.array(RawResponse$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
                raw: v.raw,
            };
        });

    export type Outbound = {
        data: IamRole$.Outbound;
        raw: Array<RawResponse$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IamRoleResult> = z
        .object({
            data: IamRole$.outboundSchema,
            raw: z.array(RawResponse$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
                raw: v.raw,
            };
        });
}
