/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * The content type of the attachment.
 */
export enum AttachmentContentTypeValue {
    Text = "text",
    UnmappedValue = "unmapped_value",
}

export type AttachmentContentType = {
    /**
     * The source value of the content type.
     */
    sourceValue?: string | undefined;
    /**
     * The content type of the attachment.
     */
    value?: AttachmentContentTypeValue | undefined;
};

/** @internal */
export const AttachmentContentTypeValue$ = z.nativeEnum(AttachmentContentTypeValue);

/** @internal */
export namespace AttachmentContentType$ {
    export type Inbound = {
        source_value?: string | undefined;
        value?: AttachmentContentTypeValue | undefined;
    };

    export const inboundSchema: z.ZodType<AttachmentContentType, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z.string().optional(),
            value: AttachmentContentTypeValue$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?: string | undefined;
        value?: AttachmentContentTypeValue | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AttachmentContentType> = z
        .object({
            sourceValue: z.string().optional(),
            value: AttachmentContentTypeValue$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}
