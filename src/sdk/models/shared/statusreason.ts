/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StatusReason = {
  code?: string | null | undefined;
  description?: string | null | undefined;
  timestamp: Date;
};

/** @internal */
export const StatusReason$inboundSchema: z.ZodType<
  StatusReason,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type StatusReason$Outbound = {
  code?: string | null | undefined;
  description?: string | null | undefined;
  timestamp: string;
};

/** @internal */
export const StatusReason$outboundSchema: z.ZodType<
  StatusReason$Outbound,
  z.ZodTypeDef,
  StatusReason
> = z.object({
  code: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  timestamp: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusReason$ {
  /** @deprecated use `StatusReason$inboundSchema` instead. */
  export const inboundSchema = StatusReason$inboundSchema;
  /** @deprecated use `StatusReason$outboundSchema` instead. */
  export const outboundSchema = StatusReason$outboundSchema;
  /** @deprecated use `StatusReason$Outbound` instead. */
  export type Outbound = StatusReason$Outbound;
}

export function statusReasonToJSON(statusReason: StatusReason): string {
  return JSON.stringify(StatusReason$outboundSchema.parse(statusReason));
}

export function statusReasonFromJSON(
  jsonString: string,
): SafeParseResult<StatusReason, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StatusReason$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StatusReason' from JSON`,
  );
}
