/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types";
import * as z from "zod";

export type ContentLanguageEnum4 = {};

export type ContentLanguageEnumSourceValue = ContentLanguageEnum4 | string | number | boolean;

/**
 * The Locale Code of the language
 */
export enum ContentLanguageEnumValue {
    Af = "af",
    Sq = "sq",
    ArDZ = "ar_DZ",
    ArBH = "ar_BH",
    ArEG = "ar_EG",
    ArIQ = "ar_IQ",
    ArJO = "ar_JO",
    ArKW = "ar_KW",
    ArLB = "ar_LB",
    ArLY = "ar_LY",
    ArMA = "ar_MA",
    ArOM = "ar_OM",
    ArQA = "ar_QA",
    ArSA = "ar_SA",
    ArSY = "ar_SY",
    ArTN = "ar_TN",
    ArAE = "ar_AE",
    ArYE = "ar_YE",
    Eu = "eu",
    Be = "be",
    Bg = "bg",
    Ca = "ca",
    ZhHK = "zh_HK",
    ZhCN = "zh_CN",
    ZhSG = "zh_SG",
    ZhTW = "zh_TW",
    Hr = "hr",
    Cs = "cs",
    Da = "da",
    NlBE = "nl_BE",
    Nl = "nl",
    En = "en",
    EnAU = "en_AU",
    EnBZ = "en_BZ",
    EnCA = "en_CA",
    EnIE = "en_IE",
    EnJM = "en_JM",
    EnNZ = "en_NZ",
    EnZA = "en_ZA",
    EnTT = "en_TT",
    EnGB = "en_GB",
    EnUS = "en_US",
    Et = "et",
    Fo = "fo",
    Fa = "fa",
    Fi = "fi",
    FrBE = "fr_BE",
    FrCA = "fr_CA",
    FrLU = "fr_LU",
    Fr = "fr",
    FrCH = "fr_CH",
    Gd = "gd",
    DeAT = "de_AT",
    DeLI = "de_LI",
    DeLU = "de_LU",
    De = "de",
    DeCH = "de_CH",
    El = "el",
    He = "he",
    Hi = "hi",
    Hu = "hu",
    Is = "is",
    Id = "id",
    Ga = "ga",
    It = "it",
    ItCH = "it_CH",
    Ja = "ja",
    Ko = "ko",
    Ku = "ku",
    Lv = "lv",
    Lt = "lt",
    Mk = "mk",
    Ml = "ml",
    Ms = "ms",
    Mt = "mt",
    No = "no",
    Nb = "nb",
    Nn = "nn",
    Pl = "pl",
    PtBR = "pt_BR",
    Pt = "pt",
    Pa = "pa",
    Rm = "rm",
    Ro = "ro",
    RoMD = "ro_MD",
    Ru = "ru",
    RuMD = "ru_MD",
    Sr = "sr",
    Sk = "sk",
    Sl = "sl",
    Sb = "sb",
    EsAR = "es_AR",
    EsBO = "es_BO",
    EsCL = "es_CL",
    EsCO = "es_CO",
    EsCR = "es_CR",
    EsDO = "es_DO",
    EsEC = "es_EC",
    EsSV = "es_SV",
    EsGT = "es_GT",
    EsHN = "es_HN",
    EsMX = "es_MX",
    EsNI = "es_NI",
    EsPA = "es_PA",
    EsPY = "es_PY",
    EsPE = "es_PE",
    EsPR = "es_PR",
    Es = "es",
    EsUY = "es_UY",
    EsVE = "es_VE",
    Sv = "sv",
    SvFI = "sv_FI",
    Th = "th",
    Ts = "ts",
    Tn = "tn",
    Tr = "tr",
    Uk = "uk",
    Ur = "ur",
    Ve = "ve",
    Vi = "vi",
    Cy = "cy",
    Xh = "xh",
    Yi = "yi",
    Zu = "zu",
    UnmappedValue = "unmapped_value",
}
/**
 * The Locale Code of the language
 */
export type ContentLanguageEnumValueOpen = OpenEnum<typeof ContentLanguageEnumValue>;

export type ContentLanguageEnum = {
    sourceValue?: ContentLanguageEnum4 | string | number | boolean | null | undefined;
    /**
     * The Locale Code of the language
     */
    value?: ContentLanguageEnumValueOpen | null | undefined;
};

/** @internal */
export namespace ContentLanguageEnum4$ {
    export const inboundSchema: z.ZodType<ContentLanguageEnum4, z.ZodTypeDef, unknown> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContentLanguageEnum4> = z.object(
        {}
    );
}

/** @internal */
export namespace ContentLanguageEnumSourceValue$ {
    export const inboundSchema: z.ZodType<ContentLanguageEnumSourceValue, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => ContentLanguageEnum4$.inboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);

    export type Outbound = ContentLanguageEnum4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContentLanguageEnumSourceValue> =
        z.union([
            z.lazy(() => ContentLanguageEnum4$.outboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);
}

/** @internal */
export namespace ContentLanguageEnumValue$ {
    export const inboundSchema: z.ZodType<ContentLanguageEnumValueOpen, z.ZodTypeDef, unknown> =
        z.union([
            z.nativeEnum(ContentLanguageEnumValue),
            z.string().transform(catchUnrecognizedEnum),
        ]);

    export const outboundSchema = z.union([
        z.nativeEnum(ContentLanguageEnumValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace ContentLanguageEnum$ {
    export const inboundSchema: z.ZodType<ContentLanguageEnum, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => ContentLanguageEnum4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(ContentLanguageEnumValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?:
            | ContentLanguageEnum4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContentLanguageEnum> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => ContentLanguageEnum4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(ContentLanguageEnumValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}
