/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DocumentsFilesSearchRequestDto4 = {};

export type DocumentsFilesSearchRequestDtoSourceValue =
  | DocumentsFilesSearchRequestDto4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The operation type of the query
 */
export enum DocumentsFilesSearchRequestDtoValue {
  Contains = "contains",
  Equals = "equals",
  NotEquals = "not_equals",
  UnmappedValue = "unmapped_value",
}
/**
 * The operation type of the query
 */
export type DocumentsFilesSearchRequestDtoValueOpen = OpenEnum<
  typeof DocumentsFilesSearchRequestDtoValue
>;

/**
 * The operation type to use for the query. If not provided, the default operation is `contains`.
 */
export type OperationType = {
  sourceValue?:
    | DocumentsFilesSearchRequestDto4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The operation type of the query
   */
  value?: DocumentsFilesSearchRequestDtoValueOpen | null | undefined;
};

/**
 * Filter parameters that allow greater customisation of the list response
 */
export type Filter = {
  /**
   * Use a string with a date to only select results updated after that given date
   */
  updatedAfter?: string | null | undefined;
};

/**
 * The additional parameters of the query
 */
export type Params = {
  /**
   * The comma separated list of fields to return in the response (if empty, all fields are returned)
   */
  fields?: string | null | undefined;
  /**
   * Filter parameters that allow greater customisation of the list response
   */
  filter?: Filter | null | undefined;
  /**
   * The unified cursor
   */
  next?: string | null | undefined;
  /**
   * The page number of the results to fetch
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  page?: string | null | undefined;
  /**
   * The number of results per page (default value is 25)
   */
  pageSize?: string | null | undefined;
  /**
   * Indicates that the raw request result should be returned in addition to the mapped result (default value is false)
   */
  raw?: boolean | null | undefined;
  /**
   * Use a string with a date to only select results updated after that given date
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  updatedAfter?: string | null | undefined;
};

export type DocumentsFilesSearchRequestDto = {
  /**
   * The specific field to search within. If not provided, the search will be performed across all searchable text fields
   */
  field?: string | null | undefined;
  /**
   * The operation type to use for the query. If not provided, the default operation is `contains`.
   */
  operationType?: OperationType | null | undefined;
  /**
   * The additional parameters of the query
   */
  params?: Params | null | undefined;
  /**
   * Value to pass through to the provider
   */
  passthrough?: { [k: string]: any } | null | undefined;
  /**
   * The query to search for
   */
  query: string;
};

/** @internal */
export const DocumentsFilesSearchRequestDto4$inboundSchema: z.ZodType<
  DocumentsFilesSearchRequestDto4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type DocumentsFilesSearchRequestDto4$Outbound = {};

/** @internal */
export const DocumentsFilesSearchRequestDto4$outboundSchema: z.ZodType<
  DocumentsFilesSearchRequestDto4$Outbound,
  z.ZodTypeDef,
  DocumentsFilesSearchRequestDto4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentsFilesSearchRequestDto4$ {
  /** @deprecated use `DocumentsFilesSearchRequestDto4$inboundSchema` instead. */
  export const inboundSchema = DocumentsFilesSearchRequestDto4$inboundSchema;
  /** @deprecated use `DocumentsFilesSearchRequestDto4$outboundSchema` instead. */
  export const outboundSchema = DocumentsFilesSearchRequestDto4$outboundSchema;
  /** @deprecated use `DocumentsFilesSearchRequestDto4$Outbound` instead. */
  export type Outbound = DocumentsFilesSearchRequestDto4$Outbound;
}

export function documentsFilesSearchRequestDto4ToJSON(
  documentsFilesSearchRequestDto4: DocumentsFilesSearchRequestDto4,
): string {
  return JSON.stringify(
    DocumentsFilesSearchRequestDto4$outboundSchema.parse(
      documentsFilesSearchRequestDto4,
    ),
  );
}

export function documentsFilesSearchRequestDto4FromJSON(
  jsonString: string,
): SafeParseResult<DocumentsFilesSearchRequestDto4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentsFilesSearchRequestDto4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentsFilesSearchRequestDto4' from JSON`,
  );
}

/** @internal */
export const DocumentsFilesSearchRequestDtoSourceValue$inboundSchema: z.ZodType<
  DocumentsFilesSearchRequestDtoSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DocumentsFilesSearchRequestDto4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type DocumentsFilesSearchRequestDtoSourceValue$Outbound =
  | DocumentsFilesSearchRequestDto4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const DocumentsFilesSearchRequestDtoSourceValue$outboundSchema:
  z.ZodType<
    DocumentsFilesSearchRequestDtoSourceValue$Outbound,
    z.ZodTypeDef,
    DocumentsFilesSearchRequestDtoSourceValue
  > = z.union([
    z.lazy(() => DocumentsFilesSearchRequestDto4$outboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentsFilesSearchRequestDtoSourceValue$ {
  /** @deprecated use `DocumentsFilesSearchRequestDtoSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentsFilesSearchRequestDtoSourceValue$inboundSchema;
  /** @deprecated use `DocumentsFilesSearchRequestDtoSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentsFilesSearchRequestDtoSourceValue$outboundSchema;
  /** @deprecated use `DocumentsFilesSearchRequestDtoSourceValue$Outbound` instead. */
  export type Outbound = DocumentsFilesSearchRequestDtoSourceValue$Outbound;
}

export function documentsFilesSearchRequestDtoSourceValueToJSON(
  documentsFilesSearchRequestDtoSourceValue:
    DocumentsFilesSearchRequestDtoSourceValue,
): string {
  return JSON.stringify(
    DocumentsFilesSearchRequestDtoSourceValue$outboundSchema.parse(
      documentsFilesSearchRequestDtoSourceValue,
    ),
  );
}

export function documentsFilesSearchRequestDtoSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentsFilesSearchRequestDtoSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentsFilesSearchRequestDtoSourceValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentsFilesSearchRequestDtoSourceValue' from JSON`,
  );
}

/** @internal */
export const DocumentsFilesSearchRequestDtoValue$inboundSchema: z.ZodType<
  DocumentsFilesSearchRequestDtoValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(DocumentsFilesSearchRequestDtoValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const DocumentsFilesSearchRequestDtoValue$outboundSchema: z.ZodType<
  DocumentsFilesSearchRequestDtoValueOpen,
  z.ZodTypeDef,
  DocumentsFilesSearchRequestDtoValueOpen
> = z.union([
  z.nativeEnum(DocumentsFilesSearchRequestDtoValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentsFilesSearchRequestDtoValue$ {
  /** @deprecated use `DocumentsFilesSearchRequestDtoValue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentsFilesSearchRequestDtoValue$inboundSchema;
  /** @deprecated use `DocumentsFilesSearchRequestDtoValue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentsFilesSearchRequestDtoValue$outboundSchema;
}

/** @internal */
export const OperationType$inboundSchema: z.ZodType<
  OperationType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => DocumentsFilesSearchRequestDto4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(
    DocumentsFilesSearchRequestDtoValue$inboundSchema.default(
      DocumentsFilesSearchRequestDtoValue.Contains,
    ),
  ),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type OperationType$Outbound = {
  source_value?:
    | DocumentsFilesSearchRequestDto4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value: string | null;
};

/** @internal */
export const OperationType$outboundSchema: z.ZodType<
  OperationType$Outbound,
  z.ZodTypeDef,
  OperationType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => DocumentsFilesSearchRequestDto4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(
    DocumentsFilesSearchRequestDtoValue$outboundSchema.default(
      DocumentsFilesSearchRequestDtoValue.Contains,
    ),
  ),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OperationType$ {
  /** @deprecated use `OperationType$inboundSchema` instead. */
  export const inboundSchema = OperationType$inboundSchema;
  /** @deprecated use `OperationType$outboundSchema` instead. */
  export const outboundSchema = OperationType$outboundSchema;
  /** @deprecated use `OperationType$Outbound` instead. */
  export type Outbound = OperationType$Outbound;
}

export function operationTypeToJSON(operationType: OperationType): string {
  return JSON.stringify(OperationType$outboundSchema.parse(operationType));
}

export function operationTypeFromJSON(
  jsonString: string,
): SafeParseResult<OperationType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OperationType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OperationType' from JSON`,
  );
}

/** @internal */
export const Filter$inboundSchema: z.ZodType<Filter, z.ZodTypeDef, unknown> = z
  .object({
    updated_after: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "updated_after": "updatedAfter",
    });
  });

/** @internal */
export type Filter$Outbound = {
  updated_after?: string | null | undefined;
};

/** @internal */
export const Filter$outboundSchema: z.ZodType<
  Filter$Outbound,
  z.ZodTypeDef,
  Filter
> = z.object({
  updatedAfter: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    updatedAfter: "updated_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filter$ {
  /** @deprecated use `Filter$inboundSchema` instead. */
  export const inboundSchema = Filter$inboundSchema;
  /** @deprecated use `Filter$outboundSchema` instead. */
  export const outboundSchema = Filter$outboundSchema;
  /** @deprecated use `Filter$Outbound` instead. */
  export type Outbound = Filter$Outbound;
}

export function filterToJSON(filter: Filter): string {
  return JSON.stringify(Filter$outboundSchema.parse(filter));
}

export function filterFromJSON(
  jsonString: string,
): SafeParseResult<Filter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filter' from JSON`,
  );
}

/** @internal */
export const Params$inboundSchema: z.ZodType<Params, z.ZodTypeDef, unknown> = z
  .object({
    fields: z.nullable(z.string()).optional(),
    filter: z.nullable(z.lazy(() => Filter$inboundSchema)).optional(),
    next: z.nullable(z.string()).optional(),
    page: z.nullable(z.string()).optional(),
    page_size: z.nullable(z.string()).optional(),
    raw: z.nullable(z.boolean()).optional(),
    updated_after: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "page_size": "pageSize",
      "updated_after": "updatedAfter",
    });
  });

/** @internal */
export type Params$Outbound = {
  fields?: string | null | undefined;
  filter?: Filter$Outbound | null | undefined;
  next?: string | null | undefined;
  page?: string | null | undefined;
  page_size?: string | null | undefined;
  raw?: boolean | null | undefined;
  updated_after?: string | null | undefined;
};

/** @internal */
export const Params$outboundSchema: z.ZodType<
  Params$Outbound,
  z.ZodTypeDef,
  Params
> = z.object({
  fields: z.nullable(z.string()).optional(),
  filter: z.nullable(z.lazy(() => Filter$outboundSchema)).optional(),
  next: z.nullable(z.string()).optional(),
  page: z.nullable(z.string()).optional(),
  pageSize: z.nullable(z.string()).optional(),
  raw: z.nullable(z.boolean()).optional(),
  updatedAfter: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    updatedAfter: "updated_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Params$ {
  /** @deprecated use `Params$inboundSchema` instead. */
  export const inboundSchema = Params$inboundSchema;
  /** @deprecated use `Params$outboundSchema` instead. */
  export const outboundSchema = Params$outboundSchema;
  /** @deprecated use `Params$Outbound` instead. */
  export type Outbound = Params$Outbound;
}

export function paramsToJSON(params: Params): string {
  return JSON.stringify(Params$outboundSchema.parse(params));
}

export function paramsFromJSON(
  jsonString: string,
): SafeParseResult<Params, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Params$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Params' from JSON`,
  );
}

/** @internal */
export const DocumentsFilesSearchRequestDto$inboundSchema: z.ZodType<
  DocumentsFilesSearchRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.nullable(z.string()).optional(),
  operation_type: z.nullable(z.lazy(() => OperationType$inboundSchema))
    .optional(),
  params: z.nullable(z.lazy(() => Params$inboundSchema)).optional(),
  passthrough: z.nullable(z.record(z.any())).optional(),
  query: z.string(),
}).transform((v) => {
  return remap$(v, {
    "operation_type": "operationType",
  });
});

/** @internal */
export type DocumentsFilesSearchRequestDto$Outbound = {
  field?: string | null | undefined;
  operation_type?: OperationType$Outbound | null | undefined;
  params?: Params$Outbound | null | undefined;
  passthrough?: { [k: string]: any } | null | undefined;
  query: string;
};

/** @internal */
export const DocumentsFilesSearchRequestDto$outboundSchema: z.ZodType<
  DocumentsFilesSearchRequestDto$Outbound,
  z.ZodTypeDef,
  DocumentsFilesSearchRequestDto
> = z.object({
  field: z.nullable(z.string()).optional(),
  operationType: z.nullable(z.lazy(() => OperationType$outboundSchema))
    .optional(),
  params: z.nullable(z.lazy(() => Params$outboundSchema)).optional(),
  passthrough: z.nullable(z.record(z.any())).optional(),
  query: z.string(),
}).transform((v) => {
  return remap$(v, {
    operationType: "operation_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentsFilesSearchRequestDto$ {
  /** @deprecated use `DocumentsFilesSearchRequestDto$inboundSchema` instead. */
  export const inboundSchema = DocumentsFilesSearchRequestDto$inboundSchema;
  /** @deprecated use `DocumentsFilesSearchRequestDto$outboundSchema` instead. */
  export const outboundSchema = DocumentsFilesSearchRequestDto$outboundSchema;
  /** @deprecated use `DocumentsFilesSearchRequestDto$Outbound` instead. */
  export type Outbound = DocumentsFilesSearchRequestDto$Outbound;
}

export function documentsFilesSearchRequestDtoToJSON(
  documentsFilesSearchRequestDto: DocumentsFilesSearchRequestDto,
): string {
  return JSON.stringify(
    DocumentsFilesSearchRequestDto$outboundSchema.parse(
      documentsFilesSearchRequestDto,
    ),
  );
}

export function documentsFilesSearchRequestDtoFromJSON(
  jsonString: string,
): SafeParseResult<DocumentsFilesSearchRequestDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentsFilesSearchRequestDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentsFilesSearchRequestDto' from JSON`,
  );
}
