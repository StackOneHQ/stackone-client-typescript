/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Answer, Answer$ } from "./answer";
import { ApplicationAttachment, ApplicationAttachment$ } from "./applicationattachment";
import { ApplicationCandidate, ApplicationCandidate$ } from "./applicationcandidate";
import {
    ApplicationStatusEnumApiModel,
    ApplicationStatusEnumApiModel$,
} from "./applicationstatusenumapimodel";
import { z } from "zod";

/**
 * Questionnaire associated with the application
 */
export type AtsCreateApplicationRequestDtoQuestionnaire = {
    answers: Array<Answer>;
    /**
     * Unique identifier of the questionnaire
     */
    id?: string | null | undefined;
};

export type AtsCreateApplicationRequestDto = {
    applicationStatus: ApplicationStatusEnumApiModel;
    attachments?: Array<ApplicationAttachment> | null | undefined;
    candidate: ApplicationCandidate;
    /**
     * Unique identifier of the candidate
     */
    candidateId?: string | null | undefined;
    /**
     * Unique identifier of the job
     */
    jobId?: string | null | undefined;
    /**
     * Unique identifiers of the locations
     */
    locationIds?: Array<string> | null | undefined;
    /**
     * Questionnaire associated with the application
     */
    questionnaire: AtsCreateApplicationRequestDtoQuestionnaire;
};

/** @internal */
export namespace AtsCreateApplicationRequestDtoQuestionnaire$ {
    export type Inbound = {
        answers: Array<Answer$.Inbound>;
        id?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<
        AtsCreateApplicationRequestDtoQuestionnaire,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            answers: z.array(Answer$.inboundSchema),
            id: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                answers: v.answers,
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });

    export type Outbound = {
        answers: Array<Answer$.Outbound>;
        id?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AtsCreateApplicationRequestDtoQuestionnaire
    > = z
        .object({
            answers: z.array(Answer$.outboundSchema),
            id: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                answers: v.answers,
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });
}

/** @internal */
export namespace AtsCreateApplicationRequestDto$ {
    export type Inbound = {
        application_status: ApplicationStatusEnumApiModel$.Inbound;
        attachments?: Array<ApplicationAttachment$.Inbound> | null | undefined;
        candidate: ApplicationCandidate$.Inbound;
        candidate_id?: string | null | undefined;
        job_id?: string | null | undefined;
        location_ids?: Array<string> | null | undefined;
        questionnaire: AtsCreateApplicationRequestDtoQuestionnaire$.Inbound;
    };

    export const inboundSchema: z.ZodType<AtsCreateApplicationRequestDto, z.ZodTypeDef, Inbound> = z
        .object({
            application_status: ApplicationStatusEnumApiModel$.inboundSchema,
            attachments: z.nullable(z.array(ApplicationAttachment$.inboundSchema)).optional(),
            candidate: ApplicationCandidate$.inboundSchema,
            candidate_id: z.nullable(z.string()).optional(),
            job_id: z.nullable(z.string()).optional(),
            location_ids: z.nullable(z.array(z.string())).optional(),
            questionnaire: z.lazy(() => AtsCreateApplicationRequestDtoQuestionnaire$.inboundSchema),
        })
        .transform((v) => {
            return {
                applicationStatus: v.application_status,
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                candidate: v.candidate,
                ...(v.candidate_id === undefined ? null : { candidateId: v.candidate_id }),
                ...(v.job_id === undefined ? null : { jobId: v.job_id }),
                ...(v.location_ids === undefined ? null : { locationIds: v.location_ids }),
                questionnaire: v.questionnaire,
            };
        });

    export type Outbound = {
        application_status: ApplicationStatusEnumApiModel$.Outbound;
        attachments?: Array<ApplicationAttachment$.Outbound> | null | undefined;
        candidate: ApplicationCandidate$.Outbound;
        candidate_id?: string | null | undefined;
        job_id?: string | null | undefined;
        location_ids?: Array<string> | null | undefined;
        questionnaire: AtsCreateApplicationRequestDtoQuestionnaire$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AtsCreateApplicationRequestDto> =
        z
            .object({
                applicationStatus: ApplicationStatusEnumApiModel$.outboundSchema,
                attachments: z.nullable(z.array(ApplicationAttachment$.outboundSchema)).optional(),
                candidate: ApplicationCandidate$.outboundSchema,
                candidateId: z.nullable(z.string()).optional(),
                jobId: z.nullable(z.string()).optional(),
                locationIds: z.nullable(z.array(z.string())).optional(),
                questionnaire: z.lazy(
                    () => AtsCreateApplicationRequestDtoQuestionnaire$.outboundSchema
                ),
            })
            .transform((v) => {
                return {
                    application_status: v.applicationStatus,
                    ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                    candidate: v.candidate,
                    ...(v.candidateId === undefined ? null : { candidate_id: v.candidateId }),
                    ...(v.jobId === undefined ? null : { job_id: v.jobId }),
                    ...(v.locationIds === undefined ? null : { location_ids: v.locationIds }),
                    questionnaire: v.questionnaire,
                };
            });
}
