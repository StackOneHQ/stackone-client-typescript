/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types/enums.js";
import { Questionnaire, Questionnaire$ } from "./questionnaire.js";
import { SocialLink, SocialLink$ } from "./sociallink.js";
import * as z from "zod";

export type AtsCreateApplicationRequestDto4 = {};

/**
 * The source value of the application status.
 */
export type AtsCreateApplicationRequestDtoSourceValue =
    | AtsCreateApplicationRequestDto4
    | string
    | number
    | boolean;

/**
 * The status of the application.
 */
export enum AtsCreateApplicationRequestDtoValue {
    Active = "active",
    Assessment = "assessment",
    BackgroundCheck = "background_check",
    Converted = "converted",
    DeclinedByCandidate = "declined_by_candidate",
    Hired = "hired",
    Interview = "interview",
    Lead = "lead",
    Offer = "offer",
    ReferenceCheck = "reference_check",
    Rejected = "rejected",
    Review = "review",
    Screen = "screen",
    New = "new",
    Onboarding = "onboarding",
    Created = "created",
    Accepted = "accepted",
    ShortList = "short_list",
    Approved = "approved",
    UnmappedValue = "unmapped_value",
}
/**
 * The status of the application.
 */
export type AtsCreateApplicationRequestDtoValueOpen = OpenEnum<
    typeof AtsCreateApplicationRequestDtoValue
>;

export type AtsCreateApplicationRequestDtoApplicationStatus = {
    /**
     * The source value of the application status.
     */
    sourceValue?: AtsCreateApplicationRequestDto4 | string | number | boolean | null | undefined;
    /**
     * The status of the application.
     */
    value?: AtsCreateApplicationRequestDtoValueOpen | null | undefined;
};

/**
 * Candidate Properties. Provide this OR candidate_id, but not both. Providing this attempts to create a new candidate with the application.
 */
export type AtsCreateApplicationRequestDtoCandidate = {
    /**
     * Candidate company
     */
    company?: string | null | undefined;
    /**
     * Candidate country
     */
    country?: string | null | undefined;
    /**
     * Candidate email
     */
    email?: string | null | undefined;
    /**
     * Candidate first name
     */
    firstName?: string | null | undefined;
    /**
     * Candidate hired date
     */
    hiredAt?: Date | null | undefined;
    /**
     * Candidate last name
     */
    lastName?: string | null | undefined;
    /**
     * Candidate name
     */
    name?: string | null | undefined;
    /**
     * Value to pass through to the provider
     */
    passthrough?: { [k: string]: any } | null | undefined;
    /**
     * The candidate personal phone number
     */
    phoneNumber?: string | null | undefined;
    /**
     * List of candidate social links
     */
    socialLinks?: Array<SocialLink> | null | undefined;
    /**
     * Candidate title
     */
    title?: string | null | undefined;
};

export type AtsCreateApplicationRequestDtoSource = {
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    /**
     * The source of the application
     */
    name?: string | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
};

export type AtsCreateApplicationRequestDto = {
    applicationStatus?: AtsCreateApplicationRequestDtoApplicationStatus | null | undefined;
    /**
     * Candidate Properties. Provide this OR candidate_id, but not both. Providing this attempts to create a new candidate with the application.
     */
    candidate?: AtsCreateApplicationRequestDtoCandidate | null | undefined;
    /**
     * Unique identifier of the candidate. Provide this OR candidate, but not both.
     */
    candidateId?: string | null | undefined;
    /**
     * Unique identifier of the job
     */
    jobId?: string | null | undefined;
    /**
     * Unique identifier of the location
     */
    locationId?: string | null | undefined;
    /**
     * Value to pass through to the provider
     */
    passthrough?: { [k: string]: any } | null | undefined;
    /**
     * Questionnaires associated with the application
     */
    questionnaires?: Array<Questionnaire> | null | undefined;
    source?: AtsCreateApplicationRequestDtoSource | null | undefined;
};

/** @internal */
export namespace AtsCreateApplicationRequestDto4$ {
    export const inboundSchema: z.ZodType<AtsCreateApplicationRequestDto4, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AtsCreateApplicationRequestDto4
    > = z.object({});
}

/** @internal */
export namespace AtsCreateApplicationRequestDtoSourceValue$ {
    export const inboundSchema: z.ZodType<
        AtsCreateApplicationRequestDtoSourceValue,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.lazy(() => AtsCreateApplicationRequestDto4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export type Outbound = AtsCreateApplicationRequestDto4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AtsCreateApplicationRequestDtoSourceValue
    > = z.union([
        z.lazy(() => AtsCreateApplicationRequestDto4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace AtsCreateApplicationRequestDtoValue$ {
    export const inboundSchema: z.ZodType<
        AtsCreateApplicationRequestDtoValueOpen,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.nativeEnum(AtsCreateApplicationRequestDtoValue),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema: z.ZodType<
        AtsCreateApplicationRequestDtoValueOpen,
        z.ZodTypeDef,
        AtsCreateApplicationRequestDtoValueOpen
    > = z.union([
        z.nativeEnum(AtsCreateApplicationRequestDtoValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace AtsCreateApplicationRequestDtoApplicationStatus$ {
    export const inboundSchema: z.ZodType<
        AtsCreateApplicationRequestDtoApplicationStatus,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => AtsCreateApplicationRequestDto4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(AtsCreateApplicationRequestDtoValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?:
            | AtsCreateApplicationRequestDto4$.Outbound
            | string
            | number
            | boolean
            | null
            | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AtsCreateApplicationRequestDtoApplicationStatus
    > = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => AtsCreateApplicationRequestDto4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(AtsCreateApplicationRequestDtoValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}

/** @internal */
export namespace AtsCreateApplicationRequestDtoCandidate$ {
    export const inboundSchema: z.ZodType<
        AtsCreateApplicationRequestDtoCandidate,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            company: z.nullable(z.string()).optional(),
            country: z.nullable(z.string()).optional(),
            email: z.nullable(z.string()).optional(),
            first_name: z.nullable(z.string()).optional(),
            hired_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            last_name: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            passthrough: z.nullable(z.record(z.any())).optional(),
            phone_number: z.nullable(z.string()).optional(),
            social_links: z.nullable(z.array(SocialLink$.inboundSchema)).optional(),
            title: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                first_name: "firstName",
                hired_at: "hiredAt",
                last_name: "lastName",
                phone_number: "phoneNumber",
                social_links: "socialLinks",
            });
        });

    export type Outbound = {
        company?: string | null | undefined;
        country?: string | null | undefined;
        email?: string | null | undefined;
        first_name?: string | null | undefined;
        hired_at?: string | null | undefined;
        last_name?: string | null | undefined;
        name?: string | null | undefined;
        passthrough?: { [k: string]: any } | null | undefined;
        phone_number?: string | null | undefined;
        social_links?: Array<SocialLink$.Outbound> | null | undefined;
        title?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AtsCreateApplicationRequestDtoCandidate
    > = z
        .object({
            company: z.nullable(z.string()).optional(),
            country: z.nullable(z.string()).optional(),
            email: z.nullable(z.string()).optional(),
            firstName: z.nullable(z.string()).optional(),
            hiredAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            lastName: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            passthrough: z.nullable(z.record(z.any())).optional(),
            phoneNumber: z.nullable(z.string()).optional(),
            socialLinks: z.nullable(z.array(SocialLink$.outboundSchema)).optional(),
            title: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                firstName: "first_name",
                hiredAt: "hired_at",
                lastName: "last_name",
                phoneNumber: "phone_number",
                socialLinks: "social_links",
            });
        });
}

/** @internal */
export namespace AtsCreateApplicationRequestDtoSource$ {
    export const inboundSchema: z.ZodType<
        AtsCreateApplicationRequestDtoSource,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            id: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            remote_id: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                remote_id: "remoteId",
            });
        });

    export type Outbound = {
        id?: string | null | undefined;
        name?: string | null | undefined;
        remote_id?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AtsCreateApplicationRequestDtoSource
    > = z
        .object({
            id: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            remoteId: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                remoteId: "remote_id",
            });
        });
}

/** @internal */
export namespace AtsCreateApplicationRequestDto$ {
    export const inboundSchema: z.ZodType<AtsCreateApplicationRequestDto, z.ZodTypeDef, unknown> = z
        .object({
            application_status: z
                .nullable(
                    z.lazy(() => AtsCreateApplicationRequestDtoApplicationStatus$.inboundSchema)
                )
                .optional(),
            candidate: z
                .nullable(z.lazy(() => AtsCreateApplicationRequestDtoCandidate$.inboundSchema))
                .optional(),
            candidate_id: z.nullable(z.string()).optional(),
            job_id: z.nullable(z.string()).optional(),
            location_id: z.nullable(z.string()).optional(),
            passthrough: z.nullable(z.record(z.any())).optional(),
            questionnaires: z.nullable(z.array(Questionnaire$.inboundSchema)).optional(),
            source: z
                .nullable(z.lazy(() => AtsCreateApplicationRequestDtoSource$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                application_status: "applicationStatus",
                candidate_id: "candidateId",
                job_id: "jobId",
                location_id: "locationId",
            });
        });

    export type Outbound = {
        application_status?:
            | AtsCreateApplicationRequestDtoApplicationStatus$.Outbound
            | null
            | undefined;
        candidate?: AtsCreateApplicationRequestDtoCandidate$.Outbound | null | undefined;
        candidate_id?: string | null | undefined;
        job_id?: string | null | undefined;
        location_id?: string | null | undefined;
        passthrough?: { [k: string]: any } | null | undefined;
        questionnaires?: Array<Questionnaire$.Outbound> | null | undefined;
        source?: AtsCreateApplicationRequestDtoSource$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AtsCreateApplicationRequestDto> =
        z
            .object({
                applicationStatus: z
                    .nullable(
                        z.lazy(
                            () => AtsCreateApplicationRequestDtoApplicationStatus$.outboundSchema
                        )
                    )
                    .optional(),
                candidate: z
                    .nullable(z.lazy(() => AtsCreateApplicationRequestDtoCandidate$.outboundSchema))
                    .optional(),
                candidateId: z.nullable(z.string()).optional(),
                jobId: z.nullable(z.string()).optional(),
                locationId: z.nullable(z.string()).optional(),
                passthrough: z.nullable(z.record(z.any())).optional(),
                questionnaires: z.nullable(z.array(Questionnaire$.outboundSchema)).optional(),
                source: z
                    .nullable(z.lazy(() => AtsCreateApplicationRequestDtoSource$.outboundSchema))
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    applicationStatus: "application_status",
                    candidateId: "candidate_id",
                    jobId: "job_id",
                    locationId: "location_id",
                });
            });
}
