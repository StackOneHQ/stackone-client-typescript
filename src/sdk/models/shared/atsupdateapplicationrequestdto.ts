/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ApplicationAttachment, ApplicationAttachment$ } from "./applicationattachment";
import { ApplicationCandidate, ApplicationCandidate$ } from "./applicationcandidate";
import {
    ApplicationStatusEnumApiModel,
    ApplicationStatusEnumApiModel$,
} from "./applicationstatusenumapimodel";
import { Questionnaire, Questionnaire$ } from "./questionnaire";
import { z } from "zod";

export type AtsUpdateApplicationRequestDto = {
    applicationStatus?: ApplicationStatusEnumApiModel | undefined;
    attachments?: Array<ApplicationAttachment> | null | undefined;
    candidate?: ApplicationCandidate | undefined;
    /**
     * Unique identifier of the candidate
     */
    candidateId?: string | null | undefined;
    /**
     * The ID of the application to update.
     */
    id?: string | null | undefined;
    /**
     * Unique identifier of the job
     */
    jobId?: string | null | undefined;
    /**
     * Unique identifiers of the locations
     */
    locationIds?: Array<string> | null | undefined;
    /**
     * Questionnaires associated with the application
     */
    questionnaires?: Array<Questionnaire> | null | undefined;
};

/** @internal */
export namespace AtsUpdateApplicationRequestDto$ {
    export type Inbound = {
        application_status?: ApplicationStatusEnumApiModel$.Inbound | undefined;
        attachments?: Array<ApplicationAttachment$.Inbound> | null | undefined;
        candidate?: ApplicationCandidate$.Inbound | undefined;
        candidate_id?: string | null | undefined;
        id?: string | null | undefined;
        job_id?: string | null | undefined;
        location_ids?: Array<string> | null | undefined;
        questionnaires?: Array<Questionnaire$.Inbound> | null | undefined;
    };

    export const inboundSchema: z.ZodType<AtsUpdateApplicationRequestDto, z.ZodTypeDef, Inbound> = z
        .object({
            application_status: ApplicationStatusEnumApiModel$.inboundSchema.optional(),
            attachments: z.nullable(z.array(ApplicationAttachment$.inboundSchema)).optional(),
            candidate: ApplicationCandidate$.inboundSchema.optional(),
            candidate_id: z.nullable(z.string()).optional(),
            id: z.nullable(z.string().default("")),
            job_id: z.nullable(z.string()).optional(),
            location_ids: z.nullable(z.array(z.string())).optional(),
            questionnaires: z.nullable(z.array(Questionnaire$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.application_status === undefined
                    ? null
                    : { applicationStatus: v.application_status }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.candidate === undefined ? null : { candidate: v.candidate }),
                ...(v.candidate_id === undefined ? null : { candidateId: v.candidate_id }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.job_id === undefined ? null : { jobId: v.job_id }),
                ...(v.location_ids === undefined ? null : { locationIds: v.location_ids }),
                ...(v.questionnaires === undefined ? null : { questionnaires: v.questionnaires }),
            };
        });

    export type Outbound = {
        application_status?: ApplicationStatusEnumApiModel$.Outbound | undefined;
        attachments?: Array<ApplicationAttachment$.Outbound> | null | undefined;
        candidate?: ApplicationCandidate$.Outbound | undefined;
        candidate_id?: string | null | undefined;
        id: string | null;
        job_id?: string | null | undefined;
        location_ids?: Array<string> | null | undefined;
        questionnaires?: Array<Questionnaire$.Outbound> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AtsUpdateApplicationRequestDto> =
        z
            .object({
                applicationStatus: ApplicationStatusEnumApiModel$.outboundSchema.optional(),
                attachments: z.nullable(z.array(ApplicationAttachment$.outboundSchema)).optional(),
                candidate: ApplicationCandidate$.outboundSchema.optional(),
                candidateId: z.nullable(z.string()).optional(),
                id: z.nullable(z.string().default("")),
                jobId: z.nullable(z.string()).optional(),
                locationIds: z.nullable(z.array(z.string())).optional(),
                questionnaires: z.nullable(z.array(Questionnaire$.outboundSchema)).optional(),
            })
            .transform((v) => {
                return {
                    ...(v.applicationStatus === undefined
                        ? null
                        : { application_status: v.applicationStatus }),
                    ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                    ...(v.candidate === undefined ? null : { candidate: v.candidate }),
                    ...(v.candidateId === undefined ? null : { candidate_id: v.candidateId }),
                    id: v.id,
                    ...(v.jobId === undefined ? null : { job_id: v.jobId }),
                    ...(v.locationIds === undefined ? null : { location_ids: v.locationIds }),
                    ...(v.questionnaires === undefined
                        ? null
                        : { questionnaires: v.questionnaires }),
                };
            });
}
