/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types";
import {
    QuestionMultipleChoiceAnswers,
    QuestionMultipleChoiceAnswers$,
} from "./questionmultiplechoiceanswers";
import * as z from "zod";

export type Question4 = {};

/**
 * The source value of the questions type.
 */
export type QuestionSourceValue = Question4 | string | number | boolean;

/**
 * The type of the questions.
 */
export enum QuestionValue {
    ShortText = "short_text",
    LongText = "long_text",
    Attachment = "attachment",
    MultiSelect = "multi_select",
    SingleSelect = "single_select",
    Boolean = "boolean",
    Number = "number",
    Date = "date",
    Video = "video",
}
/**
 * The type of the questions.
 */
export type QuestionValueOpen = OpenEnum<typeof QuestionValue>;

export type QuestionType = {
    /**
     * The source value of the questions type.
     */
    sourceValue?: Question4 | string | number | boolean | null | undefined;
    /**
     * The type of the questions.
     */
    value?: QuestionValueOpen | null | undefined;
};

export type Question = {
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    multipleChoiceAnswers?: Array<QuestionMultipleChoiceAnswers> | null | undefined;
    name?: string | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    required?: boolean | null | undefined;
    text?: string | null | undefined;
    type?: QuestionType | null | undefined;
};

/** @internal */
export namespace Question4$ {
    export const inboundSchema: z.ZodType<Question4, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Question4> = z.object({});
}

/** @internal */
export namespace QuestionSourceValue$ {
    export const inboundSchema: z.ZodType<QuestionSourceValue, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => Question4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export type Outbound = Question4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, QuestionSourceValue> = z.union([
        z.lazy(() => Question4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace QuestionValue$ {
    export const inboundSchema: z.ZodType<QuestionValueOpen, z.ZodTypeDef, unknown> = z.union([
        z.nativeEnum(QuestionValue),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema = z.union([
        z.nativeEnum(QuestionValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace QuestionType$ {
    export const inboundSchema: z.ZodType<QuestionType, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => Question4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(QuestionValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?: Question4$.Outbound | string | number | boolean | null | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, QuestionType> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => Question4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(QuestionValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace Question$ {
    export const inboundSchema: z.ZodType<Question, z.ZodTypeDef, unknown> = z
        .object({
            id: z.nullable(z.string()).optional(),
            multiple_choice_answers: z
                .nullable(z.array(QuestionMultipleChoiceAnswers$.inboundSchema))
                .optional(),
            name: z.nullable(z.string()).optional(),
            remote_id: z.nullable(z.string()).optional(),
            required: z.nullable(z.boolean()).optional(),
            text: z.nullable(z.string()).optional(),
            type: z.nullable(z.lazy(() => QuestionType$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.multiple_choice_answers === undefined
                    ? null
                    : { multipleChoiceAnswers: v.multiple_choice_answers }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.remote_id === undefined ? null : { remoteId: v.remote_id }),
                ...(v.required === undefined ? null : { required: v.required }),
                ...(v.text === undefined ? null : { text: v.text }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        id?: string | null | undefined;
        multiple_choice_answers?: Array<QuestionMultipleChoiceAnswers$.Outbound> | null | undefined;
        name?: string | null | undefined;
        remote_id?: string | null | undefined;
        required?: boolean | null | undefined;
        text?: string | null | undefined;
        type?: QuestionType$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Question> = z
        .object({
            id: z.nullable(z.string()).optional(),
            multipleChoiceAnswers: z
                .nullable(z.array(QuestionMultipleChoiceAnswers$.outboundSchema))
                .optional(),
            name: z.nullable(z.string()).optional(),
            remoteId: z.nullable(z.string()).optional(),
            required: z.nullable(z.boolean()).optional(),
            text: z.nullable(z.string()).optional(),
            type: z.nullable(z.lazy(() => QuestionType$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.multipleChoiceAnswers === undefined
                    ? null
                    : { multiple_choice_answers: v.multipleChoiceAnswers }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.remoteId === undefined ? null : { remote_id: v.remoteId }),
                ...(v.required === undefined ? null : { required: v.required }),
                ...(v.text === undefined ? null : { text: v.text }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}
