/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types";
import * as z from "zod";

export type Completion4 = {};

export type CompletionSourceValue = Completion4 | string | number | boolean;

export enum CompletionValue {
    Pass = "pass",
    Fail = "fail",
}
export type CompletionValueOpen = OpenEnum<typeof CompletionValue>;

/**
 * The result of the completion
 */
export type Result = {
    sourceValue?: Completion4 | string | number | boolean | null | undefined;
    value?: CompletionValueOpen | null | undefined;
};

export type Completion = {
    /**
     * The date the completion was created
     */
    completedAt?: string | null | undefined;
    /**
     * The content ID associated with this completion
     */
    contentId?: string | null | undefined;
    /**
     * The external ID associated with this completion
     */
    externalId?: string | null | undefined;
    /**
     * The ID associated with this completion
     */
    id?: string | null | undefined;
    /**
     * Value to pass through to the provider
     */
    passthrough?: { [k: string]: any } | null | undefined;
    /**
     * Provider's unique identifier of the content
     */
    remoteContentId?: string | null | undefined;
    /**
     * Provider's unique identifier of the content
     */
    remoteExternalId?: string | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    /**
     * Provider's unique identifier of the user
     */
    remoteUserId?: string | null | undefined;
    /**
     * The result of the completion
     */
    result?: Result | null | undefined;
    /**
     * The user ID associated with this completion
     */
    userId?: string | null | undefined;
};

/** @internal */
export namespace Completion4$ {
    export const inboundSchema: z.ZodType<Completion4, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Completion4> = z.object({});
}

/** @internal */
export namespace CompletionSourceValue$ {
    export const inboundSchema: z.ZodType<CompletionSourceValue, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => Completion4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export type Outbound = Completion4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CompletionSourceValue> = z.union(
        [z.lazy(() => Completion4$.outboundSchema), z.string(), z.number(), z.boolean()]
    );
}

/** @internal */
export namespace CompletionValue$ {
    export const inboundSchema: z.ZodType<CompletionValueOpen, z.ZodTypeDef, unknown> = z.union([
        z.nativeEnum(CompletionValue),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema = z.union([
        z.nativeEnum(CompletionValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace Result$ {
    export const inboundSchema: z.ZodType<Result, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => Completion4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(CompletionValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?: Completion4$.Outbound | string | number | boolean | null | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Result> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => Completion4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(CompletionValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}

/** @internal */
export namespace Completion$ {
    export const inboundSchema: z.ZodType<Completion, z.ZodTypeDef, unknown> = z
        .object({
            completed_at: z.nullable(z.string()).optional(),
            content_id: z.nullable(z.string()).optional(),
            external_id: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            passthrough: z.nullable(z.record(z.any())).optional(),
            remote_content_id: z.nullable(z.string()).optional(),
            remote_external_id: z.nullable(z.string()).optional(),
            remote_id: z.nullable(z.string()).optional(),
            remote_user_id: z.nullable(z.string()).optional(),
            result: z.nullable(z.lazy(() => Result$.inboundSchema)).optional(),
            user_id: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                completed_at: "completedAt",
                content_id: "contentId",
                external_id: "externalId",
                remote_content_id: "remoteContentId",
                remote_external_id: "remoteExternalId",
                remote_id: "remoteId",
                remote_user_id: "remoteUserId",
                user_id: "userId",
            });
        });

    export type Outbound = {
        completed_at?: string | null | undefined;
        content_id?: string | null | undefined;
        external_id?: string | null | undefined;
        id?: string | null | undefined;
        passthrough?: { [k: string]: any } | null | undefined;
        remote_content_id?: string | null | undefined;
        remote_external_id?: string | null | undefined;
        remote_id?: string | null | undefined;
        remote_user_id?: string | null | undefined;
        result?: Result$.Outbound | null | undefined;
        user_id?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Completion> = z
        .object({
            completedAt: z.nullable(z.string()).optional(),
            contentId: z.nullable(z.string()).optional(),
            externalId: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            passthrough: z.nullable(z.record(z.any())).optional(),
            remoteContentId: z.nullable(z.string()).optional(),
            remoteExternalId: z.nullable(z.string()).optional(),
            remoteId: z.nullable(z.string()).optional(),
            remoteUserId: z.nullable(z.string()).optional(),
            result: z.nullable(z.lazy(() => Result$.outboundSchema)).optional(),
            userId: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                completedAt: "completed_at",
                contentId: "content_id",
                externalId: "external_id",
                remoteContentId: "remote_content_id",
                remoteExternalId: "remote_external_id",
                remoteId: "remote_id",
                remoteUserId: "remote_user_id",
                userId: "user_id",
            });
        });
}
