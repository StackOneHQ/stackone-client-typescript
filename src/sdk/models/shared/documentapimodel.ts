/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Content, Content$ } from "./content";
import { DocumentTypeEnum, DocumentTypeEnum$ } from "./documenttypeenum";
import { z } from "zod";

export type DocumentApiModel = {
    /**
     * The content of the document
     */
    content: Array<Content>;
    /**
     * The creation date of the document
     */
    createdAt?: Date | undefined;
    /**
     * The unique ID of the document
     */
    id?: string | undefined;
    /**
     * The name of the document
     */
    name?: string | undefined;
    /**
     * The path where the document is stored
     */
    path?: string | undefined;
    /**
     * The content type of the document
     */
    type?: DocumentTypeEnum | undefined;
    /**
     * The update date of the document
     */
    updatedAt?: Date | undefined;
};

/** @internal */
export namespace DocumentApiModel$ {
    export type Inbound = {
        content: Array<Content$.Inbound>;
        created_at?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
        path?: string | undefined;
        type?: DocumentTypeEnum$.Inbound | undefined;
        updated_at?: string | undefined;
    };

    export const inboundSchema: z.ZodType<DocumentApiModel, z.ZodTypeDef, Inbound> = z
        .object({
            content: z.array(Content$.inboundSchema),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            id: z.string().optional(),
            name: z.string().optional(),
            path: z.string().optional(),
            type: DocumentTypeEnum$.inboundSchema.optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                content: v.content,
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.path === undefined ? null : { path: v.path }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        content: Array<Content$.Outbound>;
        created_at?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
        path?: string | undefined;
        type?: DocumentTypeEnum$.Outbound | undefined;
        updated_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DocumentApiModel> = z
        .object({
            content: z.array(Content$.outboundSchema),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            id: z.string().optional(),
            name: z.string().optional(),
            path: z.string().optional(),
            type: DocumentTypeEnum$.outboundSchema.optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                content: v.content,
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.path === undefined ? null : { path: v.path }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}
