/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import {
    AccountAddress,
    AccountAddress$inboundSchema,
    AccountAddress$Outbound,
    AccountAddress$outboundSchema,
} from "./accountaddress.js";
import * as z from "zod";

export type Account = {
    addresses?: Array<AccountAddress> | null | undefined;
    annualRevenue?: string | null | undefined;
    /**
     * Timestamp when the account was created
     */
    createdAt?: Date | null | undefined;
    description?: string | null | undefined;
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    /**
     * Values of the industries
     */
    industries?: Array<string> | null | undefined;
    name?: string | null | undefined;
    ownerId?: string | null | undefined;
    /**
     * List of account phone numbers
     */
    phoneNumbers?: Array<string> | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    /**
     * Provider's unique identifier of the owner
     */
    remoteOwnerId?: string | null | undefined;
    /**
     * Timestamp when the account was last updated
     */
    updatedAt?: Date | null | undefined;
    website?: string | null | undefined;
};

/** @internal */
export const Account$inboundSchema: z.ZodType<Account, z.ZodTypeDef, unknown> = z
    .object({
        addresses: z.nullable(z.array(AccountAddress$inboundSchema)).optional(),
        annual_revenue: z.nullable(z.string()).optional(),
        created_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        description: z.nullable(z.string()).optional(),
        id: z.nullable(z.string()).optional(),
        industries: z.nullable(z.array(z.string())).optional(),
        name: z.nullable(z.string()).optional(),
        owner_id: z.nullable(z.string()).optional(),
        phone_numbers: z.nullable(z.array(z.string())).optional(),
        remote_id: z.nullable(z.string()).optional(),
        remote_owner_id: z.nullable(z.string()).optional(),
        updated_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        website: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            annual_revenue: "annualRevenue",
            created_at: "createdAt",
            owner_id: "ownerId",
            phone_numbers: "phoneNumbers",
            remote_id: "remoteId",
            remote_owner_id: "remoteOwnerId",
            updated_at: "updatedAt",
        });
    });

/** @internal */
export type Account$Outbound = {
    addresses?: Array<AccountAddress$Outbound> | null | undefined;
    annual_revenue?: string | null | undefined;
    created_at?: string | null | undefined;
    description?: string | null | undefined;
    id?: string | null | undefined;
    industries?: Array<string> | null | undefined;
    name?: string | null | undefined;
    owner_id?: string | null | undefined;
    phone_numbers?: Array<string> | null | undefined;
    remote_id?: string | null | undefined;
    remote_owner_id?: string | null | undefined;
    updated_at?: string | null | undefined;
    website?: string | null | undefined;
};

/** @internal */
export const Account$outboundSchema: z.ZodType<Account$Outbound, z.ZodTypeDef, Account> = z
    .object({
        addresses: z.nullable(z.array(AccountAddress$outboundSchema)).optional(),
        annualRevenue: z.nullable(z.string()).optional(),
        createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        description: z.nullable(z.string()).optional(),
        id: z.nullable(z.string()).optional(),
        industries: z.nullable(z.array(z.string())).optional(),
        name: z.nullable(z.string()).optional(),
        ownerId: z.nullable(z.string()).optional(),
        phoneNumbers: z.nullable(z.array(z.string())).optional(),
        remoteId: z.nullable(z.string()).optional(),
        remoteOwnerId: z.nullable(z.string()).optional(),
        updatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        website: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            annualRevenue: "annual_revenue",
            createdAt: "created_at",
            ownerId: "owner_id",
            phoneNumbers: "phone_numbers",
            remoteId: "remote_id",
            remoteOwnerId: "remote_owner_id",
            updatedAt: "updated_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Account$ {
    /** @deprecated use `Account$inboundSchema` instead. */
    export const inboundSchema = Account$inboundSchema;
    /** @deprecated use `Account$outboundSchema` instead. */
    export const outboundSchema = Account$outboundSchema;
    /** @deprecated use `Account$Outbound` instead. */
    export type Outbound = Account$Outbound;
}
