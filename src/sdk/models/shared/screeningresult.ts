/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Score information
 */
export type ScreeningResultScore = {
  /**
   * Score label
   */
  label?: string | null | undefined;
  /**
   * Maximum score value
   */
  max?: string | null | undefined;
  /**
   * Minimum score value
   */
  min?: string | null | undefined;
  /**
   * Score value
   */
  value?: string | null | undefined;
};

/**
 * Result status
 */
export enum ScreeningResultStatus {
  Pending = "pending",
  InProgress = "in_progress",
  Completed = "completed",
  Failed = "failed",
  Cancelled = "cancelled",
  UnmappedValue = "unmapped_value",
}
/**
 * Result status
 */
export type ScreeningResultStatusOpen = OpenEnum<typeof ScreeningResultStatus>;

export type ScreeningResult = {
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Order ID associated with this result
   */
  orderId?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * URL to view the detailed result
   */
  resultUrl?: string | null | undefined;
  /**
   * Score information
   */
  score?: ScreeningResultScore | null | undefined;
  /**
   * Start date of the screening
   */
  startDate?: Date | null | undefined;
  /**
   * Result status
   */
  status?: ScreeningResultStatusOpen | null | undefined;
  /**
   * Submission date of the screening
   */
  submissionDate?: Date | null | undefined;
  /**
   * Summary of the screening result
   */
  summary?: string | null | undefined;
  /**
   * Custom Unified Fields configured in your StackOne project
   */
  unifiedCustomFields?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const ScreeningResultScore$inboundSchema: z.ZodType<
  ScreeningResultScore,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.nullable(z.string()).optional(),
  max: z.nullable(z.string()).optional(),
  min: z.nullable(z.string()).optional(),
  value: z.nullable(z.string()).optional(),
});

/** @internal */
export type ScreeningResultScore$Outbound = {
  label?: string | null | undefined;
  max?: string | null | undefined;
  min?: string | null | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const ScreeningResultScore$outboundSchema: z.ZodType<
  ScreeningResultScore$Outbound,
  z.ZodTypeDef,
  ScreeningResultScore
> = z.object({
  label: z.nullable(z.string()).optional(),
  max: z.nullable(z.string()).optional(),
  min: z.nullable(z.string()).optional(),
  value: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScreeningResultScore$ {
  /** @deprecated use `ScreeningResultScore$inboundSchema` instead. */
  export const inboundSchema = ScreeningResultScore$inboundSchema;
  /** @deprecated use `ScreeningResultScore$outboundSchema` instead. */
  export const outboundSchema = ScreeningResultScore$outboundSchema;
  /** @deprecated use `ScreeningResultScore$Outbound` instead. */
  export type Outbound = ScreeningResultScore$Outbound;
}

export function screeningResultScoreToJSON(
  screeningResultScore: ScreeningResultScore,
): string {
  return JSON.stringify(
    ScreeningResultScore$outboundSchema.parse(screeningResultScore),
  );
}

export function screeningResultScoreFromJSON(
  jsonString: string,
): SafeParseResult<ScreeningResultScore, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScreeningResultScore$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScreeningResultScore' from JSON`,
  );
}

/** @internal */
export const ScreeningResultStatus$inboundSchema: z.ZodType<
  ScreeningResultStatusOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ScreeningResultStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ScreeningResultStatus$outboundSchema: z.ZodType<
  ScreeningResultStatusOpen,
  z.ZodTypeDef,
  ScreeningResultStatusOpen
> = z.union([
  z.nativeEnum(ScreeningResultStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScreeningResultStatus$ {
  /** @deprecated use `ScreeningResultStatus$inboundSchema` instead. */
  export const inboundSchema = ScreeningResultStatus$inboundSchema;
  /** @deprecated use `ScreeningResultStatus$outboundSchema` instead. */
  export const outboundSchema = ScreeningResultStatus$outboundSchema;
}

/** @internal */
export const ScreeningResult$inboundSchema: z.ZodType<
  ScreeningResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  order_id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  result_url: z.nullable(z.string()).optional(),
  score: z.nullable(z.lazy(() => ScreeningResultScore$inboundSchema))
    .optional(),
  start_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  status: z.nullable(ScreeningResultStatus$inboundSchema).optional(),
  submission_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  summary: z.nullable(z.string()).optional(),
  unified_custom_fields: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    "order_id": "orderId",
    "remote_id": "remoteId",
    "result_url": "resultUrl",
    "start_date": "startDate",
    "submission_date": "submissionDate",
    "unified_custom_fields": "unifiedCustomFields",
  });
});

/** @internal */
export type ScreeningResult$Outbound = {
  id?: string | null | undefined;
  order_id?: string | null | undefined;
  remote_id?: string | null | undefined;
  result_url?: string | null | undefined;
  score?: ScreeningResultScore$Outbound | null | undefined;
  start_date?: string | null | undefined;
  status?: string | null | undefined;
  submission_date?: string | null | undefined;
  summary?: string | null | undefined;
  unified_custom_fields?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const ScreeningResult$outboundSchema: z.ZodType<
  ScreeningResult$Outbound,
  z.ZodTypeDef,
  ScreeningResult
> = z.object({
  id: z.nullable(z.string()).optional(),
  orderId: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  resultUrl: z.nullable(z.string()).optional(),
  score: z.nullable(z.lazy(() => ScreeningResultScore$outboundSchema))
    .optional(),
  startDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  status: z.nullable(ScreeningResultStatus$outboundSchema).optional(),
  submissionDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  summary: z.nullable(z.string()).optional(),
  unifiedCustomFields: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    orderId: "order_id",
    remoteId: "remote_id",
    resultUrl: "result_url",
    startDate: "start_date",
    submissionDate: "submission_date",
    unifiedCustomFields: "unified_custom_fields",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScreeningResult$ {
  /** @deprecated use `ScreeningResult$inboundSchema` instead. */
  export const inboundSchema = ScreeningResult$inboundSchema;
  /** @deprecated use `ScreeningResult$outboundSchema` instead. */
  export const outboundSchema = ScreeningResult$outboundSchema;
  /** @deprecated use `ScreeningResult$Outbound` instead. */
  export type Outbound = ScreeningResult$Outbound;
}

export function screeningResultToJSON(
  screeningResult: ScreeningResult,
): string {
  return JSON.stringify(ScreeningResult$outboundSchema.parse(screeningResult));
}

export function screeningResultFromJSON(
  jsonString: string,
): SafeParseResult<ScreeningResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScreeningResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScreeningResult' from JSON`,
  );
}
