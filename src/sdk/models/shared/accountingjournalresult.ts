/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  JournalLine,
  JournalLine$inboundSchema,
  JournalLine$Outbound,
  JournalLine$outboundSchema,
} from "./journalline.js";
import {
  RawResponse,
  RawResponse$inboundSchema,
  RawResponse$Outbound,
  RawResponse$outboundSchema,
} from "./rawresponse.js";

export type AccountingJournalResult4 = {};

export type AccountingJournalResultSourceValue =
  | string
  | number
  | boolean
  | AccountingJournalResult4
  | Array<any>;

/**
 * The journal status
 */
export enum AccountingJournalResultValue {
  Draft = "draft",
  Posted = "posted",
  Void = "void",
  UnmappedValue = "unmapped_value",
}
/**
 * The journal status
 */
export type AccountingJournalResultValueOpen = OpenEnum<
  typeof AccountingJournalResultValue
>;

/**
 * Status of the journal
 */
export type AccountingJournalResultStatus = {
  sourceValue?:
    | string
    | number
    | boolean
    | AccountingJournalResult4
    | Array<any>
    | null
    | undefined;
  /**
   * The journal status
   */
  value?: AccountingJournalResultValueOpen | null | undefined;
};

export type AccountingJournalResultData = {
  /**
   * ID of the company this journal belongs to
   */
  companyId?: string | null | undefined;
  /**
   * Timestamp when the journal was created
   */
  createdAt?: Date | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * List of journal lines
   */
  lines?: Array<JournalLine> | null | undefined;
  /**
   * Memo or description for the journal
   */
  memo?: string | null | undefined;
  /**
   * Timestamp when the journal was posted
   */
  postedAt?: Date | null | undefined;
  /**
   * Reference number for the journal
   */
  reference?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * Status of the journal
   */
  status?: AccountingJournalResultStatus | null | undefined;
  /**
   * Date of the journal transaction
   */
  transactionDate?: Date | null | undefined;
  /**
   * Timestamp when the journal was last updated
   */
  updatedAt?: Date | null | undefined;
};

export type AccountingJournalResult = {
  data?: AccountingJournalResultData | null | undefined;
  raw?: Array<RawResponse> | null | undefined;
};

/** @internal */
export const AccountingJournalResult4$inboundSchema: z.ZodType<
  AccountingJournalResult4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AccountingJournalResult4$Outbound = {};

/** @internal */
export const AccountingJournalResult4$outboundSchema: z.ZodType<
  AccountingJournalResult4$Outbound,
  z.ZodTypeDef,
  AccountingJournalResult4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingJournalResult4$ {
  /** @deprecated use `AccountingJournalResult4$inboundSchema` instead. */
  export const inboundSchema = AccountingJournalResult4$inboundSchema;
  /** @deprecated use `AccountingJournalResult4$outboundSchema` instead. */
  export const outboundSchema = AccountingJournalResult4$outboundSchema;
  /** @deprecated use `AccountingJournalResult4$Outbound` instead. */
  export type Outbound = AccountingJournalResult4$Outbound;
}

export function accountingJournalResult4ToJSON(
  accountingJournalResult4: AccountingJournalResult4,
): string {
  return JSON.stringify(
    AccountingJournalResult4$outboundSchema.parse(accountingJournalResult4),
  );
}

export function accountingJournalResult4FromJSON(
  jsonString: string,
): SafeParseResult<AccountingJournalResult4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingJournalResult4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingJournalResult4' from JSON`,
  );
}

/** @internal */
export const AccountingJournalResultSourceValue$inboundSchema: z.ZodType<
  AccountingJournalResultSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => AccountingJournalResult4$inboundSchema),
  z.array(z.any()),
]);

/** @internal */
export type AccountingJournalResultSourceValue$Outbound =
  | string
  | number
  | boolean
  | AccountingJournalResult4$Outbound
  | Array<any>;

/** @internal */
export const AccountingJournalResultSourceValue$outboundSchema: z.ZodType<
  AccountingJournalResultSourceValue$Outbound,
  z.ZodTypeDef,
  AccountingJournalResultSourceValue
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => AccountingJournalResult4$outboundSchema),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingJournalResultSourceValue$ {
  /** @deprecated use `AccountingJournalResultSourceValue$inboundSchema` instead. */
  export const inboundSchema = AccountingJournalResultSourceValue$inboundSchema;
  /** @deprecated use `AccountingJournalResultSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    AccountingJournalResultSourceValue$outboundSchema;
  /** @deprecated use `AccountingJournalResultSourceValue$Outbound` instead. */
  export type Outbound = AccountingJournalResultSourceValue$Outbound;
}

export function accountingJournalResultSourceValueToJSON(
  accountingJournalResultSourceValue: AccountingJournalResultSourceValue,
): string {
  return JSON.stringify(
    AccountingJournalResultSourceValue$outboundSchema.parse(
      accountingJournalResultSourceValue,
    ),
  );
}

export function accountingJournalResultSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<AccountingJournalResultSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingJournalResultSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingJournalResultSourceValue' from JSON`,
  );
}

/** @internal */
export const AccountingJournalResultValue$inboundSchema: z.ZodType<
  AccountingJournalResultValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AccountingJournalResultValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AccountingJournalResultValue$outboundSchema: z.ZodType<
  AccountingJournalResultValueOpen,
  z.ZodTypeDef,
  AccountingJournalResultValueOpen
> = z.union([
  z.nativeEnum(AccountingJournalResultValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingJournalResultValue$ {
  /** @deprecated use `AccountingJournalResultValue$inboundSchema` instead. */
  export const inboundSchema = AccountingJournalResultValue$inboundSchema;
  /** @deprecated use `AccountingJournalResultValue$outboundSchema` instead. */
  export const outboundSchema = AccountingJournalResultValue$outboundSchema;
}

/** @internal */
export const AccountingJournalResultStatus$inboundSchema: z.ZodType<
  AccountingJournalResultStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => AccountingJournalResult4$inboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(AccountingJournalResultValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type AccountingJournalResultStatus$Outbound = {
  source_value?:
    | string
    | number
    | boolean
    | AccountingJournalResult4$Outbound
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const AccountingJournalResultStatus$outboundSchema: z.ZodType<
  AccountingJournalResultStatus$Outbound,
  z.ZodTypeDef,
  AccountingJournalResultStatus
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => AccountingJournalResult4$outboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(AccountingJournalResultValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingJournalResultStatus$ {
  /** @deprecated use `AccountingJournalResultStatus$inboundSchema` instead. */
  export const inboundSchema = AccountingJournalResultStatus$inboundSchema;
  /** @deprecated use `AccountingJournalResultStatus$outboundSchema` instead. */
  export const outboundSchema = AccountingJournalResultStatus$outboundSchema;
  /** @deprecated use `AccountingJournalResultStatus$Outbound` instead. */
  export type Outbound = AccountingJournalResultStatus$Outbound;
}

export function accountingJournalResultStatusToJSON(
  accountingJournalResultStatus: AccountingJournalResultStatus,
): string {
  return JSON.stringify(
    AccountingJournalResultStatus$outboundSchema.parse(
      accountingJournalResultStatus,
    ),
  );
}

export function accountingJournalResultStatusFromJSON(
  jsonString: string,
): SafeParseResult<AccountingJournalResultStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingJournalResultStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingJournalResultStatus' from JSON`,
  );
}

/** @internal */
export const AccountingJournalResultData$inboundSchema: z.ZodType<
  AccountingJournalResultData,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_id: z.nullable(z.string()).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  lines: z.nullable(z.array(JournalLine$inboundSchema)).optional(),
  memo: z.nullable(z.string()).optional(),
  posted_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  reference: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  status: z.nullable(z.lazy(() => AccountingJournalResultStatus$inboundSchema))
    .optional(),
  transaction_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_id": "companyId",
    "created_at": "createdAt",
    "posted_at": "postedAt",
    "remote_id": "remoteId",
    "transaction_date": "transactionDate",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type AccountingJournalResultData$Outbound = {
  company_id?: string | null | undefined;
  created_at?: string | null | undefined;
  id?: string | null | undefined;
  lines?: Array<JournalLine$Outbound> | null | undefined;
  memo?: string | null | undefined;
  posted_at?: string | null | undefined;
  reference?: string | null | undefined;
  remote_id?: string | null | undefined;
  status?: AccountingJournalResultStatus$Outbound | null | undefined;
  transaction_date?: string | null | undefined;
  updated_at?: string | null | undefined;
};

/** @internal */
export const AccountingJournalResultData$outboundSchema: z.ZodType<
  AccountingJournalResultData$Outbound,
  z.ZodTypeDef,
  AccountingJournalResultData
> = z.object({
  companyId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  id: z.nullable(z.string()).optional(),
  lines: z.nullable(z.array(JournalLine$outboundSchema)).optional(),
  memo: z.nullable(z.string()).optional(),
  postedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  reference: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  status: z.nullable(z.lazy(() => AccountingJournalResultStatus$outboundSchema))
    .optional(),
  transactionDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company_id",
    createdAt: "created_at",
    postedAt: "posted_at",
    remoteId: "remote_id",
    transactionDate: "transaction_date",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingJournalResultData$ {
  /** @deprecated use `AccountingJournalResultData$inboundSchema` instead. */
  export const inboundSchema = AccountingJournalResultData$inboundSchema;
  /** @deprecated use `AccountingJournalResultData$outboundSchema` instead. */
  export const outboundSchema = AccountingJournalResultData$outboundSchema;
  /** @deprecated use `AccountingJournalResultData$Outbound` instead. */
  export type Outbound = AccountingJournalResultData$Outbound;
}

export function accountingJournalResultDataToJSON(
  accountingJournalResultData: AccountingJournalResultData,
): string {
  return JSON.stringify(
    AccountingJournalResultData$outboundSchema.parse(
      accountingJournalResultData,
    ),
  );
}

export function accountingJournalResultDataFromJSON(
  jsonString: string,
): SafeParseResult<AccountingJournalResultData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingJournalResultData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingJournalResultData' from JSON`,
  );
}

/** @internal */
export const AccountingJournalResult$inboundSchema: z.ZodType<
  AccountingJournalResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(z.lazy(() => AccountingJournalResultData$inboundSchema))
    .optional(),
  raw: z.nullable(z.array(RawResponse$inboundSchema)).optional(),
});

/** @internal */
export type AccountingJournalResult$Outbound = {
  data?: AccountingJournalResultData$Outbound | null | undefined;
  raw?: Array<RawResponse$Outbound> | null | undefined;
};

/** @internal */
export const AccountingJournalResult$outboundSchema: z.ZodType<
  AccountingJournalResult$Outbound,
  z.ZodTypeDef,
  AccountingJournalResult
> = z.object({
  data: z.nullable(z.lazy(() => AccountingJournalResultData$outboundSchema))
    .optional(),
  raw: z.nullable(z.array(RawResponse$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingJournalResult$ {
  /** @deprecated use `AccountingJournalResult$inboundSchema` instead. */
  export const inboundSchema = AccountingJournalResult$inboundSchema;
  /** @deprecated use `AccountingJournalResult$outboundSchema` instead. */
  export const outboundSchema = AccountingJournalResult$outboundSchema;
  /** @deprecated use `AccountingJournalResult$Outbound` instead. */
  export type Outbound = AccountingJournalResult$Outbound;
}

export function accountingJournalResultToJSON(
  accountingJournalResult: AccountingJournalResult,
): string {
  return JSON.stringify(
    AccountingJournalResult$outboundSchema.parse(accountingJournalResult),
  );
}

export function accountingJournalResultFromJSON(
  jsonString: string,
): SafeParseResult<AccountingJournalResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingJournalResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingJournalResult' from JSON`,
  );
}
