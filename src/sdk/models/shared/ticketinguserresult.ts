/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RawResponse,
  RawResponse$inboundSchema,
  RawResponse$Outbound,
  RawResponse$outboundSchema,
} from "./rawresponse.js";

export type TicketingUserResultData = {};

export type TicketingUserResult = {
  data?: TicketingUserResultData | null | undefined;
  raw?: Array<RawResponse> | null | undefined;
};

/** @internal */
export const TicketingUserResultData$inboundSchema: z.ZodType<
  TicketingUserResultData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TicketingUserResultData$Outbound = {};

/** @internal */
export const TicketingUserResultData$outboundSchema: z.ZodType<
  TicketingUserResultData$Outbound,
  z.ZodTypeDef,
  TicketingUserResultData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingUserResultData$ {
  /** @deprecated use `TicketingUserResultData$inboundSchema` instead. */
  export const inboundSchema = TicketingUserResultData$inboundSchema;
  /** @deprecated use `TicketingUserResultData$outboundSchema` instead. */
  export const outboundSchema = TicketingUserResultData$outboundSchema;
  /** @deprecated use `TicketingUserResultData$Outbound` instead. */
  export type Outbound = TicketingUserResultData$Outbound;
}

export function ticketingUserResultDataToJSON(
  ticketingUserResultData: TicketingUserResultData,
): string {
  return JSON.stringify(
    TicketingUserResultData$outboundSchema.parse(ticketingUserResultData),
  );
}

export function ticketingUserResultDataFromJSON(
  jsonString: string,
): SafeParseResult<TicketingUserResultData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingUserResultData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingUserResultData' from JSON`,
  );
}

/** @internal */
export const TicketingUserResult$inboundSchema: z.ZodType<
  TicketingUserResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(z.lazy(() => TicketingUserResultData$inboundSchema))
    .optional(),
  raw: z.nullable(z.array(RawResponse$inboundSchema)).optional(),
});

/** @internal */
export type TicketingUserResult$Outbound = {
  data?: TicketingUserResultData$Outbound | null | undefined;
  raw?: Array<RawResponse$Outbound> | null | undefined;
};

/** @internal */
export const TicketingUserResult$outboundSchema: z.ZodType<
  TicketingUserResult$Outbound,
  z.ZodTypeDef,
  TicketingUserResult
> = z.object({
  data: z.nullable(z.lazy(() => TicketingUserResultData$outboundSchema))
    .optional(),
  raw: z.nullable(z.array(RawResponse$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingUserResult$ {
  /** @deprecated use `TicketingUserResult$inboundSchema` instead. */
  export const inboundSchema = TicketingUserResult$inboundSchema;
  /** @deprecated use `TicketingUserResult$outboundSchema` instead. */
  export const outboundSchema = TicketingUserResult$outboundSchema;
  /** @deprecated use `TicketingUserResult$Outbound` instead. */
  export type Outbound = TicketingUserResult$Outbound;
}

export function ticketingUserResultToJSON(
  ticketingUserResult: TicketingUserResult,
): string {
  return JSON.stringify(
    TicketingUserResult$outboundSchema.parse(ticketingUserResult),
  );
}

export function ticketingUserResultFromJSON(
  jsonString: string,
): SafeParseResult<TicketingUserResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingUserResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingUserResult' from JSON`,
  );
}
