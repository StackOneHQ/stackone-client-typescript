/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as z from "zod";

export enum ConnectSessionTokenCategories {
    Ats = "ats",
    Hris = "hris",
    HrisLegacy = "hris-legacy",
    Crm = "crm",
    Iam = "iam",
    Marketing = "marketing",
    Lms = "lms",
    Stackone = "stackone",
}

export type ConnectSessionToken = {
    accountId?: string | null | undefined;
    categories?: Array<ConnectSessionTokenCategories> | null | undefined;
    createdAt: Date;
    id: number;
    label?: string | null | undefined;
    organizationId: number;
    originOwnerId: string;
    originOwnerName: string;
    originUsername?: string | null | undefined;
    projectId: string;
    provider?: string | null | undefined;
    token: string;
};

/** @internal */
export namespace ConnectSessionTokenCategories$ {
    export const inboundSchema = z.nativeEnum(ConnectSessionTokenCategories);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ConnectSessionToken$ {
    export const inboundSchema: z.ZodType<ConnectSessionToken, z.ZodTypeDef, unknown> = z
        .object({
            account_id: z.nullable(z.string()).optional(),
            categories: z
                .nullable(z.array(ConnectSessionTokenCategories$.inboundSchema))
                .optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            id: z.number(),
            label: z.nullable(z.string()).optional(),
            organization_id: z.number(),
            origin_owner_id: z.string(),
            origin_owner_name: z.string(),
            origin_username: z.nullable(z.string()).optional(),
            project_id: z.string(),
            provider: z.nullable(z.string()).optional(),
            token: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                account_id: "accountId",
                created_at: "createdAt",
                organization_id: "organizationId",
                origin_owner_id: "originOwnerId",
                origin_owner_name: "originOwnerName",
                origin_username: "originUsername",
                project_id: "projectId",
            });
        });

    export type Outbound = {
        account_id?: string | null | undefined;
        categories?: Array<string> | null | undefined;
        created_at: string;
        id: number;
        label?: string | null | undefined;
        organization_id: number;
        origin_owner_id: string;
        origin_owner_name: string;
        origin_username?: string | null | undefined;
        project_id: string;
        provider?: string | null | undefined;
        token: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectSessionToken> = z
        .object({
            accountId: z.nullable(z.string()).optional(),
            categories: z
                .nullable(z.array(ConnectSessionTokenCategories$.outboundSchema))
                .optional(),
            createdAt: z.date().transform((v) => v.toISOString()),
            id: z.number(),
            label: z.nullable(z.string()).optional(),
            organizationId: z.number(),
            originOwnerId: z.string(),
            originOwnerName: z.string(),
            originUsername: z.nullable(z.string()).optional(),
            projectId: z.string(),
            provider: z.nullable(z.string()).optional(),
            token: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                accountId: "account_id",
                createdAt: "created_at",
                organizationId: "organization_id",
                originOwnerId: "origin_owner_id",
                originOwnerName: "origin_owner_name",
                originUsername: "origin_username",
                projectId: "project_id",
            });
        });
}
