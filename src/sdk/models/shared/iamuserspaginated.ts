/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { IamUser, IamUser$ } from "./iamuser";
import { RawResponse, RawResponse$ } from "./rawresponse";
import * as z from "zod";

export type IamUsersPaginated = {
    data: Array<IamUser>;
    next?: string | null | undefined;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    nextPage?: string | null | undefined;
    raw: Array<RawResponse>;
};

/** @internal */
export namespace IamUsersPaginated$ {
    export type Inbound = {
        data: Array<IamUser$.Inbound>;
        next?: string | null | undefined;
        next_page?: string | null | undefined;
        raw: Array<RawResponse$.Inbound>;
    };

    export const inboundSchema: z.ZodType<IamUsersPaginated, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.array(IamUser$.inboundSchema),
            next: z.nullable(z.string()).optional(),
            next_page: z.nullable(z.string()).optional(),
            raw: z.array(RawResponse$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
                ...(v.next === undefined ? null : { next: v.next }),
                ...(v.next_page === undefined ? null : { nextPage: v.next_page }),
                raw: v.raw,
            };
        });

    export type Outbound = {
        data: Array<IamUser$.Outbound>;
        next?: string | null | undefined;
        next_page?: string | null | undefined;
        raw: Array<RawResponse$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IamUsersPaginated> = z
        .object({
            data: z.array(IamUser$.outboundSchema),
            next: z.nullable(z.string()).optional(),
            nextPage: z.nullable(z.string()).optional(),
            raw: z.array(RawResponse$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
                ...(v.next === undefined ? null : { next: v.next }),
                ...(v.nextPage === undefined ? null : { next_page: v.nextPage }),
                raw: v.raw,
            };
        });
}
