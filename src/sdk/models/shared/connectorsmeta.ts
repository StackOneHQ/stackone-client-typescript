/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * The provider service category
 */
export enum Category {
    Ats = "ats",
    Hris = "hris",
    HrisLegacy = "hris-legacy",
    Crm = "crm",
    Marketing = "marketing",
    Stackone = "stackone",
}

export type Models = {};

/**
 * Resources for this provider, such as image assets
 */
export type Resources = {};

export type ConnectorsMeta = {
    /**
     * Whether this provider has been enabled on the integrations page for the current project
     */
    active: boolean;
    /**
     * The provider service category
     */
    category: Category;
    models: Models;
    /**
     * The provider key
     */
    provider: string;
    /**
     * The provider human-readable label
     */
    providerName: string;
    /**
     * Resources for this provider, such as image assets
     */
    resources?: Resources | null | undefined;
};

/** @internal */
export const Category$ = z.nativeEnum(Category);

/** @internal */
export namespace Models$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Models, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Models> = z.object({});
}

/** @internal */
export namespace Resources$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Resources, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Resources> = z.object({});
}

/** @internal */
export namespace ConnectorsMeta$ {
    export type Inbound = {
        active: boolean;
        category: Category;
        models: Models$.Inbound;
        provider: string;
        provider_name: string;
        resources?: Resources$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<ConnectorsMeta, z.ZodTypeDef, Inbound> = z
        .object({
            active: z.boolean(),
            category: Category$,
            models: z.lazy(() => Models$.inboundSchema),
            provider: z.string(),
            provider_name: z.string(),
            resources: z.nullable(z.lazy(() => Resources$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                active: v.active,
                category: v.category,
                models: v.models,
                provider: v.provider,
                providerName: v.provider_name,
                ...(v.resources === undefined ? null : { resources: v.resources }),
            };
        });

    export type Outbound = {
        active: boolean;
        category: Category;
        models: Models$.Outbound;
        provider: string;
        provider_name: string;
        resources?: Resources$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsMeta> = z
        .object({
            active: z.boolean(),
            category: Category$,
            models: z.lazy(() => Models$.outboundSchema),
            provider: z.string(),
            providerName: z.string(),
            resources: z.nullable(z.lazy(() => Resources$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                active: v.active,
                category: v.category,
                models: v.models,
                provider: v.provider,
                provider_name: v.providerName,
                ...(v.resources === undefined ? null : { resources: v.resources }),
            };
        });
}
