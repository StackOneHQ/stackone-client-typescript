/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreatePackage = {
  /**
   * Package description
   */
  description?: string | null | undefined;
  /**
   * Package name
   */
  name?: string | null | undefined;
};

/** @internal */
export const CreatePackage$inboundSchema: z.ZodType<
  CreatePackage,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreatePackage$Outbound = {
  description?: string | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const CreatePackage$outboundSchema: z.ZodType<
  CreatePackage$Outbound,
  z.ZodTypeDef,
  CreatePackage
> = z.object({
  description: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePackage$ {
  /** @deprecated use `CreatePackage$inboundSchema` instead. */
  export const inboundSchema = CreatePackage$inboundSchema;
  /** @deprecated use `CreatePackage$outboundSchema` instead. */
  export const outboundSchema = CreatePackage$outboundSchema;
  /** @deprecated use `CreatePackage$Outbound` instead. */
  export type Outbound = CreatePackage$Outbound;
}

export function createPackageToJSON(createPackage: CreatePackage): string {
  return JSON.stringify(CreatePackage$outboundSchema.parse(createPackage));
}

export function createPackageFromJSON(
  jsonString: string,
): SafeParseResult<CreatePackage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePackage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePackage' from JSON`,
  );
}
