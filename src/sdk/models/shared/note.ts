/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { NoteContentApiModel } from "./notecontentapimodel";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The visibility of the notes.
 */
export enum NoteValue {
    Private = "private",
    Public = "public",
}

/**
 * Visibility of the note
 */
export class NoteVisibility extends SpeakeasyBase {
    /**
     * The source value of the notes visibility.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "source_value" })
    sourceValue?: string;

    /**
     * The visibility of the notes.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "value" })
    value?: NoteValue;
}

export class Note extends SpeakeasyBase {
    /**
     * Unique identifier of the author
     */
    @SpeakeasyMetadata()
    @Expose({ name: "author_id" })
    authorId?: string;

    @SpeakeasyMetadata({ elemType: NoteContentApiModel })
    @Expose({ name: "content" })
    @Type(() => NoteContentApiModel)
    content: NoteContentApiModel[];

    /**
     * Date of creation
     */
    @SpeakeasyMetadata()
    @Expose({ name: "created_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt?: Date;

    /**
     * Date of Deletion
     */
    @SpeakeasyMetadata()
    @Expose({ name: "deleted_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    deletedAt?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    /**
     * Date of last update
     */
    @SpeakeasyMetadata()
    @Expose({ name: "updated_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    updatedAt?: Date;

    /**
     * Visibility of the note
     */
    @SpeakeasyMetadata()
    @Expose({ name: "visibility" })
    @Type(() => NoteVisibility)
    visibility?: NoteVisibility;
}
