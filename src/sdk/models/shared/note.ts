/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { NoteContentApiModel, NoteContentApiModel$ } from "./notecontentapimodel";
import { z } from "zod";

/**
 * The visibility of the notes.
 */
export enum NoteValue {
    Private = "private",
    Public = "public",
}

/**
 * Visibility of the note
 */
export type NoteVisibility = {
    /**
     * The source value of the notes visibility.
     */
    sourceValue?: string | undefined;
    /**
     * The visibility of the notes.
     */
    value?: NoteValue | undefined;
};

export type Note = {
    /**
     * Unique identifier of the author
     */
    authorId?: string | undefined;
    content: Array<NoteContentApiModel>;
    /**
     * Date of creation
     */
    createdAt?: Date | undefined;
    /**
     * Date of Deletion
     */
    deletedAt?: Date | undefined;
    id: string;
    /**
     * Date of last update
     */
    updatedAt?: Date | undefined;
    /**
     * Visibility of the note
     */
    visibility?: NoteVisibility | undefined;
};

/** @internal */
export const NoteValue$ = z.nativeEnum(NoteValue);

/** @internal */
export namespace NoteVisibility$ {
    export type Inbound = {
        source_value?: string | undefined;
        value?: NoteValue | undefined;
    };

    export const inboundSchema: z.ZodType<NoteVisibility, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z.string().optional(),
            value: NoteValue$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?: string | undefined;
        value?: NoteValue | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NoteVisibility> = z
        .object({
            sourceValue: z.string().optional(),
            value: NoteValue$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace Note$ {
    export type Inbound = {
        author_id?: string | undefined;
        content: Array<NoteContentApiModel$.Inbound>;
        created_at?: string | undefined;
        deleted_at?: string | undefined;
        id: string;
        updated_at?: string | undefined;
        visibility?: NoteVisibility$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<Note, z.ZodTypeDef, Inbound> = z
        .object({
            author_id: z.string().optional(),
            content: z.array(NoteContentApiModel$.inboundSchema),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            deleted_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            id: z.string(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            visibility: z.lazy(() => NoteVisibility$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.author_id === undefined ? null : { authorId: v.author_id }),
                content: v.content,
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.deleted_at === undefined ? null : { deletedAt: v.deleted_at }),
                id: v.id,
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
                ...(v.visibility === undefined ? null : { visibility: v.visibility }),
            };
        });

    export type Outbound = {
        author_id?: string | undefined;
        content: Array<NoteContentApiModel$.Outbound>;
        created_at?: string | undefined;
        deleted_at?: string | undefined;
        id: string;
        updated_at?: string | undefined;
        visibility?: NoteVisibility$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Note> = z
        .object({
            authorId: z.string().optional(),
            content: z.array(NoteContentApiModel$.outboundSchema),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            deletedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            id: z.string(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            visibility: z.lazy(() => NoteVisibility$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.authorId === undefined ? null : { author_id: v.authorId }),
                content: v.content,
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.deletedAt === undefined ? null : { deleted_at: v.deletedAt }),
                id: v.id,
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
                ...(v.visibility === undefined ? null : { visibility: v.visibility }),
            };
        });
}
