/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { IamPolicy, IamPolicy$ } from "./iampolicy";
import { z } from "zod";

export type IamRole4 = {};

export type IamRoleSourceValue = IamRole4 | string | number | boolean;

export enum IamRoleValue {
    Admin = "admin",
    Viewer = "viewer",
    Editor = "editor",
    Basic = "basic",
    Guest = "guest",
    Unassigned = "unassigned",
    Restricted = "restricted",
    UnmappedValue = "unmapped_value",
}

export type IamRoleType = {
    sourceValue?: IamRole4 | string | number | boolean | null | undefined;
    value?: IamRoleValue | null | undefined;
};

export type IamRole = {
    createdAt?: Date | null | undefined;
    description?: string | null | undefined;
    id?: string | null | undefined;
    name?: string | null | undefined;
    /**
     * The set of policies associated with the role.
     */
    policies?: Array<IamPolicy> | null | undefined;
    type?: IamRoleType | null | undefined;
    updatedAt?: Date | null | undefined;
};

/** @internal */
export namespace IamRole4$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<IamRole4, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IamRole4> = z.object({});
}

/** @internal */
export namespace IamRoleSourceValue$ {
    export type Inbound = IamRole4$.Inbound | string | number | boolean;

    export type Outbound = IamRole4$.Outbound | string | number | boolean;

    export const inboundSchema: z.ZodType<IamRoleSourceValue, z.ZodTypeDef, Inbound> = z.union([
        z.lazy(() => IamRole4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IamRoleSourceValue> = z.union([
        z.lazy(() => IamRole4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export const IamRoleValue$ = z.nativeEnum(IamRoleValue);

/** @internal */
export namespace IamRoleType$ {
    export type Inbound = {
        source_value?: IamRole4$.Inbound | string | number | boolean | null | undefined;
        value?: IamRoleValue | null | undefined;
    };

    export const inboundSchema: z.ZodType<IamRoleType, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => IamRole4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(IamRoleValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?: IamRole4$.Outbound | string | number | boolean | null | undefined;
        value?: IamRoleValue | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IamRoleType> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => IamRole4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(IamRoleValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace IamRole$ {
    export type Inbound = {
        created_at?: string | null | undefined;
        description?: string | null | undefined;
        id?: string | null | undefined;
        name?: string | null | undefined;
        policies?: Array<IamPolicy$.Inbound> | null | undefined;
        type?: IamRoleType$.Inbound | null | undefined;
        updated_at?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<IamRole, z.ZodTypeDef, Inbound> = z
        .object({
            created_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            description: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            policies: z.nullable(z.array(IamPolicy$.inboundSchema)).optional(),
            type: z.nullable(z.lazy(() => IamRoleType$.inboundSchema)).optional(),
            updated_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.policies === undefined ? null : { policies: v.policies }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        created_at?: string | null | undefined;
        description?: string | null | undefined;
        id?: string | null | undefined;
        name?: string | null | undefined;
        policies?: Array<IamPolicy$.Outbound> | null | undefined;
        type?: IamRoleType$.Outbound | null | undefined;
        updated_at?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IamRole> = z
        .object({
            createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            description: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            policies: z.nullable(z.array(IamPolicy$.outboundSchema)).optional(),
            type: z.nullable(z.lazy(() => IamRoleType$.outboundSchema)).optional(),
            updatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.policies === undefined ? null : { policies: v.policies }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}
