/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TicketingContent,
  TicketingContent$inboundSchema,
  TicketingContent$Outbound,
  TicketingContent$outboundSchema,
} from "./ticketingcontent.js";

export type TicketingTicketCreateRequestDto4 = {};

/**
 * The source value of the ticket priority.
 */
export type TicketingTicketCreateRequestDtoSourceValue =
  | string
  | number
  | boolean
  | TicketingTicketCreateRequestDto4
  | Array<any>;

/**
 * The priority of the ticket.
 */
export enum TicketingTicketCreateRequestDtoValue {
  Lowest = "lowest",
  Low = "low",
  Medium = "medium",
  High = "high",
  Highest = "highest",
  UnmappedValue = "unmapped_value",
}
/**
 * The priority of the ticket.
 */
export type TicketingTicketCreateRequestDtoValueOpen = OpenEnum<
  typeof TicketingTicketCreateRequestDtoValue
>;

/**
 * Priority of the ticket
 */
export type TicketingTicketCreateRequestDtoPriority = {
  /**
   * The id of the ticket priority.
   */
  id?: string | null | undefined;
  /**
   * The source value of the ticket priority.
   */
  sourceValue?:
    | string
    | number
    | boolean
    | TicketingTicketCreateRequestDto4
    | Array<any>
    | null
    | undefined;
  /**
   * The priority of the ticket.
   */
  value?: TicketingTicketCreateRequestDtoValueOpen | null | undefined;
};

export type TicketingTicketCreateRequestDto = {
  /**
   * Agents assigned to the ticket
   */
  assignees?: Array<string> | null | undefined;
  /**
   * Components to associate with the ticket
   */
  componentIds?: string | null | undefined;
  /**
   * Array of content associated with the ticket
   */
  content?: Array<TicketingContent> | null | undefined;
  /**
   * The creator of the ticket
   */
  creatorId?: string | null | undefined;
  /**
   * Organization associated with the ticket
   */
  organizationId?: string | null | undefined;
  /**
   * ID of the parent ticket if this is a sub-ticket
   */
  parentId?: string | null | undefined;
  /**
   * Priority of the ticket
   */
  priority?: TicketingTicketCreateRequestDtoPriority | null | undefined;
  /**
   * Project the ticket belongs to
   */
  projectId?: string | null | undefined;
  /**
   * Users who reported the ticket
   */
  reporters?: Array<string> | null | undefined;
  /**
   * The tags of the ticket
   */
  tags?: Array<string> | null | undefined;
  /**
   * The title or subject of the ticket
   */
  title?: string | null | undefined;
  /**
   * The type of the ticket
   */
  type?: string | null | undefined;
  /**
   * Custom Unified Fields configured in your StackOne project
   */
  unifiedCustomFields?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const TicketingTicketCreateRequestDto4$inboundSchema: z.ZodType<
  TicketingTicketCreateRequestDto4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TicketingTicketCreateRequestDto4$Outbound = {};

/** @internal */
export const TicketingTicketCreateRequestDto4$outboundSchema: z.ZodType<
  TicketingTicketCreateRequestDto4$Outbound,
  z.ZodTypeDef,
  TicketingTicketCreateRequestDto4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketCreateRequestDto4$ {
  /** @deprecated use `TicketingTicketCreateRequestDto4$inboundSchema` instead. */
  export const inboundSchema = TicketingTicketCreateRequestDto4$inboundSchema;
  /** @deprecated use `TicketingTicketCreateRequestDto4$outboundSchema` instead. */
  export const outboundSchema = TicketingTicketCreateRequestDto4$outboundSchema;
  /** @deprecated use `TicketingTicketCreateRequestDto4$Outbound` instead. */
  export type Outbound = TicketingTicketCreateRequestDto4$Outbound;
}

export function ticketingTicketCreateRequestDto4ToJSON(
  ticketingTicketCreateRequestDto4: TicketingTicketCreateRequestDto4,
): string {
  return JSON.stringify(
    TicketingTicketCreateRequestDto4$outboundSchema.parse(
      ticketingTicketCreateRequestDto4,
    ),
  );
}

export function ticketingTicketCreateRequestDto4FromJSON(
  jsonString: string,
): SafeParseResult<TicketingTicketCreateRequestDto4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingTicketCreateRequestDto4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingTicketCreateRequestDto4' from JSON`,
  );
}

/** @internal */
export const TicketingTicketCreateRequestDtoSourceValue$inboundSchema:
  z.ZodType<TicketingTicketCreateRequestDtoSourceValue, z.ZodTypeDef, unknown> =
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => TicketingTicketCreateRequestDto4$inboundSchema),
      z.array(z.any()),
    ]);

/** @internal */
export type TicketingTicketCreateRequestDtoSourceValue$Outbound =
  | string
  | number
  | boolean
  | TicketingTicketCreateRequestDto4$Outbound
  | Array<any>;

/** @internal */
export const TicketingTicketCreateRequestDtoSourceValue$outboundSchema:
  z.ZodType<
    TicketingTicketCreateRequestDtoSourceValue$Outbound,
    z.ZodTypeDef,
    TicketingTicketCreateRequestDtoSourceValue
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.lazy(() => TicketingTicketCreateRequestDto4$outboundSchema),
    z.array(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketCreateRequestDtoSourceValue$ {
  /** @deprecated use `TicketingTicketCreateRequestDtoSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    TicketingTicketCreateRequestDtoSourceValue$inboundSchema;
  /** @deprecated use `TicketingTicketCreateRequestDtoSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    TicketingTicketCreateRequestDtoSourceValue$outboundSchema;
  /** @deprecated use `TicketingTicketCreateRequestDtoSourceValue$Outbound` instead. */
  export type Outbound = TicketingTicketCreateRequestDtoSourceValue$Outbound;
}

export function ticketingTicketCreateRequestDtoSourceValueToJSON(
  ticketingTicketCreateRequestDtoSourceValue:
    TicketingTicketCreateRequestDtoSourceValue,
): string {
  return JSON.stringify(
    TicketingTicketCreateRequestDtoSourceValue$outboundSchema.parse(
      ticketingTicketCreateRequestDtoSourceValue,
    ),
  );
}

export function ticketingTicketCreateRequestDtoSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  TicketingTicketCreateRequestDtoSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TicketingTicketCreateRequestDtoSourceValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TicketingTicketCreateRequestDtoSourceValue' from JSON`,
  );
}

/** @internal */
export const TicketingTicketCreateRequestDtoValue$inboundSchema: z.ZodType<
  TicketingTicketCreateRequestDtoValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TicketingTicketCreateRequestDtoValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TicketingTicketCreateRequestDtoValue$outboundSchema: z.ZodType<
  TicketingTicketCreateRequestDtoValueOpen,
  z.ZodTypeDef,
  TicketingTicketCreateRequestDtoValueOpen
> = z.union([
  z.nativeEnum(TicketingTicketCreateRequestDtoValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketCreateRequestDtoValue$ {
  /** @deprecated use `TicketingTicketCreateRequestDtoValue$inboundSchema` instead. */
  export const inboundSchema =
    TicketingTicketCreateRequestDtoValue$inboundSchema;
  /** @deprecated use `TicketingTicketCreateRequestDtoValue$outboundSchema` instead. */
  export const outboundSchema =
    TicketingTicketCreateRequestDtoValue$outboundSchema;
}

/** @internal */
export const TicketingTicketCreateRequestDtoPriority$inboundSchema: z.ZodType<
  TicketingTicketCreateRequestDtoPriority,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  source_value: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => TicketingTicketCreateRequestDto4$inboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(TicketingTicketCreateRequestDtoValue$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type TicketingTicketCreateRequestDtoPriority$Outbound = {
  id?: string | null | undefined;
  source_value?:
    | string
    | number
    | boolean
    | TicketingTicketCreateRequestDto4$Outbound
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const TicketingTicketCreateRequestDtoPriority$outboundSchema: z.ZodType<
  TicketingTicketCreateRequestDtoPriority$Outbound,
  z.ZodTypeDef,
  TicketingTicketCreateRequestDtoPriority
> = z.object({
  id: z.nullable(z.string()).optional(),
  sourceValue: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => TicketingTicketCreateRequestDto4$outboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(TicketingTicketCreateRequestDtoValue$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketCreateRequestDtoPriority$ {
  /** @deprecated use `TicketingTicketCreateRequestDtoPriority$inboundSchema` instead. */
  export const inboundSchema =
    TicketingTicketCreateRequestDtoPriority$inboundSchema;
  /** @deprecated use `TicketingTicketCreateRequestDtoPriority$outboundSchema` instead. */
  export const outboundSchema =
    TicketingTicketCreateRequestDtoPriority$outboundSchema;
  /** @deprecated use `TicketingTicketCreateRequestDtoPriority$Outbound` instead. */
  export type Outbound = TicketingTicketCreateRequestDtoPriority$Outbound;
}

export function ticketingTicketCreateRequestDtoPriorityToJSON(
  ticketingTicketCreateRequestDtoPriority:
    TicketingTicketCreateRequestDtoPriority,
): string {
  return JSON.stringify(
    TicketingTicketCreateRequestDtoPriority$outboundSchema.parse(
      ticketingTicketCreateRequestDtoPriority,
    ),
  );
}

export function ticketingTicketCreateRequestDtoPriorityFromJSON(
  jsonString: string,
): SafeParseResult<
  TicketingTicketCreateRequestDtoPriority,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TicketingTicketCreateRequestDtoPriority$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TicketingTicketCreateRequestDtoPriority' from JSON`,
  );
}

/** @internal */
export const TicketingTicketCreateRequestDto$inboundSchema: z.ZodType<
  TicketingTicketCreateRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  assignees: z.nullable(z.array(z.string())).optional(),
  component_ids: z.nullable(z.string()).optional(),
  content: z.nullable(z.array(TicketingContent$inboundSchema)).optional(),
  creator_id: z.nullable(z.string()).optional(),
  organization_id: z.nullable(z.string()).optional(),
  parent_id: z.nullable(z.string()).optional(),
  priority: z.nullable(
    z.lazy(() => TicketingTicketCreateRequestDtoPriority$inboundSchema),
  ).optional(),
  project_id: z.nullable(z.string()).optional(),
  reporters: z.nullable(z.array(z.string())).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  title: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  unified_custom_fields: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    "component_ids": "componentIds",
    "creator_id": "creatorId",
    "organization_id": "organizationId",
    "parent_id": "parentId",
    "project_id": "projectId",
    "unified_custom_fields": "unifiedCustomFields",
  });
});

/** @internal */
export type TicketingTicketCreateRequestDto$Outbound = {
  assignees?: Array<string> | null | undefined;
  component_ids?: string | null | undefined;
  content?: Array<TicketingContent$Outbound> | null | undefined;
  creator_id?: string | null | undefined;
  organization_id?: string | null | undefined;
  parent_id?: string | null | undefined;
  priority?:
    | TicketingTicketCreateRequestDtoPriority$Outbound
    | null
    | undefined;
  project_id?: string | null | undefined;
  reporters?: Array<string> | null | undefined;
  tags?: Array<string> | null | undefined;
  title?: string | null | undefined;
  type?: string | null | undefined;
  unified_custom_fields?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const TicketingTicketCreateRequestDto$outboundSchema: z.ZodType<
  TicketingTicketCreateRequestDto$Outbound,
  z.ZodTypeDef,
  TicketingTicketCreateRequestDto
> = z.object({
  assignees: z.nullable(z.array(z.string())).optional(),
  componentIds: z.nullable(z.string()).optional(),
  content: z.nullable(z.array(TicketingContent$outboundSchema)).optional(),
  creatorId: z.nullable(z.string()).optional(),
  organizationId: z.nullable(z.string()).optional(),
  parentId: z.nullable(z.string()).optional(),
  priority: z.nullable(
    z.lazy(() => TicketingTicketCreateRequestDtoPriority$outboundSchema),
  ).optional(),
  projectId: z.nullable(z.string()).optional(),
  reporters: z.nullable(z.array(z.string())).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  title: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  unifiedCustomFields: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    componentIds: "component_ids",
    creatorId: "creator_id",
    organizationId: "organization_id",
    parentId: "parent_id",
    projectId: "project_id",
    unifiedCustomFields: "unified_custom_fields",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketCreateRequestDto$ {
  /** @deprecated use `TicketingTicketCreateRequestDto$inboundSchema` instead. */
  export const inboundSchema = TicketingTicketCreateRequestDto$inboundSchema;
  /** @deprecated use `TicketingTicketCreateRequestDto$outboundSchema` instead. */
  export const outboundSchema = TicketingTicketCreateRequestDto$outboundSchema;
  /** @deprecated use `TicketingTicketCreateRequestDto$Outbound` instead. */
  export type Outbound = TicketingTicketCreateRequestDto$Outbound;
}

export function ticketingTicketCreateRequestDtoToJSON(
  ticketingTicketCreateRequestDto: TicketingTicketCreateRequestDto,
): string {
  return JSON.stringify(
    TicketingTicketCreateRequestDto$outboundSchema.parse(
      ticketingTicketCreateRequestDto,
    ),
  );
}

export function ticketingTicketCreateRequestDtoFromJSON(
  jsonString: string,
): SafeParseResult<TicketingTicketCreateRequestDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingTicketCreateRequestDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingTicketCreateRequestDto' from JSON`,
  );
}
