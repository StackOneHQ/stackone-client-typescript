/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * The body of the request
 */
export type Body = {};

/**
 * The headers to send in the request
 */
export type Headers = {};

/**
 * The method of the request
 */
export enum Method {
    Get = "get",
    Post = "post",
    Put = "put",
    Delete = "delete",
    Patch = "patch",
}

export type ProxyRequestBody = {
    /**
     * The body of the request
     */
    body?: Body | undefined;
    /**
     * The headers to send in the request
     */
    headers?: Headers | undefined;
    /**
     * The method of the request
     */
    method?: Method | undefined;
    /**
     * The path of the request including any query paramters
     */
    path?: string | undefined;
    /**
     * The base url of the request
     */
    url?: string | undefined;
};

/** @internal */
export namespace Body$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Body, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Body> = z.object({});
}

/** @internal */
export namespace Headers$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Headers, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Headers> = z.object({});
}

/** @internal */
export const Method$ = z.nativeEnum(Method);

/** @internal */
export namespace ProxyRequestBody$ {
    export type Inbound = {
        body?: Body$.Inbound | undefined;
        headers?: Headers$.Inbound | undefined;
        method?: Method | undefined;
        path?: string | undefined;
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ProxyRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            body: z.lazy(() => Body$.inboundSchema).optional(),
            headers: z.lazy(() => Headers$.inboundSchema).optional(),
            method: Method$.optional(),
            path: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.body === undefined ? null : { body: v.body }),
                ...(v.headers === undefined ? null : { headers: v.headers }),
                ...(v.method === undefined ? null : { method: v.method }),
                ...(v.path === undefined ? null : { path: v.path }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        body?: Body$.Outbound | undefined;
        headers?: Headers$.Outbound | undefined;
        method?: Method | undefined;
        path?: string | undefined;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ProxyRequestBody> = z
        .object({
            body: z.lazy(() => Body$.outboundSchema).optional(),
            headers: z.lazy(() => Headers$.outboundSchema).optional(),
            method: Method$.optional(),
            path: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.body === undefined ? null : { body: v.body }),
                ...(v.headers === undefined ? null : { headers: v.headers }),
                ...(v.method === undefined ? null : { method: v.method }),
                ...(v.path === undefined ? null : { path: v.path }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}
