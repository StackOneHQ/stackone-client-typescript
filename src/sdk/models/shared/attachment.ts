/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Attachment4 = {};

/**
 * The source value of the content type.
 */
export type AttachmentSourceValue =
  | string
  | number
  | boolean
  | Attachment4
  | Array<any>;

/**
 * The content type of the attachment.
 */
export enum AttachmentValue {
  Text = "text",
  UnmappedValue = "unmapped_value",
}
/**
 * The content type of the attachment.
 */
export type AttachmentValueOpen = OpenEnum<typeof AttachmentValue>;

export type AttachmentContentType = {
  /**
   * The source value of the content type.
   */
  sourceValue?:
    | string
    | number
    | boolean
    | Attachment4
    | Array<any>
    | null
    | undefined;
  /**
   * The content type of the attachment.
   */
  value?: AttachmentValueOpen | null | undefined;
};

export type Attachment = {
  contentType?: AttachmentContentType | null | undefined;
  /**
   * The URL of the attachment.
   */
  url?: string | null | undefined;
};

/** @internal */
export const Attachment4$inboundSchema: z.ZodType<
  Attachment4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Attachment4$Outbound = {};

/** @internal */
export const Attachment4$outboundSchema: z.ZodType<
  Attachment4$Outbound,
  z.ZodTypeDef,
  Attachment4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Attachment4$ {
  /** @deprecated use `Attachment4$inboundSchema` instead. */
  export const inboundSchema = Attachment4$inboundSchema;
  /** @deprecated use `Attachment4$outboundSchema` instead. */
  export const outboundSchema = Attachment4$outboundSchema;
  /** @deprecated use `Attachment4$Outbound` instead. */
  export type Outbound = Attachment4$Outbound;
}

export function attachment4ToJSON(attachment4: Attachment4): string {
  return JSON.stringify(Attachment4$outboundSchema.parse(attachment4));
}

export function attachment4FromJSON(
  jsonString: string,
): SafeParseResult<Attachment4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Attachment4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Attachment4' from JSON`,
  );
}

/** @internal */
export const AttachmentSourceValue$inboundSchema: z.ZodType<
  AttachmentSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => Attachment4$inboundSchema),
  z.array(z.any()),
]);

/** @internal */
export type AttachmentSourceValue$Outbound =
  | string
  | number
  | boolean
  | Attachment4$Outbound
  | Array<any>;

/** @internal */
export const AttachmentSourceValue$outboundSchema: z.ZodType<
  AttachmentSourceValue$Outbound,
  z.ZodTypeDef,
  AttachmentSourceValue
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => Attachment4$outboundSchema),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachmentSourceValue$ {
  /** @deprecated use `AttachmentSourceValue$inboundSchema` instead. */
  export const inboundSchema = AttachmentSourceValue$inboundSchema;
  /** @deprecated use `AttachmentSourceValue$outboundSchema` instead. */
  export const outboundSchema = AttachmentSourceValue$outboundSchema;
  /** @deprecated use `AttachmentSourceValue$Outbound` instead. */
  export type Outbound = AttachmentSourceValue$Outbound;
}

export function attachmentSourceValueToJSON(
  attachmentSourceValue: AttachmentSourceValue,
): string {
  return JSON.stringify(
    AttachmentSourceValue$outboundSchema.parse(attachmentSourceValue),
  );
}

export function attachmentSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<AttachmentSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttachmentSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttachmentSourceValue' from JSON`,
  );
}

/** @internal */
export const AttachmentValue$inboundSchema: z.ZodType<
  AttachmentValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AttachmentValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AttachmentValue$outboundSchema: z.ZodType<
  AttachmentValueOpen,
  z.ZodTypeDef,
  AttachmentValueOpen
> = z.union([
  z.nativeEnum(AttachmentValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachmentValue$ {
  /** @deprecated use `AttachmentValue$inboundSchema` instead. */
  export const inboundSchema = AttachmentValue$inboundSchema;
  /** @deprecated use `AttachmentValue$outboundSchema` instead. */
  export const outboundSchema = AttachmentValue$outboundSchema;
}

/** @internal */
export const AttachmentContentType$inboundSchema: z.ZodType<
  AttachmentContentType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => Attachment4$inboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(AttachmentValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type AttachmentContentType$Outbound = {
  source_value?:
    | string
    | number
    | boolean
    | Attachment4$Outbound
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const AttachmentContentType$outboundSchema: z.ZodType<
  AttachmentContentType$Outbound,
  z.ZodTypeDef,
  AttachmentContentType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => Attachment4$outboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(AttachmentValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachmentContentType$ {
  /** @deprecated use `AttachmentContentType$inboundSchema` instead. */
  export const inboundSchema = AttachmentContentType$inboundSchema;
  /** @deprecated use `AttachmentContentType$outboundSchema` instead. */
  export const outboundSchema = AttachmentContentType$outboundSchema;
  /** @deprecated use `AttachmentContentType$Outbound` instead. */
  export type Outbound = AttachmentContentType$Outbound;
}

export function attachmentContentTypeToJSON(
  attachmentContentType: AttachmentContentType,
): string {
  return JSON.stringify(
    AttachmentContentType$outboundSchema.parse(attachmentContentType),
  );
}

export function attachmentContentTypeFromJSON(
  jsonString: string,
): SafeParseResult<AttachmentContentType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttachmentContentType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttachmentContentType' from JSON`,
  );
}

/** @internal */
export const Attachment$inboundSchema: z.ZodType<
  Attachment,
  z.ZodTypeDef,
  unknown
> = z.object({
  content_type: z.nullable(z.lazy(() => AttachmentContentType$inboundSchema))
    .optional(),
  url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "content_type": "contentType",
  });
});

/** @internal */
export type Attachment$Outbound = {
  content_type?: AttachmentContentType$Outbound | null | undefined;
  url?: string | null | undefined;
};

/** @internal */
export const Attachment$outboundSchema: z.ZodType<
  Attachment$Outbound,
  z.ZodTypeDef,
  Attachment
> = z.object({
  contentType: z.nullable(z.lazy(() => AttachmentContentType$outboundSchema))
    .optional(),
  url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "content_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Attachment$ {
  /** @deprecated use `Attachment$inboundSchema` instead. */
  export const inboundSchema = Attachment$inboundSchema;
  /** @deprecated use `Attachment$outboundSchema` instead. */
  export const outboundSchema = Attachment$outboundSchema;
  /** @deprecated use `Attachment$Outbound` instead. */
  export type Outbound = Attachment$Outbound;
}

export function attachmentToJSON(attachment: Attachment): string {
  return JSON.stringify(Attachment$outboundSchema.parse(attachment));
}

export function attachmentFromJSON(
  jsonString: string,
): SafeParseResult<Attachment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Attachment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Attachment' from JSON`,
  );
}
