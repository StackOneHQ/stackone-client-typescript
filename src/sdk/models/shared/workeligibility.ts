/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Content, Content$ } from "./content";
import { z } from "zod";

export type Document = {
    /**
     * The content of the file
     */
    contents?: Array<Content> | null | undefined;
    /**
     * The creation date of the file
     */
    createdAt?: Date | null | undefined;
    /**
     * The unique ID of the file
     */
    id?: string | null | undefined;
    /**
     * The name of the file
     */
    name?: string | null | undefined;
    /**
     * The path where the file is stored
     */
    path?: string | null | undefined;
    /**
     * The update date of the file
     */
    updatedAt?: Date | null | undefined;
};

export type WorkEligibility4 = {};

export type SourceType = WorkEligibility4 | string | number | boolean;

export enum WorkEligibilityValue {
    Visa = "visa",
    Passport = "passport",
    DriverLicense = "driver_license",
    BirthCertificate = "birth_certificate",
    Other = "other",
}

export type WorkEligibilityType = {
    sourceType?: WorkEligibility4 | string | number | boolean | null | undefined;
    value?: WorkEligibilityValue | null | undefined;
};

export type WorkEligibility = {
    document?: Document | null | undefined;
    issuedBy?: string | null | undefined;
    number?: string | null | undefined;
    subType?: string | null | undefined;
    type?: WorkEligibilityType | null | undefined;
    validFrom?: Date | null | undefined;
    validTo?: Date | null | undefined;
};

/** @internal */
export namespace Document$ {
    export type Inbound = {
        contents?: Array<Content$.Inbound> | null | undefined;
        created_at?: string | null | undefined;
        id?: string | null | undefined;
        name?: string | null | undefined;
        path?: string | null | undefined;
        updated_at?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<Document, z.ZodTypeDef, Inbound> = z
        .object({
            contents: z.nullable(z.array(Content$.inboundSchema)).optional(),
            created_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            id: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            path: z.nullable(z.string()).optional(),
            updated_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.contents === undefined ? null : { contents: v.contents }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.path === undefined ? null : { path: v.path }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        contents?: Array<Content$.Outbound> | null | undefined;
        created_at?: string | null | undefined;
        id?: string | null | undefined;
        name?: string | null | undefined;
        path?: string | null | undefined;
        updated_at?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Document> = z
        .object({
            contents: z.nullable(z.array(Content$.outboundSchema)).optional(),
            createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            id: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            path: z.nullable(z.string()).optional(),
            updatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.contents === undefined ? null : { contents: v.contents }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.path === undefined ? null : { path: v.path }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}

/** @internal */
export namespace WorkEligibility4$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<WorkEligibility4, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WorkEligibility4> = z.object({});
}

/** @internal */
export namespace SourceType$ {
    export type Inbound = WorkEligibility4$.Inbound | string | number | boolean;

    export type Outbound = WorkEligibility4$.Outbound | string | number | boolean;

    export const inboundSchema: z.ZodType<SourceType, z.ZodTypeDef, Inbound> = z.union([
        z.lazy(() => WorkEligibility4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SourceType> = z.union([
        z.lazy(() => WorkEligibility4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export const WorkEligibilityValue$ = z.nativeEnum(WorkEligibilityValue);

/** @internal */
export namespace WorkEligibilityType$ {
    export type Inbound = {
        source_type?: WorkEligibility4$.Inbound | string | number | boolean | null | undefined;
        value?: WorkEligibilityValue | null | undefined;
    };

    export const inboundSchema: z.ZodType<WorkEligibilityType, z.ZodTypeDef, Inbound> = z
        .object({
            source_type: z
                .nullable(
                    z.union([
                        z.lazy(() => WorkEligibility4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(WorkEligibilityValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_type === undefined ? null : { sourceType: v.source_type }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_type?: WorkEligibility4$.Outbound | string | number | boolean | null | undefined;
        value?: WorkEligibilityValue | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WorkEligibilityType> = z
        .object({
            sourceType: z
                .nullable(
                    z.union([
                        z.lazy(() => WorkEligibility4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(WorkEligibilityValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceType === undefined ? null : { source_type: v.sourceType }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace WorkEligibility$ {
    export type Inbound = {
        document?: Document$.Inbound | null | undefined;
        issued_by?: string | null | undefined;
        number?: string | null | undefined;
        sub_type?: string | null | undefined;
        type?: WorkEligibilityType$.Inbound | null | undefined;
        valid_from?: string | null | undefined;
        valid_to?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<WorkEligibility, z.ZodTypeDef, Inbound> = z
        .object({
            document: z.nullable(z.lazy(() => Document$.inboundSchema)).optional(),
            issued_by: z.nullable(z.string()).optional(),
            number: z.nullable(z.string()).optional(),
            sub_type: z.nullable(z.string()).optional(),
            type: z.nullable(z.lazy(() => WorkEligibilityType$.inboundSchema)).optional(),
            valid_from: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            valid_to: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.document === undefined ? null : { document: v.document }),
                ...(v.issued_by === undefined ? null : { issuedBy: v.issued_by }),
                ...(v.number === undefined ? null : { number: v.number }),
                ...(v.sub_type === undefined ? null : { subType: v.sub_type }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.valid_from === undefined ? null : { validFrom: v.valid_from }),
                ...(v.valid_to === undefined ? null : { validTo: v.valid_to }),
            };
        });

    export type Outbound = {
        document?: Document$.Outbound | null | undefined;
        issued_by?: string | null | undefined;
        number?: string | null | undefined;
        sub_type?: string | null | undefined;
        type?: WorkEligibilityType$.Outbound | null | undefined;
        valid_from?: string | null | undefined;
        valid_to?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WorkEligibility> = z
        .object({
            document: z.nullable(z.lazy(() => Document$.outboundSchema)).optional(),
            issuedBy: z.nullable(z.string()).optional(),
            number: z.nullable(z.string()).optional(),
            subType: z.nullable(z.string()).optional(),
            type: z.nullable(z.lazy(() => WorkEligibilityType$.outboundSchema)).optional(),
            validFrom: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            validTo: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.document === undefined ? null : { document: v.document }),
                ...(v.issuedBy === undefined ? null : { issued_by: v.issuedBy }),
                ...(v.number === undefined ? null : { number: v.number }),
                ...(v.subType === undefined ? null : { sub_type: v.subType }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.validFrom === undefined ? null : { valid_from: v.validFrom }),
                ...(v.validTo === undefined ? null : { valid_to: v.validTo }),
            };
        });
}
