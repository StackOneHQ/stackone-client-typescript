/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Response headers
 */
export type Headers = {};

/**
 * Raw error response from the provider
 */
export type Raw = {};

export type ProviderError = {
  /**
   * Response headers
   */
  headers?: Headers | null | undefined;
  /**
   * Raw error response from the provider
   */
  raw?: Raw | null | undefined;
  /**
   * HTTP status code of the provider error
   */
  status?: number | null | undefined;
  /**
   * URL that caused the error
   */
  url?: string | null | undefined;
};

/** @internal */
export const Headers$inboundSchema: z.ZodType<Headers, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Headers$Outbound = {};

/** @internal */
export const Headers$outboundSchema: z.ZodType<
  Headers$Outbound,
  z.ZodTypeDef,
  Headers
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Headers$ {
  /** @deprecated use `Headers$inboundSchema` instead. */
  export const inboundSchema = Headers$inboundSchema;
  /** @deprecated use `Headers$outboundSchema` instead. */
  export const outboundSchema = Headers$outboundSchema;
  /** @deprecated use `Headers$Outbound` instead. */
  export type Outbound = Headers$Outbound;
}

export function headersToJSON(headers: Headers): string {
  return JSON.stringify(Headers$outboundSchema.parse(headers));
}

export function headersFromJSON(
  jsonString: string,
): SafeParseResult<Headers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Headers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Headers' from JSON`,
  );
}

/** @internal */
export const Raw$inboundSchema: z.ZodType<Raw, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Raw$Outbound = {};

/** @internal */
export const Raw$outboundSchema: z.ZodType<Raw$Outbound, z.ZodTypeDef, Raw> = z
  .object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Raw$ {
  /** @deprecated use `Raw$inboundSchema` instead. */
  export const inboundSchema = Raw$inboundSchema;
  /** @deprecated use `Raw$outboundSchema` instead. */
  export const outboundSchema = Raw$outboundSchema;
  /** @deprecated use `Raw$Outbound` instead. */
  export type Outbound = Raw$Outbound;
}

export function rawToJSON(raw: Raw): string {
  return JSON.stringify(Raw$outboundSchema.parse(raw));
}

export function rawFromJSON(
  jsonString: string,
): SafeParseResult<Raw, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Raw$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Raw' from JSON`,
  );
}

/** @internal */
export const ProviderError$inboundSchema: z.ZodType<
  ProviderError,
  z.ZodTypeDef,
  unknown
> = z.object({
  headers: z.nullable(z.lazy(() => Headers$inboundSchema)).optional(),
  raw: z.nullable(z.lazy(() => Raw$inboundSchema)).optional(),
  status: z.nullable(z.number()).optional(),
  url: z.nullable(z.string()).optional(),
});

/** @internal */
export type ProviderError$Outbound = {
  headers?: Headers$Outbound | null | undefined;
  raw?: Raw$Outbound | null | undefined;
  status?: number | null | undefined;
  url?: string | null | undefined;
};

/** @internal */
export const ProviderError$outboundSchema: z.ZodType<
  ProviderError$Outbound,
  z.ZodTypeDef,
  ProviderError
> = z.object({
  headers: z.nullable(z.lazy(() => Headers$outboundSchema)).optional(),
  raw: z.nullable(z.lazy(() => Raw$outboundSchema)).optional(),
  status: z.nullable(z.number()).optional(),
  url: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProviderError$ {
  /** @deprecated use `ProviderError$inboundSchema` instead. */
  export const inboundSchema = ProviderError$inboundSchema;
  /** @deprecated use `ProviderError$outboundSchema` instead. */
  export const outboundSchema = ProviderError$outboundSchema;
  /** @deprecated use `ProviderError$Outbound` instead. */
  export type Outbound = ProviderError$Outbound;
}

export function providerErrorToJSON(providerError: ProviderError): string {
  return JSON.stringify(ProviderError$outboundSchema.parse(providerError));
}

export function providerErrorFromJSON(
  jsonString: string,
): SafeParseResult<ProviderError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProviderError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProviderError' from JSON`,
  );
}
