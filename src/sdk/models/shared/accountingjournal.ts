/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  JournalLine,
  JournalLine$inboundSchema,
  JournalLine$Outbound,
  JournalLine$outboundSchema,
} from "./journalline.js";

export type AccountingJournal4 = {};

export type AccountingJournalSourceValue =
  | string
  | number
  | boolean
  | AccountingJournal4
  | Array<any>;

/**
 * The journal status
 */
export enum AccountingJournalValue {
  Draft = "draft",
  Posted = "posted",
  Void = "void",
  UnmappedValue = "unmapped_value",
}
/**
 * The journal status
 */
export type AccountingJournalValueOpen = OpenEnum<
  typeof AccountingJournalValue
>;

/**
 * Status of the journal
 */
export type Status = {
  sourceValue?:
    | string
    | number
    | boolean
    | AccountingJournal4
    | Array<any>
    | null
    | undefined;
  /**
   * The journal status
   */
  value?: AccountingJournalValueOpen | null | undefined;
};

export type AccountingJournal = {
  /**
   * ID of the company this journal belongs to
   */
  companyId?: string | null | undefined;
  /**
   * Timestamp when the journal was created
   */
  createdAt?: Date | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * List of journal lines
   */
  lines?: Array<JournalLine> | null | undefined;
  /**
   * Memo or description for the journal
   */
  memo?: string | null | undefined;
  /**
   * Timestamp when the journal was posted
   */
  postedAt?: Date | null | undefined;
  /**
   * Reference number for the journal
   */
  reference?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * Status of the journal
   */
  status?: Status | null | undefined;
  /**
   * Date of the journal transaction
   */
  transactionDate?: Date | null | undefined;
  /**
   * Timestamp when the journal was last updated
   */
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const AccountingJournal4$inboundSchema: z.ZodType<
  AccountingJournal4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AccountingJournal4$Outbound = {};

/** @internal */
export const AccountingJournal4$outboundSchema: z.ZodType<
  AccountingJournal4$Outbound,
  z.ZodTypeDef,
  AccountingJournal4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingJournal4$ {
  /** @deprecated use `AccountingJournal4$inboundSchema` instead. */
  export const inboundSchema = AccountingJournal4$inboundSchema;
  /** @deprecated use `AccountingJournal4$outboundSchema` instead. */
  export const outboundSchema = AccountingJournal4$outboundSchema;
  /** @deprecated use `AccountingJournal4$Outbound` instead. */
  export type Outbound = AccountingJournal4$Outbound;
}

export function accountingJournal4ToJSON(
  accountingJournal4: AccountingJournal4,
): string {
  return JSON.stringify(
    AccountingJournal4$outboundSchema.parse(accountingJournal4),
  );
}

export function accountingJournal4FromJSON(
  jsonString: string,
): SafeParseResult<AccountingJournal4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingJournal4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingJournal4' from JSON`,
  );
}

/** @internal */
export const AccountingJournalSourceValue$inboundSchema: z.ZodType<
  AccountingJournalSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => AccountingJournal4$inboundSchema),
  z.array(z.any()),
]);

/** @internal */
export type AccountingJournalSourceValue$Outbound =
  | string
  | number
  | boolean
  | AccountingJournal4$Outbound
  | Array<any>;

/** @internal */
export const AccountingJournalSourceValue$outboundSchema: z.ZodType<
  AccountingJournalSourceValue$Outbound,
  z.ZodTypeDef,
  AccountingJournalSourceValue
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => AccountingJournal4$outboundSchema),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingJournalSourceValue$ {
  /** @deprecated use `AccountingJournalSourceValue$inboundSchema` instead. */
  export const inboundSchema = AccountingJournalSourceValue$inboundSchema;
  /** @deprecated use `AccountingJournalSourceValue$outboundSchema` instead. */
  export const outboundSchema = AccountingJournalSourceValue$outboundSchema;
  /** @deprecated use `AccountingJournalSourceValue$Outbound` instead. */
  export type Outbound = AccountingJournalSourceValue$Outbound;
}

export function accountingJournalSourceValueToJSON(
  accountingJournalSourceValue: AccountingJournalSourceValue,
): string {
  return JSON.stringify(
    AccountingJournalSourceValue$outboundSchema.parse(
      accountingJournalSourceValue,
    ),
  );
}

export function accountingJournalSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<AccountingJournalSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingJournalSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingJournalSourceValue' from JSON`,
  );
}

/** @internal */
export const AccountingJournalValue$inboundSchema: z.ZodType<
  AccountingJournalValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AccountingJournalValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AccountingJournalValue$outboundSchema: z.ZodType<
  AccountingJournalValueOpen,
  z.ZodTypeDef,
  AccountingJournalValueOpen
> = z.union([
  z.nativeEnum(AccountingJournalValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingJournalValue$ {
  /** @deprecated use `AccountingJournalValue$inboundSchema` instead. */
  export const inboundSchema = AccountingJournalValue$inboundSchema;
  /** @deprecated use `AccountingJournalValue$outboundSchema` instead. */
  export const outboundSchema = AccountingJournalValue$outboundSchema;
}

/** @internal */
export const Status$inboundSchema: z.ZodType<Status, z.ZodTypeDef, unknown> = z
  .object({
    source_value: z.nullable(
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        z.lazy(() => AccountingJournal4$inboundSchema),
        z.array(z.any()),
      ]),
    ).optional(),
    value: z.nullable(AccountingJournalValue$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "source_value": "sourceValue",
    });
  });

/** @internal */
export type Status$Outbound = {
  source_value?:
    | string
    | number
    | boolean
    | AccountingJournal4$Outbound
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const Status$outboundSchema: z.ZodType<
  Status$Outbound,
  z.ZodTypeDef,
  Status
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => AccountingJournal4$outboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(AccountingJournalValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
  /** @deprecated use `Status$Outbound` instead. */
  export type Outbound = Status$Outbound;
}

export function statusToJSON(status: Status): string {
  return JSON.stringify(Status$outboundSchema.parse(status));
}

export function statusFromJSON(
  jsonString: string,
): SafeParseResult<Status, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Status$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Status' from JSON`,
  );
}

/** @internal */
export const AccountingJournal$inboundSchema: z.ZodType<
  AccountingJournal,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_id: z.nullable(z.string()).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  lines: z.nullable(z.array(JournalLine$inboundSchema)).optional(),
  memo: z.nullable(z.string()).optional(),
  posted_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  reference: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  status: z.nullable(z.lazy(() => Status$inboundSchema)).optional(),
  transaction_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_id": "companyId",
    "created_at": "createdAt",
    "posted_at": "postedAt",
    "remote_id": "remoteId",
    "transaction_date": "transactionDate",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type AccountingJournal$Outbound = {
  company_id?: string | null | undefined;
  created_at?: string | null | undefined;
  id?: string | null | undefined;
  lines?: Array<JournalLine$Outbound> | null | undefined;
  memo?: string | null | undefined;
  posted_at?: string | null | undefined;
  reference?: string | null | undefined;
  remote_id?: string | null | undefined;
  status?: Status$Outbound | null | undefined;
  transaction_date?: string | null | undefined;
  updated_at?: string | null | undefined;
};

/** @internal */
export const AccountingJournal$outboundSchema: z.ZodType<
  AccountingJournal$Outbound,
  z.ZodTypeDef,
  AccountingJournal
> = z.object({
  companyId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  id: z.nullable(z.string()).optional(),
  lines: z.nullable(z.array(JournalLine$outboundSchema)).optional(),
  memo: z.nullable(z.string()).optional(),
  postedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  reference: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  status: z.nullable(z.lazy(() => Status$outboundSchema)).optional(),
  transactionDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company_id",
    createdAt: "created_at",
    postedAt: "posted_at",
    remoteId: "remote_id",
    transactionDate: "transaction_date",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingJournal$ {
  /** @deprecated use `AccountingJournal$inboundSchema` instead. */
  export const inboundSchema = AccountingJournal$inboundSchema;
  /** @deprecated use `AccountingJournal$outboundSchema` instead. */
  export const outboundSchema = AccountingJournal$outboundSchema;
  /** @deprecated use `AccountingJournal$Outbound` instead. */
  export type Outbound = AccountingJournal$Outbound;
}

export function accountingJournalToJSON(
  accountingJournal: AccountingJournal,
): string {
  return JSON.stringify(
    AccountingJournal$outboundSchema.parse(accountingJournal),
  );
}

export function accountingJournalFromJSON(
  jsonString: string,
): SafeParseResult<AccountingJournal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingJournal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingJournal' from JSON`,
  );
}
