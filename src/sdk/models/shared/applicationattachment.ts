/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AttachmentType, AttachmentType$ } from "./attachmenttype";
import { z } from "zod";

/**
 * The content type of the attachment.
 */
export enum ApplicationAttachmentValue {
    Text = "text",
    UnmappedValue = "unmapped_value",
}

export type ContentType = {
    /**
     * The source value of the content type.
     */
    sourceValue?: string | null | undefined;
    /**
     * The content type of the attachment.
     */
    value?: ApplicationAttachmentValue | null | undefined;
};

export type ApplicationAttachment = {
    /**
     * The content of the attachment.
     */
    content?: string | null | undefined;
    contentType?: ContentType | null | undefined;
    /**
     * The file name of the attachment.
     */
    fileName?: string | null | undefined;
    type?: Array<AttachmentType> | null | undefined;
    /**
     * The URL of the attachment.
     */
    url?: string | null | undefined;
};

/** @internal */
export const ApplicationAttachmentValue$ = z.nativeEnum(ApplicationAttachmentValue);

/** @internal */
export namespace ContentType$ {
    export type Inbound = {
        source_value?: string | null | undefined;
        value?: ApplicationAttachmentValue | null | undefined;
    };

    export const inboundSchema: z.ZodType<ContentType, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z.string().nullable().optional(),
            value: ApplicationAttachmentValue$.nullable().optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?: string | null | undefined;
        value?: ApplicationAttachmentValue | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContentType> = z
        .object({
            sourceValue: z.string().nullable().optional(),
            value: ApplicationAttachmentValue$.nullable().optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace ApplicationAttachment$ {
    export type Inbound = {
        content?: string | null | undefined;
        content_type?: ContentType$.Inbound | null | undefined;
        file_name?: string | null | undefined;
        type?: Array<AttachmentType$.Inbound> | null | undefined;
        url?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<ApplicationAttachment, z.ZodTypeDef, Inbound> = z
        .object({
            content: z.string().nullable().optional(),
            content_type: z
                .lazy(() => ContentType$.inboundSchema)
                .nullable()
                .optional(),
            file_name: z.string().nullable().optional(),
            type: z.array(AttachmentType$.inboundSchema).nullable().optional(),
            url: z.string().nullable().optional(),
        })
        .transform((v) => {
            return {
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.content_type === undefined ? null : { contentType: v.content_type }),
                ...(v.file_name === undefined ? null : { fileName: v.file_name }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        content?: string | null | undefined;
        content_type?: ContentType$.Outbound | null | undefined;
        file_name?: string | null | undefined;
        type?: Array<AttachmentType$.Outbound> | null | undefined;
        url?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ApplicationAttachment> = z
        .object({
            content: z.string().nullable().optional(),
            contentType: z
                .lazy(() => ContentType$.outboundSchema)
                .nullable()
                .optional(),
            fileName: z.string().nullable().optional(),
            type: z.array(AttachmentType$.outboundSchema).nullable().optional(),
            url: z.string().nullable().optional(),
        })
        .transform((v) => {
            return {
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.contentType === undefined ? null : { content_type: v.contentType }),
                ...(v.fileName === undefined ? null : { file_name: v.fileName }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}
