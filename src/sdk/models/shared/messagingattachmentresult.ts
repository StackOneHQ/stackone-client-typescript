/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RawResponse,
  RawResponse$inboundSchema,
  RawResponse$Outbound,
  RawResponse$outboundSchema,
} from "./rawresponse.js";

export type MessagingAttachmentResultData = {
  /**
   * Name of the attached file
   */
  fileName?: string | null | undefined;
  /**
   * Size of the attached file
   */
  fileSize?: number | null | undefined;
  /**
   * MIME type of the attached file
   */
  fileType?: string | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
};

export type MessagingAttachmentResult = {
  data?: MessagingAttachmentResultData | null | undefined;
  raw?: Array<RawResponse> | null | undefined;
};

/** @internal */
export const MessagingAttachmentResultData$inboundSchema: z.ZodType<
  MessagingAttachmentResultData,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_name: z.nullable(z.string()).optional(),
  file_size: z.nullable(z.number()).optional(),
  file_type: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "file_name": "fileName",
    "file_size": "fileSize",
    "file_type": "fileType",
    "remote_id": "remoteId",
  });
});

/** @internal */
export type MessagingAttachmentResultData$Outbound = {
  file_name?: string | null | undefined;
  file_size?: number | null | undefined;
  file_type?: string | null | undefined;
  id?: string | null | undefined;
  remote_id?: string | null | undefined;
};

/** @internal */
export const MessagingAttachmentResultData$outboundSchema: z.ZodType<
  MessagingAttachmentResultData$Outbound,
  z.ZodTypeDef,
  MessagingAttachmentResultData
> = z.object({
  fileName: z.nullable(z.string()).optional(),
  fileSize: z.nullable(z.number()).optional(),
  fileType: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    fileName: "file_name",
    fileSize: "file_size",
    fileType: "file_type",
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingAttachmentResultData$ {
  /** @deprecated use `MessagingAttachmentResultData$inboundSchema` instead. */
  export const inboundSchema = MessagingAttachmentResultData$inboundSchema;
  /** @deprecated use `MessagingAttachmentResultData$outboundSchema` instead. */
  export const outboundSchema = MessagingAttachmentResultData$outboundSchema;
  /** @deprecated use `MessagingAttachmentResultData$Outbound` instead. */
  export type Outbound = MessagingAttachmentResultData$Outbound;
}

export function messagingAttachmentResultDataToJSON(
  messagingAttachmentResultData: MessagingAttachmentResultData,
): string {
  return JSON.stringify(
    MessagingAttachmentResultData$outboundSchema.parse(
      messagingAttachmentResultData,
    ),
  );
}

export function messagingAttachmentResultDataFromJSON(
  jsonString: string,
): SafeParseResult<MessagingAttachmentResultData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessagingAttachmentResultData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessagingAttachmentResultData' from JSON`,
  );
}

/** @internal */
export const MessagingAttachmentResult$inboundSchema: z.ZodType<
  MessagingAttachmentResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(z.lazy(() => MessagingAttachmentResultData$inboundSchema))
    .optional(),
  raw: z.nullable(z.array(RawResponse$inboundSchema)).optional(),
});

/** @internal */
export type MessagingAttachmentResult$Outbound = {
  data?: MessagingAttachmentResultData$Outbound | null | undefined;
  raw?: Array<RawResponse$Outbound> | null | undefined;
};

/** @internal */
export const MessagingAttachmentResult$outboundSchema: z.ZodType<
  MessagingAttachmentResult$Outbound,
  z.ZodTypeDef,
  MessagingAttachmentResult
> = z.object({
  data: z.nullable(z.lazy(() => MessagingAttachmentResultData$outboundSchema))
    .optional(),
  raw: z.nullable(z.array(RawResponse$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingAttachmentResult$ {
  /** @deprecated use `MessagingAttachmentResult$inboundSchema` instead. */
  export const inboundSchema = MessagingAttachmentResult$inboundSchema;
  /** @deprecated use `MessagingAttachmentResult$outboundSchema` instead. */
  export const outboundSchema = MessagingAttachmentResult$outboundSchema;
  /** @deprecated use `MessagingAttachmentResult$Outbound` instead. */
  export type Outbound = MessagingAttachmentResult$Outbound;
}

export function messagingAttachmentResultToJSON(
  messagingAttachmentResult: MessagingAttachmentResult,
): string {
  return JSON.stringify(
    MessagingAttachmentResult$outboundSchema.parse(messagingAttachmentResult),
  );
}

export function messagingAttachmentResultFromJSON(
  jsonString: string,
): SafeParseResult<MessagingAttachmentResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessagingAttachmentResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessagingAttachmentResult' from JSON`,
  );
}
