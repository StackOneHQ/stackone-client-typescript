/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AssessmentsAttachment,
  AssessmentsAttachment$inboundSchema,
  AssessmentsAttachment$Outbound,
  AssessmentsAttachment$outboundSchema,
} from "./assessmentsattachment.js";

export type BackgroundCheckResultsResultCandidate = {
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Candidate profile url
   */
  profileUrl?: string | null | undefined;
};

export type BackgroundCheckResultsResult4 = {};

/**
 * The source value of the test result.
 */
export type BackgroundCheckResultsResultSourceValue =
  | BackgroundCheckResultsResult4
  | string
  | number
  | boolean
  | Array<any>;

/**
 * The result of the test.
 */
export enum BackgroundCheckResultsResultValue {
  Cancelled = "cancelled",
  Expired = "expired",
  Failed = "failed",
  Passed = "passed",
}
/**
 * The result of the test.
 */
export type BackgroundCheckResultsResultValueOpen = OpenEnum<
  typeof BackgroundCheckResultsResultValue
>;

export type BackgroundCheckResultsResultResult = {
  /**
   * The source value of the test result.
   */
  sourceValue?:
    | BackgroundCheckResultsResult4
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  /**
   * The result of the test.
   */
  value?: BackgroundCheckResultsResultValueOpen | null | undefined;
};

export type BackgroundCheckResultsResultScore = {
  /**
   * The label of the score
   */
  label?: string | null | undefined;
  /**
   * The maximum value of the score
   */
  max?: string | null | undefined;
  /**
   * The minimum value of the score
   */
  min?: string | null | undefined;
  /**
   * The value is the actual score
   */
  value?: string | null | undefined;
};

export type BackgroundCheckResultsResult = {
  attachments?: Array<AssessmentsAttachment> | null | undefined;
  candidate?: BackgroundCheckResultsResultCandidate | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  result?: BackgroundCheckResultsResultResult | null | undefined;
  /**
   * The test`s result url
   */
  resultUrl?: string | null | undefined;
  score?: BackgroundCheckResultsResultScore | null | undefined;
  /**
   * The start date of the candidate test
   */
  startDate?: Date | null | undefined;
  /**
   * The submission date of the candidate test
   */
  submissionDate?: Date | null | undefined;
  /**
   * The summary about the result of the test
   */
  summary?: string | null | undefined;
};

/** @internal */
export const BackgroundCheckResultsResultCandidate$inboundSchema: z.ZodType<
  BackgroundCheckResultsResultCandidate,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  profile_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "profile_url": "profileUrl",
  });
});

/** @internal */
export type BackgroundCheckResultsResultCandidate$Outbound = {
  id?: string | null | undefined;
  profile_url?: string | null | undefined;
};

/** @internal */
export const BackgroundCheckResultsResultCandidate$outboundSchema: z.ZodType<
  BackgroundCheckResultsResultCandidate$Outbound,
  z.ZodTypeDef,
  BackgroundCheckResultsResultCandidate
> = z.object({
  id: z.nullable(z.string()).optional(),
  profileUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    profileUrl: "profile_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackgroundCheckResultsResultCandidate$ {
  /** @deprecated use `BackgroundCheckResultsResultCandidate$inboundSchema` instead. */
  export const inboundSchema =
    BackgroundCheckResultsResultCandidate$inboundSchema;
  /** @deprecated use `BackgroundCheckResultsResultCandidate$outboundSchema` instead. */
  export const outboundSchema =
    BackgroundCheckResultsResultCandidate$outboundSchema;
  /** @deprecated use `BackgroundCheckResultsResultCandidate$Outbound` instead. */
  export type Outbound = BackgroundCheckResultsResultCandidate$Outbound;
}

export function backgroundCheckResultsResultCandidateToJSON(
  backgroundCheckResultsResultCandidate: BackgroundCheckResultsResultCandidate,
): string {
  return JSON.stringify(
    BackgroundCheckResultsResultCandidate$outboundSchema.parse(
      backgroundCheckResultsResultCandidate,
    ),
  );
}

export function backgroundCheckResultsResultCandidateFromJSON(
  jsonString: string,
): SafeParseResult<BackgroundCheckResultsResultCandidate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BackgroundCheckResultsResultCandidate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackgroundCheckResultsResultCandidate' from JSON`,
  );
}

/** @internal */
export const BackgroundCheckResultsResult4$inboundSchema: z.ZodType<
  BackgroundCheckResultsResult4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type BackgroundCheckResultsResult4$Outbound = {};

/** @internal */
export const BackgroundCheckResultsResult4$outboundSchema: z.ZodType<
  BackgroundCheckResultsResult4$Outbound,
  z.ZodTypeDef,
  BackgroundCheckResultsResult4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackgroundCheckResultsResult4$ {
  /** @deprecated use `BackgroundCheckResultsResult4$inboundSchema` instead. */
  export const inboundSchema = BackgroundCheckResultsResult4$inboundSchema;
  /** @deprecated use `BackgroundCheckResultsResult4$outboundSchema` instead. */
  export const outboundSchema = BackgroundCheckResultsResult4$outboundSchema;
  /** @deprecated use `BackgroundCheckResultsResult4$Outbound` instead. */
  export type Outbound = BackgroundCheckResultsResult4$Outbound;
}

export function backgroundCheckResultsResult4ToJSON(
  backgroundCheckResultsResult4: BackgroundCheckResultsResult4,
): string {
  return JSON.stringify(
    BackgroundCheckResultsResult4$outboundSchema.parse(
      backgroundCheckResultsResult4,
    ),
  );
}

export function backgroundCheckResultsResult4FromJSON(
  jsonString: string,
): SafeParseResult<BackgroundCheckResultsResult4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BackgroundCheckResultsResult4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackgroundCheckResultsResult4' from JSON`,
  );
}

/** @internal */
export const BackgroundCheckResultsResultSourceValue$inboundSchema: z.ZodType<
  BackgroundCheckResultsResultSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => BackgroundCheckResultsResult4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type BackgroundCheckResultsResultSourceValue$Outbound =
  | BackgroundCheckResultsResult4$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const BackgroundCheckResultsResultSourceValue$outboundSchema: z.ZodType<
  BackgroundCheckResultsResultSourceValue$Outbound,
  z.ZodTypeDef,
  BackgroundCheckResultsResultSourceValue
> = z.union([
  z.lazy(() => BackgroundCheckResultsResult4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackgroundCheckResultsResultSourceValue$ {
  /** @deprecated use `BackgroundCheckResultsResultSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    BackgroundCheckResultsResultSourceValue$inboundSchema;
  /** @deprecated use `BackgroundCheckResultsResultSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    BackgroundCheckResultsResultSourceValue$outboundSchema;
  /** @deprecated use `BackgroundCheckResultsResultSourceValue$Outbound` instead. */
  export type Outbound = BackgroundCheckResultsResultSourceValue$Outbound;
}

export function backgroundCheckResultsResultSourceValueToJSON(
  backgroundCheckResultsResultSourceValue:
    BackgroundCheckResultsResultSourceValue,
): string {
  return JSON.stringify(
    BackgroundCheckResultsResultSourceValue$outboundSchema.parse(
      backgroundCheckResultsResultSourceValue,
    ),
  );
}

export function backgroundCheckResultsResultSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  BackgroundCheckResultsResultSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackgroundCheckResultsResultSourceValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackgroundCheckResultsResultSourceValue' from JSON`,
  );
}

/** @internal */
export const BackgroundCheckResultsResultValue$inboundSchema: z.ZodType<
  BackgroundCheckResultsResultValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(BackgroundCheckResultsResultValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const BackgroundCheckResultsResultValue$outboundSchema: z.ZodType<
  BackgroundCheckResultsResultValueOpen,
  z.ZodTypeDef,
  BackgroundCheckResultsResultValueOpen
> = z.union([
  z.nativeEnum(BackgroundCheckResultsResultValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackgroundCheckResultsResultValue$ {
  /** @deprecated use `BackgroundCheckResultsResultValue$inboundSchema` instead. */
  export const inboundSchema = BackgroundCheckResultsResultValue$inboundSchema;
  /** @deprecated use `BackgroundCheckResultsResultValue$outboundSchema` instead. */
  export const outboundSchema =
    BackgroundCheckResultsResultValue$outboundSchema;
}

/** @internal */
export const BackgroundCheckResultsResultResult$inboundSchema: z.ZodType<
  BackgroundCheckResultsResultResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.lazy(() => BackgroundCheckResultsResult4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(BackgroundCheckResultsResultValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type BackgroundCheckResultsResultResult$Outbound = {
  source_value?:
    | BackgroundCheckResultsResult4$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const BackgroundCheckResultsResultResult$outboundSchema: z.ZodType<
  BackgroundCheckResultsResultResult$Outbound,
  z.ZodTypeDef,
  BackgroundCheckResultsResultResult
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.lazy(() => BackgroundCheckResultsResult4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(BackgroundCheckResultsResultValue$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackgroundCheckResultsResultResult$ {
  /** @deprecated use `BackgroundCheckResultsResultResult$inboundSchema` instead. */
  export const inboundSchema = BackgroundCheckResultsResultResult$inboundSchema;
  /** @deprecated use `BackgroundCheckResultsResultResult$outboundSchema` instead. */
  export const outboundSchema =
    BackgroundCheckResultsResultResult$outboundSchema;
  /** @deprecated use `BackgroundCheckResultsResultResult$Outbound` instead. */
  export type Outbound = BackgroundCheckResultsResultResult$Outbound;
}

export function backgroundCheckResultsResultResultToJSON(
  backgroundCheckResultsResultResult: BackgroundCheckResultsResultResult,
): string {
  return JSON.stringify(
    BackgroundCheckResultsResultResult$outboundSchema.parse(
      backgroundCheckResultsResultResult,
    ),
  );
}

export function backgroundCheckResultsResultResultFromJSON(
  jsonString: string,
): SafeParseResult<BackgroundCheckResultsResultResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BackgroundCheckResultsResultResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackgroundCheckResultsResultResult' from JSON`,
  );
}

/** @internal */
export const BackgroundCheckResultsResultScore$inboundSchema: z.ZodType<
  BackgroundCheckResultsResultScore,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.nullable(z.string()).optional(),
  max: z.nullable(z.string()).optional(),
  min: z.nullable(z.string()).optional(),
  value: z.nullable(z.string()).optional(),
});

/** @internal */
export type BackgroundCheckResultsResultScore$Outbound = {
  label?: string | null | undefined;
  max?: string | null | undefined;
  min?: string | null | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const BackgroundCheckResultsResultScore$outboundSchema: z.ZodType<
  BackgroundCheckResultsResultScore$Outbound,
  z.ZodTypeDef,
  BackgroundCheckResultsResultScore
> = z.object({
  label: z.nullable(z.string()).optional(),
  max: z.nullable(z.string()).optional(),
  min: z.nullable(z.string()).optional(),
  value: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackgroundCheckResultsResultScore$ {
  /** @deprecated use `BackgroundCheckResultsResultScore$inboundSchema` instead. */
  export const inboundSchema = BackgroundCheckResultsResultScore$inboundSchema;
  /** @deprecated use `BackgroundCheckResultsResultScore$outboundSchema` instead. */
  export const outboundSchema =
    BackgroundCheckResultsResultScore$outboundSchema;
  /** @deprecated use `BackgroundCheckResultsResultScore$Outbound` instead. */
  export type Outbound = BackgroundCheckResultsResultScore$Outbound;
}

export function backgroundCheckResultsResultScoreToJSON(
  backgroundCheckResultsResultScore: BackgroundCheckResultsResultScore,
): string {
  return JSON.stringify(
    BackgroundCheckResultsResultScore$outboundSchema.parse(
      backgroundCheckResultsResultScore,
    ),
  );
}

export function backgroundCheckResultsResultScoreFromJSON(
  jsonString: string,
): SafeParseResult<BackgroundCheckResultsResultScore, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BackgroundCheckResultsResultScore$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackgroundCheckResultsResultScore' from JSON`,
  );
}

/** @internal */
export const BackgroundCheckResultsResult$inboundSchema: z.ZodType<
  BackgroundCheckResultsResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  attachments: z.nullable(z.array(AssessmentsAttachment$inboundSchema))
    .optional(),
  candidate: z.nullable(
    z.lazy(() => BackgroundCheckResultsResultCandidate$inboundSchema),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  result: z.nullable(
    z.lazy(() => BackgroundCheckResultsResultResult$inboundSchema),
  ).optional(),
  result_url: z.nullable(z.string()).optional(),
  score: z.nullable(
    z.lazy(() => BackgroundCheckResultsResultScore$inboundSchema),
  ).optional(),
  start_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  submission_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  summary: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "remote_id": "remoteId",
    "result_url": "resultUrl",
    "start_date": "startDate",
    "submission_date": "submissionDate",
  });
});

/** @internal */
export type BackgroundCheckResultsResult$Outbound = {
  attachments?: Array<AssessmentsAttachment$Outbound> | null | undefined;
  candidate?: BackgroundCheckResultsResultCandidate$Outbound | null | undefined;
  id?: string | null | undefined;
  remote_id?: string | null | undefined;
  result?: BackgroundCheckResultsResultResult$Outbound | null | undefined;
  result_url?: string | null | undefined;
  score?: BackgroundCheckResultsResultScore$Outbound | null | undefined;
  start_date?: string | null | undefined;
  submission_date?: string | null | undefined;
  summary?: string | null | undefined;
};

/** @internal */
export const BackgroundCheckResultsResult$outboundSchema: z.ZodType<
  BackgroundCheckResultsResult$Outbound,
  z.ZodTypeDef,
  BackgroundCheckResultsResult
> = z.object({
  attachments: z.nullable(z.array(AssessmentsAttachment$outboundSchema))
    .optional(),
  candidate: z.nullable(
    z.lazy(() => BackgroundCheckResultsResultCandidate$outboundSchema),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  result: z.nullable(
    z.lazy(() => BackgroundCheckResultsResultResult$outboundSchema),
  ).optional(),
  resultUrl: z.nullable(z.string()).optional(),
  score: z.nullable(
    z.lazy(() => BackgroundCheckResultsResultScore$outboundSchema),
  ).optional(),
  startDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  submissionDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  summary: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    remoteId: "remote_id",
    resultUrl: "result_url",
    startDate: "start_date",
    submissionDate: "submission_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackgroundCheckResultsResult$ {
  /** @deprecated use `BackgroundCheckResultsResult$inboundSchema` instead. */
  export const inboundSchema = BackgroundCheckResultsResult$inboundSchema;
  /** @deprecated use `BackgroundCheckResultsResult$outboundSchema` instead. */
  export const outboundSchema = BackgroundCheckResultsResult$outboundSchema;
  /** @deprecated use `BackgroundCheckResultsResult$Outbound` instead. */
  export type Outbound = BackgroundCheckResultsResult$Outbound;
}

export function backgroundCheckResultsResultToJSON(
  backgroundCheckResultsResult: BackgroundCheckResultsResult,
): string {
  return JSON.stringify(
    BackgroundCheckResultsResult$outboundSchema.parse(
      backgroundCheckResultsResult,
    ),
  );
}

export function backgroundCheckResultsResultFromJSON(
  jsonString: string,
): SafeParseResult<BackgroundCheckResultsResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BackgroundCheckResultsResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackgroundCheckResultsResult' from JSON`,
  );
}
