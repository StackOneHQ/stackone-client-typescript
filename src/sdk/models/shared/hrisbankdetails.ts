/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ClearingCode,
  ClearingCode$inboundSchema,
  ClearingCode$Outbound,
  ClearingCode$outboundSchema,
} from "./clearingcode.js";

export type HRISBankDetails4 = {};

export type HRISBankDetailsSourceValue =
  | string
  | number
  | boolean
  | HRISBankDetails4
  | Array<any>;

/**
 * The type of bank account
 */
export enum HRISBankDetailsValue {
  Savings = "savings",
  Checking = "checking",
  Current = "current",
  Business = "business",
  Personal = "personal",
  Other = "other",
  UnmappedValue = "unmapped_value",
}
/**
 * The type of bank account
 */
export type HRISBankDetailsValueOpen = OpenEnum<typeof HRISBankDetailsValue>;

/**
 * The type of bank account
 */
export type AccountType = {
  sourceValue?:
    | string
    | number
    | boolean
    | HRISBankDetails4
    | Array<any>
    | null
    | undefined;
  /**
   * The type of bank account
   */
  value?: HRISBankDetailsValueOpen | null | undefined;
};

export type HRISBankDetailsSchemas4 = {};

export type HRISBankDetailsSchemasSourceValue =
  | string
  | number
  | boolean
  | HRISBankDetailsSchemas4
  | Array<any>;

/**
 * The ISO3166-1 Alpha2 Code of the Country
 */
export enum HRISBankDetailsSchemasValue {
  Af = "AF",
  Al = "AL",
  Dz = "DZ",
  As = "AS",
  Ad = "AD",
  Ao = "AO",
  Ai = "AI",
  Aq = "AQ",
  Ag = "AG",
  Ar = "AR",
  Am = "AM",
  Aw = "AW",
  Au = "AU",
  At = "AT",
  Az = "AZ",
  Bs = "BS",
  Bh = "BH",
  Bd = "BD",
  Bb = "BB",
  By = "BY",
  Be = "BE",
  Bz = "BZ",
  Bj = "BJ",
  Bm = "BM",
  Bt = "BT",
  Bo = "BO",
  Bq = "BQ",
  Ba = "BA",
  Bw = "BW",
  Bv = "BV",
  Br = "BR",
  Io = "IO",
  Bn = "BN",
  Bg = "BG",
  Bf = "BF",
  Bi = "BI",
  Kh = "KH",
  Cm = "CM",
  Ca = "CA",
  Cv = "CV",
  Ky = "KY",
  Cf = "CF",
  Td = "TD",
  Cl = "CL",
  Cn = "CN",
  Cx = "CX",
  Cc = "CC",
  Co = "CO",
  Km = "KM",
  Cg = "CG",
  Cd = "CD",
  Ck = "CK",
  Cr = "CR",
  Hr = "HR",
  Cu = "CU",
  Cw = "CW",
  Cy = "CY",
  Cz = "CZ",
  Ci = "CI",
  Dk = "DK",
  Dj = "DJ",
  Dm = "DM",
  Do = "DO",
  Ec = "EC",
  Eg = "EG",
  Sv = "SV",
  Gq = "GQ",
  Er = "ER",
  Ee = "EE",
  Et = "ET",
  Fk = "FK",
  Fo = "FO",
  Fj = "FJ",
  Fi = "FI",
  Fr = "FR",
  Gf = "GF",
  Pf = "PF",
  Tf = "TF",
  Ga = "GA",
  Gm = "GM",
  Ge = "GE",
  De = "DE",
  Gh = "GH",
  Gi = "GI",
  Gr = "GR",
  Gl = "GL",
  Gd = "GD",
  Gp = "GP",
  Gu = "GU",
  Gt = "GT",
  Gg = "GG",
  Gn = "GN",
  Gw = "GW",
  Gy = "GY",
  Ht = "HT",
  Hm = "HM",
  Va = "VA",
  Hn = "HN",
  Hk = "HK",
  Hu = "HU",
  Is = "IS",
  In = "IN",
  Id = "ID",
  Ir = "IR",
  Iq = "IQ",
  Ie = "IE",
  Im = "IM",
  Il = "IL",
  It = "IT",
  Jm = "JM",
  Jp = "JP",
  Je = "JE",
  Jo = "JO",
  Kz = "KZ",
  Ke = "KE",
  Ki = "KI",
  Kp = "KP",
  Kr = "KR",
  Kw = "KW",
  Kg = "KG",
  La = "LA",
  Lv = "LV",
  Lb = "LB",
  Ls = "LS",
  Lr = "LR",
  Ly = "LY",
  Li = "LI",
  Lt = "LT",
  Lu = "LU",
  Mo = "MO",
  Mk = "MK",
  Mg = "MG",
  Mw = "MW",
  My = "MY",
  Mv = "MV",
  Ml = "ML",
  Mt = "MT",
  Mh = "MH",
  Mq = "MQ",
  Mr = "MR",
  Mu = "MU",
  Yt = "YT",
  Mx = "MX",
  Fm = "FM",
  Md = "MD",
  Mc = "MC",
  Mn = "MN",
  Me = "ME",
  Ms = "MS",
  Ma = "MA",
  Mz = "MZ",
  Mm = "MM",
  Na = "NA",
  Nr = "NR",
  Np = "NP",
  Nl = "NL",
  Nc = "NC",
  Nz = "NZ",
  Ni = "NI",
  Ne = "NE",
  Ng = "NG",
  Nu = "NU",
  Nf = "NF",
  Mp = "MP",
  No = "NO",
  Om = "OM",
  Pk = "PK",
  Pw = "PW",
  Ps = "PS",
  Pa = "PA",
  Pg = "PG",
  Py = "PY",
  Pe = "PE",
  Ph = "PH",
  Pn = "PN",
  Pl = "PL",
  Pt = "PT",
  Pr = "PR",
  Qa = "QA",
  Ro = "RO",
  Ru = "RU",
  Rw = "RW",
  Re = "RE",
  Bl = "BL",
  Sh = "SH",
  Kn = "KN",
  Lc = "LC",
  Mf = "MF",
  Pm = "PM",
  Vc = "VC",
  Ws = "WS",
  Sm = "SM",
  St = "ST",
  Sa = "SA",
  Sn = "SN",
  Rs = "RS",
  Sc = "SC",
  Sl = "SL",
  Sg = "SG",
  Sx = "SX",
  Sk = "SK",
  Si = "SI",
  Sb = "SB",
  So = "SO",
  Za = "ZA",
  Gs = "GS",
  Ss = "SS",
  Es = "ES",
  Lk = "LK",
  Sd = "SD",
  Sr = "SR",
  Sj = "SJ",
  Sz = "SZ",
  Se = "SE",
  Ch = "CH",
  Sy = "SY",
  Tw = "TW",
  Tj = "TJ",
  Tz = "TZ",
  Th = "TH",
  Tl = "TL",
  Tg = "TG",
  Tk = "TK",
  To = "TO",
  Tt = "TT",
  Tn = "TN",
  Tr = "TR",
  Tm = "TM",
  Tc = "TC",
  Tv = "TV",
  Ug = "UG",
  Ua = "UA",
  Ae = "AE",
  Gb = "GB",
  Us = "US",
  Um = "UM",
  Uy = "UY",
  Uz = "UZ",
  Vu = "VU",
  Ve = "VE",
  Vn = "VN",
  Vg = "VG",
  Vi = "VI",
  Wf = "WF",
  Eh = "EH",
  Ye = "YE",
  Zm = "ZM",
  Zw = "ZW",
  UnmappedValue = "unmapped_value",
}
/**
 * The ISO3166-1 Alpha2 Code of the Country
 */
export type HRISBankDetailsSchemasValueOpen = OpenEnum<
  typeof HRISBankDetailsSchemasValue
>;

/**
 * The country code where the bank is located
 */
export type CountryCode = {
  sourceValue?:
    | string
    | number
    | boolean
    | HRISBankDetailsSchemas4
    | Array<any>
    | null
    | undefined;
  /**
   * The ISO3166-1 Alpha2 Code of the Country
   */
  value?: HRISBankDetailsSchemasValueOpen | null | undefined;
};

export type HRISBankDetailsSchemasCurrencyCode4 = {};

export type HRISBankDetailsSchemasCurrencyCodeSourceValue =
  | string
  | number
  | boolean
  | HRISBankDetailsSchemasCurrencyCode4
  | Array<any>;

/**
 * ISO 4217 currency code
 */
export enum HRISBankDetailsSchemasCurrencyCodeValue {
  Aed = "AED",
  Afn = "AFN",
  All = "ALL",
  Amd = "AMD",
  Ang = "ANG",
  Aoa = "AOA",
  Ars = "ARS",
  Aud = "AUD",
  Awg = "AWG",
  Azn = "AZN",
  Bam = "BAM",
  Bbd = "BBD",
  Bdt = "BDT",
  Bgn = "BGN",
  Bhd = "BHD",
  Bif = "BIF",
  Bmd = "BMD",
  Bnd = "BND",
  Bob = "BOB",
  Brl = "BRL",
  Bsd = "BSD",
  Btn = "BTN",
  Bwp = "BWP",
  Byn = "BYN",
  Bzd = "BZD",
  Cad = "CAD",
  Cdf = "CDF",
  Chf = "CHF",
  Clp = "CLP",
  Cny = "CNY",
  Cop = "COP",
  Crc = "CRC",
  Cuc = "CUC",
  Cup = "CUP",
  Cve = "CVE",
  Czk = "CZK",
  Djf = "DJF",
  Dkk = "DKK",
  Dop = "DOP",
  Dzd = "DZD",
  Egp = "EGP",
  Ern = "ERN",
  Etb = "ETB",
  Eur = "EUR",
  Fjd = "FJD",
  Fkp = "FKP",
  Gbp = "GBP",
  Gel = "GEL",
  Ghs = "GHS",
  Gip = "GIP",
  Gmd = "GMD",
  Gnf = "GNF",
  Gtq = "GTQ",
  Gyd = "GYD",
  Hkd = "HKD",
  Hnl = "HNL",
  Hrk = "HRK",
  Htg = "HTG",
  Huf = "HUF",
  Idr = "IDR",
  Ils = "ILS",
  Inr = "INR",
  Iqd = "IQD",
  Irr = "IRR",
  Isk = "ISK",
  Jmd = "JMD",
  Jod = "JOD",
  Jpy = "JPY",
  Kes = "KES",
  Kgs = "KGS",
  Khr = "KHR",
  Kmf = "KMF",
  Kpw = "KPW",
  Krw = "KRW",
  Kwd = "KWD",
  Kyd = "KYD",
  Kzt = "KZT",
  Lak = "LAK",
  Lbp = "LBP",
  Lkr = "LKR",
  Lrd = "LRD",
  Lsl = "LSL",
  Lyd = "LYD",
  Mad = "MAD",
  Mdl = "MDL",
  Mga = "MGA",
  Mkd = "MKD",
  Mmk = "MMK",
  Mnt = "MNT",
  Mop = "MOP",
  Mru = "MRU",
  Mur = "MUR",
  Mvr = "MVR",
  Mwk = "MWK",
  Mxn = "MXN",
  Myr = "MYR",
  Mzn = "MZN",
  Nad = "NAD",
  Ngn = "NGN",
  Nio = "NIO",
  Nok = "NOK",
  Npr = "NPR",
  Nzd = "NZD",
  Omr = "OMR",
  Pab = "PAB",
  Pen = "PEN",
  Pgk = "PGK",
  Php = "PHP",
  Pkr = "PKR",
  Pln = "PLN",
  Pyg = "PYG",
  Qar = "QAR",
  Ron = "RON",
  Rsd = "RSD",
  Rub = "RUB",
  Rwf = "RWF",
  Sar = "SAR",
  Sbd = "SBD",
  Scr = "SCR",
  Sdg = "SDG",
  Sek = "SEK",
  Sgd = "SGD",
  Shp = "SHP",
  Sll = "SLL",
  Sos = "SOS",
  Srd = "SRD",
  Ssp = "SSP",
  Stn = "STN",
  Syp = "SYP",
  Szl = "SZL",
  Thb = "THB",
  Tjs = "TJS",
  Tmt = "TMT",
  Tnd = "TND",
  Top = "TOP",
  Try = "TRY",
  Ttd = "TTD",
  Twd = "TWD",
  Tzs = "TZS",
  Uah = "UAH",
  Ugx = "UGX",
  Usd = "USD",
  Uyu = "UYU",
  Uzs = "UZS",
  Ves = "VES",
  Vnd = "VND",
  Vuv = "VUV",
  Wst = "WST",
  Xaf = "XAF",
  Xcd = "XCD",
  Xdr = "XDR",
  Xof = "XOF",
  Xpf = "XPF",
  Yer = "YER",
  Zar = "ZAR",
  Zmw = "ZMW",
  Zwl = "ZWL",
  UnmappedValue = "unmapped_value",
}
/**
 * ISO 4217 currency code
 */
export type HRISBankDetailsSchemasCurrencyCodeValueOpen = OpenEnum<
  typeof HRISBankDetailsSchemasCurrencyCodeValue
>;

/**
 * The currency code for the account
 */
export type HRISBankDetailsCurrencyCode = {
  sourceValue?:
    | string
    | number
    | boolean
    | HRISBankDetailsSchemasCurrencyCode4
    | Array<any>
    | null
    | undefined;
  /**
   * ISO 4217 currency code
   */
  value?: HRISBankDetailsSchemasCurrencyCodeValueOpen | null | undefined;
};

export type HRISBankDetails = {
  /**
   * The name of the bank account
   */
  accountName?: string | null | undefined;
  /**
   * The type of bank account
   */
  accountType?: AccountType | null | undefined;
  /**
   * The name of the bank
   */
  bankName?: string | null | undefined;
  /**
   * Array of clearing codes required by the country
   */
  clearingCodes?: Array<ClearingCode> | null | undefined;
  /**
   * The country code where the bank is located
   */
  countryCode?: CountryCode | null | undefined;
  /**
   * The currency code for the account
   */
  currencyCode?: HRISBankDetailsCurrencyCode | null | undefined;
  /**
   * International Bank Account Number (IBAN)
   */
  iban?: string | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Whether this is the primary bank account
   */
  isPrimary?: boolean | null | undefined;
  /**
   * Local account number (used when IBAN is not available)
   */
  localAccountNumber?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * SWIFT/BIC code for international transfers
   */
  swiftBic?: string | null | undefined;
};

/** @internal */
export const HRISBankDetails4$inboundSchema: z.ZodType<
  HRISBankDetails4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HRISBankDetails4$Outbound = {};

/** @internal */
export const HRISBankDetails4$outboundSchema: z.ZodType<
  HRISBankDetails4$Outbound,
  z.ZodTypeDef,
  HRISBankDetails4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HRISBankDetails4$ {
  /** @deprecated use `HRISBankDetails4$inboundSchema` instead. */
  export const inboundSchema = HRISBankDetails4$inboundSchema;
  /** @deprecated use `HRISBankDetails4$outboundSchema` instead. */
  export const outboundSchema = HRISBankDetails4$outboundSchema;
  /** @deprecated use `HRISBankDetails4$Outbound` instead. */
  export type Outbound = HRISBankDetails4$Outbound;
}

export function hrisBankDetails4ToJSON(
  hrisBankDetails4: HRISBankDetails4,
): string {
  return JSON.stringify(
    HRISBankDetails4$outboundSchema.parse(hrisBankDetails4),
  );
}

export function hrisBankDetails4FromJSON(
  jsonString: string,
): SafeParseResult<HRISBankDetails4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HRISBankDetails4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HRISBankDetails4' from JSON`,
  );
}

/** @internal */
export const HRISBankDetailsSourceValue$inboundSchema: z.ZodType<
  HRISBankDetailsSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => HRISBankDetails4$inboundSchema),
  z.array(z.any()),
]);

/** @internal */
export type HRISBankDetailsSourceValue$Outbound =
  | string
  | number
  | boolean
  | HRISBankDetails4$Outbound
  | Array<any>;

/** @internal */
export const HRISBankDetailsSourceValue$outboundSchema: z.ZodType<
  HRISBankDetailsSourceValue$Outbound,
  z.ZodTypeDef,
  HRISBankDetailsSourceValue
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => HRISBankDetails4$outboundSchema),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HRISBankDetailsSourceValue$ {
  /** @deprecated use `HRISBankDetailsSourceValue$inboundSchema` instead. */
  export const inboundSchema = HRISBankDetailsSourceValue$inboundSchema;
  /** @deprecated use `HRISBankDetailsSourceValue$outboundSchema` instead. */
  export const outboundSchema = HRISBankDetailsSourceValue$outboundSchema;
  /** @deprecated use `HRISBankDetailsSourceValue$Outbound` instead. */
  export type Outbound = HRISBankDetailsSourceValue$Outbound;
}

export function hrisBankDetailsSourceValueToJSON(
  hrisBankDetailsSourceValue: HRISBankDetailsSourceValue,
): string {
  return JSON.stringify(
    HRISBankDetailsSourceValue$outboundSchema.parse(hrisBankDetailsSourceValue),
  );
}

export function hrisBankDetailsSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<HRISBankDetailsSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HRISBankDetailsSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HRISBankDetailsSourceValue' from JSON`,
  );
}

/** @internal */
export const HRISBankDetailsValue$inboundSchema: z.ZodType<
  HRISBankDetailsValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(HRISBankDetailsValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const HRISBankDetailsValue$outboundSchema: z.ZodType<
  HRISBankDetailsValueOpen,
  z.ZodTypeDef,
  HRISBankDetailsValueOpen
> = z.union([
  z.nativeEnum(HRISBankDetailsValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HRISBankDetailsValue$ {
  /** @deprecated use `HRISBankDetailsValue$inboundSchema` instead. */
  export const inboundSchema = HRISBankDetailsValue$inboundSchema;
  /** @deprecated use `HRISBankDetailsValue$outboundSchema` instead. */
  export const outboundSchema = HRISBankDetailsValue$outboundSchema;
}

/** @internal */
export const AccountType$inboundSchema: z.ZodType<
  AccountType,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => HRISBankDetails4$inboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(HRISBankDetailsValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type AccountType$Outbound = {
  source_value?:
    | string
    | number
    | boolean
    | HRISBankDetails4$Outbound
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const AccountType$outboundSchema: z.ZodType<
  AccountType$Outbound,
  z.ZodTypeDef,
  AccountType
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => HRISBankDetails4$outboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(HRISBankDetailsValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountType$ {
  /** @deprecated use `AccountType$inboundSchema` instead. */
  export const inboundSchema = AccountType$inboundSchema;
  /** @deprecated use `AccountType$outboundSchema` instead. */
  export const outboundSchema = AccountType$outboundSchema;
  /** @deprecated use `AccountType$Outbound` instead. */
  export type Outbound = AccountType$Outbound;
}

export function accountTypeToJSON(accountType: AccountType): string {
  return JSON.stringify(AccountType$outboundSchema.parse(accountType));
}

export function accountTypeFromJSON(
  jsonString: string,
): SafeParseResult<AccountType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountType' from JSON`,
  );
}

/** @internal */
export const HRISBankDetailsSchemas4$inboundSchema: z.ZodType<
  HRISBankDetailsSchemas4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HRISBankDetailsSchemas4$Outbound = {};

/** @internal */
export const HRISBankDetailsSchemas4$outboundSchema: z.ZodType<
  HRISBankDetailsSchemas4$Outbound,
  z.ZodTypeDef,
  HRISBankDetailsSchemas4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HRISBankDetailsSchemas4$ {
  /** @deprecated use `HRISBankDetailsSchemas4$inboundSchema` instead. */
  export const inboundSchema = HRISBankDetailsSchemas4$inboundSchema;
  /** @deprecated use `HRISBankDetailsSchemas4$outboundSchema` instead. */
  export const outboundSchema = HRISBankDetailsSchemas4$outboundSchema;
  /** @deprecated use `HRISBankDetailsSchemas4$Outbound` instead. */
  export type Outbound = HRISBankDetailsSchemas4$Outbound;
}

export function hrisBankDetailsSchemas4ToJSON(
  hrisBankDetailsSchemas4: HRISBankDetailsSchemas4,
): string {
  return JSON.stringify(
    HRISBankDetailsSchemas4$outboundSchema.parse(hrisBankDetailsSchemas4),
  );
}

export function hrisBankDetailsSchemas4FromJSON(
  jsonString: string,
): SafeParseResult<HRISBankDetailsSchemas4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HRISBankDetailsSchemas4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HRISBankDetailsSchemas4' from JSON`,
  );
}

/** @internal */
export const HRISBankDetailsSchemasSourceValue$inboundSchema: z.ZodType<
  HRISBankDetailsSchemasSourceValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => HRISBankDetailsSchemas4$inboundSchema),
  z.array(z.any()),
]);

/** @internal */
export type HRISBankDetailsSchemasSourceValue$Outbound =
  | string
  | number
  | boolean
  | HRISBankDetailsSchemas4$Outbound
  | Array<any>;

/** @internal */
export const HRISBankDetailsSchemasSourceValue$outboundSchema: z.ZodType<
  HRISBankDetailsSchemasSourceValue$Outbound,
  z.ZodTypeDef,
  HRISBankDetailsSchemasSourceValue
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => HRISBankDetailsSchemas4$outboundSchema),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HRISBankDetailsSchemasSourceValue$ {
  /** @deprecated use `HRISBankDetailsSchemasSourceValue$inboundSchema` instead. */
  export const inboundSchema = HRISBankDetailsSchemasSourceValue$inboundSchema;
  /** @deprecated use `HRISBankDetailsSchemasSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    HRISBankDetailsSchemasSourceValue$outboundSchema;
  /** @deprecated use `HRISBankDetailsSchemasSourceValue$Outbound` instead. */
  export type Outbound = HRISBankDetailsSchemasSourceValue$Outbound;
}

export function hrisBankDetailsSchemasSourceValueToJSON(
  hrisBankDetailsSchemasSourceValue: HRISBankDetailsSchemasSourceValue,
): string {
  return JSON.stringify(
    HRISBankDetailsSchemasSourceValue$outboundSchema.parse(
      hrisBankDetailsSchemasSourceValue,
    ),
  );
}

export function hrisBankDetailsSchemasSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<HRISBankDetailsSchemasSourceValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HRISBankDetailsSchemasSourceValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HRISBankDetailsSchemasSourceValue' from JSON`,
  );
}

/** @internal */
export const HRISBankDetailsSchemasValue$inboundSchema: z.ZodType<
  HRISBankDetailsSchemasValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(HRISBankDetailsSchemasValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const HRISBankDetailsSchemasValue$outboundSchema: z.ZodType<
  HRISBankDetailsSchemasValueOpen,
  z.ZodTypeDef,
  HRISBankDetailsSchemasValueOpen
> = z.union([
  z.nativeEnum(HRISBankDetailsSchemasValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HRISBankDetailsSchemasValue$ {
  /** @deprecated use `HRISBankDetailsSchemasValue$inboundSchema` instead. */
  export const inboundSchema = HRISBankDetailsSchemasValue$inboundSchema;
  /** @deprecated use `HRISBankDetailsSchemasValue$outboundSchema` instead. */
  export const outboundSchema = HRISBankDetailsSchemasValue$outboundSchema;
}

/** @internal */
export const CountryCode$inboundSchema: z.ZodType<
  CountryCode,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => HRISBankDetailsSchemas4$inboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(HRISBankDetailsSchemasValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type CountryCode$Outbound = {
  source_value?:
    | string
    | number
    | boolean
    | HRISBankDetailsSchemas4$Outbound
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const CountryCode$outboundSchema: z.ZodType<
  CountryCode$Outbound,
  z.ZodTypeDef,
  CountryCode
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => HRISBankDetailsSchemas4$outboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(HRISBankDetailsSchemasValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CountryCode$ {
  /** @deprecated use `CountryCode$inboundSchema` instead. */
  export const inboundSchema = CountryCode$inboundSchema;
  /** @deprecated use `CountryCode$outboundSchema` instead. */
  export const outboundSchema = CountryCode$outboundSchema;
  /** @deprecated use `CountryCode$Outbound` instead. */
  export type Outbound = CountryCode$Outbound;
}

export function countryCodeToJSON(countryCode: CountryCode): string {
  return JSON.stringify(CountryCode$outboundSchema.parse(countryCode));
}

export function countryCodeFromJSON(
  jsonString: string,
): SafeParseResult<CountryCode, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CountryCode$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CountryCode' from JSON`,
  );
}

/** @internal */
export const HRISBankDetailsSchemasCurrencyCode4$inboundSchema: z.ZodType<
  HRISBankDetailsSchemasCurrencyCode4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HRISBankDetailsSchemasCurrencyCode4$Outbound = {};

/** @internal */
export const HRISBankDetailsSchemasCurrencyCode4$outboundSchema: z.ZodType<
  HRISBankDetailsSchemasCurrencyCode4$Outbound,
  z.ZodTypeDef,
  HRISBankDetailsSchemasCurrencyCode4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HRISBankDetailsSchemasCurrencyCode4$ {
  /** @deprecated use `HRISBankDetailsSchemasCurrencyCode4$inboundSchema` instead. */
  export const inboundSchema =
    HRISBankDetailsSchemasCurrencyCode4$inboundSchema;
  /** @deprecated use `HRISBankDetailsSchemasCurrencyCode4$outboundSchema` instead. */
  export const outboundSchema =
    HRISBankDetailsSchemasCurrencyCode4$outboundSchema;
  /** @deprecated use `HRISBankDetailsSchemasCurrencyCode4$Outbound` instead. */
  export type Outbound = HRISBankDetailsSchemasCurrencyCode4$Outbound;
}

export function hrisBankDetailsSchemasCurrencyCode4ToJSON(
  hrisBankDetailsSchemasCurrencyCode4: HRISBankDetailsSchemasCurrencyCode4,
): string {
  return JSON.stringify(
    HRISBankDetailsSchemasCurrencyCode4$outboundSchema.parse(
      hrisBankDetailsSchemasCurrencyCode4,
    ),
  );
}

export function hrisBankDetailsSchemasCurrencyCode4FromJSON(
  jsonString: string,
): SafeParseResult<HRISBankDetailsSchemasCurrencyCode4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HRISBankDetailsSchemasCurrencyCode4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HRISBankDetailsSchemasCurrencyCode4' from JSON`,
  );
}

/** @internal */
export const HRISBankDetailsSchemasCurrencyCodeSourceValue$inboundSchema:
  z.ZodType<
    HRISBankDetailsSchemasCurrencyCodeSourceValue,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.lazy(() => HRISBankDetailsSchemasCurrencyCode4$inboundSchema),
    z.array(z.any()),
  ]);

/** @internal */
export type HRISBankDetailsSchemasCurrencyCodeSourceValue$Outbound =
  | string
  | number
  | boolean
  | HRISBankDetailsSchemasCurrencyCode4$Outbound
  | Array<any>;

/** @internal */
export const HRISBankDetailsSchemasCurrencyCodeSourceValue$outboundSchema:
  z.ZodType<
    HRISBankDetailsSchemasCurrencyCodeSourceValue$Outbound,
    z.ZodTypeDef,
    HRISBankDetailsSchemasCurrencyCodeSourceValue
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.lazy(() => HRISBankDetailsSchemasCurrencyCode4$outboundSchema),
    z.array(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HRISBankDetailsSchemasCurrencyCodeSourceValue$ {
  /** @deprecated use `HRISBankDetailsSchemasCurrencyCodeSourceValue$inboundSchema` instead. */
  export const inboundSchema =
    HRISBankDetailsSchemasCurrencyCodeSourceValue$inboundSchema;
  /** @deprecated use `HRISBankDetailsSchemasCurrencyCodeSourceValue$outboundSchema` instead. */
  export const outboundSchema =
    HRISBankDetailsSchemasCurrencyCodeSourceValue$outboundSchema;
  /** @deprecated use `HRISBankDetailsSchemasCurrencyCodeSourceValue$Outbound` instead. */
  export type Outbound = HRISBankDetailsSchemasCurrencyCodeSourceValue$Outbound;
}

export function hrisBankDetailsSchemasCurrencyCodeSourceValueToJSON(
  hrisBankDetailsSchemasCurrencyCodeSourceValue:
    HRISBankDetailsSchemasCurrencyCodeSourceValue,
): string {
  return JSON.stringify(
    HRISBankDetailsSchemasCurrencyCodeSourceValue$outboundSchema.parse(
      hrisBankDetailsSchemasCurrencyCodeSourceValue,
    ),
  );
}

export function hrisBankDetailsSchemasCurrencyCodeSourceValueFromJSON(
  jsonString: string,
): SafeParseResult<
  HRISBankDetailsSchemasCurrencyCodeSourceValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HRISBankDetailsSchemasCurrencyCodeSourceValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HRISBankDetailsSchemasCurrencyCodeSourceValue' from JSON`,
  );
}

/** @internal */
export const HRISBankDetailsSchemasCurrencyCodeValue$inboundSchema: z.ZodType<
  HRISBankDetailsSchemasCurrencyCodeValueOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(HRISBankDetailsSchemasCurrencyCodeValue),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const HRISBankDetailsSchemasCurrencyCodeValue$outboundSchema: z.ZodType<
  HRISBankDetailsSchemasCurrencyCodeValueOpen,
  z.ZodTypeDef,
  HRISBankDetailsSchemasCurrencyCodeValueOpen
> = z.union([
  z.nativeEnum(HRISBankDetailsSchemasCurrencyCodeValue),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HRISBankDetailsSchemasCurrencyCodeValue$ {
  /** @deprecated use `HRISBankDetailsSchemasCurrencyCodeValue$inboundSchema` instead. */
  export const inboundSchema =
    HRISBankDetailsSchemasCurrencyCodeValue$inboundSchema;
  /** @deprecated use `HRISBankDetailsSchemasCurrencyCodeValue$outboundSchema` instead. */
  export const outboundSchema =
    HRISBankDetailsSchemasCurrencyCodeValue$outboundSchema;
}

/** @internal */
export const HRISBankDetailsCurrencyCode$inboundSchema: z.ZodType<
  HRISBankDetailsCurrencyCode,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_value: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => HRISBankDetailsSchemasCurrencyCode4$inboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(HRISBankDetailsSchemasCurrencyCodeValue$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "source_value": "sourceValue",
  });
});

/** @internal */
export type HRISBankDetailsCurrencyCode$Outbound = {
  source_value?:
    | string
    | number
    | boolean
    | HRISBankDetailsSchemasCurrencyCode4$Outbound
    | Array<any>
    | null
    | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const HRISBankDetailsCurrencyCode$outboundSchema: z.ZodType<
  HRISBankDetailsCurrencyCode$Outbound,
  z.ZodTypeDef,
  HRISBankDetailsCurrencyCode
> = z.object({
  sourceValue: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.lazy(() => HRISBankDetailsSchemasCurrencyCode4$outboundSchema),
      z.array(z.any()),
    ]),
  ).optional(),
  value: z.nullable(HRISBankDetailsSchemasCurrencyCodeValue$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    sourceValue: "source_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HRISBankDetailsCurrencyCode$ {
  /** @deprecated use `HRISBankDetailsCurrencyCode$inboundSchema` instead. */
  export const inboundSchema = HRISBankDetailsCurrencyCode$inboundSchema;
  /** @deprecated use `HRISBankDetailsCurrencyCode$outboundSchema` instead. */
  export const outboundSchema = HRISBankDetailsCurrencyCode$outboundSchema;
  /** @deprecated use `HRISBankDetailsCurrencyCode$Outbound` instead. */
  export type Outbound = HRISBankDetailsCurrencyCode$Outbound;
}

export function hrisBankDetailsCurrencyCodeToJSON(
  hrisBankDetailsCurrencyCode: HRISBankDetailsCurrencyCode,
): string {
  return JSON.stringify(
    HRISBankDetailsCurrencyCode$outboundSchema.parse(
      hrisBankDetailsCurrencyCode,
    ),
  );
}

export function hrisBankDetailsCurrencyCodeFromJSON(
  jsonString: string,
): SafeParseResult<HRISBankDetailsCurrencyCode, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HRISBankDetailsCurrencyCode$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HRISBankDetailsCurrencyCode' from JSON`,
  );
}

/** @internal */
export const HRISBankDetails$inboundSchema: z.ZodType<
  HRISBankDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_name: z.nullable(z.string()).optional(),
  account_type: z.nullable(z.lazy(() => AccountType$inboundSchema)).optional(),
  bank_name: z.nullable(z.string()).optional(),
  clearing_codes: z.nullable(z.array(ClearingCode$inboundSchema)).optional(),
  country_code: z.nullable(z.lazy(() => CountryCode$inboundSchema)).optional(),
  currency_code: z.nullable(
    z.lazy(() => HRISBankDetailsCurrencyCode$inboundSchema),
  ).optional(),
  iban: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  is_primary: z.nullable(z.boolean()).optional(),
  local_account_number: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  swift_bic: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "account_name": "accountName",
    "account_type": "accountType",
    "bank_name": "bankName",
    "clearing_codes": "clearingCodes",
    "country_code": "countryCode",
    "currency_code": "currencyCode",
    "is_primary": "isPrimary",
    "local_account_number": "localAccountNumber",
    "remote_id": "remoteId",
    "swift_bic": "swiftBic",
  });
});

/** @internal */
export type HRISBankDetails$Outbound = {
  account_name?: string | null | undefined;
  account_type?: AccountType$Outbound | null | undefined;
  bank_name?: string | null | undefined;
  clearing_codes?: Array<ClearingCode$Outbound> | null | undefined;
  country_code?: CountryCode$Outbound | null | undefined;
  currency_code?: HRISBankDetailsCurrencyCode$Outbound | null | undefined;
  iban?: string | null | undefined;
  id?: string | null | undefined;
  is_primary?: boolean | null | undefined;
  local_account_number?: string | null | undefined;
  remote_id?: string | null | undefined;
  swift_bic?: string | null | undefined;
};

/** @internal */
export const HRISBankDetails$outboundSchema: z.ZodType<
  HRISBankDetails$Outbound,
  z.ZodTypeDef,
  HRISBankDetails
> = z.object({
  accountName: z.nullable(z.string()).optional(),
  accountType: z.nullable(z.lazy(() => AccountType$outboundSchema)).optional(),
  bankName: z.nullable(z.string()).optional(),
  clearingCodes: z.nullable(z.array(ClearingCode$outboundSchema)).optional(),
  countryCode: z.nullable(z.lazy(() => CountryCode$outboundSchema)).optional(),
  currencyCode: z.nullable(
    z.lazy(() => HRISBankDetailsCurrencyCode$outboundSchema),
  ).optional(),
  iban: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  isPrimary: z.nullable(z.boolean()).optional(),
  localAccountNumber: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  swiftBic: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    accountName: "account_name",
    accountType: "account_type",
    bankName: "bank_name",
    clearingCodes: "clearing_codes",
    countryCode: "country_code",
    currencyCode: "currency_code",
    isPrimary: "is_primary",
    localAccountNumber: "local_account_number",
    remoteId: "remote_id",
    swiftBic: "swift_bic",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HRISBankDetails$ {
  /** @deprecated use `HRISBankDetails$inboundSchema` instead. */
  export const inboundSchema = HRISBankDetails$inboundSchema;
  /** @deprecated use `HRISBankDetails$outboundSchema` instead. */
  export const outboundSchema = HRISBankDetails$outboundSchema;
  /** @deprecated use `HRISBankDetails$Outbound` instead. */
  export type Outbound = HRISBankDetails$Outbound;
}

export function hrisBankDetailsToJSON(
  hrisBankDetails: HRISBankDetails,
): string {
  return JSON.stringify(HRISBankDetails$outboundSchema.parse(hrisBankDetails));
}

export function hrisBankDetailsFromJSON(
  jsonString: string,
): SafeParseResult<HRISBankDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HRISBankDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HRISBankDetails' from JSON`,
  );
}
