/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HRISDepartment,
  HRISDepartment$inboundSchema,
  HRISDepartment$Outbound,
  HRISDepartment$outboundSchema,
} from "./hrisdepartment.js";
import {
  RawResponse,
  RawResponse$inboundSchema,
  RawResponse$Outbound,
  RawResponse$outboundSchema,
} from "./rawresponse.js";

export type HRISDepartmentsResult = {
  data: HRISDepartment;
  raw?: Array<RawResponse> | null | undefined;
};

/** @internal */
export const HRISDepartmentsResult$inboundSchema: z.ZodType<
  HRISDepartmentsResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: HRISDepartment$inboundSchema,
  raw: z.nullable(z.array(RawResponse$inboundSchema)).optional(),
});

/** @internal */
export type HRISDepartmentsResult$Outbound = {
  data: HRISDepartment$Outbound;
  raw?: Array<RawResponse$Outbound> | null | undefined;
};

/** @internal */
export const HRISDepartmentsResult$outboundSchema: z.ZodType<
  HRISDepartmentsResult$Outbound,
  z.ZodTypeDef,
  HRISDepartmentsResult
> = z.object({
  data: HRISDepartment$outboundSchema,
  raw: z.nullable(z.array(RawResponse$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HRISDepartmentsResult$ {
  /** @deprecated use `HRISDepartmentsResult$inboundSchema` instead. */
  export const inboundSchema = HRISDepartmentsResult$inboundSchema;
  /** @deprecated use `HRISDepartmentsResult$outboundSchema` instead. */
  export const outboundSchema = HRISDepartmentsResult$outboundSchema;
  /** @deprecated use `HRISDepartmentsResult$Outbound` instead. */
  export type Outbound = HRISDepartmentsResult$Outbound;
}

export function hrisDepartmentsResultToJSON(
  hrisDepartmentsResult: HRISDepartmentsResult,
): string {
  return JSON.stringify(
    HRISDepartmentsResult$outboundSchema.parse(hrisDepartmentsResult),
  );
}

export function hrisDepartmentsResultFromJSON(
  jsonString: string,
): SafeParseResult<HRISDepartmentsResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HRISDepartmentsResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HRISDepartmentsResult' from JSON`,
  );
}
