/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RawResponse,
  RawResponse$inboundSchema,
  RawResponse$Outbound,
  RawResponse$outboundSchema,
} from "./rawresponse.js";

export type TicketingComponentResultData = {
  /**
   * The timestamp when the record was created
   */
  createdAt?: Date | null | undefined;
  /**
   * The description of the component
   */
  description?: string | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The name of the component
   */
  name?: string | null | undefined;
  /**
   * The organization id related to the component
   */
  organizationId?: string | null | undefined;
  /**
   * The project id related to the component
   */
  projectId?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * The timestamp when the record was last updated
   */
  updatedAt?: Date | null | undefined;
};

export type TicketingComponentResult = {
  data?: TicketingComponentResultData | null | undefined;
  raw?: Array<RawResponse> | null | undefined;
};

/** @internal */
export const TicketingComponentResultData$inboundSchema: z.ZodType<
  TicketingComponentResultData,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  description: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  organization_id: z.nullable(z.string()).optional(),
  project_id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "organization_id": "organizationId",
    "project_id": "projectId",
    "remote_id": "remoteId",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type TicketingComponentResultData$Outbound = {
  created_at?: string | null | undefined;
  description?: string | null | undefined;
  id?: string | null | undefined;
  name?: string | null | undefined;
  organization_id?: string | null | undefined;
  project_id?: string | null | undefined;
  remote_id?: string | null | undefined;
  updated_at?: string | null | undefined;
};

/** @internal */
export const TicketingComponentResultData$outboundSchema: z.ZodType<
  TicketingComponentResultData$Outbound,
  z.ZodTypeDef,
  TicketingComponentResultData
> = z.object({
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  description: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  organizationId: z.nullable(z.string()).optional(),
  projectId: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    organizationId: "organization_id",
    projectId: "project_id",
    remoteId: "remote_id",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingComponentResultData$ {
  /** @deprecated use `TicketingComponentResultData$inboundSchema` instead. */
  export const inboundSchema = TicketingComponentResultData$inboundSchema;
  /** @deprecated use `TicketingComponentResultData$outboundSchema` instead. */
  export const outboundSchema = TicketingComponentResultData$outboundSchema;
  /** @deprecated use `TicketingComponentResultData$Outbound` instead. */
  export type Outbound = TicketingComponentResultData$Outbound;
}

export function ticketingComponentResultDataToJSON(
  ticketingComponentResultData: TicketingComponentResultData,
): string {
  return JSON.stringify(
    TicketingComponentResultData$outboundSchema.parse(
      ticketingComponentResultData,
    ),
  );
}

export function ticketingComponentResultDataFromJSON(
  jsonString: string,
): SafeParseResult<TicketingComponentResultData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingComponentResultData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingComponentResultData' from JSON`,
  );
}

/** @internal */
export const TicketingComponentResult$inboundSchema: z.ZodType<
  TicketingComponentResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(z.lazy(() => TicketingComponentResultData$inboundSchema))
    .optional(),
  raw: z.nullable(z.array(RawResponse$inboundSchema)).optional(),
});

/** @internal */
export type TicketingComponentResult$Outbound = {
  data?: TicketingComponentResultData$Outbound | null | undefined;
  raw?: Array<RawResponse$Outbound> | null | undefined;
};

/** @internal */
export const TicketingComponentResult$outboundSchema: z.ZodType<
  TicketingComponentResult$Outbound,
  z.ZodTypeDef,
  TicketingComponentResult
> = z.object({
  data: z.nullable(z.lazy(() => TicketingComponentResultData$outboundSchema))
    .optional(),
  raw: z.nullable(z.array(RawResponse$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingComponentResult$ {
  /** @deprecated use `TicketingComponentResult$inboundSchema` instead. */
  export const inboundSchema = TicketingComponentResult$inboundSchema;
  /** @deprecated use `TicketingComponentResult$outboundSchema` instead. */
  export const outboundSchema = TicketingComponentResult$outboundSchema;
  /** @deprecated use `TicketingComponentResult$Outbound` instead. */
  export type Outbound = TicketingComponentResult$Outbound;
}

export function ticketingComponentResultToJSON(
  ticketingComponentResult: TicketingComponentResult,
): string {
  return JSON.stringify(
    TicketingComponentResult$outboundSchema.parse(ticketingComponentResult),
  );
}

export function ticketingComponentResultFromJSON(
  jsonString: string,
): SafeParseResult<TicketingComponentResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingComponentResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingComponentResult' from JSON`,
  );
}
