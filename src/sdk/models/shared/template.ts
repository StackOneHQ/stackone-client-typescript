/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Template = {
    /**
     * Date of creation
     */
    createdAt?: Date | undefined;
    id?: string | undefined;
    name?: string | undefined;
    tags?: Array<string> | undefined;
    /**
     * Date of last update
     */
    updatedAt?: Date | undefined;
};

/** @internal */
export namespace Template$ {
    export type Inbound = {
        created_at?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
        tags?: Array<string> | undefined;
        updated_at?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Template, z.ZodTypeDef, Inbound> = z
        .object({
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            id: z.string().optional(),
            name: z.string().optional(),
            tags: z.array(z.string()).optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        created_at?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
        tags?: Array<string> | undefined;
        updated_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Template> = z
        .object({
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            id: z.string().optional(),
            name: z.string().optional(),
            tags: z.array(z.string()).optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}
