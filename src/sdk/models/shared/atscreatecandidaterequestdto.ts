/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CandidateEmail, CandidateEmail$ } from "./candidateemail";
import { z } from "zod";

export type AtsCreateCandidateRequestDto = {
    /**
     * List of candidate application IDs
     */
    applicationIds?: Array<string> | undefined;
    /**
     * Candidate company
     */
    company?: string | undefined;
    /**
     * List of candidate emails
     */
    emails: Array<CandidateEmail>;
    /**
     * Candidate first name
     */
    firstName: string;
    /**
     * Candidate last name
     */
    lastName: string;
    /**
     * Candidate name
     */
    name: string;
    /**
     * Candidate phone number
     */
    phone?: string | undefined;
    /**
     * Candidate title
     */
    title: string;
};

/** @internal */
export namespace AtsCreateCandidateRequestDto$ {
    export type Inbound = {
        application_ids?: Array<string> | undefined;
        company?: string | undefined;
        emails: Array<CandidateEmail$.Inbound>;
        first_name: string;
        last_name: string;
        name: string;
        phone?: string | undefined;
        title: string;
    };

    export const inboundSchema: z.ZodType<AtsCreateCandidateRequestDto, z.ZodTypeDef, Inbound> = z
        .object({
            application_ids: z.array(z.string()).optional(),
            company: z.string().optional(),
            emails: z.array(CandidateEmail$.inboundSchema),
            first_name: z.string(),
            last_name: z.string(),
            name: z.string(),
            phone: z.string().optional(),
            title: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.application_ids === undefined ? null : { applicationIds: v.application_ids }),
                ...(v.company === undefined ? null : { company: v.company }),
                emails: v.emails,
                firstName: v.first_name,
                lastName: v.last_name,
                name: v.name,
                ...(v.phone === undefined ? null : { phone: v.phone }),
                title: v.title,
            };
        });

    export type Outbound = {
        application_ids?: Array<string> | undefined;
        company?: string | undefined;
        emails: Array<CandidateEmail$.Outbound>;
        first_name: string;
        last_name: string;
        name: string;
        phone?: string | undefined;
        title: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AtsCreateCandidateRequestDto> = z
        .object({
            applicationIds: z.array(z.string()).optional(),
            company: z.string().optional(),
            emails: z.array(CandidateEmail$.outboundSchema),
            firstName: z.string(),
            lastName: z.string(),
            name: z.string(),
            phone: z.string().optional(),
            title: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.applicationIds === undefined ? null : { application_ids: v.applicationIds }),
                ...(v.company === undefined ? null : { company: v.company }),
                emails: v.emails,
                first_name: v.firstName,
                last_name: v.lastName,
                name: v.name,
                ...(v.phone === undefined ? null : { phone: v.phone }),
                title: v.title,
            };
        });
}
