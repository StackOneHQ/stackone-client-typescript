/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export enum MessagingConversation2 {
  True = "true",
  False = "false",
}

/**
 * Whether the conversation is private
 */
export type Private = boolean | MessagingConversation2;

export type MessagingConversation = {
  /**
   * Timestamp when the conversation was created
   */
  createdAt?: Date | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * Timestamp of the last message in the conversation
   */
  lastMessageAt?: Date | null | undefined;
  /**
   * Name or title of the conversation
   */
  name?: string | null | undefined;
  /**
   * List of participant user IDs in the conversation
   */
  participants?: Array<string> | null | undefined;
  /**
   * Whether the conversation is private
   */
  private?: boolean | MessagingConversation2 | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
};

/** @internal */
export const MessagingConversation2$inboundSchema: z.ZodNativeEnum<
  typeof MessagingConversation2
> = z.nativeEnum(MessagingConversation2);

/** @internal */
export const MessagingConversation2$outboundSchema: z.ZodNativeEnum<
  typeof MessagingConversation2
> = MessagingConversation2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingConversation2$ {
  /** @deprecated use `MessagingConversation2$inboundSchema` instead. */
  export const inboundSchema = MessagingConversation2$inboundSchema;
  /** @deprecated use `MessagingConversation2$outboundSchema` instead. */
  export const outboundSchema = MessagingConversation2$outboundSchema;
}

/** @internal */
export const Private$inboundSchema: z.ZodType<Private, z.ZodTypeDef, unknown> =
  z.union([z.boolean(), MessagingConversation2$inboundSchema]);

/** @internal */
export type Private$Outbound = boolean | string;

/** @internal */
export const Private$outboundSchema: z.ZodType<
  Private$Outbound,
  z.ZodTypeDef,
  Private
> = z.union([z.boolean(), MessagingConversation2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Private$ {
  /** @deprecated use `Private$inboundSchema` instead. */
  export const inboundSchema = Private$inboundSchema;
  /** @deprecated use `Private$outboundSchema` instead. */
  export const outboundSchema = Private$outboundSchema;
  /** @deprecated use `Private$Outbound` instead. */
  export type Outbound = Private$Outbound;
}

export function privateToJSON(value: Private): string {
  return JSON.stringify(Private$outboundSchema.parse(value));
}

export function privateFromJSON(
  jsonString: string,
): SafeParseResult<Private, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Private$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Private' from JSON`,
  );
}

/** @internal */
export const MessagingConversation$inboundSchema: z.ZodType<
  MessagingConversation,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  last_message_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  name: z.nullable(z.string()).optional(),
  participants: z.nullable(z.array(z.string())).optional(),
  private: z.nullable(
    z.union([z.boolean(), MessagingConversation2$inboundSchema]),
  ).optional(),
  remote_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "last_message_at": "lastMessageAt",
    "remote_id": "remoteId",
  });
});

/** @internal */
export type MessagingConversation$Outbound = {
  created_at?: string | null | undefined;
  id?: string | null | undefined;
  last_message_at?: string | null | undefined;
  name?: string | null | undefined;
  participants?: Array<string> | null | undefined;
  private?: boolean | string | null | undefined;
  remote_id?: string | null | undefined;
};

/** @internal */
export const MessagingConversation$outboundSchema: z.ZodType<
  MessagingConversation$Outbound,
  z.ZodTypeDef,
  MessagingConversation
> = z.object({
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  id: z.nullable(z.string()).optional(),
  lastMessageAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  name: z.nullable(z.string()).optional(),
  participants: z.nullable(z.array(z.string())).optional(),
  private: z.nullable(
    z.union([z.boolean(), MessagingConversation2$outboundSchema]),
  ).optional(),
  remoteId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    lastMessageAt: "last_message_at",
    remoteId: "remote_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingConversation$ {
  /** @deprecated use `MessagingConversation$inboundSchema` instead. */
  export const inboundSchema = MessagingConversation$inboundSchema;
  /** @deprecated use `MessagingConversation$outboundSchema` instead. */
  export const outboundSchema = MessagingConversation$outboundSchema;
  /** @deprecated use `MessagingConversation$Outbound` instead. */
  export type Outbound = MessagingConversation$Outbound;
}

export function messagingConversationToJSON(
  messagingConversation: MessagingConversation,
): string {
  return JSON.stringify(
    MessagingConversation$outboundSchema.parse(messagingConversation),
  );
}

export function messagingConversationFromJSON(
  jsonString: string,
): SafeParseResult<MessagingConversation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessagingConversation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessagingConversation' from JSON`,
  );
}
