/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ScreeningOrderCandidate = {
  /**
   * Candidate email
   */
  email?: string | null | undefined;
  /**
   * Candidate first name
   */
  firstName?: string | null | undefined;
  /**
   * Candidate last name
   */
  lastName?: string | null | undefined;
};

/** @internal */
export const ScreeningOrderCandidate$inboundSchema: z.ZodType<
  ScreeningOrderCandidate,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
  });
});

/** @internal */
export type ScreeningOrderCandidate$Outbound = {
  email?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
};

/** @internal */
export const ScreeningOrderCandidate$outboundSchema: z.ZodType<
  ScreeningOrderCandidate$Outbound,
  z.ZodTypeDef,
  ScreeningOrderCandidate
> = z.object({
  email: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScreeningOrderCandidate$ {
  /** @deprecated use `ScreeningOrderCandidate$inboundSchema` instead. */
  export const inboundSchema = ScreeningOrderCandidate$inboundSchema;
  /** @deprecated use `ScreeningOrderCandidate$outboundSchema` instead. */
  export const outboundSchema = ScreeningOrderCandidate$outboundSchema;
  /** @deprecated use `ScreeningOrderCandidate$Outbound` instead. */
  export type Outbound = ScreeningOrderCandidate$Outbound;
}

export function screeningOrderCandidateToJSON(
  screeningOrderCandidate: ScreeningOrderCandidate,
): string {
  return JSON.stringify(
    ScreeningOrderCandidate$outboundSchema.parse(screeningOrderCandidate),
  );
}

export function screeningOrderCandidateFromJSON(
  jsonString: string,
): SafeParseResult<ScreeningOrderCandidate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScreeningOrderCandidate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScreeningOrderCandidate' from JSON`,
  );
}
