/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Interviewer, Interviewer$ } from "./interviewer";
import { InterviewPart, InterviewPart$ } from "./interviewpart";
import { InterviewStage, InterviewStage$ } from "./interviewstage";
import { z } from "zod";

/**
 * The status of the interview.
 */
export enum InterviewValue {
    Unscheduled = "unscheduled",
    Scheduled = "scheduled",
    Completed = "completed",
    Cancelled = "cancelled",
    PendingFeedback = "pending_feedback",
    UnmappedValue = "unmapped_value",
}

export type InterviewStatus = {
    /**
     * The source value of the interview status.
     */
    sourceValue: string;
    /**
     * The status of the interview.
     */
    value: InterviewValue;
};

export type Interview = {
    applicationId: string;
    /**
     * Interview created date
     */
    createdAt?: Date | null | undefined;
    /**
     * Interview end date
     */
    endAt: Date;
    id: string;
    interviewParts?: Array<InterviewPart> | null | undefined;
    interviewStage?: Array<InterviewStage> | null | undefined;
    interviewStageId: string;
    interviewStatus?: InterviewStatus | null | undefined;
    interviewerIds: Array<string>;
    interviewers?: Array<Interviewer> | null | undefined;
    meetingUrl?: string | null | undefined;
    /**
     * Interview start date
     */
    startAt: Date;
    /**
     * Interview updated date
     */
    updatedAt?: Date | null | undefined;
};

/** @internal */
export const InterviewValue$ = z.nativeEnum(InterviewValue);

/** @internal */
export namespace InterviewStatus$ {
    export type Inbound = {
        source_value: string;
        value: InterviewValue;
    };

    export const inboundSchema: z.ZodType<InterviewStatus, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z.string(),
            value: InterviewValue$,
        })
        .transform((v) => {
            return {
                sourceValue: v.source_value,
                value: v.value,
            };
        });

    export type Outbound = {
        source_value: string;
        value: InterviewValue;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InterviewStatus> = z
        .object({
            sourceValue: z.string(),
            value: InterviewValue$,
        })
        .transform((v) => {
            return {
                source_value: v.sourceValue,
                value: v.value,
            };
        });
}

/** @internal */
export namespace Interview$ {
    export type Inbound = {
        application_id: string;
        created_at?: string | null | undefined;
        end_at: string;
        id: string;
        interview_parts?: Array<InterviewPart$.Inbound> | null | undefined;
        interview_stage?: Array<InterviewStage$.Inbound> | null | undefined;
        interview_stage_id: string;
        interview_status?: InterviewStatus$.Inbound | null | undefined;
        interviewer_ids: Array<string>;
        interviewers?: Array<Interviewer$.Inbound> | null | undefined;
        meeting_url?: string | null | undefined;
        start_at: string;
        updated_at?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<Interview, z.ZodTypeDef, Inbound> = z
        .object({
            application_id: z.string(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .nullable()
                .optional(),
            end_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            id: z.string(),
            interview_parts: z.array(InterviewPart$.inboundSchema).nullable().optional(),
            interview_stage: z.array(InterviewStage$.inboundSchema).nullable().optional(),
            interview_stage_id: z.string(),
            interview_status: z
                .lazy(() => InterviewStatus$.inboundSchema)
                .nullable()
                .optional(),
            interviewer_ids: z.array(z.string()),
            interviewers: z.array(Interviewer$.inboundSchema).nullable().optional(),
            meeting_url: z.string().nullable().optional(),
            start_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .nullable()
                .optional(),
        })
        .transform((v) => {
            return {
                applicationId: v.application_id,
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                endAt: v.end_at,
                id: v.id,
                ...(v.interview_parts === undefined ? null : { interviewParts: v.interview_parts }),
                ...(v.interview_stage === undefined ? null : { interviewStage: v.interview_stage }),
                interviewStageId: v.interview_stage_id,
                ...(v.interview_status === undefined
                    ? null
                    : { interviewStatus: v.interview_status }),
                interviewerIds: v.interviewer_ids,
                ...(v.interviewers === undefined ? null : { interviewers: v.interviewers }),
                ...(v.meeting_url === undefined ? null : { meetingUrl: v.meeting_url }),
                startAt: v.start_at,
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        application_id: string;
        created_at?: string | null | undefined;
        end_at: string;
        id: string;
        interview_parts?: Array<InterviewPart$.Outbound> | null | undefined;
        interview_stage?: Array<InterviewStage$.Outbound> | null | undefined;
        interview_stage_id: string;
        interview_status?: InterviewStatus$.Outbound | null | undefined;
        interviewer_ids: Array<string>;
        interviewers?: Array<Interviewer$.Outbound> | null | undefined;
        meeting_url?: string | null | undefined;
        start_at: string;
        updated_at?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Interview> = z
        .object({
            applicationId: z.string(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .nullable()
                .optional(),
            endAt: z.date().transform((v) => v.toISOString()),
            id: z.string(),
            interviewParts: z.array(InterviewPart$.outboundSchema).nullable().optional(),
            interviewStage: z.array(InterviewStage$.outboundSchema).nullable().optional(),
            interviewStageId: z.string(),
            interviewStatus: z
                .lazy(() => InterviewStatus$.outboundSchema)
                .nullable()
                .optional(),
            interviewerIds: z.array(z.string()),
            interviewers: z.array(Interviewer$.outboundSchema).nullable().optional(),
            meetingUrl: z.string().nullable().optional(),
            startAt: z.date().transform((v) => v.toISOString()),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .nullable()
                .optional(),
        })
        .transform((v) => {
            return {
                application_id: v.applicationId,
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                end_at: v.endAt,
                id: v.id,
                ...(v.interviewParts === undefined ? null : { interview_parts: v.interviewParts }),
                ...(v.interviewStage === undefined ? null : { interview_stage: v.interviewStage }),
                interview_stage_id: v.interviewStageId,
                ...(v.interviewStatus === undefined
                    ? null
                    : { interview_status: v.interviewStatus }),
                interviewer_ids: v.interviewerIds,
                ...(v.interviewers === undefined ? null : { interviewers: v.interviewers }),
                ...(v.meetingUrl === undefined ? null : { meeting_url: v.meetingUrl }),
                start_at: v.startAt,
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}
