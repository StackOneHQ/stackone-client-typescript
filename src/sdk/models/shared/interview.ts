/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Interviewer, Interviewer$ } from "./interviewer";
import { InterviewPart, InterviewPart$ } from "./interviewpart";
import * as z from "zod";

export type InterviewInterviewStage = {
    /**
     * Interview Stage created date
     */
    createdAt?: Date | null | undefined;
    id?: string | null | undefined;
    name?: string | null | undefined;
    order?: number | null | undefined;
    /**
     * Interview Stage updated date
     */
    updatedAt?: Date | null | undefined;
};

export type Interview4 = {};

/**
 * The source value of the interview status.
 */
export type InterviewSourceValue = Interview4 | string | number | boolean;

/**
 * The status of the interview.
 */
export enum InterviewValue {
    Unscheduled = "unscheduled",
    Scheduled = "scheduled",
    Completed = "completed",
    Cancelled = "cancelled",
    PendingFeedback = "pending_feedback",
    UnmappedValue = "unmapped_value",
}

export type InterviewStatus = {
    /**
     * The source value of the interview status.
     */
    sourceValue?: Interview4 | string | number | boolean | null | undefined;
    /**
     * The status of the interview.
     */
    value?: InterviewValue | null | undefined;
};

export type Interview = {
    applicationId?: string | null | undefined;
    /**
     * Interview created date
     */
    createdAt?: Date | null | undefined;
    /**
     * Interview end date
     */
    endAt?: Date | null | undefined;
    id: string;
    interviewParts?: Array<InterviewPart> | null | undefined;
    interviewStage?: InterviewInterviewStage | null | undefined;
    interviewStageId?: string | null | undefined;
    interviewStatus?: InterviewStatus | null | undefined;
    interviewerIds?: Array<string> | null | undefined;
    interviewers?: Array<Interviewer> | null | undefined;
    meetingUrl?: string | null | undefined;
    /**
     * Interview start date
     */
    startAt?: Date | null | undefined;
    /**
     * Interview updated date
     */
    updatedAt?: Date | null | undefined;
};

/** @internal */
export namespace InterviewInterviewStage$ {
    export type Inbound = {
        created_at?: string | null | undefined;
        id?: string | null | undefined;
        name?: string | null | undefined;
        order?: number | null | undefined;
        updated_at?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<InterviewInterviewStage, z.ZodTypeDef, Inbound> = z
        .object({
            created_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            id: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            order: z.nullable(z.number()).optional(),
            updated_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.order === undefined ? null : { order: v.order }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        created_at?: string | null | undefined;
        id?: string | null | undefined;
        name?: string | null | undefined;
        order?: number | null | undefined;
        updated_at?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InterviewInterviewStage> = z
        .object({
            createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            id: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            order: z.nullable(z.number()).optional(),
            updatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.order === undefined ? null : { order: v.order }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}

/** @internal */
export namespace Interview4$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Interview4, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Interview4> = z.object({});
}

/** @internal */
export namespace InterviewSourceValue$ {
    export type Inbound = Interview4$.Inbound | string | number | boolean;

    export type Outbound = Interview4$.Outbound | string | number | boolean;
    export const inboundSchema: z.ZodType<InterviewSourceValue, z.ZodTypeDef, Inbound> = z.union([
        z.lazy(() => Interview4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InterviewSourceValue> = z.union([
        z.lazy(() => Interview4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export const InterviewValue$ = z.nativeEnum(InterviewValue);

/** @internal */
export namespace InterviewStatus$ {
    export type Inbound = {
        source_value?: Interview4$.Inbound | string | number | boolean | null | undefined;
        value?: InterviewValue | null | undefined;
    };

    export const inboundSchema: z.ZodType<InterviewStatus, z.ZodTypeDef, Inbound> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => Interview4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(InterviewValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source_value === undefined ? null : { sourceValue: v.source_value }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        source_value?: Interview4$.Outbound | string | number | boolean | null | undefined;
        value?: InterviewValue | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InterviewStatus> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => Interview4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(InterviewValue$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceValue === undefined ? null : { source_value: v.sourceValue }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace Interview$ {
    export type Inbound = {
        application_id?: string | null | undefined;
        created_at?: string | null | undefined;
        end_at?: string | null | undefined;
        id: string;
        interview_parts?: Array<InterviewPart$.Inbound> | null | undefined;
        interview_stage?: InterviewInterviewStage$.Inbound | null | undefined;
        interview_stage_id?: string | null | undefined;
        interview_status?: InterviewStatus$.Inbound | null | undefined;
        interviewer_ids?: Array<string> | null | undefined;
        interviewers?: Array<Interviewer$.Inbound> | null | undefined;
        meeting_url?: string | null | undefined;
        start_at?: string | null | undefined;
        updated_at?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<Interview, z.ZodTypeDef, Inbound> = z
        .object({
            application_id: z.nullable(z.string()).optional(),
            created_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            end_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            id: z.string(),
            interview_parts: z.nullable(z.array(InterviewPart$.inboundSchema)).optional(),
            interview_stage: z
                .nullable(z.lazy(() => InterviewInterviewStage$.inboundSchema))
                .optional(),
            interview_stage_id: z.nullable(z.string()).optional(),
            interview_status: z.nullable(z.lazy(() => InterviewStatus$.inboundSchema)).optional(),
            interviewer_ids: z.nullable(z.array(z.string())).optional(),
            interviewers: z.nullable(z.array(Interviewer$.inboundSchema)).optional(),
            meeting_url: z.nullable(z.string()).optional(),
            start_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            updated_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.application_id === undefined ? null : { applicationId: v.application_id }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.end_at === undefined ? null : { endAt: v.end_at }),
                id: v.id,
                ...(v.interview_parts === undefined ? null : { interviewParts: v.interview_parts }),
                ...(v.interview_stage === undefined ? null : { interviewStage: v.interview_stage }),
                ...(v.interview_stage_id === undefined
                    ? null
                    : { interviewStageId: v.interview_stage_id }),
                ...(v.interview_status === undefined
                    ? null
                    : { interviewStatus: v.interview_status }),
                ...(v.interviewer_ids === undefined ? null : { interviewerIds: v.interviewer_ids }),
                ...(v.interviewers === undefined ? null : { interviewers: v.interviewers }),
                ...(v.meeting_url === undefined ? null : { meetingUrl: v.meeting_url }),
                ...(v.start_at === undefined ? null : { startAt: v.start_at }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        application_id?: string | null | undefined;
        created_at?: string | null | undefined;
        end_at?: string | null | undefined;
        id: string;
        interview_parts?: Array<InterviewPart$.Outbound> | null | undefined;
        interview_stage?: InterviewInterviewStage$.Outbound | null | undefined;
        interview_stage_id?: string | null | undefined;
        interview_status?: InterviewStatus$.Outbound | null | undefined;
        interviewer_ids?: Array<string> | null | undefined;
        interviewers?: Array<Interviewer$.Outbound> | null | undefined;
        meeting_url?: string | null | undefined;
        start_at?: string | null | undefined;
        updated_at?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Interview> = z
        .object({
            applicationId: z.nullable(z.string()).optional(),
            createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            endAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            id: z.string(),
            interviewParts: z.nullable(z.array(InterviewPart$.outboundSchema)).optional(),
            interviewStage: z
                .nullable(z.lazy(() => InterviewInterviewStage$.outboundSchema))
                .optional(),
            interviewStageId: z.nullable(z.string()).optional(),
            interviewStatus: z.nullable(z.lazy(() => InterviewStatus$.outboundSchema)).optional(),
            interviewerIds: z.nullable(z.array(z.string())).optional(),
            interviewers: z.nullable(z.array(Interviewer$.outboundSchema)).optional(),
            meetingUrl: z.nullable(z.string()).optional(),
            startAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            updatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.applicationId === undefined ? null : { application_id: v.applicationId }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.endAt === undefined ? null : { end_at: v.endAt }),
                id: v.id,
                ...(v.interviewParts === undefined ? null : { interview_parts: v.interviewParts }),
                ...(v.interviewStage === undefined ? null : { interview_stage: v.interviewStage }),
                ...(v.interviewStageId === undefined
                    ? null
                    : { interview_stage_id: v.interviewStageId }),
                ...(v.interviewStatus === undefined
                    ? null
                    : { interview_status: v.interviewStatus }),
                ...(v.interviewerIds === undefined ? null : { interviewer_ids: v.interviewerIds }),
                ...(v.interviewers === undefined ? null : { interviewers: v.interviewers }),
                ...(v.meetingUrl === undefined ? null : { meeting_url: v.meetingUrl }),
                ...(v.startAt === undefined ? null : { start_at: v.startAt }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}
