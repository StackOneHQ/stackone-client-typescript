/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomFieldOption = {
  /**
   * The unique identifier for the option to be used when updating the custom field
   */
  id: string;
  /**
   * The human readable value of the option
   */
  value: string;
};

/** @internal */
export const CustomFieldOption$inboundSchema: z.ZodType<
  CustomFieldOption,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  value: z.string(),
});

/** @internal */
export type CustomFieldOption$Outbound = {
  id: string;
  value: string;
};

/** @internal */
export const CustomFieldOption$outboundSchema: z.ZodType<
  CustomFieldOption$Outbound,
  z.ZodTypeDef,
  CustomFieldOption
> = z.object({
  id: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFieldOption$ {
  /** @deprecated use `CustomFieldOption$inboundSchema` instead. */
  export const inboundSchema = CustomFieldOption$inboundSchema;
  /** @deprecated use `CustomFieldOption$outboundSchema` instead. */
  export const outboundSchema = CustomFieldOption$outboundSchema;
  /** @deprecated use `CustomFieldOption$Outbound` instead. */
  export type Outbound = CustomFieldOption$Outbound;
}

export function customFieldOptionToJSON(
  customFieldOption: CustomFieldOption,
): string {
  return JSON.stringify(
    CustomFieldOption$outboundSchema.parse(customFieldOption),
  );
}

export function customFieldOptionFromJSON(
  jsonString: string,
): SafeParseResult<CustomFieldOption, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomFieldOption$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomFieldOption' from JSON`,
  );
}
