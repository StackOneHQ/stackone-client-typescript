/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types";
import * as z from "zod";

export type TimeOff4 = {};

export type TimeOffSourceValue = TimeOff4 | string | number | boolean;

export enum TimeOffValue {
    Approved = "approved",
    Cancelled = "cancelled",
    Rejected = "rejected",
    Pending = "pending",
    UnmappedValue = "unmapped_value",
}
export type TimeOffValueOpen = OpenEnum<typeof TimeOffValue>;

/**
 * The status of the time off request
 */
export type TimeOffStatus = {
    sourceValue?: TimeOff4 | string | number | boolean | null | undefined;
    value?: TimeOffValueOpen | null | undefined;
};

export type TimeOffSchemas4 = {};

export type TimeOffSchemasSourceValue = TimeOffSchemas4 | string | number | boolean;

export enum TimeOffSchemasValue {
    Sick = "sick",
    UnmappedValue = "unmapped_value",
    Vacation = "vacation",
    LongTermDisability = "long_term_disability",
    ShortTermDisability = "short_term_disability",
    Absent = "absent",
    CompTime = "comp_time",
    Training = "training",
    AnnualLeave = "annual_leave",
    LeaveOfAbsence = "leave_of_absence",
    Break = "break",
    ChildCareLeave = "child_care_leave",
}
export type TimeOffSchemasValueOpen = OpenEnum<typeof TimeOffSchemasValue>;

/**
 * The type of the time off request
 */
export type TimeOffType = {
    sourceValue?: TimeOffSchemas4 | string | number | boolean | null | undefined;
    value?: TimeOffSchemasValueOpen | null | undefined;
};

export type TimeOff = {
    /**
     * The approver ID
     */
    approverId?: string | null | undefined;
    /**
     * The created date of the time off request
     */
    createdDate?: Date | null | undefined;
    /**
     * The duration of the time off request
     */
    duration?: string | null | undefined;
    /**
     * The employee ID
     */
    employeeId?: string | null | undefined;
    /**
     * The end date of the time off request
     */
    endDate?: Date | null | undefined;
    /**
     * True if the end of the time off request ends half way through the day
     */
    endHalfDay?: boolean | null | undefined;
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    /**
     * Provider's unique identifier of the approver
     */
    remoteApproverId?: string | null | undefined;
    /**
     * Provider's unique identifier of the employee
     */
    remoteEmployeeId?: string | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    /**
     * The start date of the time off request
     */
    startDate?: Date | null | undefined;
    /**
     * True if the start of the time off request begins half way through the day
     */
    startHalfDay?: boolean | null | undefined;
    /**
     * The status of the time off request
     */
    status?: TimeOffStatus | null | undefined;
    /**
     * The type of the time off request
     */
    type?: TimeOffType | null | undefined;
    /**
     * The updated date of the time off request
     */
    updatedDate?: Date | null | undefined;
};

/** @internal */
export namespace TimeOff4$ {
    export const inboundSchema: z.ZodType<TimeOff4, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TimeOff4> = z.object({});
}

/** @internal */
export namespace TimeOffSourceValue$ {
    export const inboundSchema: z.ZodType<TimeOffSourceValue, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => TimeOff4$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export type Outbound = TimeOff4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TimeOffSourceValue> = z.union([
        z.lazy(() => TimeOff4$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace TimeOffValue$ {
    export const inboundSchema: z.ZodType<TimeOffValueOpen, z.ZodTypeDef, unknown> = z.union([
        z.nativeEnum(TimeOffValue),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema = z.union([
        z.nativeEnum(TimeOffValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace TimeOffStatus$ {
    export const inboundSchema: z.ZodType<TimeOffStatus, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => TimeOff4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(TimeOffValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?: TimeOff4$.Outbound | string | number | boolean | null | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TimeOffStatus> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => TimeOff4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(TimeOffValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}

/** @internal */
export namespace TimeOffSchemas4$ {
    export const inboundSchema: z.ZodType<TimeOffSchemas4, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TimeOffSchemas4> = z.object({});
}

/** @internal */
export namespace TimeOffSchemasSourceValue$ {
    export const inboundSchema: z.ZodType<TimeOffSchemasSourceValue, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => TimeOffSchemas4$.inboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);

    export type Outbound = TimeOffSchemas4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TimeOffSchemasSourceValue> =
        z.union([
            z.lazy(() => TimeOffSchemas4$.outboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);
}

/** @internal */
export namespace TimeOffSchemasValue$ {
    export const inboundSchema: z.ZodType<TimeOffSchemasValueOpen, z.ZodTypeDef, unknown> = z.union(
        [z.nativeEnum(TimeOffSchemasValue), z.string().transform(catchUnrecognizedEnum)]
    );

    export const outboundSchema = z.union([
        z.nativeEnum(TimeOffSchemasValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace TimeOffType$ {
    export const inboundSchema: z.ZodType<TimeOffType, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => TimeOffSchemas4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(TimeOffSchemasValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?: TimeOffSchemas4$.Outbound | string | number | boolean | null | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TimeOffType> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => TimeOffSchemas4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(TimeOffSchemasValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}

/** @internal */
export namespace TimeOff$ {
    export const inboundSchema: z.ZodType<TimeOff, z.ZodTypeDef, unknown> = z
        .object({
            approver_id: z.nullable(z.string()).optional(),
            created_date: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            duration: z.nullable(z.string()).optional(),
            employee_id: z.nullable(z.string()).optional(),
            end_date: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            end_half_day: z.nullable(z.boolean()).optional(),
            id: z.nullable(z.string()).optional(),
            remote_approver_id: z.nullable(z.string()).optional(),
            remote_employee_id: z.nullable(z.string()).optional(),
            remote_id: z.nullable(z.string()).optional(),
            start_date: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            start_half_day: z.nullable(z.boolean()).optional(),
            status: z.nullable(z.lazy(() => TimeOffStatus$.inboundSchema)).optional(),
            type: z.nullable(z.lazy(() => TimeOffType$.inboundSchema)).optional(),
            updated_date: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                approver_id: "approverId",
                created_date: "createdDate",
                employee_id: "employeeId",
                end_date: "endDate",
                end_half_day: "endHalfDay",
                remote_approver_id: "remoteApproverId",
                remote_employee_id: "remoteEmployeeId",
                remote_id: "remoteId",
                start_date: "startDate",
                start_half_day: "startHalfDay",
                updated_date: "updatedDate",
            });
        });

    export type Outbound = {
        approver_id?: string | null | undefined;
        created_date?: string | null | undefined;
        duration?: string | null | undefined;
        employee_id?: string | null | undefined;
        end_date?: string | null | undefined;
        end_half_day?: boolean | null | undefined;
        id?: string | null | undefined;
        remote_approver_id?: string | null | undefined;
        remote_employee_id?: string | null | undefined;
        remote_id?: string | null | undefined;
        start_date?: string | null | undefined;
        start_half_day?: boolean | null | undefined;
        status?: TimeOffStatus$.Outbound | null | undefined;
        type?: TimeOffType$.Outbound | null | undefined;
        updated_date?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TimeOff> = z
        .object({
            approverId: z.nullable(z.string()).optional(),
            createdDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            duration: z.nullable(z.string()).optional(),
            employeeId: z.nullable(z.string()).optional(),
            endDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            endHalfDay: z.nullable(z.boolean()).optional(),
            id: z.nullable(z.string()).optional(),
            remoteApproverId: z.nullable(z.string()).optional(),
            remoteEmployeeId: z.nullable(z.string()).optional(),
            remoteId: z.nullable(z.string()).optional(),
            startDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            startHalfDay: z.nullable(z.boolean()).optional(),
            status: z.nullable(z.lazy(() => TimeOffStatus$.outboundSchema)).optional(),
            type: z.nullable(z.lazy(() => TimeOffType$.outboundSchema)).optional(),
            updatedDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                approverId: "approver_id",
                createdDate: "created_date",
                employeeId: "employee_id",
                endDate: "end_date",
                endHalfDay: "end_half_day",
                remoteApproverId: "remote_approver_id",
                remoteEmployeeId: "remote_employee_id",
                remoteId: "remote_id",
                startDate: "start_date",
                startHalfDay: "start_half_day",
                updatedDate: "updated_date",
            });
        });
}
