/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Four = {};

/**
 * The value associated with the custom field.
 */
export type Value = Four | string | number | boolean | Array<any>;

export type ApplicationCustomFields = {
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The name of the custom field.
   */
  name?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * Provider's unique identifier for the value of the custom field.
   */
  remoteValueId?: string | null | undefined;
  /**
   * The value associated with the custom field.
   */
  value?: Four | string | number | boolean | Array<any> | null | undefined;
  /**
   * The unique identifier for the value of the custom field.
   */
  valueId?: string | null | undefined;
};

/** @internal */
export const Four$inboundSchema: z.ZodType<Four, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Four$Outbound = {};

/** @internal */
export const Four$outboundSchema: z.ZodType<Four$Outbound, z.ZodTypeDef, Four> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Four$ {
  /** @deprecated use `Four$inboundSchema` instead. */
  export const inboundSchema = Four$inboundSchema;
  /** @deprecated use `Four$outboundSchema` instead. */
  export const outboundSchema = Four$outboundSchema;
  /** @deprecated use `Four$Outbound` instead. */
  export type Outbound = Four$Outbound;
}

export function fourToJSON(four: Four): string {
  return JSON.stringify(Four$outboundSchema.parse(four));
}

export function fourFromJSON(
  jsonString: string,
): SafeParseResult<Four, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Four$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Four' from JSON`,
  );
}

/** @internal */
export const Value$inboundSchema: z.ZodType<Value, z.ZodTypeDef, unknown> = z
  .union([
    z.lazy(() => Four$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
  ]);

/** @internal */
export type Value$Outbound =
  | Four$Outbound
  | string
  | number
  | boolean
  | Array<any>;

/** @internal */
export const Value$outboundSchema: z.ZodType<
  Value$Outbound,
  z.ZodTypeDef,
  Value
> = z.union([
  z.lazy(() => Four$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value$ {
  /** @deprecated use `Value$inboundSchema` instead. */
  export const inboundSchema = Value$inboundSchema;
  /** @deprecated use `Value$outboundSchema` instead. */
  export const outboundSchema = Value$outboundSchema;
  /** @deprecated use `Value$Outbound` instead. */
  export type Outbound = Value$Outbound;
}

export function valueToJSON(value: Value): string {
  return JSON.stringify(Value$outboundSchema.parse(value));
}

export function valueFromJSON(
  jsonString: string,
): SafeParseResult<Value, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value' from JSON`,
  );
}

/** @internal */
export const ApplicationCustomFields$inboundSchema: z.ZodType<
  ApplicationCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  remote_value_id: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => Four$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  value_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "remote_id": "remoteId",
    "remote_value_id": "remoteValueId",
    "value_id": "valueId",
  });
});

/** @internal */
export type ApplicationCustomFields$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  remote_id?: string | null | undefined;
  remote_value_id?: string | null | undefined;
  value?:
    | Four$Outbound
    | string
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  value_id?: string | null | undefined;
};

/** @internal */
export const ApplicationCustomFields$outboundSchema: z.ZodType<
  ApplicationCustomFields$Outbound,
  z.ZodTypeDef,
  ApplicationCustomFields
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  remoteValueId: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => Four$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  valueId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    remoteId: "remote_id",
    remoteValueId: "remote_value_id",
    valueId: "value_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationCustomFields$ {
  /** @deprecated use `ApplicationCustomFields$inboundSchema` instead. */
  export const inboundSchema = ApplicationCustomFields$inboundSchema;
  /** @deprecated use `ApplicationCustomFields$outboundSchema` instead. */
  export const outboundSchema = ApplicationCustomFields$outboundSchema;
  /** @deprecated use `ApplicationCustomFields$Outbound` instead. */
  export type Outbound = ApplicationCustomFields$Outbound;
}

export function applicationCustomFieldsToJSON(
  applicationCustomFields: ApplicationCustomFields,
): string {
  return JSON.stringify(
    ApplicationCustomFields$outboundSchema.parse(applicationCustomFields),
  );
}

export function applicationCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationCustomFields' from JSON`,
  );
}
