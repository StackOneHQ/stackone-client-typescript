/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RawResponse,
  RawResponse$inboundSchema,
  RawResponse$Outbound,
  RawResponse$outboundSchema,
} from "./rawresponse.js";
import {
  ScreeningResult,
  ScreeningResult$inboundSchema,
  ScreeningResult$Outbound,
  ScreeningResult$outboundSchema,
} from "./screeningresult.js";

/**
 * The event type
 */
export enum Event {
  ScreeningResultsCreated = "screening.results.created",
  ScreeningResultsUpdated = "screening.results.updated",
  ScreeningResultsCompleted = "screening.results.completed",
  ScreeningResultsFailed = "screening.results.failed",
  ScreeningResultsCancelled = "screening.results.cancelled",
}
/**
 * The event type
 */
export type EventOpen = OpenEnum<typeof Event>;

export type ScreeningResultWebhook = {
  /**
   * The result data
   */
  data: ScreeningResult;
  /**
   * The event type
   */
  event: EventOpen;
  raw?: Array<RawResponse> | null | undefined;
};

/** @internal */
export const Event$inboundSchema: z.ZodType<EventOpen, z.ZodTypeDef, unknown> =
  z
    .union([
      z.nativeEnum(Event),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const Event$outboundSchema: z.ZodType<
  EventOpen,
  z.ZodTypeDef,
  EventOpen
> = z.union([
  z.nativeEnum(Event),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Event$ {
  /** @deprecated use `Event$inboundSchema` instead. */
  export const inboundSchema = Event$inboundSchema;
  /** @deprecated use `Event$outboundSchema` instead. */
  export const outboundSchema = Event$outboundSchema;
}

/** @internal */
export const ScreeningResultWebhook$inboundSchema: z.ZodType<
  ScreeningResultWebhook,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: ScreeningResult$inboundSchema,
  event: Event$inboundSchema,
  raw: z.nullable(z.array(RawResponse$inboundSchema)).optional(),
});

/** @internal */
export type ScreeningResultWebhook$Outbound = {
  data: ScreeningResult$Outbound;
  event: string;
  raw?: Array<RawResponse$Outbound> | null | undefined;
};

/** @internal */
export const ScreeningResultWebhook$outboundSchema: z.ZodType<
  ScreeningResultWebhook$Outbound,
  z.ZodTypeDef,
  ScreeningResultWebhook
> = z.object({
  data: ScreeningResult$outboundSchema,
  event: Event$outboundSchema,
  raw: z.nullable(z.array(RawResponse$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScreeningResultWebhook$ {
  /** @deprecated use `ScreeningResultWebhook$inboundSchema` instead. */
  export const inboundSchema = ScreeningResultWebhook$inboundSchema;
  /** @deprecated use `ScreeningResultWebhook$outboundSchema` instead. */
  export const outboundSchema = ScreeningResultWebhook$outboundSchema;
  /** @deprecated use `ScreeningResultWebhook$Outbound` instead. */
  export type Outbound = ScreeningResultWebhook$Outbound;
}

export function screeningResultWebhookToJSON(
  screeningResultWebhook: ScreeningResultWebhook,
): string {
  return JSON.stringify(
    ScreeningResultWebhook$outboundSchema.parse(screeningResultWebhook),
  );
}

export function screeningResultWebhookFromJSON(
  jsonString: string,
): SafeParseResult<ScreeningResultWebhook, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScreeningResultWebhook$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScreeningResultWebhook' from JSON`,
  );
}
