/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types";
import { IamResource, IamResource$ } from "./iamresource";
import * as z from "zod";

export type IamPermission4 = {};

export type IamPermissionSourceValue = IamPermission4 | string | number | boolean;

/**
 * The type of the permission, e.g. read, read_write, delete, etc.
 */
export enum IamPermissionValue {
    Read = "read",
    ReadWrite = "read_write",
    Approve = "approve",
    Delete = "delete",
    Use = "use",
    Export = "export",
    UnmappedValue = "unmapped_value",
}
/**
 * The type of the permission, e.g. read, read_write, delete, etc.
 */
export type IamPermissionValueOpen = OpenEnum<typeof IamPermissionValue>;

export type IamPermissionType = {
    sourceValue?: IamPermission4 | string | number | boolean | null | undefined;
    /**
     * The type of the permission, e.g. read, read_write, delete, etc.
     */
    value?: IamPermissionValueOpen | null | undefined;
};

export type IamPermission = {
    createdAt?: Date | null | undefined;
    description?: string | null | undefined;
    /**
     * Unique identifier
     */
    id?: string | null | undefined;
    /**
     * The name of the permission.
     */
    name?: string | null | undefined;
    /**
     * Provider's unique identifier
     */
    remoteId?: string | null | undefined;
    /**
     * The resources that the permission applies to.
     */
    resources?: Array<IamResource> | null | undefined;
    type?: IamPermissionType | null | undefined;
    updatedAt?: Date | null | undefined;
};

/** @internal */
export namespace IamPermission4$ {
    export const inboundSchema: z.ZodType<IamPermission4, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IamPermission4> = z.object({});
}

/** @internal */
export namespace IamPermissionSourceValue$ {
    export const inboundSchema: z.ZodType<IamPermissionSourceValue, z.ZodTypeDef, unknown> =
        z.union([z.lazy(() => IamPermission4$.inboundSchema), z.string(), z.number(), z.boolean()]);

    export type Outbound = IamPermission4$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IamPermissionSourceValue> =
        z.union([
            z.lazy(() => IamPermission4$.outboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);
}

/** @internal */
export namespace IamPermissionValue$ {
    export const inboundSchema: z.ZodType<IamPermissionValueOpen, z.ZodTypeDef, unknown> = z.union([
        z.nativeEnum(IamPermissionValue),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema = z.union([
        z.nativeEnum(IamPermissionValue),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace IamPermissionType$ {
    export const inboundSchema: z.ZodType<IamPermissionType, z.ZodTypeDef, unknown> = z
        .object({
            source_value: z
                .nullable(
                    z.union([
                        z.lazy(() => IamPermission4$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(IamPermissionValue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                source_value: "sourceValue",
            });
        });

    export type Outbound = {
        source_value?: IamPermission4$.Outbound | string | number | boolean | null | undefined;
        value?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IamPermissionType> = z
        .object({
            sourceValue: z
                .nullable(
                    z.union([
                        z.lazy(() => IamPermission4$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            value: z.nullable(IamPermissionValue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceValue: "source_value",
            });
        });
}

/** @internal */
export namespace IamPermission$ {
    export const inboundSchema: z.ZodType<IamPermission, z.ZodTypeDef, unknown> = z
        .object({
            created_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            description: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            remote_id: z.nullable(z.string()).optional(),
            resources: z.nullable(z.array(IamResource$.inboundSchema)).optional(),
            type: z.nullable(z.lazy(() => IamPermissionType$.inboundSchema)).optional(),
            updated_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                created_at: "createdAt",
                remote_id: "remoteId",
                updated_at: "updatedAt",
            });
        });

    export type Outbound = {
        created_at?: string | null | undefined;
        description?: string | null | undefined;
        id?: string | null | undefined;
        name?: string | null | undefined;
        remote_id?: string | null | undefined;
        resources?: Array<IamResource$.Outbound> | null | undefined;
        type?: IamPermissionType$.Outbound | null | undefined;
        updated_at?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IamPermission> = z
        .object({
            createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            description: z.nullable(z.string()).optional(),
            id: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            remoteId: z.nullable(z.string()).optional(),
            resources: z.nullable(z.array(IamResource$.outboundSchema)).optional(),
            type: z.nullable(z.lazy(() => IamPermissionType$.outboundSchema)).optional(),
            updatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                createdAt: "created_at",
                remoteId: "remote_id",
                updatedAt: "updated_at",
            });
        });
}
