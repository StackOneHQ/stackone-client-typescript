/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RawResponse,
  RawResponse$inboundSchema,
  RawResponse$Outbound,
  RawResponse$outboundSchema,
} from "./rawresponse.js";

/**
 * The type of the collection.
 */
export enum TicketingCollectionResultType {
  Project = "project",
  Component = "component",
  UnmappedValue = "unmapped_value",
}
/**
 * The type of the collection.
 */
export type TicketingCollectionResultTypeOpen = OpenEnum<
  typeof TicketingCollectionResultType
>;

export type TicketingCollectionResultData = {
  /**
   * The timestamp when the record was created
   */
  createdAt?: Date | null | undefined;
  /**
   * The description of the collection
   */
  description?: string | null | undefined;
  /**
   * Unique identifier
   */
  id?: string | null | undefined;
  /**
   * The user-friendly key of the collection
   */
  key?: string | null | undefined;
  /**
   * The name of the collection
   */
  name?: string | null | undefined;
  /**
   * The organization id related to the collection
   */
  organizationId?: string | null | undefined;
  /**
   * The parent collection of the collection
   */
  parentId?: string | null | undefined;
  /**
   * Provider's unique identifier
   */
  remoteId?: string | null | undefined;
  /**
   * The type of the collection.
   */
  type?: TicketingCollectionResultTypeOpen | null | undefined;
  /**
   * The timestamp when the record was last updated
   */
  updatedAt?: Date | null | undefined;
};

export type TicketingCollectionResult = {
  data?: TicketingCollectionResultData | null | undefined;
  raw?: Array<RawResponse> | null | undefined;
};

/** @internal */
export const TicketingCollectionResultType$inboundSchema: z.ZodType<
  TicketingCollectionResultTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TicketingCollectionResultType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TicketingCollectionResultType$outboundSchema: z.ZodType<
  TicketingCollectionResultTypeOpen,
  z.ZodTypeDef,
  TicketingCollectionResultTypeOpen
> = z.union([
  z.nativeEnum(TicketingCollectionResultType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingCollectionResultType$ {
  /** @deprecated use `TicketingCollectionResultType$inboundSchema` instead. */
  export const inboundSchema = TicketingCollectionResultType$inboundSchema;
  /** @deprecated use `TicketingCollectionResultType$outboundSchema` instead. */
  export const outboundSchema = TicketingCollectionResultType$outboundSchema;
}

/** @internal */
export const TicketingCollectionResultData$inboundSchema: z.ZodType<
  TicketingCollectionResultData,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  description: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  key: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  organization_id: z.nullable(z.string()).optional(),
  parent_id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  type: z.nullable(TicketingCollectionResultType$inboundSchema).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "organization_id": "organizationId",
    "parent_id": "parentId",
    "remote_id": "remoteId",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type TicketingCollectionResultData$Outbound = {
  created_at?: string | null | undefined;
  description?: string | null | undefined;
  id?: string | null | undefined;
  key?: string | null | undefined;
  name?: string | null | undefined;
  organization_id?: string | null | undefined;
  parent_id?: string | null | undefined;
  remote_id?: string | null | undefined;
  type?: string | null | undefined;
  updated_at?: string | null | undefined;
};

/** @internal */
export const TicketingCollectionResultData$outboundSchema: z.ZodType<
  TicketingCollectionResultData$Outbound,
  z.ZodTypeDef,
  TicketingCollectionResultData
> = z.object({
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  description: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  key: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  organizationId: z.nullable(z.string()).optional(),
  parentId: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  type: z.nullable(TicketingCollectionResultType$outboundSchema).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    organizationId: "organization_id",
    parentId: "parent_id",
    remoteId: "remote_id",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingCollectionResultData$ {
  /** @deprecated use `TicketingCollectionResultData$inboundSchema` instead. */
  export const inboundSchema = TicketingCollectionResultData$inboundSchema;
  /** @deprecated use `TicketingCollectionResultData$outboundSchema` instead. */
  export const outboundSchema = TicketingCollectionResultData$outboundSchema;
  /** @deprecated use `TicketingCollectionResultData$Outbound` instead. */
  export type Outbound = TicketingCollectionResultData$Outbound;
}

export function ticketingCollectionResultDataToJSON(
  ticketingCollectionResultData: TicketingCollectionResultData,
): string {
  return JSON.stringify(
    TicketingCollectionResultData$outboundSchema.parse(
      ticketingCollectionResultData,
    ),
  );
}

export function ticketingCollectionResultDataFromJSON(
  jsonString: string,
): SafeParseResult<TicketingCollectionResultData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingCollectionResultData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingCollectionResultData' from JSON`,
  );
}

/** @internal */
export const TicketingCollectionResult$inboundSchema: z.ZodType<
  TicketingCollectionResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(z.lazy(() => TicketingCollectionResultData$inboundSchema))
    .optional(),
  raw: z.nullable(z.array(RawResponse$inboundSchema)).optional(),
});

/** @internal */
export type TicketingCollectionResult$Outbound = {
  data?: TicketingCollectionResultData$Outbound | null | undefined;
  raw?: Array<RawResponse$Outbound> | null | undefined;
};

/** @internal */
export const TicketingCollectionResult$outboundSchema: z.ZodType<
  TicketingCollectionResult$Outbound,
  z.ZodTypeDef,
  TicketingCollectionResult
> = z.object({
  data: z.nullable(z.lazy(() => TicketingCollectionResultData$outboundSchema))
    .optional(),
  raw: z.nullable(z.array(RawResponse$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingCollectionResult$ {
  /** @deprecated use `TicketingCollectionResult$inboundSchema` instead. */
  export const inboundSchema = TicketingCollectionResult$inboundSchema;
  /** @deprecated use `TicketingCollectionResult$outboundSchema` instead. */
  export const outboundSchema = TicketingCollectionResult$outboundSchema;
  /** @deprecated use `TicketingCollectionResult$Outbound` instead. */
  export type Outbound = TicketingCollectionResult$Outbound;
}

export function ticketingCollectionResultToJSON(
  ticketingCollectionResult: TicketingCollectionResult,
): string {
  return JSON.stringify(
    TicketingCollectionResult$outboundSchema.parse(ticketingCollectionResult),
  );
}

export function ticketingCollectionResultFromJSON(
  jsonString: string,
): SafeParseResult<TicketingCollectionResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingCollectionResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingCollectionResult' from JSON`,
  );
}
