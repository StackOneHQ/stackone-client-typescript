/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountingBatchCreateCompanyJournals } from "../funcs/accountingBatchCreateCompanyJournals.js";
import { accountingCreateCompanyJournal } from "../funcs/accountingCreateCompanyJournal.js";
import { accountingGetCompany } from "../funcs/accountingGetCompany.js";
import { accountingGetCompanyAccount } from "../funcs/accountingGetCompanyAccount.js";
import { accountingGetCompanyJournal } from "../funcs/accountingGetCompanyJournal.js";
import { accountingGetCompanyTaxRate } from "../funcs/accountingGetCompanyTaxRate.js";
import { accountingListCompanies } from "../funcs/accountingListCompanies.js";
import { accountingListCompanyAccounts } from "../funcs/accountingListCompanyAccounts.js";
import { accountingListCompanyJournals } from "../funcs/accountingListCompanyJournals.js";
import { accountingListCompanyTaxRates } from "../funcs/accountingListCompanyTaxRates.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { PageIterator, unwrapResultIterator } from "../sdk/types/operations.js";
import * as operations from "./models/operations/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Accounting extends ClientSDK {
  /**
   * Batch Create Journals
   */
  async batchCreateCompanyJournals(
    request: operations.AccountingBatchCreateCompanyJournalsRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingBatchCreateCompanyJournalsResponse> {
    return unwrapAsync(accountingBatchCreateCompanyJournals(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Journal
   */
  async createCompanyJournal(
    request: operations.AccountingCreateCompanyJournalRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingCreateCompanyJournalResponse> {
    return unwrapAsync(accountingCreateCompanyJournal(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Company
   */
  async getCompany(
    request: operations.AccountingGetCompanyRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingGetCompanyResponse> {
    return unwrapAsync(accountingGetCompany(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Account
   */
  async getCompanyAccount(
    request: operations.AccountingGetCompanyAccountRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingGetCompanyAccountResponse> {
    return unwrapAsync(accountingGetCompanyAccount(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Journal
   */
  async getCompanyJournal(
    request: operations.AccountingGetCompanyJournalRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingGetCompanyJournalResponse> {
    return unwrapAsync(accountingGetCompanyJournal(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Tax Rate
   */
  async getCompanyTaxRate(
    request: operations.AccountingGetCompanyTaxRateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingGetCompanyTaxRateResponse> {
    return unwrapAsync(accountingGetCompanyTaxRate(
      this,
      request,
      options,
    ));
  }

  /**
   * List Companies
   */
  async listCompanies(
    request: operations.AccountingListCompaniesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.AccountingListCompaniesResponse, { cursor: string }>
  > {
    return unwrapResultIterator(accountingListCompanies(
      this,
      request,
      options,
    ));
  }

  /**
   * List Accounts
   */
  async listCompanyAccounts(
    request: operations.AccountingListCompanyAccountsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.AccountingListCompanyAccountsResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(accountingListCompanyAccounts(
      this,
      request,
      options,
    ));
  }

  /**
   * List Journals
   */
  async listCompanyJournals(
    request: operations.AccountingListCompanyJournalsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.AccountingListCompanyJournalsResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(accountingListCompanyJournals(
      this,
      request,
      options,
    ));
  }

  /**
   * List Tax Rates
   */
  async listCompanyTaxRates(
    request: operations.AccountingListCompanyTaxRatesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.AccountingListCompanyTaxRatesResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(accountingListCompanyTaxRates(
      this,
      request,
      options,
    ));
  }
}
