/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ticketingCreateTicket } from "../funcs/ticketingCreateTicket.js";
import { ticketingDownloadTicketingAttachment } from "../funcs/ticketingDownloadTicketingAttachment.js";
import { ticketingGetAttachment } from "../funcs/ticketingGetAttachment.js";
import { ticketingGetCollection } from "../funcs/ticketingGetCollection.js";
import { ticketingGetComment } from "../funcs/ticketingGetComment.js";
import { ticketingGetTicket } from "../funcs/ticketingGetTicket.js";
import { ticketingGetTicketType } from "../funcs/ticketingGetTicketType.js";
import { ticketingGetUser } from "../funcs/ticketingGetUser.js";
import { ticketingListAttachments } from "../funcs/ticketingListAttachments.js";
import { ticketingListCollections } from "../funcs/ticketingListCollections.js";
import { ticketingListComments } from "../funcs/ticketingListComments.js";
import { ticketingListTickets } from "../funcs/ticketingListTickets.js";
import { ticketingListTicketStatuses } from "../funcs/ticketingListTicketStatuses.js";
import { ticketingListTicketTypes } from "../funcs/ticketingListTicketTypes.js";
import { ticketingListUsers } from "../funcs/ticketingListUsers.js";
import { ticketingUpdateTicket } from "../funcs/ticketingUpdateTicket.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { PageIterator, unwrapResultIterator } from "../sdk/types/operations.js";
import * as operations from "./models/operations/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Ticketing extends ClientSDK {
  /**
   * Create Ticket
   */
  async createTicket(
    request: operations.TicketingCreateTicketRequest,
    options?: RequestOptions,
  ): Promise<operations.TicketingCreateTicketResponse> {
    return unwrapAsync(ticketingCreateTicket(
      this,
      request,
      options,
    ));
  }

  /**
   * Download Attachment
   */
  async downloadTicketingAttachment(
    request: operations.TicketingDownloadTicketingAttachmentRequest,
    options?: RequestOptions,
  ): Promise<operations.TicketingDownloadTicketingAttachmentResponse> {
    return unwrapAsync(ticketingDownloadTicketingAttachment(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Attachment
   */
  async getAttachment(
    request: operations.TicketingGetAttachmentRequest,
    options?: RequestOptions,
  ): Promise<operations.TicketingGetAttachmentResponse> {
    return unwrapAsync(ticketingGetAttachment(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Collection
   */
  async getCollection(
    request: operations.TicketingGetCollectionRequest,
    options?: RequestOptions,
  ): Promise<operations.TicketingGetCollectionResponse> {
    return unwrapAsync(ticketingGetCollection(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Comment
   */
  async getComment(
    request: operations.TicketingGetCommentRequest,
    options?: RequestOptions,
  ): Promise<operations.TicketingGetCommentResponse> {
    return unwrapAsync(ticketingGetComment(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Ticket
   */
  async getTicket(
    request: operations.TicketingGetTicketRequest,
    options?: RequestOptions,
  ): Promise<operations.TicketingGetTicketResponse> {
    return unwrapAsync(ticketingGetTicket(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Ticket Type
   */
  async getTicketType(
    request: operations.TicketingGetTicketTypeRequest,
    options?: RequestOptions,
  ): Promise<operations.TicketingGetTicketTypeResponse> {
    return unwrapAsync(ticketingGetTicketType(
      this,
      request,
      options,
    ));
  }

  /**
   * Get User
   */
  async getUser(
    request: operations.TicketingGetUserRequest,
    options?: RequestOptions,
  ): Promise<operations.TicketingGetUserResponse> {
    return unwrapAsync(ticketingGetUser(
      this,
      request,
      options,
    ));
  }

  /**
   * List Attachments
   */
  async listAttachments(
    request: operations.TicketingListAttachmentsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.TicketingListAttachmentsResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(ticketingListAttachments(
      this,
      request,
      options,
    ));
  }

  /**
   * List Collections
   */
  async listCollections(
    request: operations.TicketingListCollectionsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.TicketingListCollectionsResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(ticketingListCollections(
      this,
      request,
      options,
    ));
  }

  /**
   * List Comments
   */
  async listComments(
    request: operations.TicketingListCommentsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.TicketingListCommentsResponse, { cursor: string }>
  > {
    return unwrapResultIterator(ticketingListComments(
      this,
      request,
      options,
    ));
  }

  /**
   * List Ticket Statuses
   */
  async listTicketStatuses(
    request: operations.TicketingListTicketStatusesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.TicketingListTicketStatusesResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(ticketingListTicketStatuses(
      this,
      request,
      options,
    ));
  }

  /**
   * List Ticket Types
   */
  async listTicketTypes(
    request: operations.TicketingListTicketTypesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.TicketingListTicketTypesResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(ticketingListTicketTypes(
      this,
      request,
      options,
    ));
  }

  /**
   * List Tickets
   */
  async listTickets(
    request: operations.TicketingListTicketsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.TicketingListTicketsResponse, { cursor: string }>
  > {
    return unwrapResultIterator(ticketingListTickets(
      this,
      request,
      options,
    ));
  }

  /**
   * List Users
   */
  async listUsers(
    request: operations.TicketingListUsersRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.TicketingListUsersResponse, { cursor: string }>
  > {
    return unwrapResultIterator(ticketingListUsers(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Ticket
   */
  async updateTicket(
    request: operations.TicketingUpdateTicketRequest,
    options?: RequestOptions,
  ): Promise<operations.TicketingUpdateTicketResponse> {
    return unwrapAsync(ticketingUpdateTicket(
      this,
      request,
      options,
    ));
  }
}
