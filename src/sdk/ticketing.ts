/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ticketingCreateTicket } from "../funcs/ticketingCreateTicket.js";
import { ticketingDownloadTicketingAttachment } from "../funcs/ticketingDownloadTicketingAttachment.js";
import { ticketingGetAttachment } from "../funcs/ticketingGetAttachment.js";
import { ticketingGetComment } from "../funcs/ticketingGetComment.js";
import { ticketingGetProject } from "../funcs/ticketingGetProject.js";
import { ticketingGetProjectComponent } from "../funcs/ticketingGetProjectComponent.js";
import { ticketingGetTicket } from "../funcs/ticketingGetTicket.js";
import { ticketingGetTicketType } from "../funcs/ticketingGetTicketType.js";
import { ticketingGetUser } from "../funcs/ticketingGetUser.js";
import { ticketingListAttachments } from "../funcs/ticketingListAttachments.js";
import { ticketingListComments } from "../funcs/ticketingListComments.js";
import { ticketingListProjectComponents } from "../funcs/ticketingListProjectComponents.js";
import { ticketingListProjects } from "../funcs/ticketingListProjects.js";
import { ticketingListProjectTicketTypes } from "../funcs/ticketingListProjectTicketTypes.js";
import { ticketingListTickets } from "../funcs/ticketingListTickets.js";
import { ticketingListTicketStatuses } from "../funcs/ticketingListTicketStatuses.js";
import { ticketingListTicketTypes } from "../funcs/ticketingListTicketTypes.js";
import { ticketingListUsers } from "../funcs/ticketingListUsers.js";
import { ticketingUpdateTicket } from "../funcs/ticketingUpdateTicket.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { PageIterator, unwrapResultIterator } from "../sdk/types/operations.js";
import * as operations from "./models/operations/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Ticketing extends ClientSDK {
  /**
   * Create Ticket
   *
   * @remarks
   * Create a new ticket record.
   */
  async createTicket(
    request: operations.TicketingCreateTicketRequest,
    options?: RequestOptions,
  ): Promise<operations.TicketingCreateTicketResponse> {
    return unwrapAsync(ticketingCreateTicket(
      this,
      request,
      options,
    ));
  }

  /**
   * Download Attachment
   *
   * @remarks
   * Download the attachment file from a ticket.
   */
  async downloadTicketingAttachment(
    request: operations.TicketingDownloadTicketingAttachmentRequest,
    options?: RequestOptions,
  ): Promise<operations.TicketingDownloadTicketingAttachmentResponse> {
    return unwrapAsync(ticketingDownloadTicketingAttachment(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Attachment
   *
   * @remarks
   * Retrieve the details of a single attachment for a ticket.
   */
  async getAttachment(
    request: operations.TicketingGetAttachmentRequest,
    options?: RequestOptions,
  ): Promise<operations.TicketingGetAttachmentResponse> {
    return unwrapAsync(ticketingGetAttachment(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Comment
   *
   * @remarks
   * Retrieve a single comment by its identifier for a ticket.
   */
  async getComment(
    request: operations.TicketingGetCommentRequest,
    options?: RequestOptions,
  ): Promise<operations.TicketingGetCommentResponse> {
    return unwrapAsync(ticketingGetComment(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Project
   *
   * @remarks
   * Retrieve a single project by its identifier.
   */
  async getProject(
    request: operations.TicketingGetProjectRequest,
    options?: RequestOptions,
  ): Promise<operations.TicketingGetProjectResponse> {
    return unwrapAsync(ticketingGetProject(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Project Component
   *
   * @remarks
   * Retrieve a single project component by its identifier.
   */
  async getProjectComponent(
    request: operations.TicketingGetProjectComponentRequest,
    options?: RequestOptions,
  ): Promise<operations.TicketingGetProjectComponentResponse> {
    return unwrapAsync(ticketingGetProjectComponent(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Ticket
   *
   * @remarks
   * Retrieve a single ticket by its identifier.
   */
  async getTicket(
    request: operations.TicketingGetTicketRequest,
    options?: RequestOptions,
  ): Promise<operations.TicketingGetTicketResponse> {
    return unwrapAsync(ticketingGetTicket(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Ticket Type
   *
   * @remarks
   * Retrieve a single ticket type by its identifier.
   */
  async getTicketType(
    request: operations.TicketingGetTicketTypeRequest,
    options?: RequestOptions,
  ): Promise<operations.TicketingGetTicketTypeResponse> {
    return unwrapAsync(ticketingGetTicketType(
      this,
      request,
      options,
    ));
  }

  /**
   * Get User
   *
   * @remarks
   * Retrieve a single user by their identifier.
   */
  async getUser(
    request: operations.TicketingGetUserRequest,
    options?: RequestOptions,
  ): Promise<operations.TicketingGetUserResponse> {
    return unwrapAsync(ticketingGetUser(
      this,
      request,
      options,
    ));
  }

  /**
   * List Attachments
   *
   * @remarks
   * Retrieve a paginated list of attachment details for a ticket.
   */
  async listAttachments(
    request: operations.TicketingListAttachmentsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.TicketingListAttachmentsResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(ticketingListAttachments(
      this,
      request,
      options,
    ));
  }

  /**
   * List Comments
   *
   * @remarks
   * Retrieve a paginated list of comments for a ticket.
   */
  async listComments(
    request: operations.TicketingListCommentsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.TicketingListCommentsResponse, { cursor: string }>
  > {
    return unwrapResultIterator(ticketingListComments(
      this,
      request,
      options,
    ));
  }

  /**
   * List Project Components
   *
   * @remarks
   * Retrieve a paginated list of project components.
   */
  async listProjectComponents(
    request: operations.TicketingListProjectComponentsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.TicketingListProjectComponentsResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(ticketingListProjectComponents(
      this,
      request,
      options,
    ));
  }

  /**
   * List Project Ticket Types
   *
   * @remarks
   * Retrieve a paginated list of ticket types for a project.
   */
  async listProjectTicketTypes(
    request: operations.TicketingListProjectTicketTypesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.TicketingListProjectTicketTypesResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(ticketingListProjectTicketTypes(
      this,
      request,
      options,
    ));
  }

  /**
   * List Projects
   *
   * @remarks
   * Retrieve a paginated list of projects.
   */
  async listProjects(
    request: operations.TicketingListProjectsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.TicketingListProjectsResponse, { cursor: string }>
  > {
    return unwrapResultIterator(ticketingListProjects(
      this,
      request,
      options,
    ));
  }

  /**
   * List Ticket Statuses
   *
   * @remarks
   * Retrieve a paginated list of statuses for a ticket.
   */
  async listTicketStatuses(
    request: operations.TicketingListTicketStatusesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.TicketingListTicketStatusesResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(ticketingListTicketStatuses(
      this,
      request,
      options,
    ));
  }

  /**
   * List Ticket Types
   *
   * @remarks
   * Retrieve a paginated list of all ticket types.
   */
  async listTicketTypes(
    request: operations.TicketingListTicketTypesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.TicketingListTicketTypesResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(ticketingListTicketTypes(
      this,
      request,
      options,
    ));
  }

  /**
   * List Tickets
   *
   * @remarks
   * Retrieve a paginated list of tickets.
   */
  async listTickets(
    request: operations.TicketingListTicketsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.TicketingListTicketsResponse, { cursor: string }>
  > {
    return unwrapResultIterator(ticketingListTickets(
      this,
      request,
      options,
    ));
  }

  /**
   * List Users
   *
   * @remarks
   * Retrieve a paginated list of users.
   */
  async listUsers(
    request: operations.TicketingListUsersRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.TicketingListUsersResponse, { cursor: string }>
  > {
    return unwrapResultIterator(ticketingListUsers(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Ticket
   *
   * @remarks
   * Update an existing ticket record by its identifier.
   */
  async updateTicket(
    request: operations.TicketingUpdateTicketRequest,
    options?: RequestOptions,
  ): Promise<operations.TicketingUpdateTicketResponse> {
    return unwrapAsync(ticketingUpdateTicket(
      this,
      request,
      options,
    ));
  }
}
