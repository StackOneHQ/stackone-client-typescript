/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { mcpMCPDelete } from "../funcs/mcpMCPDelete.js";
import { mcpMCPGet } from "../funcs/mcpMCPGet.js";
import { mcpMCPPost } from "../funcs/mcpMCPPost.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Mcp extends ClientSDK {
  /**
   * Delete MCP session
   *
   * @remarks
   * Close an existing MCP session for the provided session id
   */
  async mcpDelete(
    security: operations.StackoneMcpDeleteSecurity,
    request: operations.StackoneMcpDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.StackoneMcpDeleteResponse> {
    return unwrapAsync(mcpMCPDelete(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Open MCP SSE stream
   *
   * @remarks
   * Open a dedicated Server-Sent Events stream for MCP notifications
   */
  async mcpGet(
    security: operations.StackoneMcpGetSecurity,
    request: operations.StackoneMcpGetRequest,
    options?: RequestOptions,
  ): Promise<operations.StackoneMcpGetResponse> {
    return unwrapAsync(mcpMCPGet(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Send MCP JSON-RPC message
   *
   * @remarks
   * Send JSON-RPC request to the MCP server over HTTP streaming transport
   */
  async mcpPost(
    security: operations.StackoneMcpPostSecurity,
    request: operations.StackoneMcpPostRequest,
    options?: RequestOptions,
  ): Promise<operations.StackoneMcpPostResponse> {
    return unwrapAsync(mcpMCPPost(
      this,
      security,
      request,
      options,
    ));
  }
}
