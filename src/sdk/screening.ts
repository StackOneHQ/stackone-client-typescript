/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { screeningCreateScreeningOrder } from "../funcs/screeningCreateScreeningOrder.js";
import { screeningGetScreeningPackage } from "../funcs/screeningGetScreeningPackage.js";
import { screeningListScreeningPackages } from "../funcs/screeningListScreeningPackages.js";
import { screeningWebhookScreeningResult } from "../funcs/screeningWebhookScreeningResult.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { PageIterator, unwrapResultIterator } from "../sdk/types/operations.js";
import * as operations from "./models/operations/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Screening extends ClientSDK {
  /**
   * Create Screening Order
   */
  async createScreeningOrder(
    request: operations.ScreeningCreateScreeningOrderRequest,
    options?: RequestOptions,
  ): Promise<operations.ScreeningCreateScreeningOrderResponse> {
    return unwrapAsync(screeningCreateScreeningOrder(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Screening Package
   */
  async getScreeningPackage(
    request: operations.ScreeningGetScreeningPackageRequest,
    options?: RequestOptions,
  ): Promise<operations.ScreeningGetScreeningPackageResponse> {
    return unwrapAsync(screeningGetScreeningPackage(
      this,
      request,
      options,
    ));
  }

  /**
   * List Screening Packages
   */
  async listScreeningPackages(
    request: operations.ScreeningListScreeningPackagesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.ScreeningListScreeningPackagesResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(screeningListScreeningPackages(
      this,
      request,
      options,
    ));
  }

  /**
   * Webhook Screening Result
   */
  async webhookScreeningResult(
    request: operations.ScreeningWebhookScreeningResultRequest,
    options?: RequestOptions,
  ): Promise<operations.ScreeningWebhookScreeningResultResponse> {
    return unwrapAsync(screeningWebhookScreeningResult(
      this,
      request,
      options,
    ));
  }
}
