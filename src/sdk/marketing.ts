/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import {
    encodeDeepObjectQuery as encodeDeepObjectQuery$,
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
    queryJoin as queryJoin$,
} from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";

export class Marketing extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Create email template
     */
    async createEmailTemplate(
        request: operations.MarketingCreateEmailTemplateRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingCreateEmailTemplateResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.MarketingCreateEmailTemplateRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.MarketingCreateEmailTemplateRequestDto, {
            explode: true,
        });

        const path$ = this.templateURLComponent("/unified/marketing/templates/email")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "x-account-id": encodeSimple$("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "marketing_create_email_template",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "403", "412", "429", "4XX", "500", "501", "5XX"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.MarketingCreateEmailTemplateResponse>()
            .json(201, operations.MarketingCreateEmailTemplateResponse$, { key: "CreateResult" })
            .fail([400, 403, 412, 429, "4XX", 500, 501, "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Create omni-channel template
     */
    async createOmniChannelTemplate(
        request: operations.MarketingCreateOmniChannelTemplateRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingCreateOmniChannelTemplateResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.MarketingCreateOmniChannelTemplateRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.MarketingCreateTemplateRequestDto, {
            explode: true,
        });

        const path$ = this.templateURLComponent("/unified/marketing/templates/omni_channel")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "x-account-id": encodeSimple$("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "marketing_create_omni_channel_template",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "403", "412", "429", "4XX", "500", "501", "5XX"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] =
            await this.matcher<operations.MarketingCreateOmniChannelTemplateResponse>()
                .json(201, operations.MarketingCreateOmniChannelTemplateResponse$, {
                    key: "CreateResult",
                })
                .fail([400, 403, 412, 429, "4XX", 500, 501, "5XX"])
                .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Create push template
     */
    async createPushTemplate(
        request: operations.MarketingCreatePushTemplateRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingCreatePushTemplateResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.MarketingCreatePushTemplateRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.MarketingCreatePushTemplateRequestDto, {
            explode: true,
        });

        const path$ = this.templateURLComponent("/unified/marketing/templates/push")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "x-account-id": encodeSimple$("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "marketing_create_push_template",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "403", "412", "429", "4XX", "500", "501", "5XX"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.MarketingCreatePushTemplateResponse>()
            .json(201, operations.MarketingCreatePushTemplateResponse$, { key: "CreateResult" })
            .fail([400, 403, 412, 429, "4XX", 500, 501, "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get campaign
     */
    async getCampaign(
        request: operations.MarketingGetCampaignRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingGetCampaignResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.MarketingGetCampaignRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/unified/marketing/campaigns/{id}")(pathParams$);

        const query$ = queryJoin$(
            encodeDeepObjectQuery$({
                proxy: payload$.proxy,
            }),
            encodeFormQuery$({
                fields: payload$.fields,
                raw: payload$.raw,
            })
        );

        const headers$ = new Headers({
            Accept: "application/json",
            "x-account-id": encodeSimple$("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "marketing_get_campaign",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "403", "412", "429", "4XX", "500", "501", "5XX"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.MarketingGetCampaignResponse>()
            .json(200, operations.MarketingGetCampaignResponse$, { key: "CampaignResult" })
            .fail([400, 403, 412, 429, "4XX", 500, 501, "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get email template
     */
    async getEmailTemplate(
        request: operations.MarketingGetEmailTemplateRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingGetEmailTemplateResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.MarketingGetEmailTemplateRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/unified/marketing/templates/email/{id}")(
            pathParams$
        );

        const query$ = queryJoin$(
            encodeDeepObjectQuery$({
                proxy: payload$.proxy,
            }),
            encodeFormQuery$({
                fields: payload$.fields,
                raw: payload$.raw,
            })
        );

        const headers$ = new Headers({
            Accept: "application/json",
            "x-account-id": encodeSimple$("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "marketing_get_email_template",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "403", "412", "429", "4XX", "500", "501", "5XX"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.MarketingGetEmailTemplateResponse>()
            .json(200, operations.MarketingGetEmailTemplateResponse$, { key: "TemplateResult" })
            .fail([400, 403, 412, 429, "4XX", 500, 501, "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get omni-channel template
     */
    async getOmniChannelTemplate(
        request: operations.MarketingGetOmniChannelTemplateRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingGetOmniChannelTemplateResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.MarketingGetOmniChannelTemplateRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/unified/marketing/templates/omni_channel/{id}")(
            pathParams$
        );

        const query$ = queryJoin$(
            encodeDeepObjectQuery$({
                proxy: payload$.proxy,
            }),
            encodeFormQuery$({
                fields: payload$.fields,
                raw: payload$.raw,
            })
        );

        const headers$ = new Headers({
            Accept: "application/json",
            "x-account-id": encodeSimple$("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "marketing_get_omni_channel_template",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "403", "412", "429", "4XX", "500", "501", "5XX"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.MarketingGetOmniChannelTemplateResponse>()
            .json(200, operations.MarketingGetOmniChannelTemplateResponse$, {
                key: "TemplateResult",
            })
            .fail([400, 403, 412, 429, "4XX", 500, 501, "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get push template
     */
    async getPushTemplate(
        request: operations.MarketingGetPushTemplateRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingGetPushTemplateResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.MarketingGetPushTemplateRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/unified/marketing/templates/push/{id}")(
            pathParams$
        );

        const query$ = queryJoin$(
            encodeDeepObjectQuery$({
                proxy: payload$.proxy,
            }),
            encodeFormQuery$({
                fields: payload$.fields,
                raw: payload$.raw,
            })
        );

        const headers$ = new Headers({
            Accept: "application/json",
            "x-account-id": encodeSimple$("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "marketing_get_push_template",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "403", "412", "429", "4XX", "500", "501", "5XX"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.MarketingGetPushTemplateResponse>()
            .json(200, operations.MarketingGetPushTemplateResponse$, { key: "TemplateResult" })
            .fail([400, 403, 412, 429, "4XX", 500, 501, "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List campaigns
     */
    async listCampaigns(
        request: operations.MarketingListCampaignsRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingListCampaignsResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.MarketingListCampaignsRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/unified/marketing/campaigns")();

        const query$ = queryJoin$(
            encodeDeepObjectQuery$({
                filter: payload$.filter,
                proxy: payload$.proxy,
            }),
            encodeFormQuery$({
                fields: payload$.fields,
                next: payload$.next,
                page: payload$.page,
                page_size: payload$.page_size,
                raw: payload$.raw,
                updated_after: payload$.updated_after,
            })
        );

        const headers$ = new Headers({
            Accept: "application/json",
            "x-account-id": encodeSimple$("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "marketing_list_campaigns",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "403", "412", "429", "4XX", "500", "501", "5XX"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.MarketingListCampaignsResponse>()
            .json(200, operations.MarketingListCampaignsResponse$, { key: "CampaignsPaginated" })
            .fail([400, 403, 412, 429, "4XX", 500, 501, "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List email templates
     */
    async listEmailTemplates(
        request: operations.MarketingListEmailTemplatesRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingListEmailTemplatesResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.MarketingListEmailTemplatesRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/unified/marketing/templates/email")();

        const query$ = queryJoin$(
            encodeDeepObjectQuery$({
                filter: payload$.filter,
                proxy: payload$.proxy,
            }),
            encodeFormQuery$({
                fields: payload$.fields,
                next: payload$.next,
                page: payload$.page,
                page_size: payload$.page_size,
                raw: payload$.raw,
                updated_after: payload$.updated_after,
            })
        );

        const headers$ = new Headers({
            Accept: "application/json",
            "x-account-id": encodeSimple$("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "marketing_list_email_templates",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "403", "412", "429", "4XX", "500", "501", "5XX"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.MarketingListEmailTemplatesResponse>()
            .json(200, operations.MarketingListEmailTemplatesResponse$, {
                key: "TemplatesPaginated",
            })
            .fail([400, 403, 412, 429, "4XX", 500, 501, "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List omni-channel templates
     */
    async listOmniChannelTemplates(
        request: operations.MarketingListOmniChannelTemplatesRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingListOmniChannelTemplatesResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.MarketingListOmniChannelTemplatesRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/unified/marketing/templates/omni_channel")();

        const query$ = queryJoin$(
            encodeDeepObjectQuery$({
                filter: payload$.filter,
                proxy: payload$.proxy,
            }),
            encodeFormQuery$({
                fields: payload$.fields,
                next: payload$.next,
                page: payload$.page,
                page_size: payload$.page_size,
                raw: payload$.raw,
                updated_after: payload$.updated_after,
            })
        );

        const headers$ = new Headers({
            Accept: "application/json",
            "x-account-id": encodeSimple$("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "marketing_list_omni_channel_templates",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "403", "412", "429", "4XX", "500", "501", "5XX"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.MarketingListOmniChannelTemplatesResponse>()
            .json(200, operations.MarketingListOmniChannelTemplatesResponse$, {
                key: "TemplatesPaginated",
            })
            .fail([400, 403, 412, 429, "4XX", 500, 501, "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List push templates
     */
    async listPushTemplates(
        request: operations.MarketingListPushTemplatesRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingListPushTemplatesResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.MarketingListPushTemplatesRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/unified/marketing/templates/push")();

        const query$ = queryJoin$(
            encodeDeepObjectQuery$({
                filter: payload$.filter,
                proxy: payload$.proxy,
            }),
            encodeFormQuery$({
                fields: payload$.fields,
                next: payload$.next,
                page: payload$.page,
                page_size: payload$.page_size,
                raw: payload$.raw,
                updated_after: payload$.updated_after,
            })
        );

        const headers$ = new Headers({
            Accept: "application/json",
            "x-account-id": encodeSimple$("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "marketing_list_push_templates",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "403", "412", "429", "4XX", "500", "501", "5XX"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.MarketingListPushTemplatesResponse>()
            .json(200, operations.MarketingListPushTemplatesResponse$, {
                key: "TemplatesPaginated",
            })
            .fail([400, 403, 412, 429, "4XX", 500, 501, "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Update email template
     */
    async updateEmailTemplate(
        request: operations.MarketingUpdateEmailTemplateRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingUpdateEmailTemplateResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.MarketingUpdateEmailTemplateRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.MarketingCreateEmailTemplateRequestDto, {
            explode: true,
        });

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/unified/marketing/templates/email/{id}")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "x-account-id": encodeSimple$("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "marketing_update_email_template",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "403", "412", "429", "4XX", "500", "501", "5XX"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.MarketingUpdateEmailTemplateResponse>()
            .json(200, operations.MarketingUpdateEmailTemplateResponse$, { key: "CreateResult" })
            .fail([400, 403, 412, 429, "4XX", 500, 501, "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Update omni-channel template
     */
    async updateOmniChannelTemplate(
        request: operations.MarketingUpdateOmniChannelTemplateRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingUpdateOmniChannelTemplateResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.MarketingUpdateOmniChannelTemplateRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.MarketingCreateTemplateRequestDto, {
            explode: true,
        });

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/unified/marketing/templates/omni_channel/{id}")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "x-account-id": encodeSimple$("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "marketing_update_omni_channel_template",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "403", "412", "429", "4XX", "500", "501", "5XX"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] =
            await this.matcher<operations.MarketingUpdateOmniChannelTemplateResponse>()
                .json(200, operations.MarketingUpdateOmniChannelTemplateResponse$, {
                    key: "CreateResult",
                })
                .fail([400, 403, 412, 429, "4XX", 500, 501, "5XX"])
                .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Update push template
     */
    async updatePushTemplate(
        request: operations.MarketingUpdatePushTemplateRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingUpdatePushTemplateResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.MarketingUpdatePushTemplateRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.MarketingCreatePushTemplateRequestDto, {
            explode: true,
        });

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/unified/marketing/templates/push/{id}")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "x-account-id": encodeSimple$("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "marketing_update_push_template",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "403", "412", "429", "4XX", "500", "501", "5XX"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.MarketingUpdatePushTemplateResponse>()
            .json(200, operations.MarketingUpdatePushTemplateResponse$, { key: "CreateResult" })
            .fail([400, 403, 412, 429, "4XX", 500, 501, "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}
