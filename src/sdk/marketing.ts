/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../sdk/models/errors";
import * as operations from "../sdk/models/operations";

export class Marketing extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }
    /**
     * Create email template
     */
    async createEmailTemplate(
        input: operations.MarketingCreateEmailTemplateRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingCreateEmailTemplateResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ =
            operations.MarketingCreateEmailTemplateRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.MarketingCreateEmailTemplateRequestDto, {
            explode: true,
        });

        const path$ = this.templateURLComponent("/unified/marketing/templates/email")();

        headers$.set(
            "x-account-id",
            enc$.encodeSimple("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "post",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 201, "application/json")) {
            const responseBody = await response.json();
            const result = operations.MarketingCreateEmailTemplateResponse$.inboundSchema.parse({
                ...responseFields$,
                CreateTemplateResult: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Create omni-channel template
     */
    async createOmniChannelTemplate(
        input: operations.MarketingCreateOmniChannelTemplateRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingCreateOmniChannelTemplateResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ =
            operations.MarketingCreateOmniChannelTemplateRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.MarketingCreateTemplateRequestDto, {
            explode: true,
        });

        const path$ = this.templateURLComponent("/unified/marketing/templates/omni_channel")();

        headers$.set(
            "x-account-id",
            enc$.encodeSimple("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "post",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 201, "application/json")) {
            const responseBody = await response.json();
            const result =
                operations.MarketingCreateOmniChannelTemplateResponse$.inboundSchema.parse({
                    ...responseFields$,
                    CreateTemplateResult: responseBody,
                });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Create push template
     */
    async createPushTemplate(
        input: operations.MarketingCreatePushTemplateRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingCreatePushTemplateResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.MarketingCreatePushTemplateRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.MarketingCreatePushTemplateRequestDto, {
            explode: true,
        });

        const path$ = this.templateURLComponent("/unified/marketing/templates/push")();

        headers$.set(
            "x-account-id",
            enc$.encodeSimple("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "post",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 201, "application/json")) {
            const responseBody = await response.json();
            const result = operations.MarketingCreatePushTemplateResponse$.inboundSchema.parse({
                ...responseFields$,
                CreateTemplateResult: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get campaign
     */
    async getCampaign(
        input: operations.MarketingGetCampaignRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingGetCampaignResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.MarketingGetCampaignRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/unified/marketing/campaigns/{id}")(pathParams$);

        const query$ = [
            enc$.encodeForm("fields", payload$.fields, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("next", payload$.next, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("page", payload$.page, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("page_size", payload$.page_size, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("proxy", payload$.proxy, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("raw", payload$.raw, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("sync_token", payload$.sync_token, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("updated_after", payload$.updated_after, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        headers$.set(
            "x-account-id",
            enc$.encodeSimple("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "get",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.MarketingGetCampaignResponse$.inboundSchema.parse({
                ...responseFields$,
                CampaignResult: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get email template
     */
    async getEmailTemplate(
        input: operations.MarketingGetEmailTemplateRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingGetEmailTemplateResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.MarketingGetEmailTemplateRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/unified/marketing/templates/email/{id}")(
            pathParams$
        );

        const query$ = [
            enc$.encodeForm("fields", payload$.fields, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("next", payload$.next, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("page", payload$.page, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("page_size", payload$.page_size, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("proxy", payload$.proxy, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("raw", payload$.raw, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("sync_token", payload$.sync_token, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("updated_after", payload$.updated_after, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        headers$.set(
            "x-account-id",
            enc$.encodeSimple("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "get",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.MarketingGetEmailTemplateResponse$.inboundSchema.parse({
                ...responseFields$,
                TemplateResult: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get omni-channel template
     */
    async getOmniChannelTemplate(
        input: operations.MarketingGetOmniChannelTemplateRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingGetOmniChannelTemplateResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ =
            operations.MarketingGetOmniChannelTemplateRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/unified/marketing/templates/omni_channel/{id}")(
            pathParams$
        );

        const query$ = [
            enc$.encodeForm("fields", payload$.fields, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("next", payload$.next, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("page", payload$.page, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("page_size", payload$.page_size, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("proxy", payload$.proxy, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("raw", payload$.raw, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("sync_token", payload$.sync_token, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("updated_after", payload$.updated_after, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        headers$.set(
            "x-account-id",
            enc$.encodeSimple("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "get",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.MarketingGetOmniChannelTemplateResponse$.inboundSchema.parse({
                ...responseFields$,
                TemplateResult: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get push template
     */
    async getPushTemplate(
        input: operations.MarketingGetPushTemplateRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingGetPushTemplateResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.MarketingGetPushTemplateRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/unified/marketing/templates/push/{id}")(
            pathParams$
        );

        const query$ = [
            enc$.encodeForm("fields", payload$.fields, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("next", payload$.next, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("page", payload$.page, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("page_size", payload$.page_size, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("proxy", payload$.proxy, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("raw", payload$.raw, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("sync_token", payload$.sync_token, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("updated_after", payload$.updated_after, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        headers$.set(
            "x-account-id",
            enc$.encodeSimple("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "get",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.MarketingGetPushTemplateResponse$.inboundSchema.parse({
                ...responseFields$,
                TemplateResult: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List campaigns
     */
    async listCampaigns(
        input: operations.MarketingListCampaignsRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingListCampaignsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.MarketingListCampaignsRequest$.outboundSchema.parse(input);
        const body$ = null;

        const path$ = this.templateURLComponent("/unified/marketing/campaigns")();

        const query$ = [
            enc$.encodeForm("fields", payload$.fields, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("next", payload$.next, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("page", payload$.page, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("page_size", payload$.page_size, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("proxy", payload$.proxy, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("raw", payload$.raw, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("sync_token", payload$.sync_token, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("updated_after", payload$.updated_after, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        headers$.set(
            "x-account-id",
            enc$.encodeSimple("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "get",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.MarketingListCampaignsResponse$.inboundSchema.parse({
                ...responseFields$,
                CampaignsPaginated: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List email templates
     */
    async listEmailTemplates(
        input: operations.MarketingListEmailTemplatesRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingListEmailTemplatesResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.MarketingListEmailTemplatesRequest$.outboundSchema.parse(input);
        const body$ = null;

        const path$ = this.templateURLComponent("/unified/marketing/templates/email")();

        const query$ = [
            enc$.encodeForm("fields", payload$.fields, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("next", payload$.next, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("page", payload$.page, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("page_size", payload$.page_size, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("proxy", payload$.proxy, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("raw", payload$.raw, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("sync_token", payload$.sync_token, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("updated_after", payload$.updated_after, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        headers$.set(
            "x-account-id",
            enc$.encodeSimple("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "get",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.MarketingListEmailTemplatesResponse$.inboundSchema.parse({
                ...responseFields$,
                TemplatesPaginated: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List omni-channel templates
     */
    async listOmniChannelTemplates(
        input: operations.MarketingListOmniChannelTemplatesRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingListOmniChannelTemplatesResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ =
            operations.MarketingListOmniChannelTemplatesRequest$.outboundSchema.parse(input);
        const body$ = null;

        const path$ = this.templateURLComponent("/unified/marketing/templates/omni_channel")();

        const query$ = [
            enc$.encodeForm("fields", payload$.fields, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("next", payload$.next, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("page", payload$.page, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("page_size", payload$.page_size, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("proxy", payload$.proxy, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("raw", payload$.raw, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("sync_token", payload$.sync_token, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("updated_after", payload$.updated_after, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        headers$.set(
            "x-account-id",
            enc$.encodeSimple("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "get",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result =
                operations.MarketingListOmniChannelTemplatesResponse$.inboundSchema.parse({
                    ...responseFields$,
                    TemplatesPaginated: responseBody,
                });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List push templates
     */
    async listPushTemplates(
        input: operations.MarketingListPushTemplatesRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingListPushTemplatesResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.MarketingListPushTemplatesRequest$.outboundSchema.parse(input);
        const body$ = null;

        const path$ = this.templateURLComponent("/unified/marketing/templates/push")();

        const query$ = [
            enc$.encodeForm("fields", payload$.fields, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("next", payload$.next, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("page", payload$.page, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("page_size", payload$.page_size, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("proxy", payload$.proxy, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("raw", payload$.raw, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("sync_token", payload$.sync_token, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("updated_after", payload$.updated_after, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        headers$.set(
            "x-account-id",
            enc$.encodeSimple("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "get",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.MarketingListPushTemplatesResponse$.inboundSchema.parse({
                ...responseFields$,
                TemplatesPaginated: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Update email template
     */
    async updateEmailTemplate(
        input: operations.MarketingUpdateEmailTemplateRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingUpdateEmailTemplateResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ =
            operations.MarketingUpdateEmailTemplateRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.MarketingCreateEmailTemplateRequestDto, {
            explode: true,
        });

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/unified/marketing/templates/email/{id}")(
            pathParams$
        );

        headers$.set(
            "x-account-id",
            enc$.encodeSimple("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "patch",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.MarketingUpdateEmailTemplateResponse$.inboundSchema.parse({
                ...responseFields$,
                CreateTemplateResult: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Update omni-channel template
     */
    async updateOmniChannelTemplate(
        input: operations.MarketingUpdateOmniChannelTemplateRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingUpdateOmniChannelTemplateResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ =
            operations.MarketingUpdateOmniChannelTemplateRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.MarketingCreateTemplateRequestDto, {
            explode: true,
        });

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/unified/marketing/templates/omni_channel/{id}")(
            pathParams$
        );

        headers$.set(
            "x-account-id",
            enc$.encodeSimple("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "patch",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result =
                operations.MarketingUpdateOmniChannelTemplateResponse$.inboundSchema.parse({
                    ...responseFields$,
                    CreateTemplateResult: responseBody,
                });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Update push template
     */
    async updatePushTemplate(
        input: operations.MarketingUpdatePushTemplateRequest,
        options?: RequestOptions
    ): Promise<operations.MarketingUpdatePushTemplateResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.MarketingUpdatePushTemplateRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.MarketingCreatePushTemplateRequestDto, {
            explode: true,
        });

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/unified/marketing/templates/push/{id}")(
            pathParams$
        );

        headers$.set(
            "x-account-id",
            enc$.encodeSimple("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "patch",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.MarketingUpdatePushTemplateResponse$.inboundSchema.parse({
                ...responseFields$,
                CreateTemplateResult: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }
}
