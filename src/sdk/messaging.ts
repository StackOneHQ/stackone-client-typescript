/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { messagingCreateConversation } from "../funcs/messagingCreateConversation.js";
import { messagingDownloadMessagingAttachment } from "../funcs/messagingDownloadMessagingAttachment.js";
import { messagingGetAttachment } from "../funcs/messagingGetAttachment.js";
import { messagingGetConversation } from "../funcs/messagingGetConversation.js";
import { messagingGetMessage } from "../funcs/messagingGetMessage.js";
import { messagingGetUser } from "../funcs/messagingGetUser.js";
import { messagingListAttachments } from "../funcs/messagingListAttachments.js";
import { messagingListConversationMessages } from "../funcs/messagingListConversationMessages.js";
import { messagingListConversations } from "../funcs/messagingListConversations.js";
import { messagingListUsers } from "../funcs/messagingListUsers.js";
import { messagingSendMessage } from "../funcs/messagingSendMessage.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { PageIterator, unwrapResultIterator } from "../sdk/types/operations.js";
import * as operations from "./models/operations/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Messaging extends ClientSDK {
  /**
   * Create Conversation
   */
  async createConversation(
    request: operations.MessagingCreateConversationRequest,
    options?: RequestOptions,
  ): Promise<operations.MessagingCreateConversationResponse> {
    return unwrapAsync(messagingCreateConversation(
      this,
      request,
      options,
    ));
  }

  /**
   * Download Attachment
   */
  async downloadMessagingAttachment(
    request: operations.MessagingDownloadMessagingAttachmentRequest,
    options?: RequestOptions,
  ): Promise<operations.MessagingDownloadMessagingAttachmentResponse> {
    return unwrapAsync(messagingDownloadMessagingAttachment(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Attachment
   */
  async getAttachment(
    request: operations.MessagingGetAttachmentRequest,
    options?: RequestOptions,
  ): Promise<operations.MessagingGetAttachmentResponse> {
    return unwrapAsync(messagingGetAttachment(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Conversation
   */
  async getConversation(
    request: operations.MessagingGetConversationRequest,
    options?: RequestOptions,
  ): Promise<operations.MessagingGetConversationResponse> {
    return unwrapAsync(messagingGetConversation(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Message
   */
  async getMessage(
    request: operations.MessagingGetMessageRequest,
    options?: RequestOptions,
  ): Promise<operations.MessagingGetMessageResponse> {
    return unwrapAsync(messagingGetMessage(
      this,
      request,
      options,
    ));
  }

  /**
   * Get User
   */
  async getUser(
    request: operations.MessagingGetUserRequest,
    options?: RequestOptions,
  ): Promise<operations.MessagingGetUserResponse> {
    return unwrapAsync(messagingGetUser(
      this,
      request,
      options,
    ));
  }

  /**
   * List Attachments
   */
  async listAttachments(
    request: operations.MessagingListAttachmentsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.MessagingListAttachmentsResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(messagingListAttachments(
      this,
      request,
      options,
    ));
  }

  /**
   * List Conversation Messages
   */
  async listConversationMessages(
    request: operations.MessagingListConversationMessagesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.MessagingListConversationMessagesResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(messagingListConversationMessages(
      this,
      request,
      options,
    ));
  }

  /**
   * List Conversations
   */
  async listConversations(
    request: operations.MessagingListConversationsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.MessagingListConversationsResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(messagingListConversations(
      this,
      request,
      options,
    ));
  }

  /**
   * List Users
   */
  async listUsers(
    request: operations.MessagingListUsersRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.MessagingListUsersResponse, { cursor: string }>
  > {
    return unwrapResultIterator(messagingListUsers(
      this,
      request,
      options,
    ));
  }

  /**
   * Send Message
   */
  async sendMessage(
    request: operations.MessagingSendMessageRequest,
    options?: RequestOptions,
  ): Promise<operations.MessagingSendMessageResponse> {
    return unwrapAsync(messagingSendMessage(
      this,
      request,
      options,
    ));
  }
}
