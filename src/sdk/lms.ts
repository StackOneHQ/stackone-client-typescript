/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import {
    encodeDeepObjectQuery as encodeDeepObjectQuery$,
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
    queryJoin as queryJoin$,
} from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";

export class Lms extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Create Completion
     */
    async createCompletion(
        request: operations.LmsCreateCompletionRequest,
        options?: RequestOptions
    ): Promise<operations.LmsCreateCompletionResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.LmsCreateCompletionRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.LmsCreateCompletionRequestDto, {
            explode: true,
        });

        const path$ = this.templateURLComponent("/unified/lms/completions")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "x-account-id": encodeSimple$("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "lms_create_completion",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "403", "412", "429", "4XX", "500", "501", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.LmsCreateCompletionResponse>()
            .json(201, operations.LmsCreateCompletionResponse$inboundSchema, {
                key: "CreateResult",
            })
            .fail([400, 403, 412, 429, "4XX", 500, 501, "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Create Content
     */
    async createContent(
        request: operations.LmsCreateContentRequest,
        options?: RequestOptions
    ): Promise<operations.LmsCreateContentResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.LmsCreateContentRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.LmsCreateContentRequestDto, { explode: true });

        const path$ = this.templateURLComponent("/unified/lms/content")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "x-account-id": encodeSimple$("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "lms_create_content",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "403", "412", "429", "4XX", "500", "501", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.LmsCreateContentResponse>()
            .json(201, operations.LmsCreateContentResponse$inboundSchema, { key: "CreateResult" })
            .fail([400, 403, 412, 429, "4XX", 500, 501, "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get Category
     */
    async getCategory(
        request: operations.LmsGetCategoryRequest,
        options?: RequestOptions
    ): Promise<operations.LmsGetCategoryResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.LmsGetCategoryRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/unified/lms/categories/{id}")(pathParams$);

        const query$ = encodeFormQuery$({
            fields: payload$.fields,
            proxy: payload$.proxy,
            raw: payload$.raw,
        });

        const headers$ = new Headers({
            Accept: "application/json",
            "x-account-id": encodeSimple$("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "lms_get_category",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "403", "412", "429", "4XX", "500", "501", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.LmsGetCategoryResponse>()
            .json(200, operations.LmsGetCategoryResponse$inboundSchema, { key: "CategoryResult" })
            .fail([400, 403, 412, 429, "4XX", 500, 501, "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get Completion
     */
    async getCompletion(
        request: operations.LmsGetCompletionRequest,
        options?: RequestOptions
    ): Promise<operations.LmsGetCompletionResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.LmsGetCompletionRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/unified/lms/completions/{id}")(pathParams$);

        const query$ = encodeFormQuery$({
            fields: payload$.fields,
            proxy: payload$.proxy,
            raw: payload$.raw,
        });

        const headers$ = new Headers({
            Accept: "application/json",
            "x-account-id": encodeSimple$("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "lms_get_completion",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "403", "412", "429", "4XX", "500", "501", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.LmsGetCompletionResponse>()
            .json(200, operations.LmsGetCompletionResponse$inboundSchema, {
                key: "CompletionResult",
            })
            .fail([400, 403, 412, 429, "4XX", 500, 501, "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get Content
     */
    async getContent(
        request: operations.LmsGetContentRequest,
        options?: RequestOptions
    ): Promise<operations.LmsGetContentResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.LmsGetContentRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/unified/lms/content/{id}")(pathParams$);

        const query$ = encodeFormQuery$({
            fields: payload$.fields,
            proxy: payload$.proxy,
            raw: payload$.raw,
        });

        const headers$ = new Headers({
            Accept: "application/json",
            "x-account-id": encodeSimple$("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "lms_get_content",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "403", "412", "429", "4XX", "500", "501", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.LmsGetContentResponse>()
            .json(200, operations.LmsGetContentResponse$inboundSchema, { key: "ContentResult" })
            .fail([400, 403, 412, 429, "4XX", 500, 501, "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List Categories
     */
    async listCategories(
        request: operations.LmsListCategoriesRequest,
        options?: RequestOptions
    ): Promise<operations.LmsListCategoriesResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.LmsListCategoriesRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/unified/lms/categories")();

        const query$ = queryJoin$(
            encodeDeepObjectQuery$({
                proxy: payload$.proxy,
            }),
            encodeFormQuery$({
                fields: payload$.fields,
                filter: payload$.filter,
                next: payload$.next,
                page: payload$.page,
                page_size: payload$.page_size,
                raw: payload$.raw,
                updated_after: payload$.updated_after,
            })
        );

        const headers$ = new Headers({
            Accept: "application/json",
            "x-account-id": encodeSimple$("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "lms_list_categories",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "403", "412", "429", "4XX", "500", "501", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.LmsListCategoriesResponse>()
            .json(200, operations.LmsListCategoriesResponse$inboundSchema, {
                key: "CategoriesPaginated",
            })
            .fail([400, 403, 412, 429, "4XX", 500, 501, "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List Content
     */
    async listContent(
        request: operations.LmsListContentRequest,
        options?: RequestOptions
    ): Promise<operations.LmsListContentResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.LmsListContentRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/unified/lms/content")();

        const query$ = queryJoin$(
            encodeDeepObjectQuery$({
                filter: payload$.filter,
                proxy: payload$.proxy,
            }),
            encodeFormQuery$({
                fields: payload$.fields,
                next: payload$.next,
                page: payload$.page,
                page_size: payload$.page_size,
                raw: payload$.raw,
                updated_after: payload$.updated_after,
            })
        );

        const headers$ = new Headers({
            Accept: "application/json",
            "x-account-id": encodeSimple$("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "lms_list_content",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "403", "412", "429", "4XX", "500", "501", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.LmsListContentResponse>()
            .json(200, operations.LmsListContentResponse$inboundSchema, { key: "ContentPaginated" })
            .fail([400, 403, 412, 429, "4XX", 500, 501, "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Update Content
     */
    async updateContent(
        request: operations.LmsUpdateContentRequest,
        options?: RequestOptions
    ): Promise<operations.LmsUpdateContentResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.LmsUpdateContentRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.LmsCreateContentRequestDto, { explode: true });

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/unified/lms/content/{id}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "x-account-id": encodeSimple$("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "lms_update_content",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "403", "412", "429", "4XX", "500", "501", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.LmsUpdateContentResponse>()
            .json(201, operations.LmsUpdateContentResponse$inboundSchema, { key: "UpdateResult" })
            .fail([400, 403, 412, 429, "4XX", 500, 501, "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Upsert Content
     */
    async upsertContent(
        request: operations.LmsUpsertContentRequest,
        options?: RequestOptions
    ): Promise<operations.LmsUpsertContentResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.LmsUpsertContentRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.LmsUpsertContentRequestDto, { explode: true });

        const path$ = this.templateURLComponent("/unified/lms/content")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "x-account-id": encodeSimple$("x-account-id", payload$["x-account-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "lms_upsert_content",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "403", "412", "429", "4XX", "500", "501", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.LmsUpsertContentResponse>()
            .json(201, operations.LmsUpsertContentResponse$inboundSchema, { key: "CreateResult" })
            .fail([400, 403, 412, 429, "4XX", 500, 501, "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}
