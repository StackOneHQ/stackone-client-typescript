/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { lmsCreateCompletion } from "../funcs/lmsCreateCompletion.js";
import { lmsCreateContent } from "../funcs/lmsCreateContent.js";
import { lmsGetAssignment } from "../funcs/lmsGetAssignment.js";
import { lmsGetCategory } from "../funcs/lmsGetCategory.js";
import { lmsGetContent } from "../funcs/lmsGetContent.js";
import { lmsGetCourse } from "../funcs/lmsGetCourse.js";
import { lmsGetUser } from "../funcs/lmsGetUser.js";
import { lmsListAssignments } from "../funcs/lmsListAssignments.js";
import { lmsListCategories } from "../funcs/lmsListCategories.js";
import { lmsListCompletions } from "../funcs/lmsListCompletions.js";
import { lmsListContent } from "../funcs/lmsListContent.js";
import { lmsListCourses } from "../funcs/lmsListCourses.js";
import { lmsListUsers } from "../funcs/lmsListUsers.js";
import { lmsUpdateContent } from "../funcs/lmsUpdateContent.js";
import { lmsUpsertContent } from "../funcs/lmsUpsertContent.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Lms extends ClientSDK {
    /**
     * Create User Completion
     */
    async createCompletion(
        request: operations.LmsCreateCompletionRequest,
        options?: RequestOptions
    ): Promise<operations.LmsCreateCompletionResponse> {
        return unwrapAsync(lmsCreateCompletion(this, request, options));
    }

    /**
     * Create Content
     */
    async createContent(
        request: operations.LmsCreateContentRequest,
        options?: RequestOptions
    ): Promise<operations.LmsCreateContentResponse> {
        return unwrapAsync(lmsCreateContent(this, request, options));
    }

    /**
     * Get User Assignment
     */
    async getAssignment(
        request: operations.LmsGetAssignmentRequest,
        options?: RequestOptions
    ): Promise<operations.LmsGetAssignmentResponse> {
        return unwrapAsync(lmsGetAssignment(this, request, options));
    }

    /**
     * Get Category
     */
    async getCategory(
        request: operations.LmsGetCategoryRequest,
        options?: RequestOptions
    ): Promise<operations.LmsGetCategoryResponse> {
        return unwrapAsync(lmsGetCategory(this, request, options));
    }

    /**
     * Get Content
     */
    async getContent(
        request: operations.LmsGetContentRequest,
        options?: RequestOptions
    ): Promise<operations.LmsGetContentResponse> {
        return unwrapAsync(lmsGetContent(this, request, options));
    }

    /**
     * Get Course
     */
    async getCourse(
        request: operations.LmsGetCourseRequest,
        options?: RequestOptions
    ): Promise<operations.LmsGetCourseResponse> {
        return unwrapAsync(lmsGetCourse(this, request, options));
    }

    /**
     * Get User
     */
    async getUser(
        request: operations.LmsGetUserRequest,
        options?: RequestOptions
    ): Promise<operations.LmsGetUserResponse> {
        return unwrapAsync(lmsGetUser(this, request, options));
    }

    /**
     * List User Assignments
     */
    async listAssignments(
        request: operations.LmsListAssignmentsRequest,
        options?: RequestOptions
    ): Promise<operations.LmsListAssignmentsResponse> {
        return unwrapAsync(lmsListAssignments(this, request, options));
    }

    /**
     * List Categories
     */
    async listCategories(
        request: operations.LmsListCategoriesRequest,
        options?: RequestOptions
    ): Promise<operations.LmsListCategoriesResponse> {
        return unwrapAsync(lmsListCategories(this, request, options));
    }

    /**
     * List User Completions
     */
    async listCompletions(
        request: operations.LmsListCompletionsRequest,
        options?: RequestOptions
    ): Promise<operations.LmsListCompletionsResponse> {
        return unwrapAsync(lmsListCompletions(this, request, options));
    }

    /**
     * List Content
     */
    async listContent(
        request: operations.LmsListContentRequest,
        options?: RequestOptions
    ): Promise<operations.LmsListContentResponse> {
        return unwrapAsync(lmsListContent(this, request, options));
    }

    /**
     * List Courses
     */
    async listCourses(
        request: operations.LmsListCoursesRequest,
        options?: RequestOptions
    ): Promise<operations.LmsListCoursesResponse> {
        return unwrapAsync(lmsListCourses(this, request, options));
    }

    /**
     * List Users
     */
    async listUsers(
        request: operations.LmsListUsersRequest,
        options?: RequestOptions
    ): Promise<operations.LmsListUsersResponse> {
        return unwrapAsync(lmsListUsers(this, request, options));
    }

    /**
     * Update Content
     */
    async updateContent(
        request: operations.LmsUpdateContentRequest,
        options?: RequestOptions
    ): Promise<operations.LmsUpdateContentResponse> {
        return unwrapAsync(lmsUpdateContent(this, request, options));
    }

    /**
     * Upsert Content
     */
    async upsertContent(
        request: operations.LmsUpsertContentRequest,
        options?: RequestOptions
    ): Promise<operations.LmsUpsertContentResponse> {
        return unwrapAsync(lmsUpsertContent(this, request, options));
    }
}
