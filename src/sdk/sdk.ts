/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDKOptions, serverURLFromOptions } from "../lib/config";
import { HTTPClient } from "../lib/http";
import { ClientSDK } from "../lib/sdks";
import { Accounts } from "./accounts";
import { Ats } from "./ats";
import { Connectors } from "./connectors";
import { ConnectSessions } from "./connectsessions";
import { Crm } from "./crm";
import { Hris } from "./hris";
import { Iam } from "./iam";
import { Marketing } from "./marketing";
import { Proxy } from "./proxy";

export class StackOne extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _accounts?: Accounts;
    get accounts() {
        return (this._accounts ??= new Accounts(this.options$));
    }

    private _connectSessions?: ConnectSessions;
    get connectSessions() {
        return (this._connectSessions ??= new ConnectSessions(this.options$));
    }

    private _connectors?: Connectors;
    get connectors() {
        return (this._connectors ??= new Connectors(this.options$));
    }

    private _ats?: Ats;
    get ats() {
        return (this._ats ??= new Ats(this.options$));
    }

    private _crm?: Crm;
    get crm() {
        return (this._crm ??= new Crm(this.options$));
    }

    private _hris?: Hris;
    get hris() {
        return (this._hris ??= new Hris(this.options$));
    }

    private _iam?: Iam;
    get iam() {
        return (this._iam ??= new Iam(this.options$));
    }

    private _marketing?: Marketing;
    get marketing() {
        return (this._marketing ??= new Marketing(this.options$));
    }

    private _proxy?: Proxy;
    get proxy() {
        return (this._proxy ??= new Proxy(this.options$));
    }
}
