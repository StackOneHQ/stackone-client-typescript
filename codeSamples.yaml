overlay: 1.0.0
info:
  title: CodeSamples overlay for typescript target
  version: 0.0.0
actions:
  - target: $["paths"]["/unified/crm/contacts/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: crm_update_contact
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.updateContact({
                id: "<id>",
                xAccountId: "<value>",
                crmCreateContactRequestDto: {
                  firstName: "Steve",
                  lastName: "Wozniak",
                  companyName: "Apple Inc.",
                  emails: [
                    "steve@apple.com",
                  ],
                  phoneNumbers: [
                    "123-456-7890",
                  ],
                  dealIds: [
                    "deal-001",
                    "deal-002",
                  ],
                  accountIds: [
                    "account-123",
                    "account-456",
                  ],
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/iam/groups/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: iam_get_group
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getGroup({
                id: "<id>",
                fields: "id,parent_id,name,description,roles,type,created_at,updated_at",
                expand: "roles",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_employment
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getEmployment({
                id: "<id>",
                fields: "id,employee_id,job_title,pay_rate,pay_period,pay_frequency,pay_currency,effective_date,employment_type,employment_contract_type,created_at,updated_at",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/departments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_departments
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listDepartments({
                fields: "id,name",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/interview_stages/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_interview_stage
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getInterviewStage({
                id: "<id>",
                fields: "id,name,order,created_at,updated_at",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/rejected_reasons/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_rejected_reason
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getRejectedReason({
                id: "<id>",
                fields: "id,label,type,rejected_reason_type",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounts/{id}/meta"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_get_account_meta_info
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getAccountMetaInfo({
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/groups/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_group
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getGroup({
                id: "<id>",
                fields: "id,name,type,parent_ids",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/applications/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_update_application
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.updateApplication({
                id: "<id>",
                xAccountId: "<value>",
                atsUpdateApplicationRequestDto: {
                  rejectedReasonId: "f223d7f6-908b-48f0-9237-b201c307f609",
                  interviewStageId: "18bcbb1b-3cbc-4198-a999-460861d19480",
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/job_postings/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_job_posting
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getJobPosting({
                id: "<id>",
                fields: "id,title,locations,internal,status,job_id,content,compensation,employment_type,employment_contract_type,external_url,external_apply_url,questionnaires,updated_at,created_at",
                include: "questionnaires",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/iam/policies/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: iam_get_policy
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getPolicy({
                id: "<id>",
                fields: "id,name,permissions,description,created_at,updated_at",
                expand: "permissions",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}/time_off"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_employee_time_off_requests
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listEmployeeTimeOffRequests({
                id: "<id>",
                fields: "id,employee_id,approver_id,status,type,start_date,end_date,created_at,updated_at",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/time_off/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_time_off_request
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getTimeOffRequest({
                id: "<id>",
                fields: "id,employee_id,approver_id,status,type,start_date,end_date,created_at,updated_at",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/campaigns/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_get_campaign
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getCampaign({
                id: "<id>",
                fields: "id,name,created_at,updated_at,description,schedule_type,status,channels,first_sent_at,last_sent_at,tags,messages",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/applications/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_application
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getApplication({
                id: "<id>",
                fields: "id,candidate_id,job_id,interview_stage,interview_stage_id,rejected_reason,rejected_reason_id,rejected_reason_ids,rejected_reasons,rejected_at,location_id,location_ids,status,application_status,questionnaires,attachments,result_links,created_at,updated_at,documents,candidate",
                expand: "documents",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/applications/{id}/documents/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_application_document
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getApplicationDocument({
                id: "<id>",
                subResourceId: "<value>",
                fields: "id,name,path,type,contents,created_at,updated_at",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/job_postings"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_job_postings
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listJobPostings({
                fields: "id,title,locations,internal,status,job_id,content,compensation,employment_type,employment_contract_type,external_url,external_apply_url,questionnaires,updated_at,created_at",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                include: "questionnaires",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/crm/contacts"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: crm_create_contact
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.createContact({
                xAccountId: "<value>",
                crmCreateContactRequestDto: {
                  firstName: "Steve",
                  lastName: "Wozniak",
                  companyName: "Apple Inc.",
                  emails: [
                    "steve@apple.com",
                  ],
                  phoneNumbers: [
                    "123-456-7890",
                  ],
                  dealIds: [
                    "deal-001",
                    "deal-002",
                  ],
                  accountIds: [
                    "account-123",
                    "account-456",
                  ],
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/time_off"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_time_off_requests
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listTimeOffRequests({
                fields: "id,employee_id,approver_id,status,type,start_date,end_date,created_at,updated_at",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/jobs/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_job
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getJob({
                id: "<id>",
                fields: "id,code,title,status,job_status,department_ids,location_ids,hiring_team,interview_stages,confidential,created_at,updated_at",
                expand: "job_postings,interview_stages",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/crm/accounts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: crm_get_account
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getAccount({
                id: "<id>",
                fields: "id,owner_id,name,description,industries,annual_revenue,website,addresses,phone_numbers,created_at,updated_at",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}/documents"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_employee_documents
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listEmployeeDocuments({
                id: "<id>",
                fields: "id,name,path,type,contents,created_at,updated_at",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/applications/{id}/offers"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_applications_offers
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listApplicationsOffers({
                id: "<id>",
                fields: "id,application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/candidates/{id}/notes"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_candidate_notes
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listCandidateNotes({
                id: "<id>",
                fields: "id,content,author_id,visibility,created_at,updated_at,deleted_at",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/offers/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_offer
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getOffer({
                id: "<id>",
                fields: "id,application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/iam/roles/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: iam_get_role
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getRole({
                id: "<id>",
                fields: "id,name,type,policies,description,created_at,updated_at",
                expand: "policies",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/applications/{id}/scorecards/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_application_scorecard
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getApplicationScorecard({
                id: "<id>",
                subResourceId: "<value>",
                fields: "id,sections,label,candidate_id,application_id,interview_id,author_id,overall_recommendation,created_at,updated_at",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/connect_sessions"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_create_connect_session
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";
            import { Categories } from "@stackone/stackone-client-ts/sdk/models/shared";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.createConnectSession({
                categories: [
                  Categories.Ats,
                  Categories.Hris,
                  Categories.HrisLegacy,
                  Categories.Crm,
                  Categories.Iam,
                  Categories.Marketing,
                  Categories.Stackone,
                ],
                originOwnerId: "<value>",
                originOwnerName: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/proxy"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_proxy_request
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.proxyRequest({
                xAccountId: "<value>",
                proxyRequestBody: {
                  url: "https://api.sample-integration.com/v1",
                  path: "/employees/directory",
                  headers: {
                    "Content-Type": "application/json",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/locations"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_locations
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listLocations({
                fields: "id,employee_id,name,phone_number,street_1,street_2,city,state,zip_code,country,location_type,created_at,updated_at",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/applications/{id}/offers/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_application_offer
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getApplicationOffer({
                id: "<id>",
                subResourceId: "<value>",
                fields: "id,application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/email/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_get_email_template
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getEmailTemplate({
                id: "<id>",
                fields: "id,name,messages,created_at,updated_at,tags",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/candidates/{id}/notes/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_candidate_note
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getCandidateNote({
                id: "<id>",
                subResourceId: "<value>",
                fields: "id,content,author_id,visibility,created_at,updated_at,deleted_at",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}/work_eligibility"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_create_employee_work_eligibility_request
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";
            import { ContentValue, HrisCreateWorkEligibilityRequestDtoSchemasValue } from "@stackone/stackone-client-ts/sdk/models/shared";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.createEmployeeWorkEligibilityRequest({
                id: "<id>",
                xAccountId: "<value>",
                hrisCreateWorkEligibilityRequestDto: {
                  type: {},
                  subType: "H1B",
                  document: {
                    id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                    remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                    name: "My Document",
                    path: "/path/to/file",
                    category: "templates, forms, backups, etc.",
                    contents: [
                      {
                        url: "https://example.com/file.pdf",
                        unifiedUrl: "https://api.stackone.com/unified/hris/employees/12345/documents/67890/download",
                        fileFormat: {
                          value: ContentValue.Pdf,
                        sourceValue: "abc",
                        },
                      },
                    ],
                    createdAt: new Date("2021-01-01T01:01:01.000Z"),
                    updatedAt: new Date("2021-01-02T01:01:01.000Z"),
                  },
                  validFrom: new Date("2021-01-01T00:00.000Z"),
                  validTo: new Date("2021-01-01T00:00.000Z"),
                  issuedBy: {
                    value: HrisCreateWorkEligibilityRequestDtoSchemasValue.Us,
                  },
                  number: "1234567890",
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/time_off"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_create_time_off_request
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.createTimeOffRequest({
                xAccountId: "<value>",
                hrisCreateTimeOffRequestDto: {
                  employeeId: "1687-3",
                  approverId: "1687-4",
                  startDate: new Date("2021-01-01T01:01:01.000Z"),
                  endDate: new Date("2021-01-01T01:01:01.000Z"),
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/interviews"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_interviews
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listInterviews({
                fields: "id,application_id,interview_stage_id,interview_stage,status,interview_status,interviewer_ids,interview_parts,interviewers,start_at,end_at,meeting_url,created_at,updated_at",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/interviews/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_interview
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getInterview({
                id: "<id>",
                fields: "id,application_id,interview_stage_id,interview_stage,status,interview_status,interviewer_ids,interview_parts,interviewers,start_at,end_at,meeting_url,created_at,updated_at",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/jobs"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_jobs
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listJobs({
                fields: "id,code,title,status,job_status,department_ids,location_ids,hiring_team,interview_stages,confidential,created_at,updated_at",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                expand: "job_postings,interview_stages",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/groups"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_groups
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listGroups({
                fields: "id,name,type,parent_ids",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/applications/{id}/documents"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_application_documents
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listApplicationDocuments({
                id: "<id>",
                fields: "id,name,path,type,contents,created_at,updated_at",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/omni_channel"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_list_omni_channel_templates
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listOmniChannelTemplates({
                fields: "id,name,messages,created_at,updated_at,tags",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/crm/lists/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: crm_get_list
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getList({
                id: "<id>",
                fields: "id,name,created_at,updated_at,items,type",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/iam/policies"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: iam_list_policies
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listPolicies({
                fields: "id,name,permissions,description,created_at,updated_at",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                expand: "permissions",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/users"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_users
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listUsers({
                fields: "id,first_name,last_name,name,email",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/push"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_create_push_template
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.createPushTemplate({
                xAccountId: "<value>",
                marketingCreatePushTemplateRequestDto: {
                  id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                  remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                  messages: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      messageType: {
                      sourceValue: "Email",
                      },
                    },
                  ],
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/candidates"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_create_candidate
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.createCandidate({
                xAccountId: "<value>",
                atsCreateCandidateRequestDto: {
                  name: "Romain Sestier",
                  firstName: "Romain",
                  lastName: "Sestier",
                  email: "sestier.romain123@gmail.com",
                  socialLinks: [
                    {
                      type: "linkedin",
                      url: "https://www.linkedin.com/in/romainsestier/",
                    },
                  ],
                  company: "Company Inc.",
                  title: "Software Engineer",
                  hiredAt: new Date("2021-01-01T01:01:01.000Z"),
                  country: "United States",
                  phoneNumber: "+1234567890",
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/benefits/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_benefit
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getBenefit({
                id: "<id>",
                fields: "id,name,benefit_type,provider,description,created_at,updated_at",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/crm/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: crm_list_contacts
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listContacts({
                fields: "id,first_name,last_name,company_name,emails,phone_numbers,deal_ids,account_ids,custom_fields,created_at,updated_at",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                include: "custom_fields",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/push/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_update_push_template
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.updatePushTemplate({
                id: "<id>",
                xAccountId: "<value>",
                marketingCreatePushTemplateRequestDto: {
                  id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                  remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                  messages: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      messageType: {
                      sourceValue: "Email",
                      },
                    },
                  ],
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/interview_stages"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_interview_stages
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listInterviewStages({
                fields: "id,name,order,created_at,updated_at",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/applications/{id}/documents/{subResourceId}/download"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_download_application_document
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.downloadApplicationDocument({
                id: "<id>",
                subResourceId: "<value>",
                format: "base64",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/candidates/{id}/notes"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_create_candidate_note
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";
            import { AtsCreateNotesRequestDtoValue } from "@stackone/stackone-client-ts/sdk/models/shared";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.createCandidateNote({
                id: "<id>",
                xAccountId: "<value>",
                atsCreateNotesRequestDto: {
                  content: [
                    {
                      body: "This candidate seems like a good fit for the role",
                    },
                  ],
                  authorId: "1234567890",
                  visibility: {
                    value: AtsCreateNotesRequestDtoValue.Public,
                  sourceValue: "Public",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/crm/lists"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: crm_list_lists
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listLists({
                fields: "id,name,created_at,updated_at,items,type",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}/documents/{subResourceId}/download"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_download_employee_document
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.downloadEmployeeDocument({
                id: "<id>",
                subResourceId: "<value>",
                format: "base64",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}/documents/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_employee_document
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getEmployeeDocument({
                id: "<id>",
                subResourceId: "<value>",
                fields: "id,name,path,type,contents,created_at,updated_at",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/email"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_create_email_template
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.createEmailTemplate({
                xAccountId: "<value>",
                marketingCreateEmailTemplateRequestDto: {
                  id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                  remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                  messages: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      messageType: {
                      sourceValue: "Email",
                      },
                    },
                  ],
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/push"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_list_push_templates
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listPushTemplates({
                fields: "id,name,messages,created_at,updated_at,tags",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}/documents/upload"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_upload_employee_document
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";
            import { UnifiedUploadRequestDtoSchemasValue, UnifiedUploadRequestDtoValue } from "@stackone/stackone-client-ts/sdk/models/shared";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.uploadEmployeeDocument({
                id: "<id>",
                xAccountId: "<value>",
                unifiedUploadRequestDto: {
                  name: "weather-forecast",
                  fileFormat: {
                    value: UnifiedUploadRequestDtoValue.Pdf,
                  sourceValue: "abc",
                  },
                  content: "VGhpcyBpc24ndCByZWFsbHkgYSBzYW1wbGUgZmlsZSwgYnV0IG5vIG9uZSB3aWxsIGV2ZXIga25vdyE",
                  path: "/path/to/file",
                  category: "reports, resumes",
                  confidential: {
                    value: UnifiedUploadRequestDtoSchemasValue.True,
                  sourceValue: "public",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/iam/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: iam_get_user
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getUser({
                id: "<id>",
                fields: "id,first_name,last_name,name,primary_email_address,username,roles,groups,status,avatar,is_bot_user,last_active_at,last_login_at,created_at,updated_at,multi_factor_enabled",
                expand: "roles,groups",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_employments
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listEmployments({
                fields: "id,employee_id,job_title,pay_rate,pay_period,pay_frequency,pay_currency,effective_date,employment_type,employment_contract_type,created_at,updated_at",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/iam/users"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: iam_list_users
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listUsers({
                fields: "id,first_name,last_name,name,primary_email_address,username,roles,groups,status,avatar,is_bot_user,last_active_at,last_login_at,created_at,updated_at,multi_factor_enabled",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                expand: "roles,groups",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/email"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_list_email_templates
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listEmailTemplates({
                fields: "id,name,messages,created_at,updated_at,tags",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/candidates/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_candidate
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getCandidate({
                id: "<id>",
                fields: "id,name,first_name,last_name,email,emails,social_links,phone,phone_numbers,company,title,application_ids,hired_at,created_at,updated_at",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/candidates/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_update_candidate
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.updateCandidate({
                id: "<id>",
                xAccountId: "<value>",
                atsUpdateCandidateRequestDto: {
                  id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                  remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                  name: "Romain Sestier",
                  firstName: "Romain",
                  lastName: "Sestier",
                  email: "sestier.romain123@gmail.com",
                  emails: [
                    {
                      type: "personal",
                      value: "sestier.romain123@gmail.com",
                    },
                  ],
                  socialLinks: [
                    {
                      type: "linkedin",
                      url: "https://www.linkedin.com/in/romainsestier/",
                    },
                  ],
                  phoneNumbers: [
                    {
                      phone: "+447700112233",
                    },
                  ],
                  company: "Company Inc.",
                  title: "Software Engineer",
                  applicationIds: [
                    "123e4567-e89b-12d3-a456-426614174000",
                    "523e1234-e89b-fdd2-a456-762545121101",
                  ],
                  hiredAt: new Date("2021-01-01T01:01:01.000Z"),
                  country: "United States",
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/departments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_department
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getDepartment({
                id: "<id>",
                fields: "id,name",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounts"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_list_linked_accounts
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listLinkedAccounts({});

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/locations/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_location
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getLocation({
                id: "<id>",
                fields: "id,employee_id,name,phone_number,street_1,street_2,city,state,zip_code,country,location_type,created_at,updated_at",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounts/{id}"]["delete"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_delete_account
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.deleteAccount({
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/crm/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: crm_get_contact
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getContact({
                id: "<id>",
                fields: "id,first_name,last_name,company_name,emails,phone_numbers,deal_ids,account_ids,custom_fields,created_at,updated_at",
                include: "custom_fields",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/benefits"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_benefits
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listBenefits({
                fields: "id,name,benefit_type,provider,description,created_at,updated_at",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/offers"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_offers
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listOffers({
                fields: "id,application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/push/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_get_push_template
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getPushTemplate({
                id: "<id>",
                fields: "id,name,messages,created_at,updated_at,tags",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/locations/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_location
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getLocation({
                id: "<id>",
                fields: "id,name",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/applications"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_create_application
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";
            import { AnswerValue, AtsCreateApplicationRequestDtoValue } from "@stackone/stackone-client-ts/sdk/models/shared";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.createApplication({
                xAccountId: "<value>",
                atsCreateApplicationRequestDto: {
                  jobId: "4071538b-3cac-4fbf-ac76-f78ed250ffdd",
                  candidateId: "e3cb75bf-aa84-466e-a6c1-b8322b257a48",
                  locationId: "dd8d41d1-5eb8-4408-9c87-9ba44604eae4",
                  applicationStatus: {
                    value: AtsCreateApplicationRequestDtoValue.Hired,
                  sourceValue: "Hired",
                  },
                  questionnaires: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      answers: [
                        {
                          id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                          remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                          type: {
                            value: AnswerValue.ShortText,
                          sourceValue: "Short Text",
                          },
                          values: [
                            "Yes",
                            "No Travel",
                            "It sounds pretty cool.",
                            "Excel",
                            "Power Point",
                          ],
                        },
                      ],
                    },
                  ],
                  candidate: {
                    name: "Romain Sestier",
                    firstName: "Romain",
                    lastName: "Sestier",
                    email: "sestier.romain123@gmail.com",
                    socialLinks: [
                      {
                        type: "linkedin",
                        url: "https://www.linkedin.com/in/romainsestier/",
                      },
                    ],
                    company: "Company Inc.",
                    title: "Software Engineer",
                    hiredAt: new Date("2021-01-01T01:01:01.000Z"),
                    country: "United States",
                    phoneNumber: "+1234567890",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_get_account
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getAccount({
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/connectors/meta/{provider}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_get_connector_meta
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getConnectorMeta({
                provider: "<value>",
                include: "field_path,unmapped_fields,resources,inactive",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_create_employee
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";
            import {
              EmploymentSchemasEmploymentTypeValue,
              EmploymentSchemasValue,
              EmploymentValue,
              HrisCreateEmployeeRequestDtoSchemasEmploymentTypeValue,
              HrisCreateEmployeeRequestDtoSchemasHomeLocationValue,
              HrisCreateEmployeeRequestDtoSchemasValue,
              HrisCreateEmployeeRequestDtoSchemasWorkLocationValue,
              Value,
            } from "@stackone/stackone-client-ts/sdk/models/shared";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.createEmployee({
                xAccountId: "<value>",
                hrisCreateEmployeeRequestDto: {
                  firstName: "Issac",
                  lastName: "Newton",
                  name: "Issac Newton",
                  displayName: "Sir Issac Newton",
                  avatarUrl: "https://example.com/avatar.png",
                  personalEmail: "isaac.newton@example.com",
                  personalPhoneNumber: "+1234567890",
                  workEmail: "newton@example.com",
                  workPhoneNumber: "+1234567890",
                  jobTitle: "Physicist",
                  department: "Physics",
                  managerId: "67890",
                  gender: {},
                  preferredLanguage: {
                    value: HrisCreateEmployeeRequestDtoSchemasValue.Eng,
                  },
                  ethnicity: {},
                  dateOfBirth: new Date("1990-01-01T00:00.000Z"),
                  birthday: new Date("2021-01-01T00:00:00Z"),
                  maritalStatus: {},
                  avatar: {},
                  hireDate: new Date("2021-01-01T00:00.000Z"),
                  startDate: new Date("2021-01-01T00:00.000Z"),
                  tenure: 2,
                  workAnniversary: new Date("2021-01-01T00:00:00Z"),
                  employmentType: {
                    value: HrisCreateEmployeeRequestDtoSchemasEmploymentTypeValue.Permanent,
                  sourceValue: "Permanent",
                  },
                  employmentContractType: {},
                  employmentStatus: {},
                  terminationDate: new Date("2021-01-01T00:00:00Z"),
                  companyName: "Example Corp",
                  citizenships: [
                    {
                      value: Value.Us,
                    },
                  ],
                  employments: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      employeeId: "1687-3",
                      jobTitle: "Software Engineer",
                      payRate: "40.00",
                      payPeriod: {
                        value: EmploymentValue.Hour,
                      sourceValue: "Hour",
                      },
                      payFrequency: {
                        value: EmploymentSchemasValue.Hourly,
                      sourceValue: "Hourly",
                      },
                      payCurrency: "USD",
                      effectiveDate: new Date("2021-01-01T01:01:01.000Z"),
                      employmentType: {
                        value: EmploymentSchemasEmploymentTypeValue.Permanent,
                      sourceValue: "Permanent",
                      },
                      employmentContractType: {},
                      createdAt: new Date("2021-01-01T01:01:01.000Z"),
                      updatedAt: new Date("2021-01-01T01:01:01.000Z"),
                    },
                  ],
                  customFields: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      name: "Training Completion Status",
                      description: "The completion status of the employee's training.",
                      type: {},
                    value: "Completed",
                      valueId: "value_456",
                      options: [
                        "Not Started",
                        "In Progress",
                        "Completed",
                        "Overdue",
                      ],
                    },
                  ],
                  benefits: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      name: "Health Insurance",
                      provider: "Aetna",
                      description: "Health insurance for employees",
                      createdAt: new Date("2021-01-01T00:00:00Z"),
                      updatedAt: new Date("2021-01-01T00:00:00Z"),
                    },
                  ],
                  homeLocation: {
                    name: "Woolsthorpe Manor",
                    phoneNumber: "+44 1476 860 364",
                    street1: "Water Lane",
                    street2: "Woolsthorpe by Colsterworth",
                    city: "Grantham",
                    zipCode: "NG33 5NR",
                    country: {
                      value: HrisCreateEmployeeRequestDtoSchemasHomeLocationValue.Us,
                    },
                    state: {},
                  },
                  workLocation: {
                    name: "Woolsthorpe Manor",
                    phoneNumber: "+44 1476 860 364",
                    street1: "Water Lane",
                    street2: "Woolsthorpe by Colsterworth",
                    city: "Grantham",
                    zipCode: "NG33 5NR",
                    country: {
                      value: HrisCreateEmployeeRequestDtoSchemasWorkLocationValue.Us,
                    },
                    state: {},
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_update_employee
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";
            import {
              EmploymentSchemasEmploymentTypeValue,
              EmploymentSchemasValue,
              EmploymentValue,
              HrisCreateEmployeeRequestDtoSchemasEmploymentTypeValue,
              HrisCreateEmployeeRequestDtoSchemasHomeLocationValue,
              HrisCreateEmployeeRequestDtoSchemasValue,
              HrisCreateEmployeeRequestDtoSchemasWorkLocationValue,
              Value,
            } from "@stackone/stackone-client-ts/sdk/models/shared";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.updateEmployee({
                id: "<id>",
                xAccountId: "<value>",
                hrisCreateEmployeeRequestDto: {
                  firstName: "Issac",
                  lastName: "Newton",
                  name: "Issac Newton",
                  displayName: "Sir Issac Newton",
                  avatarUrl: "https://example.com/avatar.png",
                  personalEmail: "isaac.newton@example.com",
                  personalPhoneNumber: "+1234567890",
                  workEmail: "newton@example.com",
                  workPhoneNumber: "+1234567890",
                  jobTitle: "Physicist",
                  department: "Physics",
                  managerId: "67890",
                  gender: {},
                  preferredLanguage: {
                    value: HrisCreateEmployeeRequestDtoSchemasValue.Eng,
                  },
                  ethnicity: {},
                  dateOfBirth: new Date("1990-01-01T00:00.000Z"),
                  birthday: new Date("2021-01-01T00:00:00Z"),
                  maritalStatus: {},
                  avatar: {},
                  hireDate: new Date("2021-01-01T00:00.000Z"),
                  startDate: new Date("2021-01-01T00:00.000Z"),
                  tenure: 2,
                  workAnniversary: new Date("2021-01-01T00:00:00Z"),
                  employmentType: {
                    value: HrisCreateEmployeeRequestDtoSchemasEmploymentTypeValue.Permanent,
                  sourceValue: "Permanent",
                  },
                  employmentContractType: {},
                  employmentStatus: {},
                  terminationDate: new Date("2021-01-01T00:00:00Z"),
                  companyName: "Example Corp",
                  citizenships: [
                    {
                      value: Value.Us,
                    },
                  ],
                  employments: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      employeeId: "1687-3",
                      jobTitle: "Software Engineer",
                      payRate: "40.00",
                      payPeriod: {
                        value: EmploymentValue.Hour,
                      sourceValue: "Hour",
                      },
                      payFrequency: {
                        value: EmploymentSchemasValue.Hourly,
                      sourceValue: "Hourly",
                      },
                      payCurrency: "USD",
                      effectiveDate: new Date("2021-01-01T01:01:01.000Z"),
                      employmentType: {
                        value: EmploymentSchemasEmploymentTypeValue.Permanent,
                      sourceValue: "Permanent",
                      },
                      employmentContractType: {},
                      createdAt: new Date("2021-01-01T01:01:01.000Z"),
                      updatedAt: new Date("2021-01-01T01:01:01.000Z"),
                    },
                  ],
                  customFields: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      name: "Training Completion Status",
                      description: "The completion status of the employee's training.",
                      type: {},
                    value: "Completed",
                      valueId: "value_456",
                      options: [
                        "Not Started",
                        "In Progress",
                        "Completed",
                        "Overdue",
                      ],
                    },
                  ],
                  benefits: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      name: "Health Insurance",
                      provider: "Aetna",
                      description: "Health insurance for employees",
                      createdAt: new Date("2021-01-01T00:00:00Z"),
                      updatedAt: new Date("2021-01-01T00:00:00Z"),
                    },
                  ],
                  homeLocation: {
                    name: "Woolsthorpe Manor",
                    phoneNumber: "+44 1476 860 364",
                    street1: "Water Lane",
                    street2: "Woolsthorpe by Colsterworth",
                    city: "Grantham",
                    zipCode: "NG33 5NR",
                    country: {
                      value: HrisCreateEmployeeRequestDtoSchemasHomeLocationValue.Us,
                    },
                    state: {},
                  },
                  workLocation: {
                    name: "Woolsthorpe Manor",
                    phoneNumber: "+44 1476 860 364",
                    street1: "Water Lane",
                    street2: "Woolsthorpe by Colsterworth",
                    city: "Grantham",
                    zipCode: "NG33 5NR",
                    country: {
                      value: HrisCreateEmployeeRequestDtoSchemasWorkLocationValue.Us,
                    },
                    state: {},
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/iam/roles"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: iam_list_roles
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listRoles({
                fields: "id,name,type,policies,description,created_at,updated_at",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                expand: "policies",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/omni_channel/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_get_omni_channel_template
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getOmniChannelTemplate({
                id: "<id>",
                fields: "id,name,messages,created_at,updated_at,tags",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/time_off/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_update_time_off_request
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.updateTimeOffRequest({
                id: "<id>",
                xAccountId: "<value>",
                hrisCreateTimeOffRequestDto: {
                  employeeId: "1687-3",
                  approverId: "1687-4",
                  startDate: new Date("2021-01-01T01:01:01.000Z"),
                  endDate: new Date("2021-01-01T01:01:01.000Z"),
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/applications/{id}/scorecards"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_application_scorecards
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listApplicationScorecards({
                id: "<id>",
                fields: "id,sections,label,candidate_id,application_id,interview_id,author_id,overall_recommendation,created_at,updated_at",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/locations"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_locations
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listLocations({
                fields: "id,name",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}/work_eligibility/{subResourceId}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_update_employee_work_eligibility_request
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";
            import { ContentValue, HrisCreateWorkEligibilityRequestDtoSchemasValue } from "@stackone/stackone-client-ts/sdk/models/shared";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.updateEmployeeWorkEligibilityRequest({
                id: "<id>",
                subResourceId: "<value>",
                xAccountId: "<value>",
                hrisCreateWorkEligibilityRequestDto: {
                  type: {},
                  subType: "H1B",
                  document: {
                    id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                    remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                    name: "My Document",
                    path: "/path/to/file",
                    category: "templates, forms, backups, etc.",
                    contents: [
                      {
                        url: "https://example.com/file.pdf",
                        unifiedUrl: "https://api.stackone.com/unified/hris/employees/12345/documents/67890/download",
                        fileFormat: {
                          value: ContentValue.Pdf,
                        sourceValue: "abc",
                        },
                      },
                    ],
                    createdAt: new Date("2021-01-01T01:01:01.000Z"),
                    updatedAt: new Date("2021-01-02T01:01:01.000Z"),
                  },
                  validFrom: new Date("2021-01-01T00:00.000Z"),
                  validTo: new Date("2021-01-01T00:00.000Z"),
                  issuedBy: {
                    value: HrisCreateWorkEligibilityRequestDtoSchemasValue.Us,
                  },
                  number: "1234567890",
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_user
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getUser({
                id: "<id>",
                fields: "id,first_name,last_name,name,email",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}/time_off"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_create_employee_time_off_request
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.createEmployeeTimeOffRequest({
                id: "<id>",
                xAccountId: "<value>",
                hrisCreateTimeOffRequestDto: {
                  employeeId: "1687-3",
                  approverId: "1687-4",
                  startDate: new Date("2021-01-01T01:01:01.000Z"),
                  endDate: new Date("2021-01-01T01:01:01.000Z"),
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}/work_eligibility"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_employee_work_eligibility
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listEmployeeWorkEligibility({
                id: "<id>",
                fields: "id,type,sub_type,document,valid_from,valid_to,issued_by,number",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/applications"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_applications
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listApplications({
                fields: "id,candidate_id,job_id,interview_stage,interview_stage_id,rejected_reason,rejected_reason_id,rejected_reason_ids,rejected_reasons,rejected_at,location_id,location_ids,status,application_status,questionnaires,attachments,result_links,created_at,updated_at,documents,candidate",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                expand: "documents",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_employees
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listEmployees({
                fields: "id,first_name,last_name,name,display_name,gender,ethnicity,date_of_birth,birthday,marital_status,avatar_url,avatar,personal_email,personal_phone_number,work_email,work_phone_number,job_title,job_description,department,cost_centers,benefits,manager_id,hire_date,start_date,tenure,work_anniversary,employment_type,employment_contract_type,employment_status,termination_date,company_name,preferred_language,citizenships,home_location,work_location,employments,custom_fields,documents,created_at,updated_at,employee_number",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                expand: "company,employments,work_location,home_location,custom_fields,groups",
                include: "avatar_url,avatar,custom_fields,job_description,benefits",
                xAccountId: "<value>",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/accounts/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_update_account
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.updateAccount({
                id: "<id>",
                patchAccountDto: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/offers"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_create_offer
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";
            import { AtsCreateOfferRequestDtoValue } from "@stackone/stackone-client-ts/sdk/models/shared";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.createOffer({
                xAccountId: "<value>",
                atsCreateOfferRequestDto: {
                  startDate: new Date("2021-01-01T01:01:01.000Z"),
                  offerStatus: {
                    value: AtsCreateOfferRequestDtoValue.Pending,
                  sourceValue: "Pending",
                  },
                  offerHistory: [
                    {
                      startDate: new Date("2021-01-01T01:01:01.000Z"),
                      createdAt: new Date("2021-01-01T01:01:01.000Z"),
                      updatedAt: new Date("2021-01-01T01:01:01.000Z"),
                    },
                  ],
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/companies/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_company
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getCompany({
                id: "<id>",
                fields: "id,name,full_name,display_name,created_at,updated_at",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/candidates"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_candidates
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listCandidates({
                fields: "id,name,first_name,last_name,email,emails,social_links,phone,phone_numbers,company,title,application_ids,hired_at,created_at,updated_at",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/email/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_update_email_template
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.updateEmailTemplate({
                id: "<id>",
                xAccountId: "<value>",
                marketingCreateEmailTemplateRequestDto: {
                  id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                  remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                  messages: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      messageType: {
                      sourceValue: "Email",
                      },
                    },
                  ],
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/connect_sessions/authenticate"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_authenticate_connect_session
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.authenticateConnectSession({
                token: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/connectors/meta"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_list_connectors_meta
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listConnectorsMeta({
                include: "field_path,unmapped_fields,resources,inactive",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_employee
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getEmployee({
                id: "<id>",
                fields: "id,first_name,last_name,name,display_name,gender,ethnicity,date_of_birth,birthday,marital_status,avatar_url,avatar,personal_email,personal_phone_number,work_email,work_phone_number,job_title,job_description,department,cost_centers,benefits,manager_id,hire_date,start_date,tenure,work_anniversary,employment_type,employment_contract_type,employment_status,termination_date,company_name,preferred_language,citizenships,home_location,work_location,employments,custom_fields,documents,created_at,updated_at,employee_number",
                expand: "company,employments,work_location,home_location,custom_fields,groups",
                include: "avatar_url,avatar,custom_fields,job_description,benefits",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/rejected_reasons"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_rejected_reasons
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listRejectedReasons({
                fields: "id,label,type,rejected_reason_type",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/omni_channel"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_create_omni_channel_template
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.createOmniChannelTemplate({
                xAccountId: "<value>",
                marketingCreateTemplateRequestDto: {
                  id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                  remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                  messages: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      messageType: {
                      sourceValue: "Email",
                      },
                    },
                  ],
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/campaigns"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_list_campaigns
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listCampaigns({
                fields: "id,name,created_at,updated_at,description,schedule_type,status,channels,first_sent_at,last_sent_at,tags,messages",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/crm/accounts"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: crm_list_accounts
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listAccounts({
                fields: "id,owner_id,name,description,industries,annual_revenue,website,addresses,phone_numbers,created_at,updated_at",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/iam/groups"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: iam_list_groups
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listGroups({
                fields: "id,parent_id,name,description,roles,type,created_at,updated_at",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                expand: "roles",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/omni_channel/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_update_omni_channel_template
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.updateOmniChannelTemplate({
                id: "<id>",
                xAccountId: "<value>",
                marketingCreateTemplateRequestDto: {
                  id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                  remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                  messages: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      messageType: {
                      sourceValue: "Email",
                      },
                    },
                  ],
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/companies"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_companies
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.listCompanies({
                fields: "id,name,full_name,display_name,created_at,updated_at",
                filterUpdatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}/time_off/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_employees_time_off_request
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getEmployeesTimeOffRequest({
                id: "<id>",
                subResourceId: "<value>",
                fields: "id,employee_id,approver_id,status,type,start_date,end_date,created_at,updated_at",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}/work_eligibility/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_employees_work_eligibility
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "<YOUR_USERNAME_HERE>",
              },
            });

            async function run() {
              const result = await stackOne.getEmployeesWorkEligibility({
                id: "<id>",
                subResourceId: "<value>",
                fields: "id,type,sub_type,document,valid_from,valid_to,issued_by,number",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
