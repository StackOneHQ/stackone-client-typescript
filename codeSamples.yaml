overlay: 1.0.0
info:
  title: CodeSamples overlay for typescript target
  version: 0.0.0
actions:
  - target: $["paths"]["/accounts"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_list_linked_accounts
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.accounts.listLinkedAccounts({});\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounts/{id}"]["delete"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_delete_account
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.accounts.deleteAccount({\n    id: \"<id>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_get_account
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.accounts.getAccount({\n    id: \"<id>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounts/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_update_account
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.accounts.updateAccount({\n    id: \"<id>\",\n    patchAccountExternalDto: {},\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounts/{id}/meta"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_get_account_meta_info
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.accounts.getAccountMetaInfo({\n    id: \"<id>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/connect_sessions"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_create_connect_session
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { Categories } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.connectSessions.createConnectSession({\n    categories: [\n      Categories.Ats,\n      Categories.Hris,\n      Categories.HrisLegacy,\n      Categories.Crm,\n      Categories.Iam,\n      Categories.Marketing,\n      Categories.Lms,\n      Categories.Stackone,\n    ],\n    originOwnerId: \"<value>\",\n    originOwnerName: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/connect_sessions/authenticate"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_authenticate_connect_session
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.connectSessions.authenticateConnectSession({\n    token: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/connectors/meta"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_list_connectors_meta
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.connectors.listConnectorsMeta({\n    include: \"field_path,unmapped_fields,resources,inactive,webhooks\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/connectors/meta/{provider}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_get_connector_meta
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.connectors.getConnectorMeta({\n    provider: \"<value>\",\n    include: \"field_path,unmapped_fields,resources,inactive,webhooks\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_applications
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listApplications({\n    fields: \"id,remote_id,candidate_id,remote_candidate_id,job_id,remote_job_id,interview_stage,interview_stage_id,remote_interview_stage_id,rejected_reason,rejected_reason_id,remote_rejected_reason_id,rejected_reason_ids,remote_rejected_reason_ids,rejected_reasons,rejected_at,location_id,remote_location_id,location_ids,remote_location_ids,status,application_status,questionnaires,attachments,result_links,source,created_at,updated_at,documents,custom_fields,candidate\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    expand: \"documents\",\n    include: \"attachments,custom_fields\",\n    jobId: \"cxQiyiuasdFKfdsYfer\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_create_application
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { AnswerValue, AtsCreateApplicationRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.createApplication({\n    xAccountId: \"<value>\",\n    atsCreateApplicationRequestDto: {\n      jobId: \"4071538b-3cac-4fbf-ac76-f78ed250ffdd\",\n      locationId: \"dd8d41d1-5eb8-4408-9c87-9ba44604eae4\",\n      applicationStatus: {\n        value: AtsCreateApplicationRequestDtoValue.Hired,\n        sourceValue: \"Hired\",\n      },\n      questionnaires: [\n        {\n          id: \"right_to_work\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          answers: [\n            {\n              id: \"answer1\",\n              remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n              type: {\n                value: AnswerValue.ShortText,\n                sourceValue: \"Short Text\",\n              },\n              values: [\n                \"Yes\",\n              ],\n            },\n          ],\n        },\n      ],\n      source: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        name: \"LinkedIn\",\n      },\n      candidateId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n      candidate: {\n        unifiedCustomFields: {\n          \"my_project_custom_field_1\": \"REF-1236\",\n          \"my_project_custom_field_2\": \"some other value\",\n        },\n        name: \"Romain Sestier\",\n        firstName: \"Romain\",\n        lastName: \"Sestier\",\n        email: \"sestier.romain123@gmail.com\",\n        socialLinks: [\n          {\n            type: \"linkedin\",\n            url: \"https://www.linkedin.com/in/romainsestier/\",\n          },\n        ],\n        company: \"Company Inc.\",\n        title: \"Software Engineer\",\n        hiredAt: new Date(\"2021-01-01T01:01:01.000Z\"),\n        country: \"United States\",\n        customFields: [\n          {\n            id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n            remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n            name: \"Training Completion Status\",\n            value: true,\n            valueId: \"value_456\",\n            remoteValueId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n          },\n        ],\n        passthrough: {\n          \"other_known_names\": \"John Doe\",\n        },\n        phoneNumber: \"+1234567890\",\n      },\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_application
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getApplication({\n    id: \"<id>\",\n    fields: \"id,remote_id,candidate_id,remote_candidate_id,job_id,remote_job_id,interview_stage,interview_stage_id,remote_interview_stage_id,rejected_reason,rejected_reason_id,remote_rejected_reason_id,rejected_reason_ids,remote_rejected_reason_ids,rejected_reasons,rejected_at,location_id,remote_location_id,location_ids,remote_location_ids,status,application_status,questionnaires,attachments,result_links,source,created_at,updated_at,documents,custom_fields,candidate\",\n    expand: \"documents\",\n    include: \"attachments,custom_fields\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_update_application
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { AtsUpdateApplicationRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.updateApplication({\n    id: \"<id>\",\n    xAccountId: \"<value>\",\n    atsUpdateApplicationRequestDto: {\n      interviewStageId: \"18bcbb1b-3cbc-4198-a999-460861d19480\",\n      applicationStatus: {\n        value: AtsUpdateApplicationRequestDtoValue.Hired,\n        sourceValue: \"Hired\",\n      },\n      source: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        name: \"LinkedIn\",\n      },\n      customFields: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          name: \"Training Completion Status\",\n          value: Completed,\n          valueId: \"value_456\",\n          remoteValueId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n      rejectedReasonId: \"f223d7f6-908b-48f0-9237-b201c307f609\",\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/documents"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_application_documents
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listApplicationDocuments({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,path,type,category,category_id,remote_category_id,contents,created_at,updated_at,remote_url,file_format\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/documents/upload"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_upload_application_document
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { UnifiedUploadRequestDtoSchemasValue, UnifiedUploadRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.uploadApplicationDocument({\n    id: \"<id>\",\n    xAccountId: \"<value>\",\n    unifiedUploadRequestDto: {\n      name: \"weather-forecast\",\n      fileFormat: {\n        value: UnifiedUploadRequestDtoValue.Pdf,\n        sourceValue: \"abc\",\n      },\n      content: \"VGhpcyBpc24ndCByZWFsbHkgYSBzYW1wbGUgZmlsZSwgYnV0IG5vIG9uZSB3aWxsIGV2ZXIga25vdyE\",\n      categoryId: \"6530\",\n      path: \"/path/to/file\",\n      category: {\n        value: \"reports, resumes\",\n        sourceValue: \"550e8400-e29b-41d4-a716-446655440000, CUSTOM_CATEGORY_NAME\",\n      },\n      confidential: {\n        value: UnifiedUploadRequestDtoSchemasValue.True,\n        sourceValue: \"public\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/documents/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_application_document
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getApplicationDocument({\n    id: \"<id>\",\n    subResourceId: \"<value>\",\n    fields: \"id,remote_id,name,path,type,category,category_id,remote_category_id,contents,created_at,updated_at,remote_url,file_format\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/documents/{subResourceId}/download"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_download_application_document
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.downloadApplicationDocument({\n    id: \"<id>\",\n    subResourceId: \"<value>\",\n    format: \"base64\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/move"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_move_application
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.moveApplication({\n    id: \"<id>\",\n    xAccountId: \"<value>\",\n    atsMoveApplicationRequestDto: {\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n      interviewStageId: \"f223d7f6-908b-48f0-9237-b201c307f609\",\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/offers"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_applications_offers
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listApplicationsOffers({\n    id: \"<id>\",\n    fields: \"id,remote_id,application_id,remote_application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/offers/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_application_offer
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getApplicationOffer({\n    id: \"<id>\",\n    subResourceId: \"<value>\",\n    fields: \"id,remote_id,application_id,remote_application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/reject"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_reject_application
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.rejectApplication({\n    id: \"<id>\",\n    xAccountId: \"<value>\",\n    atsRejectApplicationRequestDto: {\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n      rejectedReasonId: \"f223d7f6-908b-48f0-9237-b201c307f609\",\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/scheduled_interviews"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_applications_scheduled_interviews
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listApplicationsScheduledInterviews({\n    id: \"<id>\",\n    fields: \"id,remote_id,application_id,remote_application_id,interview_stage_id,remote_interview_stage_id,interview_stage,status,interview_status,interviewer_ids,remote_interviewer_ids,interview_parts,interviewers,start_at,end_at,meeting_url,created_at,updated_at\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/scheduled_interviews/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_application_scheduled_interview
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getApplicationScheduledInterview({\n    id: \"<id>\",\n    subResourceId: \"<value>\",\n    fields: \"id,remote_id,candidate_id,remote_candidate_id,job_id,remote_job_id,interview_stage,interview_stage_id,remote_interview_stage_id,rejected_reason,rejected_reason_id,remote_rejected_reason_id,rejected_reason_ids,remote_rejected_reason_ids,rejected_reasons,rejected_at,location_id,remote_location_id,location_ids,remote_location_ids,status,application_status,questionnaires,attachments,result_links,source,created_at,updated_at,documents,custom_fields,candidate\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/scorecards"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_application_scorecards
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listApplicationScorecards({\n    id: \"<id>\",\n    fields: \"id,remote_id,sections,label,candidate_id,remote_candidate_id,application_id,remote_application_id,interview_id,remote_interview_id,author_id,remote_author_id,overall_recommendation,created_at,updated_at\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/scorecards/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_application_scorecard
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getApplicationScorecard({\n    id: \"<id>\",\n    subResourceId: \"<value>\",\n    fields: \"id,remote_id,sections,label,candidate_id,remote_candidate_id,application_id,remote_application_id,interview_id,remote_interview_id,author_id,remote_author_id,overall_recommendation,created_at,updated_at\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/assessments/orders/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_assessments_request
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getAssessmentsRequest({\n    id: \"<id>\",\n    fields: \"assessment_id,remote_assessment_id,candidate,score,assessment_date,submission_date,summary,result,result_url,attachments\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/assessments/orders/{id}/results"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_assessments_result
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getAssessmentsResult({\n    id: \"<id>\",\n    fields: \"assessment_id,remote_assessment_id,candidate,score,assessment_date,submission_date,summary,result,result_url,attachments\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/assessments/packages"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_assessments_packages
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listAssessmentsPackages({\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/assessments/packages/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_assessments_package
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getAssessmentsPackage({\n    id: \"<id>\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/candidates"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_candidates
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listCandidates({\n    fields: \"id,remote_id,name,first_name,last_name,email,emails,social_links,phone,phone_numbers,company,title,application_ids,remote_application_ids,hired_at,custom_fields,created_at,updated_at\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    include: \"custom_fields\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/candidates"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_create_candidate
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.createCandidate({\n    xAccountId: \"<value>\",\n    atsCreateCandidateRequestDto: {\n      unifiedCustomFields: {\n        \"my_project_custom_field_1\": \"REF-1236\",\n        \"my_project_custom_field_2\": \"some other value\",\n      },\n      name: \"Romain Sestier\",\n      firstName: \"Romain\",\n      lastName: \"Sestier\",\n      email: \"sestier.romain123@gmail.com\",\n      socialLinks: [\n        {\n          type: \"linkedin\",\n          url: \"https://www.linkedin.com/in/romainsestier/\",\n        },\n      ],\n      company: \"Company Inc.\",\n      title: \"Software Engineer\",\n      hiredAt: new Date(\"2021-01-01T01:01:01.000Z\"),\n      country: \"United States\",\n      customFields: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          name: \"Training Completion Status\",\n          value: Completed,\n          valueId: \"value_456\",\n          remoteValueId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n      phoneNumber: \"+1234567890\",\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/candidates/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_candidate
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getCandidate({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,first_name,last_name,email,emails,social_links,phone,phone_numbers,company,title,application_ids,remote_application_ids,hired_at,custom_fields,created_at,updated_at\",\n    include: \"custom_fields\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/candidates/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_update_candidate
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.updateCandidate({\n    id: \"<id>\",\n    xAccountId: \"<value>\",\n    atsUpdateCandidateRequestDto: {\n      unifiedCustomFields: {\n        \"my_project_custom_field_1\": \"REF-1236\",\n        \"my_project_custom_field_2\": \"some other value\",\n      },\n      name: \"Romain Sestier\",\n      firstName: \"Romain\",\n      lastName: \"Sestier\",\n      email: \"sestier.romain123@gmail.com\",\n      emails: [\n        {\n          type: \"personal\",\n          value: \"sestier.romain123@gmail.com\",\n        },\n      ],\n      socialLinks: [\n        {\n          type: \"linkedin\",\n          url: \"https://www.linkedin.com/in/romainsestier/\",\n        },\n      ],\n      phoneNumbers: [\n        {\n          phone: \"+447700112233\",\n        },\n      ],\n      company: \"Company Inc.\",\n      title: \"Software Engineer\",\n      applicationIds: [\n        \"123e4567-e89b-12d3-a456-426614174000\",\n        \"523e1234-e89b-fdd2-a456-762545121101\",\n      ],\n      hiredAt: new Date(\"2021-01-01T01:01:01.000Z\"),\n      country: \"United States\",\n      customFields: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          name: \"Training Completion Status\",\n          value: [\n            \"Completed\",\n          ],\n          valueId: \"value_456\",\n          remoteValueId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/candidates/{id}/notes"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_candidate_notes
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listCandidateNotes({\n    id: \"<id>\",\n    fields: \"id,remote_id,content,author_id,remote_author_id,visibility,created_at,updated_at,deleted_at\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/candidates/{id}/notes"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_create_candidate_note
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { AtsCreateNotesRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.createCandidateNote({\n    id: \"<id>\",\n    xAccountId: \"<value>\",\n    atsCreateNotesRequestDto: {\n      content: [\n        {\n          body: \"This candidate seems like a good fit for the role\",\n        },\n      ],\n      authorId: \"1234567890\",\n      visibility: {\n        value: AtsCreateNotesRequestDtoValue.Public,\n        sourceValue: \"Public\",\n      },\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/candidates/{id}/notes/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_candidate_note
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getCandidateNote({\n    id: \"<id>\",\n    subResourceId: \"<value>\",\n    fields: \"id,remote_id,content,author_id,remote_author_id,visibility,created_at,updated_at,deleted_at\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/custom_field_definitions/applications"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_application_custom_field_definitions
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listApplicationCustomFieldDefinitions({\n    fields: \"id,remote_id,name,description,type,options\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/custom_field_definitions/applications/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_application_custom_field_definition
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getApplicationCustomFieldDefinition({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,description,type,options\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/custom_field_definitions/candidates"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_candidate_custom_field_definitions
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listCandidateCustomFieldDefinitions({\n    fields: \"id,remote_id,name,description,type,options\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/custom_field_definitions/candidates/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_candidate_custom_field_definition
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getCandidateCustomFieldDefinition({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,description,type,options\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/custom_field_definitions/jobs"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_job_custom_field_definitions
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listJobCustomFieldDefinitions({\n    fields: \"id,remote_id,name,description,type,options\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/custom_field_definitions/jobs/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_job_custom_field_definition
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getJobCustomFieldDefinition({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,description,type,options\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/departments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_departments
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listDepartments({\n    fields: \"id,remote_id,name\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/departments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_department
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getDepartment({\n    id: \"<id>\",\n    fields: \"id,remote_id,name\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/interview_stages"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_interview_stages
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listInterviewStages({\n    fields: \"id,remote_id,name,order,created_at,updated_at\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/interview_stages/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_interview_stage
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getInterviewStage({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,order,created_at,updated_at\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/interviews"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_interviews
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listInterviews({\n    fields: \"id,remote_id,application_id,remote_application_id,interview_stage_id,remote_interview_stage_id,interview_stage,status,interview_status,interviewer_ids,remote_interviewer_ids,interview_parts,interviewers,start_at,end_at,meeting_url,created_at,updated_at\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/interviews/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_interview
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getInterview({\n    id: \"<id>\",\n    fields: \"id,remote_id,application_id,remote_application_id,interview_stage_id,remote_interview_stage_id,interview_stage,status,interview_status,interviewer_ids,remote_interviewer_ids,interview_parts,interviewers,start_at,end_at,meeting_url,created_at,updated_at\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/job_postings"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_job_postings
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listJobPostings({\n    fields: \"id,remote_id,title,locations,internal,status,job_id,remote_job_id,content,compensation,employment_type,employment_contract_type,external_url,external_apply_url,questionnaires,updated_at,created_at\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    include: \"questionnaires\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/job_postings/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_job_posting
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getJobPosting({\n    id: \"<id>\",\n    fields: \"id,remote_id,title,locations,internal,status,job_id,remote_job_id,content,compensation,employment_type,employment_contract_type,external_url,external_apply_url,questionnaires,updated_at,created_at\",\n    include: \"questionnaires\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/jobs"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_jobs
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listJobs({\n    fields: \"id,remote_id,code,title,status,job_status,department_ids,remote_department_ids,location_ids,remote_location_ids,hiring_team,interview_stages,confidential,custom_fields,created_at,updated_at\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    expand: \"job_postings,interview_stages\",\n    include: \"custom_fields\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/jobs/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_job
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getJob({\n    id: \"<id>\",\n    fields: \"id,remote_id,code,title,status,job_status,department_ids,remote_department_ids,location_ids,remote_location_ids,hiring_team,interview_stages,confidential,custom_fields,created_at,updated_at\",\n    expand: \"job_postings,interview_stages\",\n    include: \"custom_fields\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/lists"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_lists
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listLists({\n    fields: \"id,remote_id,name,created_at,updated_at,items,type\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/lists/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_list
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getList({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,created_at,updated_at,items,type\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/locations"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_locations
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listLocations({\n    fields: \"id,remote_id,name\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/locations/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_location
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getLocation({\n    id: \"<id>\",\n    fields: \"id,remote_id,name\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/offers"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_offers
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listOffers({\n    fields: \"id,remote_id,application_id,remote_application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/offers"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_create_offer
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { AtsCreateOfferRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.createOffer({\n    xAccountId: \"<value>\",\n    atsCreateOfferRequestDto: {\n      startDate: new Date(\"2021-01-01T01:01:01.000Z\"),\n      offerStatus: {\n        value: AtsCreateOfferRequestDtoValue.Pending,\n        sourceValue: \"Pending\",\n      },\n      offerHistory: [\n        {\n          startDate: new Date(\"2021-01-01T01:01:01.000Z\"),\n          createdAt: new Date(\"2021-01-01T01:01:01.000Z\"),\n          updatedAt: new Date(\"2021-01-01T01:01:01.000Z\"),\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/offers/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_offer
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getOffer({\n    id: \"<id>\",\n    fields: \"id,remote_id,application_id,remote_application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/rejected_reasons"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_rejected_reasons
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listRejectedReasons({\n    fields: \"id,remote_id,label,type,rejected_reason_type\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/rejected_reasons/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_rejected_reason
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getRejectedReason({\n    id: \"<id>\",\n    fields: \"id,remote_id,label,type,rejected_reason_type\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/users"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_users
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listUsers({\n    fields: \"id,remote_id,first_name,last_name,name,email\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_user
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getUser({\n    id: \"<id>\",\n    fields: \"id,remote_id,first_name,last_name,name,email\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/crm/accounts"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: crm_list_accounts
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.crm.listAccounts({\n    fields: \"id,remote_id,owner_id,remote_owner_id,name,description,industries,annual_revenue,website,addresses,phone_numbers,created_at,updated_at\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/crm/accounts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: crm_get_account
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.crm.getAccount({\n    id: \"<id>\",\n    fields: \"id,remote_id,owner_id,remote_owner_id,name,description,industries,annual_revenue,website,addresses,phone_numbers,created_at,updated_at\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/crm/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: crm_list_contacts
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.crm.listContacts({\n    fields: \"id,remote_id,first_name,last_name,company_name,emails,phone_numbers,deal_ids,remote_deal_ids,account_ids,remote_account_ids,custom_fields,created_at,updated_at\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    include: \"custom_fields\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/crm/contacts"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: crm_create_contact
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.crm.createContact({\n    xAccountId: \"<value>\",\n    crmCreateContactRequestDto: {\n      firstName: \"Steve\",\n      lastName: \"Wozniak\",\n      companyName: \"Apple Inc.\",\n      emails: [\n        \"steve@apple.com\",\n      ],\n      phoneNumbers: [\n        \"123-456-7890\",\n      ],\n      dealIds: [\n        \"deal-001\",\n        \"deal-002\",\n      ],\n      accountIds: [\n        \"account-123\",\n        \"account-456\",\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/crm/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: crm_get_contact
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.crm.getContact({\n    id: \"<id>\",\n    fields: \"id,remote_id,first_name,last_name,company_name,emails,phone_numbers,deal_ids,remote_deal_ids,account_ids,remote_account_ids,custom_fields,created_at,updated_at\",\n    include: \"custom_fields\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/crm/contacts/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: crm_update_contact
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.crm.updateContact({\n    id: \"<id>\",\n    xAccountId: \"<value>\",\n    crmCreateContactRequestDto: {\n      firstName: \"Steve\",\n      lastName: \"Wozniak\",\n      companyName: \"Apple Inc.\",\n      emails: [\n        \"steve@apple.com\",\n      ],\n      phoneNumbers: [\n        \"123-456-7890\",\n      ],\n      dealIds: [\n        \"deal-001\",\n        \"deal-002\",\n      ],\n      accountIds: [\n        \"account-123\",\n        \"account-456\",\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/crm/lists"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: crm_list_lists
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.crm.listLists({\n    fields: \"id,remote_id,name,created_at,updated_at,items,type\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/crm/lists/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: crm_get_list
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.crm.getList({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,created_at,updated_at,items,type\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/benefits"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_benefits
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listBenefits({\n    fields: \"id,remote_id,name,benefit_type,provider,description,created_at,updated_at\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/benefits/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_benefit
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getBenefit({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,benefit_type,provider,description,created_at,updated_at\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/companies"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_companies
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listCompanies({\n    fields: \"id,remote_id,name,full_name,display_name,created_at,updated_at\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/companies/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_company
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getCompany({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,full_name,display_name,created_at,updated_at\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/documents/employee_categories"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_employee_categories
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listEmployeeCategories({\n    fields: \"id,remote_id,name,active\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/documents/employee_categories/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_employee_document_category
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getEmployeeDocumentCategory({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,active\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_employees
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listEmployees({\n    fields: \"id,remote_id,first_name,last_name,name,display_name,gender,ethnicity,date_of_birth,birthday,marital_status,avatar_url,avatar,personal_email,personal_phone_number,work_email,work_phone_number,job_id,remote_job_id,job_title,job_description,department_id,remote_department_id,department,cost_centers,benefits,manager_id,remote_manager_id,hire_date,start_date,tenure,work_anniversary,employment_type,employment_contract_type,employment_status,termination_date,company_name,preferred_language,citizenships,home_location,work_location,employments,custom_fields,documents,created_at,updated_at,employee_number,national_identity_number\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    expand: \"company,employments,work_location,home_location,custom_fields,groups\",\n    include: \"avatar_url,avatar,custom_fields,job_description,benefits\",\n    xAccountId: \"<value>\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_create_employee
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport {\n  EmploymentSchemasEmploymentTypeValue,\n  EmploymentSchemasValue,\n  EmploymentValue,\n  HrisCreateEmployeeRequestDtoSchemasEmploymentTypeValue,\n  HrisCreateEmployeeRequestDtoSchemasHomeLocationValue,\n  HrisCreateEmployeeRequestDtoSchemasNationalIdentityNumberValue,\n  HrisCreateEmployeeRequestDtoSchemasValue,\n  HrisCreateEmployeeRequestDtoSchemasWorkLocationValue,\n  Value,\n} from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.createEmployee({\n    xAccountId: \"<value>\",\n    hrisCreateEmployeeRequestDto: {\n      firstName: \"Issac\",\n      lastName: \"Newton\",\n      name: \"Issac Newton\",\n      displayName: \"Sir Issac Newton\",\n      avatarUrl: \"https://example.com/avatar.png\",\n      personalEmail: \"isaac.newton@example.com\",\n      personalPhoneNumber: \"+1234567890\",\n      workEmail: \"newton@example.com\",\n      workPhoneNumber: \"+1234567890\",\n      jobId: \"R-6789\",\n      jobTitle: \"Physicist\",\n      departmentId: \"3093\",\n      department: \"Physics\",\n      managerId: \"67890\",\n      gender: {},\n      preferredLanguage: {\n        value: HrisCreateEmployeeRequestDtoSchemasValue.Eng,\n      },\n      ethnicity: {},\n      dateOfBirth: new Date(\"1990-01-01T00:00.000Z\"),\n      birthday: new Date(\"2021-01-01T00:00:00Z\"),\n      maritalStatus: {},\n      avatar: {},\n      hireDate: new Date(\"2021-01-01T00:00.000Z\"),\n      startDate: new Date(\"2021-01-01T00:00.000Z\"),\n      tenure: 2,\n      workAnniversary: new Date(\"2021-01-01T00:00:00Z\"),\n      employmentType: {\n        value: HrisCreateEmployeeRequestDtoSchemasEmploymentTypeValue.Permanent,\n        sourceValue: \"Permanent\",\n      },\n      employmentContractType: {},\n      employmentStatus: {},\n      terminationDate: new Date(\"2021-01-01T00:00:00Z\"),\n      companyName: \"Example Corp\",\n      citizenships: [\n        {\n          value: Value.Us,\n        },\n      ],\n      employments: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          unifiedCustomFields: {\n            \"my_project_custom_field_1\": \"REF-1236\",\n            \"my_project_custom_field_2\": \"some other value\",\n          },\n          employeeId: \"1687-3\",\n          remoteEmployeeId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n          jobTitle: \"Software Engineer\",\n          payRate: \"40.00\",\n          payPeriod: {\n            value: EmploymentValue.Hour,\n            sourceValue: Hour,\n          },\n          payFrequency: {\n            value: EmploymentSchemasValue.Hourly,\n            sourceValue: {},\n          },\n          payCurrency: \"USD\",\n          effectiveDate: new Date(\"2021-01-01T01:01:01.000Z\"),\n          employmentType: {\n            value: EmploymentSchemasEmploymentTypeValue.Permanent,\n            sourceValue: Permanent,\n          },\n          employmentContractType: {},\n          createdAt: new Date(\"2021-01-01T01:01:01.000Z\"),\n          updatedAt: new Date(\"2021-01-01T01:01:01.000Z\"),\n        },\n      ],\n      customFields: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          name: \"Training Completion Status\",\n          value: {},\n          valueId: \"value_456\",\n          remoteValueId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n        },\n      ],\n      benefits: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          name: \"Health Insurance\",\n          provider: \"Aetna\",\n          description: \"Health insurance for employees\",\n          createdAt: new Date(\"2021-01-01T00:00:00Z\"),\n          updatedAt: new Date(\"2021-01-01T00:00:00Z\"),\n        },\n      ],\n      nationalIdentityNumber: {\n        value: \"123456789\",\n        type: {\n          value: HrisCreateEmployeeRequestDtoSchemasNationalIdentityNumberValue.Ssn,\n        },\n      },\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n      homeLocation: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        name: \"Woolsthorpe Manor\",\n        phoneNumber: \"+44 1476 860 364\",\n        street1: \"Water Lane\",\n        street2: \"Woolsthorpe by Colsterworth\",\n        city: \"Grantham\",\n        zipCode: \"NG33 5NR\",\n        country: {\n          value: HrisCreateEmployeeRequestDtoSchemasHomeLocationValue.Us,\n        },\n        passthrough: {\n          \"other_known_names\": \"John Doe\",\n        },\n        state: {},\n      },\n      workLocation: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        name: \"Woolsthorpe Manor\",\n        phoneNumber: \"+44 1476 860 364\",\n        street1: \"Water Lane\",\n        street2: \"Woolsthorpe by Colsterworth\",\n        city: \"Grantham\",\n        zipCode: \"NG33 5NR\",\n        country: {\n          value: HrisCreateEmployeeRequestDtoSchemasWorkLocationValue.Us,\n        },\n        passthrough: {\n          \"other_known_names\": \"John Doe\",\n        },\n        state: {},\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_employee
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getEmployee({\n    id: \"<id>\",\n    fields: \"id,remote_id,first_name,last_name,name,display_name,gender,ethnicity,date_of_birth,birthday,marital_status,avatar_url,avatar,personal_email,personal_phone_number,work_email,work_phone_number,job_id,remote_job_id,job_title,job_description,department_id,remote_department_id,department,cost_centers,benefits,manager_id,remote_manager_id,hire_date,start_date,tenure,work_anniversary,employment_type,employment_contract_type,employment_status,termination_date,company_name,preferred_language,citizenships,home_location,work_location,employments,custom_fields,documents,created_at,updated_at,employee_number,national_identity_number\",\n    expand: \"company,employments,work_location,home_location,custom_fields,groups\",\n    include: \"avatar_url,avatar,custom_fields,job_description,benefits\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_update_employee
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport {\n  EmploymentSchemasEmploymentTypeValue,\n  EmploymentSchemasValue,\n  EmploymentValue,\n  HrisCreateEmployeeRequestDtoSchemasEmploymentTypeValue,\n  HrisCreateEmployeeRequestDtoSchemasHomeLocationValue,\n  HrisCreateEmployeeRequestDtoSchemasNationalIdentityNumberValue,\n  HrisCreateEmployeeRequestDtoSchemasValue,\n  HrisCreateEmployeeRequestDtoSchemasWorkLocationValue,\n  Value,\n} from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.updateEmployee({\n    id: \"<id>\",\n    xAccountId: \"<value>\",\n    hrisCreateEmployeeRequestDto: {\n      firstName: \"Issac\",\n      lastName: \"Newton\",\n      name: \"Issac Newton\",\n      displayName: \"Sir Issac Newton\",\n      avatarUrl: \"https://example.com/avatar.png\",\n      personalEmail: \"isaac.newton@example.com\",\n      personalPhoneNumber: \"+1234567890\",\n      workEmail: \"newton@example.com\",\n      workPhoneNumber: \"+1234567890\",\n      jobId: \"R-6789\",\n      jobTitle: \"Physicist\",\n      departmentId: \"3093\",\n      department: \"Physics\",\n      managerId: \"67890\",\n      gender: {},\n      preferredLanguage: {\n        value: HrisCreateEmployeeRequestDtoSchemasValue.Eng,\n      },\n      ethnicity: {},\n      dateOfBirth: new Date(\"1990-01-01T00:00.000Z\"),\n      birthday: new Date(\"2021-01-01T00:00:00Z\"),\n      maritalStatus: {},\n      avatar: {},\n      hireDate: new Date(\"2021-01-01T00:00.000Z\"),\n      startDate: new Date(\"2021-01-01T00:00.000Z\"),\n      tenure: 2,\n      workAnniversary: new Date(\"2021-01-01T00:00:00Z\"),\n      employmentType: {\n        value: HrisCreateEmployeeRequestDtoSchemasEmploymentTypeValue.Permanent,\n        sourceValue: \"Permanent\",\n      },\n      employmentContractType: {},\n      employmentStatus: {},\n      terminationDate: new Date(\"2021-01-01T00:00:00Z\"),\n      companyName: \"Example Corp\",\n      citizenships: [\n        {\n          value: Value.Us,\n        },\n      ],\n      employments: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          unifiedCustomFields: {\n            \"my_project_custom_field_1\": \"REF-1236\",\n            \"my_project_custom_field_2\": \"some other value\",\n          },\n          employeeId: \"1687-3\",\n          remoteEmployeeId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n          jobTitle: \"Software Engineer\",\n          payRate: \"40.00\",\n          payPeriod: {\n            value: EmploymentValue.Hour,\n            sourceValue: Hour,\n          },\n          payFrequency: {\n            value: EmploymentSchemasValue.Hourly,\n            sourceValue: {},\n          },\n          payCurrency: \"USD\",\n          effectiveDate: new Date(\"2021-01-01T01:01:01.000Z\"),\n          employmentType: {\n            value: EmploymentSchemasEmploymentTypeValue.Permanent,\n            sourceValue: true,\n          },\n          employmentContractType: {},\n          createdAt: new Date(\"2021-01-01T01:01:01.000Z\"),\n          updatedAt: new Date(\"2021-01-01T01:01:01.000Z\"),\n        },\n      ],\n      customFields: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          name: \"Training Completion Status\",\n          value: [\n            \"Completed\",\n          ],\n          valueId: \"value_456\",\n          remoteValueId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n        },\n      ],\n      benefits: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          name: \"Health Insurance\",\n          provider: \"Aetna\",\n          description: \"Health insurance for employees\",\n          createdAt: new Date(\"2021-01-01T00:00:00Z\"),\n          updatedAt: new Date(\"2021-01-01T00:00:00Z\"),\n        },\n      ],\n      nationalIdentityNumber: {\n        value: \"123456789\",\n        type: {\n          value: HrisCreateEmployeeRequestDtoSchemasNationalIdentityNumberValue.Ssn,\n        },\n      },\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n      homeLocation: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        name: \"Woolsthorpe Manor\",\n        phoneNumber: \"+44 1476 860 364\",\n        street1: \"Water Lane\",\n        street2: \"Woolsthorpe by Colsterworth\",\n        city: \"Grantham\",\n        zipCode: \"NG33 5NR\",\n        country: {\n          value: HrisCreateEmployeeRequestDtoSchemasHomeLocationValue.Us,\n        },\n        passthrough: {\n          \"other_known_names\": \"John Doe\",\n        },\n        state: {},\n      },\n      workLocation: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        name: \"Woolsthorpe Manor\",\n        phoneNumber: \"+44 1476 860 364\",\n        street1: \"Water Lane\",\n        street2: \"Woolsthorpe by Colsterworth\",\n        city: \"Grantham\",\n        zipCode: \"NG33 5NR\",\n        country: {\n          value: HrisCreateEmployeeRequestDtoSchemasWorkLocationValue.Us,\n        },\n        passthrough: {\n          \"other_known_names\": \"John Doe\",\n        },\n        state: {},\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/documents"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_employee_documents
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listEmployeeDocuments({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,path,type,category,category_id,remote_category_id,contents,created_at,updated_at,remote_url,file_format\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/documents/upload"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_upload_employee_document
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport {\n  HrisDocumentsUploadRequestDtoSchemasConfidentialValue,\n  HrisDocumentsUploadRequestDtoSchemasValue,\n  HrisDocumentsUploadRequestDtoValue,\n} from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.uploadEmployeeDocument({\n    id: \"<id>\",\n    xAccountId: \"<value>\",\n    hrisDocumentsUploadRequestDto: {\n      name: \"weather-forecast\",\n      fileFormat: {\n        value: HrisDocumentsUploadRequestDtoValue.Pdf,\n        sourceValue: \"abc\",\n      },\n      content: \"VGhpcyBpc24ndCByZWFsbHkgYSBzYW1wbGUgZmlsZSwgYnV0IG5vIG9uZSB3aWxsIGV2ZXIga25vdyE\",\n      categoryId: \"6530\",\n      path: \"/path/to/file\",\n      category: {\n        value: HrisDocumentsUploadRequestDtoSchemasValue.UnmappedValue,\n        sourceValue: \"550e8400-e29b-41d4-a716-446655440000\",\n      },\n      confidential: {\n        value: HrisDocumentsUploadRequestDtoSchemasConfidentialValue.True,\n        sourceValue: \"public\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/documents/upload/batch"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_batch_upload_employee_document
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport {\n  HrisDocumentsUploadRequestDtoSchemasConfidentialValue,\n  HrisDocumentsUploadRequestDtoSchemasValue,\n  HrisDocumentsUploadRequestDtoValue,\n} from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.batchUploadEmployeeDocument({\n    id: \"<id>\",\n    xAccountId: \"<value>\",\n    hrisBatchDocumentUploadRequestDto: {\n      items: [\n        {\n          name: \"weather-forecast\",\n          fileFormat: {\n            value: HrisDocumentsUploadRequestDtoValue.Pdf,\n            sourceValue: \"abc\",\n          },\n          content: \"VGhpcyBpc24ndCByZWFsbHkgYSBzYW1wbGUgZmlsZSwgYnV0IG5vIG9uZSB3aWxsIGV2ZXIga25vdyE\",\n          categoryId: \"6530\",\n          path: \"/path/to/file\",\n          category: {\n            value: HrisDocumentsUploadRequestDtoSchemasValue.Benefit,\n            sourceValue: \"550e8400-e29b-41d4-a716-446655440000\",\n          },\n          confidential: {\n            value: HrisDocumentsUploadRequestDtoSchemasConfidentialValue.True,\n            sourceValue: true,\n          },\n        },\n      ],\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/documents/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_employee_document
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getEmployeeDocument({\n    id: \"<id>\",\n    subResourceId: \"<value>\",\n    fields: \"id,remote_id,name,path,type,category,category_id,remote_category_id,contents,created_at,updated_at,remote_url,file_format\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/documents/{subResourceId}/download"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_download_employee_document
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.downloadEmployeeDocument({\n    id: \"<id>\",\n    subResourceId: \"<value>\",\n    format: \"base64\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/employments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_employee_employments
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listEmployeeEmployments({\n    id: \"<id>\",\n    fields: \"id,remote_id,employee_id,remote_employee_id,job_title,pay_rate,pay_period,pay_frequency,pay_currency,effective_date,employment_type,employment_contract_type,created_at,updated_at\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    expand: \"groups\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/employments/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_employee_employment
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getEmployeeEmployment({\n    id: \"<id>\",\n    subResourceId: \"<value>\",\n    fields: \"id,remote_id,employee_id,remote_employee_id,job_title,pay_rate,pay_period,pay_frequency,pay_currency,effective_date,employment_type,employment_contract_type,created_at,updated_at\",\n    expand: \"groups\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/time_off"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_employee_time_off_requests
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listEmployeeTimeOffRequests({\n    id: \"<id>\",\n    fields: \"id,remote_id,employee_id,remote_employee_id,approver_id,remote_approver_id,status,type,start_date,end_date,start_half_day,end_half_day,duration,created_at,updated_at\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/time_off"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_create_employee_time_off_request
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.createEmployeeTimeOffRequest({\n    id: \"<id>\",\n    xAccountId: \"<value>\",\n    hrisCreateTimeOffRequestDto: {\n      employeeId: \"1687-3\",\n      approverId: \"1687-4\",\n      startDate: new Date(\"2021-01-01T01:01:01.000Z\"),\n      endDate: new Date(\"2021-01-01T01:01:01.000Z\"),\n      startHalfDay: true,\n      endHalfDay: true,\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/time_off/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_employees_time_off_request
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getEmployeesTimeOffRequest({\n    id: \"<id>\",\n    subResourceId: \"<value>\",\n    fields: \"id,remote_id,employee_id,remote_employee_id,approver_id,remote_approver_id,status,type,start_date,end_date,start_half_day,end_half_day,duration,created_at,updated_at\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/work_eligibility"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_employee_work_eligibility
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listEmployeeWorkEligibility({\n    id: \"<id>\",\n    fields: \"id,remote_id,type,sub_type,document,valid_from,valid_to,issued_by,number\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/work_eligibility"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_create_employee_work_eligibility_request
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport {\n  HrisCreateWorkEligibilityRequestDtoSchemasDocumentValue,\n  HrisCreateWorkEligibilityRequestDtoSchemasValue,\n} from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.createEmployeeWorkEligibilityRequest({\n    id: \"<id>\",\n    xAccountId: \"<value>\",\n    hrisCreateWorkEligibilityRequestDto: {\n      type: {},\n      subType: \"H1B\",\n      document: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        name: \"My Document\",\n        path: \"/path/to/file\",\n        category: {},\n        categoryId: \"6530\",\n        createdAt: new Date(\"2021-01-01T01:01:01.000Z\"),\n        updatedAt: new Date(\"2021-01-02T01:01:01.000Z\"),\n        remoteUrl: \"https://example.com/file.pdf\",\n        fileFormat: {\n          value: HrisCreateWorkEligibilityRequestDtoSchemasDocumentValue.Pdf,\n          sourceValue: \"abc\",\n        },\n      },\n      validFrom: new Date(\"2021-01-01T00:00.000Z\"),\n      validTo: new Date(\"2021-01-01T00:00.000Z\"),\n      issuedBy: {\n        value: HrisCreateWorkEligibilityRequestDtoSchemasValue.Us,\n      },\n      number: \"1234567890\",\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/work_eligibility/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_employees_work_eligibility
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getEmployeesWorkEligibility({\n    id: \"<id>\",\n    subResourceId: \"<value>\",\n    fields: \"id,remote_id,type,sub_type,document,valid_from,valid_to,issued_by,number\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/work_eligibility/{subResourceId}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_update_employee_work_eligibility_request
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport {\n  HrisCreateWorkEligibilityRequestDtoSchemasDocumentValue,\n  HrisCreateWorkEligibilityRequestDtoSchemasValue,\n} from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.updateEmployeeWorkEligibilityRequest({\n    id: \"<id>\",\n    subResourceId: \"<value>\",\n    xAccountId: \"<value>\",\n    hrisCreateWorkEligibilityRequestDto: {\n      type: {},\n      subType: \"H1B\",\n      document: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        name: \"My Document\",\n        path: \"/path/to/file\",\n        category: {},\n        categoryId: \"6530\",\n        createdAt: new Date(\"2021-01-01T01:01:01.000Z\"),\n        updatedAt: new Date(\"2021-01-02T01:01:01.000Z\"),\n        remoteUrl: \"https://example.com/file.pdf\",\n        fileFormat: {\n          value: HrisCreateWorkEligibilityRequestDtoSchemasDocumentValue.Pdf,\n          sourceValue: \"abc\",\n        },\n      },\n      validFrom: new Date(\"2021-01-01T00:00.000Z\"),\n      validTo: new Date(\"2021-01-01T00:00.000Z\"),\n      issuedBy: {\n        value: HrisCreateWorkEligibilityRequestDtoSchemasValue.Us,\n      },\n      number: \"1234567890\",\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_employments
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listEmployments({\n    fields: \"id,remote_id,employee_id,remote_employee_id,job_title,pay_rate,pay_period,pay_frequency,pay_currency,effective_date,employment_type,employment_contract_type,created_at,updated_at\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    expand: \"groups\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_employment
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getEmployment({\n    id: \"<id>\",\n    fields: \"id,remote_id,employee_id,remote_employee_id,job_title,pay_rate,pay_period,pay_frequency,pay_currency,effective_date,employment_type,employment_contract_type,created_at,updated_at\",\n    expand: \"groups\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/groups"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_groups
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listGroups({\n    fields: \"id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/groups/departments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_department_groups
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listDepartmentGroups({\n    fields: \"id,remote_id,name\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/groups/departments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_department_group
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getDepartmentGroup({\n    id: \"<id>\",\n    fields: \"id,remote_id,name\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/groups/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_group
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getGroup({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/jobs"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_jobs
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listJobs({\n    fields: \"id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/jobs/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_job
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getJob({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/locations"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_locations
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listLocations({\n    fields: \"id,remote_id,employee_id,remote_employee_id,name,phone_number,street_1,street_2,city,state,zip_code,country,location_type,created_at,updated_at\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/locations/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_location
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getLocation({\n    id: \"<id>\",\n    fields: \"id,remote_id,employee_id,remote_employee_id,name,phone_number,street_1,street_2,city,state,zip_code,country,location_type,created_at,updated_at\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/time_off"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_time_off_requests
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listTimeOffRequests({\n    fields: \"id,remote_id,employee_id,remote_employee_id,approver_id,remote_approver_id,status,type,start_date,end_date,start_half_day,end_half_day,duration,created_at,updated_at\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/time_off"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_create_time_off_request
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.createTimeOffRequest({\n    xAccountId: \"<value>\",\n    hrisCreateTimeOffRequestDto: {\n      employeeId: \"1687-3\",\n      approverId: \"1687-4\",\n      startDate: new Date(\"2021-01-01T01:01:01.000Z\"),\n      endDate: new Date(\"2021-01-01T01:01:01.000Z\"),\n      startHalfDay: true,\n      endHalfDay: true,\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/time_off/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_time_off_request
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getTimeOffRequest({\n    id: \"<id>\",\n    fields: \"id,remote_id,employee_id,remote_employee_id,approver_id,remote_approver_id,status,type,start_date,end_date,start_half_day,end_half_day,duration,created_at,updated_at\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/time_off/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_update_time_off_request
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.updateTimeOffRequest({\n    id: \"<id>\",\n    xAccountId: \"<value>\",\n    hrisCreateTimeOffRequestDto: {\n      employeeId: \"1687-3\",\n      approverId: \"1687-4\",\n      startDate: new Date(\"2021-01-01T01:01:01.000Z\"),\n      endDate: new Date(\"2021-01-01T01:01:01.000Z\"),\n      startHalfDay: true,\n      endHalfDay: true,\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/iam/groups"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: iam_list_groups
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.iam.listGroups({\n    fields: \"id,remote_id,parent_id,remote_parent_id,name,description,roles,type,created_at,updated_at\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    expand: \"roles\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/iam/groups/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: iam_get_group
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.iam.getGroup({\n    id: \"<id>\",\n    fields: \"id,remote_id,parent_id,remote_parent_id,name,description,roles,type,created_at,updated_at\",\n    expand: \"roles\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/iam/policies"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: iam_list_policies
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.iam.listPolicies({\n    fields: \"id,remote_id,name,permissions,description,created_at,updated_at\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    expand: \"permissions\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/iam/policies/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: iam_get_policy
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.iam.getPolicy({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,permissions,description,created_at,updated_at\",\n    expand: \"permissions\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/iam/roles"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: iam_list_roles
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.iam.listRoles({\n    fields: \"id,remote_id,name,type,policies,description,created_at,updated_at\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    expand: \"policies\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/iam/roles/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: iam_get_role
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.iam.getRole({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,type,policies,description,created_at,updated_at\",\n    expand: \"policies\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/iam/users"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: iam_list_users
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.iam.listUsers({\n    fields: \"id,remote_id,first_name,last_name,name,primary_email_address,username,roles,groups,status,avatar,is_bot_user,last_active_at,last_login_at,created_at,updated_at,multi_factor_enabled\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    expand: \"roles,groups\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/iam/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: iam_get_user
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.iam.getUser({\n    id: \"<id>\",\n    fields: \"id,remote_id,first_name,last_name,name,primary_email_address,username,roles,groups,status,avatar,is_bot_user,last_active_at,last_login_at,created_at,updated_at,multi_factor_enabled\",\n    expand: \"roles,groups\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/assignments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_list_assignments
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.listAssignments({\n    fields: \"id,remote_id,user_id,remote_user_id,course_id,remote_course_id,updated_at,created_at,due_date,status\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    userId: \"c28xyrc55866bvuv\",\n    remoteUserId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/assignments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_get_assignment
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.getAssignment({\n    id: \"<id>\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/categories"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_list_categories
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.listCategories({\n    fields: \"id,remote_id,name,active\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/categories/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_get_category
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.getCategory({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,active\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/completions"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_list_completions
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.listCompletions({\n    fields: \"id,remote_id,external_id,remote_external_id,content_id,remote_content_id,user_id,remote_user_id,completed_at,updated_at,created_at,result,content_external_reference\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    userId: \"746359\",\n    remoteUserId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/completions/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_get_completion
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.getCompletion({\n    id: \"<id>\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/content"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_list_content
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.listContent({\n    fields: \"id,remote_id,external_reference,course_ids,remote_course_ids,title,description,languages,content_url,content_type,cover_url,active,duration,categories,order\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/content"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_create_content
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { ContentLanguageEnumValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.createContent({\n    xAccountId: \"<value>\",\n    lmsCreateContentRequestDto: {\n      unifiedCustomFields: {\n        \"my_project_custom_field_1\": \"REF-1236\",\n        \"my_project_custom_field_2\": \"some other value\",\n      },\n      externalReference: \"SOFTWARE-ENG-LV1-TRAINING-VIDEO-1\",\n      courseIds: [\n        \"16873-SOFTWARE-ENG-COURSE\",\n      ],\n      title: \"Software Engineer Lv 1\",\n      description: \"This video acts as learning content for software engineers.\",\n      languages: [\n        {\n          value: ContentLanguageEnumValue.EnGB,\n        },\n      ],\n      contentUrl: \"https://www.youtube.com/watch?v=16873\",\n      coverUrl: \"https://www.googledrive.com/?v=16873\",\n      active: true,\n      duration: \"P3Y6M4DT12H30M5S\",\n      order: 1,\n      categories: [\n        {\n          unifiedCustomFields: {\n            \"my_project_custom_field_1\": \"REF-1236\",\n            \"my_project_custom_field_2\": \"some other value\",\n          },\n          name: \"Technology\",\n          active: true,\n        },\n      ],\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/content"]["put"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_upsert_content
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { ContentLanguageEnumValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.upsertContent({\n    xAccountId: \"<value>\",\n    lmsUpsertContentRequestDto: {\n      unifiedCustomFields: {\n        \"my_project_custom_field_1\": \"REF-1236\",\n        \"my_project_custom_field_2\": \"some other value\",\n      },\n      externalReference: \"SOFTWARE-ENG-LV1-TRAINING-VIDEO-1\",\n      courseIds: [\n        \"16873-SOFTWARE-ENG-COURSE\",\n      ],\n      title: \"Software Engineer Lv 1\",\n      description: \"This video acts as learning content for software engineers.\",\n      languages: [\n        {\n          value: ContentLanguageEnumValue.EnGB,\n        },\n      ],\n      contentUrl: \"https://www.youtube.com/watch?v=16873\",\n      coverUrl: \"https://www.googledrive.com/?v=16873\",\n      active: true,\n      duration: \"P3Y6M4DT12H30M5S\",\n      order: 1,\n      categories: [\n        {\n          unifiedCustomFields: {\n            \"my_project_custom_field_1\": \"REF-1236\",\n            \"my_project_custom_field_2\": \"some other value\",\n          },\n          name: \"Technology\",\n          active: true,\n        },\n      ],\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/content/batch"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_batch_upsert_content
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { ContentLanguageEnumValue, LmsUpsertContentRequestDto2 } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.batchUpsertContent({\n    xAccountId: \"<value>\",\n    lmsBatchUpsertContentRequestDto: {\n      items: [\n        {\n          unifiedCustomFields: {\n            \"my_project_custom_field_1\": \"REF-1236\",\n            \"my_project_custom_field_2\": \"some other value\",\n          },\n          externalReference: \"SOFTWARE-ENG-LV1-TRAINING-VIDEO-1\",\n          courseIds: [\n            \"16873-SOFTWARE-ENG-COURSE\",\n          ],\n          title: \"Software Engineer Lv 1\",\n          description: \"This video acts as learning content for software engineers.\",\n          languages: [\n            {\n              value: ContentLanguageEnumValue.EnGB,\n            },\n          ],\n          contentUrl: \"https://www.youtube.com/watch?v=16873\",\n          coverUrl: \"https://www.googledrive.com/?v=16873\",\n          active: LmsUpsertContentRequestDto2.True,\n          duration: \"P3Y6M4DT12H30M5S\",\n          order: 1,\n          categories: [\n            {\n              unifiedCustomFields: {\n                \"my_project_custom_field_1\": \"REF-1236\",\n                \"my_project_custom_field_2\": \"some other value\",\n              },\n              name: \"Technology\",\n              active: true,\n            },\n          ],\n        },\n      ],\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/content/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_get_content
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.getContent({\n    id: \"<id>\",\n    fields: \"id,remote_id,external_reference,course_ids,remote_course_ids,title,description,languages,content_url,content_type,cover_url,active,duration,categories,order\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/content/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_update_content
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { ContentLanguageEnumValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.updateContent({\n    id: \"<id>\",\n    xAccountId: \"<value>\",\n    lmsCreateContentRequestDto: {\n      unifiedCustomFields: {\n        \"my_project_custom_field_1\": \"REF-1236\",\n        \"my_project_custom_field_2\": \"some other value\",\n      },\n      externalReference: \"SOFTWARE-ENG-LV1-TRAINING-VIDEO-1\",\n      courseIds: [\n        \"16873-SOFTWARE-ENG-COURSE\",\n      ],\n      title: \"Software Engineer Lv 1\",\n      description: \"This video acts as learning content for software engineers.\",\n      languages: [\n        {\n          value: ContentLanguageEnumValue.EnGB,\n        },\n      ],\n      contentUrl: \"https://www.youtube.com/watch?v=16873\",\n      coverUrl: \"https://www.googledrive.com/?v=16873\",\n      active: true,\n      duration: \"P3Y6M4DT12H30M5S\",\n      order: 1,\n      categories: [\n        {\n          unifiedCustomFields: {\n            \"my_project_custom_field_1\": \"REF-1236\",\n            \"my_project_custom_field_2\": \"some other value\",\n          },\n          name: \"Technology\",\n          active: true,\n        },\n      ],\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/courses"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_list_courses
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.listCourses({\n    fields: \"id,remote_id,external_reference,content_ids,remote_content_ids,title,description,languages,course_type,cover_url,url,active,duration,categories,skills,updated_at,created_at\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/courses/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_get_course
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.getCourse({\n    id: \"<id>\",\n    fields: \"id,remote_id,external_reference,content_ids,remote_content_ids,title,description,languages,course_type,cover_url,url,active,duration,categories,skills,updated_at,created_at\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/skills"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_list_skills
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.listSkills({\n    fields: \"id,remote_id,name,active,level\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/skills/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_get_skill
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.getSkill({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,active,level\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/users"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_list_users
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.listUsers({\n    fields: \"id,remote_id,external_reference,email,phone_number,created_at,updated_at,name\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_get_user
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.getUser({\n    id: \"<id>\",\n    fields: \"id,remote_id,external_reference,email,phone_number,created_at,updated_at,name\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/users/{id}/assignments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_list_user_assignments
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.listUserAssignments({\n    id: \"<id>\",\n    fields: \"id,remote_id,user_id,remote_user_id,course_id,remote_course_id,updated_at,created_at,due_date,status\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    userId: \"c28xyrc55866bvuv\",\n    remoteUserId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/users/{id}/assignments/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_get_user_assignment
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.getUserAssignment({\n    id: \"<id>\",\n    subResourceId: \"<value>\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/users/{id}/completions"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_list_user_completions
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.listUserCompletions({\n    id: \"<id>\",\n    fields: \"id,remote_id,external_id,remote_external_id,content_id,remote_content_id,user_id,remote_user_id,completed_at,updated_at,created_at,result,content_external_reference\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    userId: \"746359\",\n    remoteUserId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/users/{id}/completions"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_create_user_completion
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.createUserCompletion({\n    id: \"<id>\",\n    xAccountId: \"<value>\",\n    lmsCreateCompletionRequestDto: {\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n      externalId: \"SOFTWARE-ENG-LV1-TRAINING-VIDEO-1-COMPLETION\",\n      contentExternalReference: \"SOFTWARE-ENG-LV1-TRAINING-VIDEO-1-CONTENT\",\n      contentId: \"16873-ENG-VIDEO-1\",\n      completedAt: \"2021-07-21T14:00:00.000Z\",\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/users/{id}/completions/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_get_user_completion
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.getUserCompletion({\n    id: \"<id>\",\n    subResourceId: \"<value>\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/campaigns"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_list_campaigns
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.listCampaigns({\n    fields: \"id,remote_id,name,created_at,updated_at,description,schedule_type,status,channels,first_sent_at,last_sent_at,tags,messages\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/campaigns/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_get_campaign
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.getCampaign({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,created_at,updated_at,description,schedule_type,status,channels,first_sent_at,last_sent_at,tags,messages\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/content_blocks"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_list_content_blocks
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.listContentBlocks({\n    fields: \"id,remote_id,name,type,content,status,tags,created_at,updated_at\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/content_blocks"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_create_content_block
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.createContentBlock({\n    xAccountId: \"<value>\",\n    marketingCreateContentBlocksRequestDto: {\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/content_blocks/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_get_content_block
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.getContentBlock({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,type,content,status,tags,created_at,updated_at\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/content_blocks/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_update_content_block
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.updateContentBlock({\n    id: \"<id>\",\n    xAccountId: \"<value>\",\n    marketingCreateContentBlocksRequestDto: {\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/email"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_list_email_templates
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.listEmailTemplates({\n    fields: \"id,remote_id,name,messages,created_at,updated_at,tags\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/email"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_create_email_template
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.createEmailTemplate({\n    xAccountId: \"<value>\",\n    marketingCreateEmailTemplateRequestDto: {\n      messages: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          messageType: {\n            sourceValue: true,\n          },\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/email/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_get_email_template
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.getEmailTemplate({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,messages,created_at,updated_at,tags\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/email/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_update_email_template
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.updateEmailTemplate({\n    id: \"<id>\",\n    xAccountId: \"<value>\",\n    marketingCreateEmailTemplateRequestDto: {\n      messages: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          messageType: {\n            sourceValue: Email,\n          },\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/in_app"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_list_in_app_templates
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.listInAppTemplates({\n    fields: \"id,remote_id,name,messages,created_at,updated_at,tags\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/in_app"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_create_in_app_template
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.createInAppTemplate({\n    xAccountId: \"<value>\",\n    marketingCreateInAppTemplateRequestDto: {\n      messages: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          messageType: {\n            sourceValue: \"Email\",\n          },\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/in_app/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_get_in_app_template
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.getInAppTemplate({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,messages,created_at,updated_at,tags\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/in_app/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_update_in_app_template
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.updateInAppTemplate({\n    id: \"<id>\",\n    xAccountId: \"<value>\",\n    marketingCreateInAppTemplateRequestDto: {\n      messages: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          messageType: {\n            sourceValue: Email,\n          },\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/omni_channel"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_list_omni_channel_templates
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.listOmniChannelTemplates({\n    fields: \"id,remote_id,name,messages,created_at,updated_at,tags\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/omni_channel"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_create_omni_channel_template
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.createOmniChannelTemplate({\n    xAccountId: \"<value>\",\n    marketingCreateTemplateRequestDto: {\n      messages: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          messageType: {\n            sourceValue: [\n              \"Email\",\n            ],\n          },\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/omni_channel/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_get_omni_channel_template
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.getOmniChannelTemplate({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,messages,created_at,updated_at,tags\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/omni_channel/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_update_omni_channel_template
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.updateOmniChannelTemplate({\n    id: \"<id>\",\n    xAccountId: \"<value>\",\n    marketingCreateTemplateRequestDto: {\n      messages: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          messageType: {\n            sourceValue: \"Email\",\n          },\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/push"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_list_push_templates
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.listPushTemplates({\n    fields: \"id,remote_id,name,messages,created_at,updated_at,tags\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/push"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_create_push_template
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.createPushTemplate({\n    xAccountId: \"<value>\",\n    marketingCreatePushTemplateRequestDto: {\n      messages: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          messageType: {\n            sourceValue: [\n              \"Email\",\n            ],\n          },\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/push/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_get_push_template
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.getPushTemplate({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,messages,created_at,updated_at,tags\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/push/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_update_push_template
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.updatePushTemplate({\n    id: \"<id>\",\n    xAccountId: \"<value>\",\n    marketingCreatePushTemplateRequestDto: {\n      messages: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          messageType: {\n            sourceValue: [\n              \"Email\",\n            ],\n          },\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/sms"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_list_sms_templates
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.listSmsTemplates({\n    fields: \"id,remote_id,name,messages,created_at,updated_at,tags\",\n    filter: {\n      updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    },\n    updatedAfter: \"2020-01-01T00:00:00.000Z\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/sms"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_create_sms_template
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.createSmsTemplate({\n    xAccountId: \"<value>\",\n    marketingCreateSmsTemplateRequestDto: {\n      messages: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          messageType: {\n            sourceValue: {},\n          },\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/sms/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_get_sms_template
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.getSmsTemplate({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,messages,created_at,updated_at,tags\",\n    xAccountId: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/sms/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_update_sms_template
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.updateSmsTemplate({\n    id: \"<id>\",\n    xAccountId: \"<value>\",\n    marketingCreateSmsTemplateRequestDto: {\n      messages: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          messageType: {\n            sourceValue: Email,\n          },\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/unified/proxy"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_proxy_request
          source: "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.proxy.proxyRequest({\n    xAccountId: \"<value>\",\n    proxyRequestBody: {\n      url: \"https://api.sample-integration.com/v1\",\n      path: \"/employees/directory\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
