overlay: 1.0.0
info:
  title: CodeSamples overlay for typescript target
  version: 0.0.0
actions:
  - target: $["paths"]["/unified/ats/assessments/orders/{id}/results"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_assessments_result
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.getAssessmentsResult({
                id: "<id>",
                fields: "assessment_id,remote_assessment_id,candidate,score,assessment_date,submission_date,summary,result,result_url,attachments",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/crm/contacts"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: crm_create_contact
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.crm.createContact({
                xAccountId: "<value>",
                crmCreateContactRequestDto: {
                  firstName: "Steve",
                  lastName: "Wozniak",
                  companyName: "Apple Inc.",
                  emails: [
                    "steve@apple.com",
                  ],
                  phoneNumbers: [
                    "123-456-7890",
                  ],
                  dealIds: [
                    "deal-001",
                    "deal-002",
                  ],
                  accountIds: [
                    "account-123",
                    "account-456",
                  ],
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounts/{id}"]["delete"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_delete_account
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.accounts.deleteAccount({
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}/documents/{subResourceId}/download"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_download_employee_document
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.downloadEmployeeDocument({
                id: "<id>",
                subResourceId: "<value>",
                format: "base64",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}/work_eligibility"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_create_employee_work_eligibility_request
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";
            import {
              HrisCreateWorkEligibilityRequestDtoSchemasDocumentValue,
              HrisCreateWorkEligibilityRequestDtoSchemasValue,
            } from "@stackone/stackone-client-ts/sdk/models/shared";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.createEmployeeWorkEligibilityRequest({
                id: "<id>",
                xAccountId: "<value>",
                hrisCreateWorkEligibilityRequestDto: {
                  type: {},
                  subType: "H1B",
                  document: {
                    id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                    remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                    name: "My Document",
                    path: "/path/to/file",
                    category: {},
                    categoryId: "6530",
                    createdAt: new Date("2021-01-01T01:01:01.000Z"),
                    updatedAt: new Date("2021-01-02T01:01:01.000Z"),
                    remoteUrl: "https://example.com/file.pdf",
                    fileFormat: {
                      value: HrisCreateWorkEligibilityRequestDtoSchemasDocumentValue.Pdf,
                      sourceValue: {},
                    },
                  },
                  validFrom: new Date("2021-01-01T00:00.000Z"),
                  validTo: new Date("2021-01-01T00:00.000Z"),
                  issuedBy: {
                    value: HrisCreateWorkEligibilityRequestDtoSchemasValue.Us,
                  },
                  number: "1234567890",
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/groups/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_group
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.getGroup({
                id: "<id>",
                fields: "id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/jobs/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_job
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.getJob({
                id: "<id>",
                fields: "id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/applications/{id}/documents"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_application_documents
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.listApplicationDocuments({
                id: "<id>",
                fields: "id,remote_id,name,path,type,category,category_id,remote_category_id,contents,created_at,updated_at,remote_url,file_format",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/omni_channel/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_update_omni_channel_template
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.marketing.updateOmniChannelTemplate({
                id: "<id>",
                xAccountId: "<value>",
                marketingCreateTemplateRequestDto: {
                  messages: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      messageType: {
                        sourceValue: "Email",
                      },
                    },
                  ],
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/applications"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_applications
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.listApplications({
                fields: "id,remote_id,candidate_id,remote_candidate_id,job_id,remote_job_id,interview_stage,interview_stage_id,remote_interview_stage_id,rejected_reason,rejected_reason_id,remote_rejected_reason_id,rejected_reason_ids,remote_rejected_reason_ids,rejected_reasons,rejected_at,location_id,remote_location_id,location_ids,remote_location_ids,status,application_status,questionnaires,attachments,result_links,source,created_at,updated_at,documents,custom_fields,candidate",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                expand: "documents",
                include: "attachments,custom_fields",
                jobId: "cxQiyiuasdFKfdsYfer",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/applications/{id}/offers/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_application_offer
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.getApplicationOffer({
                id: "<id>",
                subResourceId: "<value>",
                fields: "id,remote_id,application_id,remote_application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/iam/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: iam_get_user
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.iam.getUser({
                id: "<id>",
                fields: "id,remote_id,first_name,last_name,name,primary_email_address,username,roles,groups,status,avatar,is_bot_user,last_active_at,last_login_at,created_at,updated_at,multi_factor_enabled",
                expand: "roles,groups",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_employee
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.getEmployee({
                id: "<id>",
                fields: "id,remote_id,first_name,last_name,name,display_name,gender,ethnicity,date_of_birth,birthday,marital_status,avatar_url,avatar,personal_email,personal_phone_number,work_email,work_phone_number,job_title,job_description,department,cost_centers,benefits,manager_id,remote_manager_id,hire_date,start_date,tenure,work_anniversary,employment_type,employment_contract_type,employment_status,termination_date,company_name,preferred_language,citizenships,home_location,work_location,employments,custom_fields,documents,created_at,updated_at,employee_number,national_identity_number",
                expand: "company,employments,work_location,home_location,custom_fields,groups",
                include: "avatar_url,avatar,custom_fields,job_description,benefits",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/rejected_reasons/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_rejected_reason
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.getRejectedReason({
                id: "<id>",
                fields: "id,remote_id,label,type,rejected_reason_type",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_user
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.getUser({
                id: "<id>",
                fields: "id,remote_id,first_name,last_name,name,email",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/candidates"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_create_candidate
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.createCandidate({
                xAccountId: "<value>",
                atsCreateCandidateRequestDto: {
                  name: "Romain Sestier",
                  firstName: "Romain",
                  lastName: "Sestier",
                  email: "sestier.romain123@gmail.com",
                  socialLinks: [
                    {
                      type: "linkedin",
                      url: "https://www.linkedin.com/in/romainsestier/",
                    },
                  ],
                  company: "Company Inc.",
                  title: "Software Engineer",
                  hiredAt: new Date("2021-01-01T01:01:01.000Z"),
                  country: "United States",
                  customFields: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      name: "Training Completion Status",
                      value: Completed,
                      valueId: "value_456",
                      remoteValueId: "e3cb75bf-aa84-466e-a6c1-b8322b257a48",
                    },
                  ],
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                  phoneNumber: "+1234567890",
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/offers"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_offers
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.listOffers({
                fields: "id,remote_id,application_id,remote_application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/in_app"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_create_in_app_template
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.marketing.createInAppTemplate({
                xAccountId: "<value>",
                marketingCreateInAppTemplateRequestDto: {
                  messages: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      messageType: {
                        sourceValue: "Email",
                      },
                    },
                  ],
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/sms"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_list_sms_templates
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.marketing.listSmsTemplates({
                fields: "id,remote_id,name,messages,created_at,updated_at,tags",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/sms/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_update_sms_template
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.marketing.updateSmsTemplate({
                id: "<id>",
                xAccountId: "<value>",
                marketingCreateSmsTemplateRequestDto: {
                  messages: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      messageType: {
                        sourceValue: Email,
                      },
                    },
                  ],
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/lms/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_get_user
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.lms.getUser({
                id: "<id>",
                fields: "id,remote_id,external_reference,email,phone_number,created_at,updated_at,name",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/offers/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_offer
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.getOffer({
                id: "<id>",
                fields: "id,remote_id,application_id,remote_application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/iam/groups"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: iam_list_groups
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.iam.listGroups({
                fields: "id,remote_id,parent_id,remote_parent_id,name,description,roles,type,created_at,updated_at",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                expand: "roles",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_get_account
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.accounts.getAccount({
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_create_employee
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";
            import {
              EmploymentSchemasEmploymentTypeValue,
              EmploymentSchemasValue,
              EmploymentValue,
              HrisCreateEmployeeRequestDtoSchemasEmploymentTypeValue,
              HrisCreateEmployeeRequestDtoSchemasHomeLocationValue,
              HrisCreateEmployeeRequestDtoSchemasValue,
              HrisCreateEmployeeRequestDtoSchemasWorkLocationValue,
              Value,
            } from "@stackone/stackone-client-ts/sdk/models/shared";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.createEmployee({
                xAccountId: "<value>",
                hrisCreateEmployeeRequestDto: {
                  firstName: "Issac",
                  lastName: "Newton",
                  name: "Issac Newton",
                  displayName: "Sir Issac Newton",
                  avatarUrl: "https://example.com/avatar.png",
                  personalEmail: "isaac.newton@example.com",
                  personalPhoneNumber: "+1234567890",
                  workEmail: "newton@example.com",
                  workPhoneNumber: "+1234567890",
                  jobTitle: "Physicist",
                  department: "Physics",
                  managerId: "67890",
                  gender: {},
                  preferredLanguage: {
                    value: HrisCreateEmployeeRequestDtoSchemasValue.Eng,
                  },
                  ethnicity: {},
                  dateOfBirth: new Date("1990-01-01T00:00.000Z"),
                  birthday: new Date("2021-01-01T00:00:00Z"),
                  maritalStatus: {},
                  avatar: {},
                  hireDate: new Date("2021-01-01T00:00.000Z"),
                  startDate: new Date("2021-01-01T00:00.000Z"),
                  tenure: 2,
                  workAnniversary: new Date("2021-01-01T00:00:00Z"),
                  employmentType: {
                    value: HrisCreateEmployeeRequestDtoSchemasEmploymentTypeValue.Permanent,
                    sourceValue: Permanent,
                  },
                  employmentContractType: {},
                  employmentStatus: {},
                  terminationDate: new Date("2021-01-01T00:00:00Z"),
                  companyName: "Example Corp",
                  citizenships: [
                    {
                      value: Value.Us,
                    },
                  ],
                  employments: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      employeeId: "1687-3",
                      remoteEmployeeId: "e3cb75bf-aa84-466e-a6c1-b8322b257a48",
                      jobTitle: "Software Engineer",
                      payRate: "40.00",
                      payPeriod: {
                        value: EmploymentValue.Hour,
                        sourceValue: {},
                      },
                      payFrequency: {
                        value: EmploymentSchemasValue.Hourly,
                        sourceValue: Hourly,
                      },
                      payCurrency: "USD",
                      effectiveDate: new Date("2021-01-01T01:01:01.000Z"),
                      employmentType: {
                        value: EmploymentSchemasEmploymentTypeValue.Permanent,
                        sourceValue: {},
                      },
                      employmentContractType: {},
                      createdAt: new Date("2021-01-01T01:01:01.000Z"),
                      updatedAt: new Date("2021-01-01T01:01:01.000Z"),
                    },
                  ],
                  customFields: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      name: "Training Completion Status",
                      value: [
                        "Completed",
                      ],
                      valueId: "value_456",
                      remoteValueId: "e3cb75bf-aa84-466e-a6c1-b8322b257a48",
                    },
                  ],
                  benefits: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      name: "Health Insurance",
                      provider: "Aetna",
                      description: "Health insurance for employees",
                      createdAt: new Date("2021-01-01T00:00:00Z"),
                      updatedAt: new Date("2021-01-01T00:00:00Z"),
                    },
                  ],
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                  jobId: "R-6789",
                  homeLocation: {
                    id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                    name: "Woolsthorpe Manor",
                    phoneNumber: "+44 1476 860 364",
                    street1: "Water Lane",
                    street2: "Woolsthorpe by Colsterworth",
                    city: "Grantham",
                    zipCode: "NG33 5NR",
                    country: {
                      value: HrisCreateEmployeeRequestDtoSchemasHomeLocationValue.Us,
                    },
                    passthrough: {
                      "other_known_names": "John Doe",
                    },
                    state: {},
                  },
                  workLocation: {
                    id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                    name: "Woolsthorpe Manor",
                    phoneNumber: "+44 1476 860 364",
                    street1: "Water Lane",
                    street2: "Woolsthorpe by Colsterworth",
                    city: "Grantham",
                    zipCode: "NG33 5NR",
                    country: {
                      value: HrisCreateEmployeeRequestDtoSchemasWorkLocationValue.Us,
                    },
                    passthrough: {
                      "other_known_names": "John Doe",
                    },
                    state: {},
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}/work_eligibility/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_employees_work_eligibility
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.getEmployeesWorkEligibility({
                id: "<id>",
                subResourceId: "<value>",
                fields: "id,remote_id,type,sub_type,document,valid_from,valid_to,issued_by,number",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/benefits"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_benefits
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.listBenefits({
                fields: "id,remote_id,name,benefit_type,provider,description,created_at,updated_at",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/benefits/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_benefit
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.getBenefit({
                id: "<id>",
                fields: "id,remote_id,name,benefit_type,provider,description,created_at,updated_at",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/candidates"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_candidates
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.listCandidates({
                fields: "id,remote_id,name,first_name,last_name,email,emails,social_links,phone,phone_numbers,company,title,application_ids,remote_application_ids,hired_at,custom_fields,created_at,updated_at",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                include: "custom_fields",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/lms/users/{id}/assignments/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_get_assignment
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.lms.getAssignment({
                id: "<id>",
                subResourceId: "<value>",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/connect_sessions"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_create_connect_session
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";
            import { Categories } from "@stackone/stackone-client-ts/sdk/models/shared";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.connectSessions.createConnectSession({
                categories: [
                  Categories.Ats,
                  Categories.Hris,
                  Categories.HrisLegacy,
                  Categories.Crm,
                  Categories.Iam,
                  Categories.Marketing,
                  Categories.Lms,
                  Categories.Stackone,
                ],
                originOwnerId: "<value>",
                originOwnerName: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/time_off"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_create_time_off_request
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";
            import { HrisCreateTimeOffRequestDto2, HrisCreateTimeOffRequestDtoSchemas2 } from "@stackone/stackone-client-ts/sdk/models/shared";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.createTimeOffRequest({
                xAccountId: "<value>",
                hrisCreateTimeOffRequestDto: {
                  employeeId: "1687-3",
                  approverId: "1687-4",
                  startDate: new Date("2021-01-01T01:01:01.000Z"),
                  endDate: new Date("2021-01-01T01:01:01.000Z"),
                  startHalfDay: HrisCreateTimeOffRequestDto2.True,
                  endHalfDay: HrisCreateTimeOffRequestDtoSchemas2.True,
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/candidates/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_candidate
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.getCandidate({
                id: "<id>",
                fields: "id,remote_id,name,first_name,last_name,email,emails,social_links,phone,phone_numbers,company,title,application_ids,remote_application_ids,hired_at,custom_fields,created_at,updated_at",
                include: "custom_fields",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/applications/{id}/scheduled_interviews/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_application_scheduled_interview
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.getApplicationScheduledInterview({
                id: "<id>",
                subResourceId: "<value>",
                fields: "id,remote_id,candidate_id,remote_candidate_id,job_id,remote_job_id,interview_stage,interview_stage_id,remote_interview_stage_id,rejected_reason,rejected_reason_id,remote_rejected_reason_id,rejected_reason_ids,remote_rejected_reason_ids,rejected_reasons,rejected_at,location_id,remote_location_id,location_ids,remote_location_ids,status,application_status,questionnaires,attachments,result_links,source,created_at,updated_at,documents,custom_fields,candidate",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/lists"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_lists
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.listLists({
                fields: "id,remote_id,name,created_at,updated_at,items,type",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/iam/groups/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: iam_get_group
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.iam.getGroup({
                id: "<id>",
                fields: "id,remote_id,parent_id,remote_parent_id,name,description,roles,type,created_at,updated_at",
                expand: "roles",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/in_app/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_update_in_app_template
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.marketing.updateInAppTemplate({
                id: "<id>",
                xAccountId: "<value>",
                marketingCreateInAppTemplateRequestDto: {
                  messages: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      messageType: {
                        sourceValue: Email,
                      },
                    },
                  ],
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/content_blocks/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_get_content_block
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.marketing.getContentBlock({
                id: "<id>",
                fields: "id,remote_id,name,type,content,status,tags,created_at,updated_at",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_employment
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.getEmployment({
                id: "<id>",
                fields: "id,remote_id,employee_id,remote_employee_id,job_title,pay_rate,pay_period,pay_frequency,pay_currency,effective_date,employment_type,employment_contract_type,created_at,updated_at",
                expand: "groups",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/time_off/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_update_time_off_request
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";
            import { HrisCreateTimeOffRequestDtoSchemas2 } from "@stackone/stackone-client-ts/sdk/models/shared";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.updateTimeOffRequest({
                id: "<id>",
                xAccountId: "<value>",
                hrisCreateTimeOffRequestDto: {
                  employeeId: "1687-3",
                  approverId: "1687-4",
                  startDate: new Date("2021-01-01T01:01:01.000Z"),
                  endDate: new Date("2021-01-01T01:01:01.000Z"),
                  startHalfDay: true,
                  endHalfDay: HrisCreateTimeOffRequestDtoSchemas2.True,
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/applications/{id}/scorecards/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_application_scorecard
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.getApplicationScorecard({
                id: "<id>",
                subResourceId: "<value>",
                fields: "id,remote_id,sections,label,candidate_id,remote_candidate_id,application_id,remote_application_id,interview_id,remote_interview_id,author_id,remote_author_id,overall_recommendation,created_at,updated_at",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/users"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_users
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.listUsers({
                fields: "id,remote_id,first_name,last_name,name,email",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/iam/users"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: iam_list_users
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.iam.listUsers({
                fields: "id,remote_id,first_name,last_name,name,primary_email_address,username,roles,groups,status,avatar,is_bot_user,last_active_at,last_login_at,created_at,updated_at,multi_factor_enabled",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                expand: "roles,groups",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/lms/users"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_list_users
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.lms.listUsers({
                fields: "id,remote_id,external_reference,email,phone_number,created_at,updated_at,name",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_employments
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.listEmployments({
                fields: "id,remote_id,employee_id,remote_employee_id,job_title,pay_rate,pay_period,pay_frequency,pay_currency,effective_date,employment_type,employment_contract_type,created_at,updated_at",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                expand: "groups",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/interview_stages"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_interview_stages
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.listInterviewStages({
                fields: "id,remote_id,name,order,created_at,updated_at",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/iam/roles"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: iam_list_roles
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.iam.listRoles({
                fields: "id,remote_id,name,type,policies,description,created_at,updated_at",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                expand: "policies",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounts"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_list_linked_accounts
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.accounts.listLinkedAccounts({});

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}/documents/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_employee_document
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.getEmployeeDocument({
                id: "<id>",
                subResourceId: "<value>",
                fields: "id,remote_id,name,path,type,category,category_id,remote_category_id,contents,created_at,updated_at,remote_url,file_format",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/crm/lists"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: crm_list_lists
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.crm.listLists({
                fields: "id,remote_id,name,created_at,updated_at,items,type",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/applications"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_create_application
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";
            import { AnswerValue, AtsCreateApplicationRequestDtoValue } from "@stackone/stackone-client-ts/sdk/models/shared";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.createApplication({
                xAccountId: "<value>",
                atsCreateApplicationRequestDto: {
                  jobId: "4071538b-3cac-4fbf-ac76-f78ed250ffdd",
                  locationId: "dd8d41d1-5eb8-4408-9c87-9ba44604eae4",
                  applicationStatus: {
                    value: AtsCreateApplicationRequestDtoValue.Hired,
                    sourceValue: true,
                  },
                  questionnaires: [
                    {
                      id: "right_to_work",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      answers: [
                        {
                          id: "answer1",
                          remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                          type: {
                            value: AnswerValue.ShortText,
                            sourceValue: {},
                          },
                          values: [
                            "Yes",
                          ],
                        },
                      ],
                    },
                  ],
                  source: {
                    id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                    remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                    name: "LinkedIn",
                  },
                  candidateId: "e3cb75bf-aa84-466e-a6c1-b8322b257a48",
                  candidate: {
                    name: "Romain Sestier",
                    firstName: "Romain",
                    lastName: "Sestier",
                    email: "sestier.romain123@gmail.com",
                    socialLinks: [
                      {
                        type: "linkedin",
                        url: "https://www.linkedin.com/in/romainsestier/",
                      },
                    ],
                    company: "Company Inc.",
                    title: "Software Engineer",
                    hiredAt: new Date("2021-01-01T01:01:01.000Z"),
                    country: "United States",
                    customFields: [
                      {
                        id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                        remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                        name: "Training Completion Status",
                        value: {},
                        valueId: "value_456",
                        remoteValueId: "e3cb75bf-aa84-466e-a6c1-b8322b257a48",
                      },
                    ],
                    passthrough: {
                      "other_known_names": "John Doe",
                    },
                    phoneNumber: "+1234567890",
                  },
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/lms/users/{id}/assignments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_list_assignments
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.lms.listAssignments({
                id: "<id>",
                fields: "id,remote_id,external_id,remote_external_id,course_id,remote_course_id,updated_at,created_at,due_date,status",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/lms/content/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_update_content
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";
            import { ContentLanguageEnumValue, LmsCreateContentRequestDto2 } from "@stackone/stackone-client-ts/sdk/models/shared";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.lms.updateContent({
                id: "<id>",
                xAccountId: "<value>",
                lmsCreateContentRequestDto: {
                  externalReference: "SOFTWARE-ENG-LV1-TRAINING-VIDEO-1",
                  courseIds: [
                    "16873-SOFTWARE-ENG-COURSE",
                  ],
                  title: "Software Engineer Lv 1",
                  description: "This video acts as learning content for software engineers.",
                  languages: [
                    {
                      value: ContentLanguageEnumValue.EnGB,
                    },
                  ],
                  contentUrl: "https://www.youtube.com/watch?v=16873",
                  coverUrl: "https://www.googledrive.com/?v=16873",
                  active: LmsCreateContentRequestDto2.True,
                  duration: "P3Y6M4DT12H30M5S",
                  order: 1,
                  categories: [
                    {
                      name: "Technology",
                      active: true,
                    },
                  ],
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}/employments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_employee_employments
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.listEmployeeEmployments({
                id: "<id>",
                fields: "id,remote_id,employee_id,remote_employee_id,job_title,pay_rate,pay_period,pay_frequency,pay_currency,effective_date,employment_type,employment_contract_type,created_at,updated_at",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                expand: "groups",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/groups/departments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_department_groups
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.listDepartmentGroups({
                fields: "id,remote_id,name",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/push"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_create_push_template
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.marketing.createPushTemplate({
                xAccountId: "<value>",
                marketingCreatePushTemplateRequestDto: {
                  messages: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      messageType: {
                        sourceValue: [
                          "Email",
                        ],
                      },
                    },
                  ],
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/push/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_update_push_template
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.marketing.updatePushTemplate({
                id: "<id>",
                xAccountId: "<value>",
                marketingCreatePushTemplateRequestDto: {
                  messages: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      messageType: {
                        sourceValue: [
                          "Email",
                        ],
                      },
                    },
                  ],
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/lms/content"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_list_content
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.lms.listContent({
                fields: "id,remote_id,external_reference,course_ids,remote_course_ids,title,description,languages,content_url,content_type,cover_url,active,duration,categories,order",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/lms/categories"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_list_categories
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.lms.listCategories({
                fields: "id,remote_id,name,active",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/proxy"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_proxy_request
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.proxy.proxyRequest({
                xAccountId: "<value>",
                proxyRequestBody: {
                  url: "https://api.sample-integration.com/v1",
                  path: "/employees/directory",
                  headers: {
                    "Content-Type": "application/json",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/custom_field_definitions/applications"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_application_custom_field_definitions
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.listApplicationCustomFieldDefinitions({
                fields: "id,remote_id,name,description,type,options",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/crm/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: crm_get_contact
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.crm.getContact({
                id: "<id>",
                fields: "id,remote_id,first_name,last_name,company_name,emails,phone_numbers,deal_ids,remote_deal_ids,account_ids,remote_account_ids,custom_fields,created_at,updated_at",
                include: "custom_fields",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/iam/roles/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: iam_get_role
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.iam.getRole({
                id: "<id>",
                fields: "id,remote_id,name,type,policies,description,created_at,updated_at",
                expand: "policies",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/lms/users/{id}/completions"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_create_completion
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.lms.createCompletion({
                id: "<id>",
                xAccountId: "<value>",
                lmsCreateCompletionRequestDto: {
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                  externalId: "SOFTWARE-ENG-LV1-TRAINING-VIDEO-1-COMPLETION",
                  contentId: "16873-ENG-VIDEO-1",
                  completedAt: "2021-07-21T14:00:00.000Z",
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/omni_channel"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_list_omni_channel_templates
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.marketing.listOmniChannelTemplates({
                fields: "id,remote_id,name,messages,created_at,updated_at,tags",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_update_employee
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";
            import {
              EmploymentSchemasEmploymentTypeValue,
              EmploymentSchemasValue,
              EmploymentValue,
              HrisCreateEmployeeRequestDtoSchemasEmploymentTypeValue,
              HrisCreateEmployeeRequestDtoSchemasHomeLocationValue,
              HrisCreateEmployeeRequestDtoSchemasValue,
              HrisCreateEmployeeRequestDtoSchemasWorkLocationValue,
              Value,
            } from "@stackone/stackone-client-ts/sdk/models/shared";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.updateEmployee({
                id: "<id>",
                xAccountId: "<value>",
                hrisCreateEmployeeRequestDto: {
                  firstName: "Issac",
                  lastName: "Newton",
                  name: "Issac Newton",
                  displayName: "Sir Issac Newton",
                  avatarUrl: "https://example.com/avatar.png",
                  personalEmail: "isaac.newton@example.com",
                  personalPhoneNumber: "+1234567890",
                  workEmail: "newton@example.com",
                  workPhoneNumber: "+1234567890",
                  jobTitle: "Physicist",
                  department: "Physics",
                  managerId: "67890",
                  gender: {},
                  preferredLanguage: {
                    value: HrisCreateEmployeeRequestDtoSchemasValue.Eng,
                  },
                  ethnicity: {},
                  dateOfBirth: new Date("1990-01-01T00:00.000Z"),
                  birthday: new Date("2021-01-01T00:00:00Z"),
                  maritalStatus: {},
                  avatar: {},
                  hireDate: new Date("2021-01-01T00:00.000Z"),
                  startDate: new Date("2021-01-01T00:00.000Z"),
                  tenure: 2,
                  workAnniversary: new Date("2021-01-01T00:00:00Z"),
                  employmentType: {
                    value: HrisCreateEmployeeRequestDtoSchemasEmploymentTypeValue.Permanent,
                    sourceValue: Permanent,
                  },
                  employmentContractType: {},
                  employmentStatus: {},
                  terminationDate: new Date("2021-01-01T00:00:00Z"),
                  companyName: "Example Corp",
                  citizenships: [
                    {
                      value: Value.Us,
                    },
                  ],
                  employments: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      employeeId: "1687-3",
                      remoteEmployeeId: "e3cb75bf-aa84-466e-a6c1-b8322b257a48",
                      jobTitle: "Software Engineer",
                      payRate: "40.00",
                      payPeriod: {
                        value: EmploymentValue.Hour,
                        sourceValue: {},
                      },
                      payFrequency: {
                        value: EmploymentSchemasValue.Hourly,
                        sourceValue: true,
                      },
                      payCurrency: "USD",
                      effectiveDate: new Date("2021-01-01T01:01:01.000Z"),
                      employmentType: {
                        value: EmploymentSchemasEmploymentTypeValue.Permanent,
                        sourceValue: [
                          "Permanent",
                        ],
                      },
                      employmentContractType: {},
                      createdAt: new Date("2021-01-01T01:01:01.000Z"),
                      updatedAt: new Date("2021-01-01T01:01:01.000Z"),
                    },
                  ],
                  customFields: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      name: "Training Completion Status",
                      value: "Completed",
                      valueId: "value_456",
                      remoteValueId: "e3cb75bf-aa84-466e-a6c1-b8322b257a48",
                    },
                  ],
                  benefits: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      name: "Health Insurance",
                      provider: "Aetna",
                      description: "Health insurance for employees",
                      createdAt: new Date("2021-01-01T00:00:00Z"),
                      updatedAt: new Date("2021-01-01T00:00:00Z"),
                    },
                  ],
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                  jobId: "R-6789",
                  homeLocation: {
                    id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                    name: "Woolsthorpe Manor",
                    phoneNumber: "+44 1476 860 364",
                    street1: "Water Lane",
                    street2: "Woolsthorpe by Colsterworth",
                    city: "Grantham",
                    zipCode: "NG33 5NR",
                    country: {
                      value: HrisCreateEmployeeRequestDtoSchemasHomeLocationValue.Us,
                    },
                    passthrough: {
                      "other_known_names": "John Doe",
                    },
                    state: {},
                  },
                  workLocation: {
                    id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                    name: "Woolsthorpe Manor",
                    phoneNumber: "+44 1476 860 364",
                    street1: "Water Lane",
                    street2: "Woolsthorpe by Colsterworth",
                    city: "Grantham",
                    zipCode: "NG33 5NR",
                    country: {
                      value: HrisCreateEmployeeRequestDtoSchemasWorkLocationValue.Us,
                    },
                    passthrough: {
                      "other_known_names": "John Doe",
                    },
                    state: {},
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/locations/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_location
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.getLocation({
                id: "<id>",
                fields: "id,remote_id,employee_id,remote_employee_id,name,phone_number,street_1,street_2,city,state,zip_code,country,location_type,created_at,updated_at",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/groups"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_groups
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.listGroups({
                fields: "id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/applications/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_application
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.getApplication({
                id: "<id>",
                fields: "id,remote_id,candidate_id,remote_candidate_id,job_id,remote_job_id,interview_stage,interview_stage_id,remote_interview_stage_id,rejected_reason,rejected_reason_id,remote_rejected_reason_id,rejected_reason_ids,remote_rejected_reason_ids,rejected_reasons,rejected_at,location_id,remote_location_id,location_ids,remote_location_ids,status,application_status,questionnaires,attachments,result_links,source,created_at,updated_at,documents,custom_fields,candidate",
                expand: "documents",
                include: "attachments,custom_fields",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/applications/{id}/scorecards"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_application_scorecards
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.listApplicationScorecards({
                id: "<id>",
                fields: "id,remote_id,sections,label,candidate_id,remote_candidate_id,application_id,remote_application_id,interview_id,remote_interview_id,author_id,remote_author_id,overall_recommendation,created_at,updated_at",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/job_postings"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_job_postings
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.listJobPostings({
                fields: "id,remote_id,title,locations,internal,status,job_id,remote_job_id,content,compensation,employment_type,employment_contract_type,external_url,external_apply_url,questionnaires,updated_at,created_at",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                include: "questionnaires",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/custom_field_definitions/candidates"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_candidate_custom_field_definitions
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.listCandidateCustomFieldDefinitions({
                fields: "id,remote_id,name,description,type,options",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/offers"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_create_offer
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";
            import { AtsCreateOfferRequestDtoValue } from "@stackone/stackone-client-ts/sdk/models/shared";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.createOffer({
                xAccountId: "<value>",
                atsCreateOfferRequestDto: {
                  startDate: new Date("2021-01-01T01:01:01.000Z"),
                  offerStatus: {
                    value: AtsCreateOfferRequestDtoValue.Pending,
                    sourceValue: true,
                  },
                  offerHistory: [
                    {
                      startDate: new Date("2021-01-01T01:01:01.000Z"),
                      createdAt: new Date("2021-01-01T01:01:01.000Z"),
                      updatedAt: new Date("2021-01-01T01:01:01.000Z"),
                    },
                  ],
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/assessments/packages/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_assessments_package
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.getAssessmentsPackage({
                id: "<id>",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/email"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_create_email_template
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.marketing.createEmailTemplate({
                xAccountId: "<value>",
                marketingCreateEmailTemplateRequestDto: {
                  messages: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      messageType: {
                        sourceValue: true,
                      },
                    },
                  ],
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounts/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_update_account
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.accounts.updateAccount({
                id: "<id>",
                patchAccountExternalDto: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}/time_off/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_employees_time_off_request
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.getEmployeesTimeOffRequest({
                id: "<id>",
                subResourceId: "<value>",
                fields: "id,remote_id,employee_id,remote_employee_id,approver_id,remote_approver_id,status,type,start_date,end_date,start_half_day,end_half_day,duration,created_at,updated_at",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}/documents/upload"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_upload_employee_document
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";
            import {
              HrisDocumentsUploadRequestDtoSchemasConfidentialValue,
              HrisDocumentsUploadRequestDtoSchemasValue,
              HrisDocumentsUploadRequestDtoValue,
            } from "@stackone/stackone-client-ts/sdk/models/shared";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.uploadEmployeeDocument({
                id: "<id>",
                xAccountId: "<value>",
                hrisDocumentsUploadRequestDto: {
                  name: "weather-forecast",
                  fileFormat: {
                    value: HrisDocumentsUploadRequestDtoValue.Pdf,
                    sourceValue: [
                      "abc",
                    ],
                  },
                  content: "VGhpcyBpc24ndCByZWFsbHkgYSBzYW1wbGUgZmlsZSwgYnV0IG5vIG9uZSB3aWxsIGV2ZXIga25vdyE",
                  categoryId: "6530",
                  path: "/path/to/file",
                  category: {
                    value: HrisDocumentsUploadRequestDtoSchemasValue.Shared,
                    sourceValue: "550e8400-e29b-41d4-a716-446655440000",
                  },
                  confidential: {
                    value: HrisDocumentsUploadRequestDtoSchemasConfidentialValue.True,
                    sourceValue: {},
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/groups/departments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_department_group
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.getDepartmentGroup({
                id: "<id>",
                fields: "id,remote_id,name",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/locations/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_location
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.getLocation({
                id: "<id>",
                fields: "id,remote_id,name",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/campaigns/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_get_campaign
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.marketing.getCampaign({
                id: "<id>",
                fields: "id,remote_id,name,created_at,updated_at,description,schedule_type,status,channels,first_sent_at,last_sent_at,tags,messages",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/companies"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_companies
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.listCompanies({
                fields: "id,remote_id,name,full_name,display_name,created_at,updated_at",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}/employments/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_employee_employment
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.getEmployeeEmployment({
                id: "<id>",
                subResourceId: "<value>",
                fields: "id,remote_id,employee_id,remote_employee_id,job_title,pay_rate,pay_period,pay_frequency,pay_currency,effective_date,employment_type,employment_contract_type,created_at,updated_at",
                expand: "groups",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/applications/{id}/documents/upload"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_upload_application_document
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";
            import { UnifiedUploadRequestDtoSchemasValue, UnifiedUploadRequestDtoValue } from "@stackone/stackone-client-ts/sdk/models/shared";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.uploadApplicationDocument({
                id: "<id>",
                xAccountId: "<value>",
                unifiedUploadRequestDto: {
                  name: "weather-forecast",
                  fileFormat: {
                    value: UnifiedUploadRequestDtoValue.Pdf,
                    sourceValue: "abc",
                  },
                  content: "VGhpcyBpc24ndCByZWFsbHkgYSBzYW1wbGUgZmlsZSwgYnV0IG5vIG9uZSB3aWxsIGV2ZXIga25vdyE",
                  categoryId: "6530",
                  path: "/path/to/file",
                  category: {
                    value: "reports, resumes",
                    sourceValue: "550e8400-e29b-41d4-a716-446655440000, CUSTOM_CATEGORY_NAME",
                  },
                  confidential: {
                    value: UnifiedUploadRequestDtoSchemasValue.True,
                    sourceValue: [
                      "public",
                    ],
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/custom_field_definitions/applications/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_application_custom_field_definition
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.getApplicationCustomFieldDefinition({
                id: "<id>",
                fields: "id,remote_id,name,description,type,options",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/in_app"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_list_in_app_templates
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.marketing.listInAppTemplates({
                fields: "id,remote_id,name,messages,created_at,updated_at,tags",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}/time_off"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_employee_time_off_requests
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.listEmployeeTimeOffRequests({
                id: "<id>",
                fields: "id,remote_id,employee_id,remote_employee_id,approver_id,remote_approver_id,status,type,start_date,end_date,start_half_day,end_half_day,duration,created_at,updated_at",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/time_off"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_time_off_requests
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.listTimeOffRequests({
                fields: "id,remote_id,employee_id,remote_employee_id,approver_id,remote_approver_id,status,type,start_date,end_date,start_half_day,end_half_day,duration,created_at,updated_at",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/applications/{id}/offers"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_applications_offers
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.listApplicationsOffers({
                id: "<id>",
                fields: "id,remote_id,application_id,remote_application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/applications/{id}/documents/{subResourceId}/download"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_download_application_document
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.downloadApplicationDocument({
                id: "<id>",
                subResourceId: "<value>",
                format: "base64",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/candidates/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_update_candidate
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.updateCandidate({
                id: "<id>",
                xAccountId: "<value>",
                atsUpdateCandidateRequestDto: {
                  name: "Romain Sestier",
                  firstName: "Romain",
                  lastName: "Sestier",
                  email: "sestier.romain123@gmail.com",
                  emails: [
                    {
                      type: "personal",
                      value: "sestier.romain123@gmail.com",
                    },
                  ],
                  socialLinks: [
                    {
                      type: "linkedin",
                      url: "https://www.linkedin.com/in/romainsestier/",
                    },
                  ],
                  phoneNumbers: [
                    {
                      phone: "+447700112233",
                    },
                  ],
                  company: "Company Inc.",
                  title: "Software Engineer",
                  applicationIds: [
                    "123e4567-e89b-12d3-a456-426614174000",
                    "523e1234-e89b-fdd2-a456-762545121101",
                  ],
                  hiredAt: new Date("2021-01-01T01:01:01.000Z"),
                  country: "United States",
                  customFields: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      name: "Training Completion Status",
                      value: [
                        "Completed",
                      ],
                      valueId: "value_456",
                      remoteValueId: "e3cb75bf-aa84-466e-a6c1-b8322b257a48",
                    },
                  ],
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/sms"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_create_sms_template
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.marketing.createSmsTemplate({
                xAccountId: "<value>",
                marketingCreateSmsTemplateRequestDto: {
                  messages: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      messageType: {
                        sourceValue: {},
                      },
                    },
                  ],
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/connectors/meta"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_list_connectors_meta
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.connectors.listConnectorsMeta({
                include: "field_path,unmapped_fields,resources,inactive,webhooks",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/applications/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_update_application
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";
            import { AtsUpdateApplicationRequestDtoValue } from "@stackone/stackone-client-ts/sdk/models/shared";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.updateApplication({
                id: "<id>",
                xAccountId: "<value>",
                atsUpdateApplicationRequestDto: {
                  interviewStageId: "18bcbb1b-3cbc-4198-a999-460861d19480",
                  applicationStatus: {
                    value: AtsUpdateApplicationRequestDtoValue.Hired,
                    sourceValue: Hired,
                  },
                  source: {
                    id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                    remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                    name: "LinkedIn",
                  },
                  customFields: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      name: "Training Completion Status",
                      value: [
                        "Completed",
                      ],
                      valueId: "value_456",
                      remoteValueId: "e3cb75bf-aa84-466e-a6c1-b8322b257a48",
                    },
                  ],
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                  rejectedReasonId: "f223d7f6-908b-48f0-9237-b201c307f609",
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/interview_stages/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_interview_stage
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.getInterviewStage({
                id: "<id>",
                fields: "id,remote_id,name,order,created_at,updated_at",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/push/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_get_push_template
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.marketing.getPushTemplate({
                id: "<id>",
                fields: "id,remote_id,name,messages,created_at,updated_at,tags",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/campaigns"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_list_campaigns
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.marketing.listCampaigns({
                fields: "id,remote_id,name,created_at,updated_at,description,schedule_type,status,channels,first_sent_at,last_sent_at,tags,messages",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}/time_off"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_create_employee_time_off_request
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";
            import { HrisCreateTimeOffRequestDto2, HrisCreateTimeOffRequestDtoSchemas2 } from "@stackone/stackone-client-ts/sdk/models/shared";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.createEmployeeTimeOffRequest({
                id: "<id>",
                xAccountId: "<value>",
                hrisCreateTimeOffRequestDto: {
                  employeeId: "1687-3",
                  approverId: "1687-4",
                  startDate: new Date("2021-01-01T01:01:01.000Z"),
                  endDate: new Date("2021-01-01T01:01:01.000Z"),
                  startHalfDay: HrisCreateTimeOffRequestDto2.True,
                  endHalfDay: HrisCreateTimeOffRequestDtoSchemas2.True,
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/candidates/{id}/notes"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_candidate_notes
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.listCandidateNotes({
                id: "<id>",
                fields: "id,remote_id,content,author_id,remote_author_id,visibility,created_at,updated_at,deleted_at",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/lists/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_list
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.getList({
                id: "<id>",
                fields: "id,remote_id,name,created_at,updated_at,items,type",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/job_postings/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_job_posting
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.getJobPosting({
                id: "<id>",
                fields: "id,remote_id,title,locations,internal,status,job_id,remote_job_id,content,compensation,employment_type,employment_contract_type,external_url,external_apply_url,questionnaires,updated_at,created_at",
                include: "questionnaires",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/email/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_get_email_template
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.marketing.getEmailTemplate({
                id: "<id>",
                fields: "id,remote_id,name,messages,created_at,updated_at,tags",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/email/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_update_email_template
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.marketing.updateEmailTemplate({
                id: "<id>",
                xAccountId: "<value>",
                marketingCreateEmailTemplateRequestDto: {
                  messages: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      messageType: {
                        sourceValue: Email,
                      },
                    },
                  ],
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_employees
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.listEmployees({
                fields: "id,remote_id,first_name,last_name,name,display_name,gender,ethnicity,date_of_birth,birthday,marital_status,avatar_url,avatar,personal_email,personal_phone_number,work_email,work_phone_number,job_title,job_description,department,cost_centers,benefits,manager_id,remote_manager_id,hire_date,start_date,tenure,work_anniversary,employment_type,employment_contract_type,employment_status,termination_date,company_name,preferred_language,citizenships,home_location,work_location,employments,custom_fields,documents,created_at,updated_at,employee_number,national_identity_number",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                expand: "company,employments,work_location,home_location,custom_fields,groups",
                include: "avatar_url,avatar,custom_fields,job_description,benefits",
                xAccountId: "<value>",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
  - target: $["paths"]["/unified/hris/locations"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_locations
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.listLocations({
                fields: "id,remote_id,employee_id,remote_employee_id,name,phone_number,street_1,street_2,city,state,zip_code,country,location_type,created_at,updated_at",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/departments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_departments
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.listDepartments({
                fields: "id,remote_id,name",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/jobs/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_job
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.getJob({
                id: "<id>",
                fields: "id,remote_id,code,title,status,job_status,department_ids,remote_department_ids,location_ids,remote_location_ids,hiring_team,interview_stages,confidential,created_at,updated_at",
                expand: "job_postings,interview_stages",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/assessments/orders/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_assessments_request
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.getAssessmentsRequest({
                id: "<id>",
                fields: "assessment_id,remote_assessment_id,candidate,score,assessment_date,submission_date,summary,result,result_url,attachments",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/lms/content"]["put"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_upsert_content
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";
            import { ContentLanguageEnumValue } from "@stackone/stackone-client-ts/sdk/models/shared";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.lms.upsertContent({
                xAccountId: "<value>",
                lmsUpsertContentRequestDto: {
                  externalReference: "SOFTWARE-ENG-LV1-TRAINING-VIDEO-1",
                  courseIds: [
                    "16873-SOFTWARE-ENG-COURSE",
                  ],
                  title: "Software Engineer Lv 1",
                  description: "This video acts as learning content for software engineers.",
                  languages: [
                    {
                      value: ContentLanguageEnumValue.EnGB,
                    },
                  ],
                  contentUrl: "https://www.youtube.com/watch?v=16873",
                  coverUrl: "https://www.googledrive.com/?v=16873",
                  active: true,
                  duration: "P3Y6M4DT12H30M5S",
                  order: 1,
                  categories: [
                    {
                      name: "Technology",
                      active: true,
                    },
                  ],
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/lms/users/{id}/completions"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_list_completions
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.lms.listCompletions({
                id: "<id>",
                fields: "id,remote_id,external_id,remote_external_id,content_id,remote_content_id,user_id,remote_user_id,completed_at,updated_at,created_at,result",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/documents/employee_categories"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_employee_categories
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.listEmployeeCategories({
                fields: "id,remote_id,name,active",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/time_off/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_time_off_request
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.getTimeOffRequest({
                id: "<id>",
                fields: "id,remote_id,employee_id,remote_employee_id,approver_id,remote_approver_id,status,type,start_date,end_date,start_half_day,end_half_day,duration,created_at,updated_at",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/jobs"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_jobs
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.listJobs({
                fields: "id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/email"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_list_email_templates
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.marketing.listEmailTemplates({
                fields: "id,remote_id,name,messages,created_at,updated_at,tags",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/in_app/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_get_in_app_template
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.marketing.getInAppTemplate({
                id: "<id>",
                fields: "id,remote_id,name,messages,created_at,updated_at,tags",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/content_blocks"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_create_content_block
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.marketing.createContentBlock({
                xAccountId: "<value>",
                marketingCreateContentBlocksRequestDto: {
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/candidates/{id}/notes/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_candidate_note
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.getCandidateNote({
                id: "<id>",
                subResourceId: "<value>",
                fields: "id,remote_id,content,author_id,remote_author_id,visibility,created_at,updated_at,deleted_at",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/rejected_reasons"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_rejected_reasons
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.listRejectedReasons({
                fields: "id,remote_id,label,type,rejected_reason_type",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounts/{id}/meta"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_get_account_meta_info
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.accounts.getAccountMetaInfo({
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}/documents"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_employee_documents
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.listEmployeeDocuments({
                id: "<id>",
                fields: "id,remote_id,name,path,type,category,category_id,remote_category_id,contents,created_at,updated_at,remote_url,file_format",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}/work_eligibility/{subResourceId}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_update_employee_work_eligibility_request
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";
            import {
              HrisCreateWorkEligibilityRequestDtoSchemasDocumentValue,
              HrisCreateWorkEligibilityRequestDtoSchemasValue,
            } from "@stackone/stackone-client-ts/sdk/models/shared";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.updateEmployeeWorkEligibilityRequest({
                id: "<id>",
                subResourceId: "<value>",
                xAccountId: "<value>",
                hrisCreateWorkEligibilityRequestDto: {
                  type: {},
                  subType: "H1B",
                  document: {
                    id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                    remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                    name: "My Document",
                    path: "/path/to/file",
                    category: {},
                    categoryId: "6530",
                    createdAt: new Date("2021-01-01T01:01:01.000Z"),
                    updatedAt: new Date("2021-01-02T01:01:01.000Z"),
                    remoteUrl: "https://example.com/file.pdf",
                    fileFormat: {
                      value: HrisCreateWorkEligibilityRequestDtoSchemasDocumentValue.Pdf,
                      sourceValue: abc,
                    },
                  },
                  validFrom: new Date("2021-01-01T00:00.000Z"),
                  validTo: new Date("2021-01-01T00:00.000Z"),
                  issuedBy: {
                    value: HrisCreateWorkEligibilityRequestDtoSchemasValue.Us,
                  },
                  number: "1234567890",
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/applications/{id}/scheduled_interviews"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_applications_scheduled_interviews
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.listApplicationsScheduledInterviews({
                id: "<id>",
                fields: "id,remote_id,application_id,remote_application_id,interview_stage_id,remote_interview_stage_id,interview_stage,status,interview_status,interviewer_ids,remote_interviewer_ids,interview_parts,interviewers,start_at,end_at,meeting_url,created_at,updated_at",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/custom_field_definitions/candidates/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_candidate_custom_field_definition
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.getCandidateCustomFieldDefinition({
                id: "<id>",
                fields: "id,remote_id,name,description,type,options",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/crm/contacts/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: crm_update_contact
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.crm.updateContact({
                id: "<id>",
                xAccountId: "<value>",
                crmCreateContactRequestDto: {
                  firstName: "Steve",
                  lastName: "Wozniak",
                  companyName: "Apple Inc.",
                  emails: [
                    "steve@apple.com",
                  ],
                  phoneNumbers: [
                    "123-456-7890",
                  ],
                  dealIds: [
                    "deal-001",
                    "deal-002",
                  ],
                  accountIds: [
                    "account-123",
                    "account-456",
                  ],
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/lms/content/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_get_content
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.lms.getContent({
                id: "<id>",
                fields: "id,remote_id,external_reference,course_ids,remote_course_ids,title,description,languages,content_url,content_type,cover_url,active,duration,categories,order",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/connect_sessions/authenticate"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_authenticate_connect_session
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.connectSessions.authenticateConnectSession({
                token: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/connectors/meta/{provider}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: stackone_get_connector_meta
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.connectors.getConnectorMeta({
                provider: "<value>",
                include: "field_path,unmapped_fields,resources,inactive,webhooks",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/iam/policies/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: iam_get_policy
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.iam.getPolicy({
                id: "<id>",
                fields: "id,remote_id,name,permissions,description,created_at,updated_at",
                expand: "permissions",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/push"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_list_push_templates
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.marketing.listPushTemplates({
                fields: "id,remote_id,name,messages,created_at,updated_at,tags",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/lms/categories/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_get_category
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.lms.getCategory({
                id: "<id>",
                fields: "id,remote_id,name,active",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/iam/policies"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: iam_list_policies
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.iam.listPolicies({
                fields: "id,remote_id,name,permissions,description,created_at,updated_at",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                expand: "permissions",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/sms/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_get_sms_template
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.marketing.getSmsTemplate({
                id: "<id>",
                fields: "id,remote_id,name,messages,created_at,updated_at,tags",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/departments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_department
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.getDepartment({
                id: "<id>",
                fields: "id,remote_id,name",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/interviews"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_interviews
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.listInterviews({
                fields: "id,remote_id,application_id,remote_application_id,interview_stage_id,remote_interview_stage_id,interview_stage,status,interview_status,interviewer_ids,remote_interviewer_ids,interview_parts,interviewers,start_at,end_at,meeting_url,created_at,updated_at",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/jobs"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_jobs
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.listJobs({
                fields: "id,remote_id,code,title,status,job_status,department_ids,remote_department_ids,location_ids,remote_location_ids,hiring_team,interview_stages,confidential,created_at,updated_at",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                expand: "job_postings,interview_stages",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/locations"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_locations
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.listLocations({
                fields: "id,remote_id,name",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/assessments/packages"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_list_assessments_packages
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.listAssessmentsPackages({
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/crm/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: crm_list_contacts
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.crm.listContacts({
                fields: "id,remote_id,first_name,last_name,company_name,emails,phone_numbers,deal_ids,remote_deal_ids,account_ids,remote_account_ids,custom_fields,created_at,updated_at",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                include: "custom_fields",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/omni_channel/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_get_omni_channel_template
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.marketing.getOmniChannelTemplate({
                id: "<id>",
                fields: "id,remote_id,name,messages,created_at,updated_at,tags",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/lms/courses"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_list_courses
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.lms.listCourses({
                fields: "id,remote_id,external_reference,content_ids,remote_content_ids,title,description,languages,course_type,cover_url,url,active,duration,categories,skills,updated_at,created_at",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/companies/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_company
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.getCompany({
                id: "<id>",
                fields: "id,remote_id,name,full_name,display_name,created_at,updated_at",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/documents/employee_categories/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_get_employee_document_category
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.getEmployeeDocumentCategory({
                id: "<id>",
                fields: "id,remote_id,name,active",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/crm/lists/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: crm_get_list
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.crm.getList({
                id: "<id>",
                fields: "id,remote_id,name,created_at,updated_at,items,type",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/content_blocks/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_update_content_block
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.marketing.updateContentBlock({
                id: "<id>",
                xAccountId: "<value>",
                marketingCreateContentBlocksRequestDto: {
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/lms/courses/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_get_course
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.lms.getCourse({
                id: "<id>",
                fields: "id,remote_id,external_reference,content_ids,remote_content_ids,title,description,languages,course_type,cover_url,url,active,duration,categories,skills,updated_at,created_at",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/interviews/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_interview
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.getInterview({
                id: "<id>",
                fields: "id,remote_id,application_id,remote_application_id,interview_stage_id,remote_interview_stage_id,interview_stage,status,interview_status,interviewer_ids,remote_interviewer_ids,interview_parts,interviewers,start_at,end_at,meeting_url,created_at,updated_at",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/hris/employees/{id}/work_eligibility"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hris_list_employee_work_eligibility
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.hris.listEmployeeWorkEligibility({
                id: "<id>",
                fields: "id,remote_id,type,sub_type,document,valid_from,valid_to,issued_by,number",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/candidates/{id}/notes"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_create_candidate_note
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";
            import { AtsCreateNotesRequestDtoValue } from "@stackone/stackone-client-ts/sdk/models/shared";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.createCandidateNote({
                id: "<id>",
                xAccountId: "<value>",
                atsCreateNotesRequestDto: {
                  content: [
                    {
                      body: "This candidate seems like a good fit for the role",
                    },
                  ],
                  authorId: "1234567890",
                  visibility: {
                    value: AtsCreateNotesRequestDtoValue.Public,
                    sourceValue: "Public",
                  },
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/crm/accounts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: crm_get_account
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.crm.getAccount({
                id: "<id>",
                fields: "id,remote_id,owner_id,remote_owner_id,name,description,industries,annual_revenue,website,addresses,phone_numbers,created_at,updated_at",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/ats/applications/{id}/documents/{subResourceId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: ats_get_application_document
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.ats.getApplicationDocument({
                id: "<id>",
                subResourceId: "<value>",
                fields: "id,remote_id,name,path,type,category,category_id,remote_category_id,contents,created_at,updated_at,remote_url,file_format",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/crm/accounts"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: crm_list_accounts
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.crm.listAccounts({
                fields: "id,remote_id,owner_id,remote_owner_id,name,description,industries,annual_revenue,website,addresses,phone_numbers,created_at,updated_at",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/templates/omni_channel"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_create_omni_channel_template
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.marketing.createOmniChannelTemplate({
                xAccountId: "<value>",
                marketingCreateTemplateRequestDto: {
                  messages: [
                    {
                      id: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      remoteId: "8187e5da-dc77-475e-9949-af0f1fa4e4e3",
                      messageType: {
                        sourceValue: [
                          "Email",
                        ],
                      },
                    },
                  ],
                  passthrough: {
                    "other_known_names": "John Doe",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/marketing/content_blocks"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: marketing_list_content_blocks
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.marketing.listContentBlocks({
                fields: "id,remote_id,name,type,content,status,tags,created_at,updated_at",
                filter: {
                  updatedAfter: "2020-01-01T00:00:00.000Z",
                },
                updatedAfter: "2020-01-01T00:00:00.000Z",
                xAccountId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/unified/lms/content"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: lms_create_content
          source: |-
            import { StackOne } from "@stackone/stackone-client-ts";
            import { ContentLanguageEnumValue } from "@stackone/stackone-client-ts/sdk/models/shared";

            const stackOne = new StackOne({
              security: {
                username: "",
                password: "",
              },
            });

            async function run() {
              const result = await stackOne.lms.createContent({
                xAccountId: "<value>",
                lmsCreateContentRequestDto: {
                  externalReference: "SOFTWARE-ENG-LV1-TRAINING-VIDEO-1",
                  courseIds: [
                    "16873-SOFTWARE-ENG-COURSE",
                  ],
                  title: "Software Engineer Lv 1",
                  description: "This video acts as learning content for software engineers.",
                  languages: [
                    {
                      value: ContentLanguageEnumValue.EnGB,
                    },
                  ],
                  contentUrl: "https://www.youtube.com/watch?v=16873",
                  coverUrl: "https://www.googledrive.com/?v=16873",
                  active: true,
                  duration: "P3Y6M4DT12H30M5S",
                  order: 1,
                  categories: [
                    {
                      name: "Technology",
                      active: true,
                    },
                  ],
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
