overlay: 1.0.0
info:
  title: CodeSamples overlay for typescript target
  version: 0.0.0
actions:
  - target: $["paths"]["/accounts"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "stackone_list_linked_accounts"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.accounts.listLinkedAccounts({});\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/accounts/{id}"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "stackone_delete_account"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.accounts.deleteAccount({\n    id: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/accounts/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "stackone_get_account"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.accounts.getAccount({\n    id: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/accounts/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "stackone_update_account"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { PatchAccountExternalDtoType } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.accounts.updateAccount({\n    id: \"<id>\",\n    patchAccountExternalDto: {\n      type: PatchAccountExternalDtoType.Test,\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/accounts/{id}/meta"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "stackone_get_account_meta_info"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.accounts.getAccountMetaInfo({\n    id: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/actions"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "stackone_list_actions_meta"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { StackoneListActionsMetaQueryParamInclude } from \"@stackone/stackone-client-ts/sdk/models/operations\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.actions.listActionsMeta({\n    groupBy: \"[\\\"connector\\\"]\",\n    filter: {\n      connectors: \"connector1,connector2\",\n      accountIds: \"account1,account2\",\n      actionKey: \"action1\",\n    },\n    include: [\n      StackoneListActionsMetaQueryParamInclude.OperationDetails,\n    ],\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/actions/rpc"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "stackone_rpc_action"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.actions.rpcAction({\n    action: \"create_employee\",\n    path: {\n      \"id\": \"123\",\n    },\n    query: {\n      \"param1\": \"value1\",\n      \"param2\": \"value2\",\n    },\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: {\n      \"data\": \"example\",\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/connect_sessions"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "stackone_create_connect_session"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { Categories } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.connectSessions.createConnectSession({\n    categories: [\n      Categories.Ats,\n      Categories.Hris,\n      Categories.Ticketing,\n      Categories.Crm,\n      Categories.Iam,\n      Categories.Marketing,\n      Categories.Lms,\n      Categories.Iam,\n      Categories.Documents,\n      Categories.Ticketing,\n      Categories.Screening,\n      Categories.Messaging,\n      Categories.Accounting,\n    ],\n    originOwnerId: \"<id>\",\n    originOwnerName: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/connect_sessions/authenticate"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "stackone_authenticate_connect_session"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.connectSessions.authenticateConnectSession({\n    token: \"<value>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/connectors/meta"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "stackone_list_connectors_meta"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.connectors.listConnectorsMeta({\n    include: \"field_path,unmapped_fields,resources,inactive,webhooks,static_fields\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/connectors/meta/{provider}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "stackone_get_connector_meta"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.connectors.getConnectorMeta({\n    provider: \"<value>\",\n    include: \"field_path,unmapped_fields,resources,inactive,webhooks,static_fields\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/mcp"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "stackone_mcp_delete"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne();\n\nasync function run() {\n  const result = await stackOne.mcp.mcpDelete({\n    basic: {\n      username: \"\",\n      password: \"\",\n    },\n  }, {\n    xAccountId: \"<id>\",\n    mcpSessionId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/mcp"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "stackone_mcp_get"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne();\n\nasync function run() {\n  const result = await stackOne.mcp.mcpGet({\n    basic: {\n      username: \"\",\n      password: \"\",\n    },\n  }, {\n    xAccountId: \"<id>\",\n    mcpSessionId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/mcp"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "stackone_mcp_post"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne();\n\nasync function run() {\n  const result = await stackOne.mcp.mcpPost({\n    basic: {\n      username: \"\",\n      password: \"\",\n    },\n  }, {\n    xAccountId: \"<id>\",\n    jsonRpcMessageDto: {\n      jsonrpc: \"2.0\",\n      method: \"initialize\",\n      params: {},\n      id: {},\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/requests/logs"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "stackone_list_logs"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport {\n  QueryParamInclude,\n  QueryParamOrderBy,\n  QueryParamOrderDirection,\n  StackoneListLogsQueryParamOrderBy,\n  StackoneListLogsQueryParamOrderDirection,\n} from \"@stackone/stackone-client-ts/sdk/models/operations\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.requestLogs.listLogs({\n    orderBy: QueryParamOrderBy.Duration,\n    orderDirection: QueryParamOrderDirection.Asc,\n    include: QueryParamInclude.StepLogs,\n    filter: {\n      accountIds: \"45355976281015164504,45355976281015164505\",\n      startDate: new Date(\"2020-01-01T00:00:00.000Z\"),\n      endDate: new Date(\"2020-01-01T00:00:00.000Z\"),\n      requestIds: \"adbf752f-6457-4ddd-89b3-98ae2252b83b,adbf752f-6457-4ddd-89b3-98ae2252b83c\",\n      sourceTypes: \"DASHBOARD,SYNTHETIC_WEBHOOK\",\n      httpMethods: \"GET,POST\",\n      providers: \"ashby,greenhouse\",\n      services: \"hris,ats\",\n      resources: \"employees,users\",\n      childResources: \"documents,time-off\",\n      subResources: \"documents,employees\",\n      actions: \"download,upload\",\n      statusCodes: \"200,400\",\n      success: true,\n      orderBy: StackoneListLogsQueryParamOrderBy.Duration,\n      orderDirection: StackoneListLogsQueryParamOrderDirection.Asc,\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/requests/logs/steps"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "stackone_list_step_logs"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { OrderBy, OrderDirection } from \"@stackone/stackone-client-ts/sdk/models/operations\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.requestLogs.listStepLogs({\n    orderBy: OrderBy.EventDatetime,\n    orderDirection: OrderDirection.Asc,\n    filter: {\n      accountIds: \"45355976281015164504,45355976281015164505\",\n      startDate: new Date(\"2020-01-01T00:00:00.000Z\"),\n      endDate: new Date(\"2020-01-01T00:00:00.000Z\"),\n      requestIds: \"adbf752f-6457-4ddd-89b3-98ae2252b83b,adbf752f-6457-4ddd-89b3-98ae2252b83c\",\n      httpMethods: \"GET,POST\",\n      providers: \"ashby,greenhouse\",\n      services: \"hris,ats\",\n      resources: \"employees,users\",\n      childResources: \"documents,time-off\",\n      subResources: \"documents,employees\",\n      actions: \"download,upload\",\n      statusCodes: \"200,400\",\n      success: true,\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/requests/logs/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "stackone_get_log"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { Include } from \"@stackone/stackone-client-ts/sdk/models/operations\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.requestLogs.getLog({\n    id: \"<id>\",\n    include: Include.StepLogs,\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/requests/platform-logs"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "stackone_list_platform_logs"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport {\n  StackoneListPlatformLogsQueryParamOrderBy,\n  StackoneListPlatformLogsQueryParamOrderDirection,\n  StackoneListPlatformLogsQueryParamRequestLogsOrderBy,\n  StackoneListPlatformLogsQueryParamRequestLogsOrderDirection,\n} from \"@stackone/stackone-client-ts/sdk/models/operations\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.requestLogs.listPlatformLogs({\n    orderBy: StackoneListPlatformLogsQueryParamOrderBy.Duration,\n    orderDirection: StackoneListPlatformLogsQueryParamOrderDirection.Asc,\n    filter: {\n      accountIds: \"45355976281015164504,45355976281015164505\",\n      startDate: new Date(\"2020-01-01T00:00:00.000Z\"),\n      endDate: new Date(\"2020-01-01T00:00:00.000Z\"),\n      requestIds: \"adbf752f-6457-4ddd-89b3-98ae2252b83b,adbf752f-6457-4ddd-89b3-98ae2252b83c\",\n      sourceTypes: \"DASHBOARD,SYNTHETIC_WEBHOOK\",\n      httpMethods: \"GET,POST\",\n      categories: \"hris,ats\",\n      resources: \"employees,users\",\n      actions: \"download,upload\",\n      statusCodes: \"200,400\",\n      success: true,\n      orderBy: StackoneListPlatformLogsQueryParamRequestLogsOrderBy.EventDatetime,\n      orderDirection: StackoneListPlatformLogsQueryParamRequestLogsOrderDirection.Asc,\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/accounting/companies"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "accounting_list_companies"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.accounting.listCompanies({\n    fields: \"id,remote_id,name,base_currency,fiscal_year_start_month,fiscal_year_start_day\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/accounting/companies/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "accounting_get_company"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.accounting.getCompany({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,base_currency,fiscal_year_start_month,fiscal_year_start_day\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/accounting/companies/{id}/accounts"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "accounting_list_company_accounts"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.accounting.listCompanyAccounts({\n    id: \"<id>\",\n    fields: \"id,remote_id,company_id,remote_company_id,code,name,type,active\",\n    filter: null,\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/accounting/companies/{id}/accounts/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "accounting_get_company_account"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.accounting.getCompanyAccount({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    fields: \"id,remote_id,company_id,remote_company_id,code,name,type,active\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/accounting/companies/{id}/journals"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "accounting_list_company_journals"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.accounting.listCompanyJournals({\n    id: \"<id>\",\n    fields: \"id,remote_id,company_id,remote_company_id,reference,memo,transaction_date,status,lines,created_at,updated_at,posted_at\",\n    filter: null,\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/accounting/companies/{id}/journals"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "accounting_create_company_journal"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { AccountingJournalCreateRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.accounting.createCompanyJournal({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    accountingJournalCreateRequestDto: {\n      reference: \"JRN-2024-001\",\n      memo: \"Monthly closing entries\",\n      currencyCode: {\n        value: AccountingJournalCreateRequestDtoValue.Usd,\n        sourceValue: \"USD\",\n      },\n      exchangeRate: 1,\n      transactionDate: new Date(\"2024-03-20T10:00:00Z\"),\n      lines: [\n        {\n          accountId: \"acc_123456789\",\n          description: \"Payment for office supplies\",\n          amount: 10010,\n          taxRateId: \"tax_123456789\",\n          taxAmount: 10010,\n        },\n      ],\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/accounting/companies/{id}/journals/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "accounting_batch_create_company_journals"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.accounting.batchCreateCompanyJournals({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    accountingJournalBatchCreateRequestDto: {\n      items: [],\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/accounting/companies/{id}/journals/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "accounting_get_company_journal"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.accounting.getCompanyJournal({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    fields: \"id,remote_id,company_id,remote_company_id,reference,memo,transaction_date,status,lines,created_at,updated_at,posted_at\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/accounting/companies/{id}/tax_rates"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "accounting_list_company_tax_rates"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.accounting.listCompanyTaxRates({\n    id: \"<id>\",\n    fields: \"id,remote_id,company_id,remote_company_id,name,code,percentage,active\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/accounting/companies/{id}/tax_rates/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "accounting_get_company_tax_rate"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.accounting.getCompanyTaxRate({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    fields: \"id,remote_id,company_id,remote_company_id,name,code,percentage,active\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/application_stages"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_list_application_stages"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listApplicationStages({\n    fields: \"id,remote_id,name,order,created_at,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/application_stages/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_get_application_stage"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getApplicationStage({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,order,created_at,updated_at\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_list_applications"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listApplications({\n    fields: \"id,remote_id,candidate_id,remote_candidate_id,job_id,remote_job_id,job_posting_id,remote_job_posting_id,interview_stage,interview_stage_id,remote_interview_stage_id,rejected_reason,rejected_reason_id,remote_rejected_reason_id,rejected_reason_ids,remote_rejected_reason_ids,rejected_reasons,rejected_at,location_id,remote_location_id,location_ids,remote_location_ids,status,application_status,questionnaires,attachments,result_links,source,created_at,updated_at,documents,custom_fields,candidate\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n      createdAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    expand: \"documents\",\n    include: \"attachments,custom_fields\",\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_create_application"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { AtsDocumentsUploadRequestDtoValue, CreateAnswerValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.createApplication({\n    xAccountId: \"<id>\",\n    atsCreateApplicationRequestDto: {\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n      jobId: \"4071538b-3cac-4fbf-ac76-f78ed250ffdd\",\n      jobPostingId: \"1c702a20-8de8-4d03-ac18-cbf4ac42eb51\",\n      locationId: \"dd8d41d1-5eb8-4408-9c87-9ba44604eae4\",\n      applicationStatus: null,\n      questionnaires: [\n        {\n          id: \"right_to_work\",\n          answers: [\n            {\n              id: \"answer1\",\n              type: {\n                value: CreateAnswerValue.ShortText,\n                sourceValue: \"Short Text\",\n              },\n              values: [\n                \"Yes\",\n              ],\n            },\n          ],\n        },\n      ],\n      source: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        name: \"LinkedIn\",\n      },\n      candidateId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n      candidate: {\n        passthrough: {\n          \"other_known_names\": \"John Doe\",\n        },\n        unifiedCustomFields: {\n          \"my_project_custom_field_1\": \"REF-1236\",\n          \"my_project_custom_field_2\": \"some other value\",\n        },\n        phoneNumbers: [\n          {\n            phone: \"+447700112233\",\n          },\n        ],\n        name: \"Romain Sestier\",\n        firstName: \"Romain\",\n        lastName: \"Sestier\",\n        email: \"sestier.romain123@gmail.com\",\n        socialLinks: [\n          {\n            type: \"linkedin\",\n            url: \"https://www.linkedin.com/in/romainsestier/\",\n          },\n        ],\n        company: \"Company Inc.\",\n        title: \"Software Engineer\",\n        hiredAt: new Date(\"2021-01-01T01:01:01.000Z\"),\n        country: \"United States\",\n        customFields: [\n          {\n            id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n            remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n            name: \"Training Completion Status\",\n            value: \"Completed\",\n            valueId: \"value_456\",\n            remoteValueId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n          },\n        ],\n      },\n      documents: [\n        {\n          name: \"weather-forecast\",\n          fileFormat: {\n            value: AtsDocumentsUploadRequestDtoValue.Pdf,\n            sourceValue: \"application/pdf\",\n          },\n          content: \"VGhpcyBpc24ndCByZWFsbHkgYSBzYW1wbGUgZmlsZSwgYnV0IG5vIG9uZSB3aWxsIGV2ZXIga25vdyE\",\n          categoryId: \"6530\",\n          path: \"/path/to/file\",\n          confidential: null,\n          category: {},\n        },\n      ],\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_get_application"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getApplication({\n    id: \"<id>\",\n    fields: \"id,remote_id,candidate_id,remote_candidate_id,job_id,remote_job_id,job_posting_id,remote_job_posting_id,interview_stage,interview_stage_id,remote_interview_stage_id,rejected_reason,rejected_reason_id,remote_rejected_reason_id,rejected_reason_ids,remote_rejected_reason_ids,rejected_reasons,rejected_at,location_id,remote_location_id,location_ids,remote_location_ids,status,application_status,questionnaires,attachments,result_links,source,created_at,updated_at,documents,custom_fields,candidate\",\n    expand: \"documents\",\n    include: \"attachments,custom_fields\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_update_application"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { AtsUpdateApplicationRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.updateApplication({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    atsUpdateApplicationRequestDto: {\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n      customFields: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          name: \"Training Completion Status\",\n          value: \"Completed\",\n          valueId: \"value_456\",\n          remoteValueId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n        },\n      ],\n      applicationStatus: {\n        value: AtsUpdateApplicationRequestDtoValue.Hired,\n        sourceValue: \"Hired\",\n      },\n      source: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        name: \"LinkedIn\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/changes"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_list_application_changes"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listApplicationChanges({\n    id: \"<id>\",\n    fields: \"event_id,remote_event_id,created_at,effective_at,change_type,actor,new_values\",\n    filter: {\n      createdAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/documents"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_list_application_documents"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listApplicationDocuments({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,type,category,category_id,remote_category_id,contents,created_at,updated_at,remote_url,file_format\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/documents/upload"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_upload_application_document"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { AtsDocumentsUploadRequestDtoSchemasValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.uploadApplicationDocument({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    atsDocumentsUploadRequestDto: {\n      name: \"weather-forecast\",\n      fileFormat: null,\n      content: \"VGhpcyBpc24ndCByZWFsbHkgYSBzYW1wbGUgZmlsZSwgYnV0IG5vIG9uZSB3aWxsIGV2ZXIga25vdyE\",\n      categoryId: \"6530\",\n      path: \"/path/to/file\",\n      confidential: {\n        value: AtsDocumentsUploadRequestDtoSchemasValue.True,\n        sourceValue: \"public\",\n      },\n      category: {},\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/documents/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_get_application_document"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getApplicationDocument({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    fields: \"id,remote_id,name,type,category,category_id,remote_category_id,contents,created_at,updated_at,remote_url,file_format\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/documents/{subResourceId}/download"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_download_application_document"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.downloadApplicationDocument({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    format: \"base64\",\n    exportFormat: \"text/plain\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/move"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_move_application"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.moveApplication({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    atsMoveApplicationRequestDto: {\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n      interviewStageId: \"f223d7f6-908b-48f0-9237-b201c307f609\",\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/notes"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_list_application_notes"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listApplicationNotes({\n    id: \"<id>\",\n    fields: \"id,remote_id,content,author_id,remote_author_id,visibility,created_at,updated_at,deleted_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/notes"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_create_application_note"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { AtsCreateNotesRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.createApplicationNote({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    atsCreateNotesRequestDto: {\n      content: [\n        {\n          body: \"This candidate seems like a good fit for the role\",\n        },\n      ],\n      authorId: \"1234567890\",\n      visibility: {\n        value: AtsCreateNotesRequestDtoValue.Public,\n        sourceValue: \"Public\",\n      },\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/notes/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_get_application_note"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getApplicationNote({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    fields: \"id,remote_id,content,author_id,remote_author_id,visibility,created_at,updated_at,deleted_at\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/notes/{subResourceId}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_update_application_note"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { AtsUpdateNotesRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.updateApplicationNote({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    xAccountId: \"<id>\",\n    atsUpdateNotesRequestDto: {\n      content: [\n        {\n          body: \"This candidate seems like a good fit for the role\",\n        },\n      ],\n      authorId: \"1234567890\",\n      visibility: {\n        value: AtsUpdateNotesRequestDtoValue.Public,\n        sourceValue: \"Public\",\n      },\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/offers"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_list_applications_offers"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listApplicationsOffers({\n    id: \"<id>\",\n    fields: \"id,remote_id,application_id,remote_application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/offers/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_get_application_offer"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getApplicationOffer({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    fields: \"id,remote_id,application_id,remote_application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/reject"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_reject_application"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.rejectApplication({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    atsRejectApplicationRequestDto: {\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n      rejectedReasonId: \"f223d7f6-908b-48f0-9237-b201c307f609\",\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/scheduled_interviews"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_list_applications_scheduled_interviews"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listApplicationsScheduledInterviews({\n    id: \"<id>\",\n    fields: \"id,remote_id,application_id,remote_application_id,interview_stage_id,remote_interview_stage_id,interview_stage,status,interview_status,interviewer_ids,remote_interviewer_ids,interview_parts,interviewers,start_at,end_at,meeting_url,created_at,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/scheduled_interviews/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_get_application_scheduled_interview"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getApplicationScheduledInterview({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    fields: \"id,remote_id,candidate_id,remote_candidate_id,job_id,remote_job_id,job_posting_id,remote_job_posting_id,interview_stage,interview_stage_id,remote_interview_stage_id,rejected_reason,rejected_reason_id,remote_rejected_reason_id,rejected_reason_ids,remote_rejected_reason_ids,rejected_reasons,rejected_at,location_id,remote_location_id,location_ids,remote_location_ids,status,application_status,questionnaires,attachments,result_links,source,created_at,updated_at,documents,custom_fields,candidate\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/scorecards"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_list_application_scorecards"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listApplicationScorecards({\n    id: \"<id>\",\n    fields: \"id,remote_id,sections,label,candidate_id,remote_candidate_id,application_id,remote_application_id,interview_id,remote_interview_id,author_id,remote_author_id,overall_recommendation,created_at,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/applications/{id}/scorecards/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_get_application_scorecard"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getApplicationScorecard({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    fields: \"id,remote_id,sections,label,candidate_id,remote_candidate_id,application_id,remote_application_id,interview_id,remote_interview_id,author_id,remote_author_id,overall_recommendation,created_at,updated_at\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/assessments/orders"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_order_assessments_request"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { AtsCreateCandidatesAssessmentsRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.orderAssessmentsRequest({\n    xAccountId: \"<id>\",\n    atsCreateCandidatesAssessmentsRequestDto: {\n      id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      package: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        name: \"Test 1\",\n        description: \"Skills test to gauge a candidate's proficiency in job-specific skills\",\n      },\n      application: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        applicationStatus: {\n          value: AtsCreateCandidatesAssessmentsRequestDtoValue.Hired,\n          sourceValue: \"Hired\",\n        },\n        passthrough: {\n          \"other_known_names\": \"John Doe\",\n        },\n      },\n      job: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        title: \"Software Engineer\",\n        hiringTeam: [\n          {\n            userId: \"123456\",\n            remoteUserId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n            firstName: \"John\",\n            lastName: \"Doe\",\n            email: \"john.doe@gmail.com\",\n            role: \"Software Engineer\",\n          },\n        ],\n        passthrough: {\n          \"other_known_names\": \"John Doe\",\n        },\n      },\n      candidate: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        firstName: \"Romain\",\n        lastName: \"Sestier\",\n        emails: [\n          {\n            type: \"personal\",\n            value: \"sestier.romain123@gmail.com\",\n          },\n        ],\n        passthrough: {\n          \"other_known_names\": \"John Doe\",\n        },\n        profileUrl: \"https://exmaple.com/candidate?id=xyz\",\n      },\n      requester: {\n        userId: \"123456\",\n        remoteUserId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n        firstName: \"John\",\n        lastName: \"Doe\",\n        email: \"john.doe@gmail.com\",\n        role: \"Software Engineer\",\n      },\n      resultsUpdateUrl: \"https://exmaple.com/integrations/results/update\",\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/assessments/orders/{id}/result"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_update_assessments_result"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { AtsUpdateCandidatesAssessmentsResultsRequestDtoValue, AttachmentValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.updateAssessmentsResult({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    atsUpdateCandidatesAssessmentsResultsRequestDto: {\n      score: null,\n      startDate: new Date(\"2021-01-01T01:01:01.000Z\"),\n      submissionDate: new Date(\"2021-01-01T01:01:01.000Z\"),\n      summary: \"Test is passed\",\n      result: {\n        value: AtsUpdateCandidatesAssessmentsResultsRequestDtoValue.Passed,\n        sourceValue: \"Passed\",\n      },\n      resultUrl: \"https://exmaple.com/result?id=xyz\",\n      attachments: [\n        {\n          url: \"http://example.com/resume.pdf\",\n          contentType: {\n            value: AttachmentValue.Text,\n            sourceValue: \"Text\",\n          },\n        },\n      ],\n      candidate: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        profileUrl: \"https://exmaple.com/candidate?id=xyz\",\n      },\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/assessments/packages"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_list_assessments_packages"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listAssessmentsPackages({\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/assessments/packages/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_get_assessments_package"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getAssessmentsPackage({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/background_checks/orders"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_order_background_check_request"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { AtsCreateBackgroundCheckOrderRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.orderBackgroundCheckRequest({\n    xAccountId: \"<id>\",\n    atsCreateBackgroundCheckOrderRequestDto: {\n      id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      application: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        applicationStatus: {\n          value: AtsCreateBackgroundCheckOrderRequestDtoValue.Hired,\n          sourceValue: \"Hired\",\n        },\n        passthrough: {\n          \"other_known_names\": \"John Doe\",\n        },\n      },\n      job: null,\n      candidate: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        firstName: \"Romain\",\n        lastName: \"Sestier\",\n        emails: [\n          {\n            type: \"personal\",\n            value: \"sestier.romain123@gmail.com\",\n          },\n        ],\n        passthrough: {\n          \"other_known_names\": \"John Doe\",\n        },\n        profileUrl: \"https://exmaple.com/candidate?id=xyz\",\n      },\n      requester: {\n        userId: \"123456\",\n        remoteUserId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n        firstName: \"John\",\n        lastName: \"Doe\",\n        email: \"john.doe@gmail.com\",\n        role: \"Software Engineer\",\n      },\n      resultsUpdateUrl: \"https://exmaple.com/integrations/results/update\",\n      package: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        name: \"Test 1\",\n        description: \"Skills test to gauge a candidate's proficiency in job-specific skills\",\n        tests: [\n          {\n            id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n            remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n            name: \"Test 1\",\n            description: \"Skills test to gauge a candidate's proficiency in job-specific skills\",\n          },\n        ],\n      },\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/background_checks/orders/{id}/result"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_update_background_check_result"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { AtsUpdateBackgroundCheckResultRequestDtoValue, AttachmentValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.updateBackgroundCheckResult({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    atsUpdateBackgroundCheckResultRequestDto: {\n      score: {\n        label: \"Percentage\",\n        value: \"80\",\n        min: \"0\",\n        max: \"100\",\n      },\n      startDate: new Date(\"2021-01-01T01:01:01.000Z\"),\n      submissionDate: new Date(\"2021-01-01T01:01:01.000Z\"),\n      summary: \"Test is passed\",\n      result: {\n        value: AtsUpdateBackgroundCheckResultRequestDtoValue.Passed,\n        sourceValue: \"Passed\",\n      },\n      resultUrl: \"https://exmaple.com/result?id=xyz\",\n      attachments: [\n        {\n          url: \"http://example.com/resume.pdf\",\n          contentType: {\n            value: AttachmentValue.Text,\n            sourceValue: \"Text\",\n          },\n        },\n      ],\n      candidate: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        profileUrl: \"https://exmaple.com/candidate?id=xyz\",\n      },\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/background_checks/packages"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_list_background_check_packages"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listBackgroundCheckPackages({\n    fields: \"id,remote_id,name,description,tests\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/background_checks/packages"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_create_background_check_package"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.createBackgroundCheckPackage({\n    xAccountId: \"<id>\",\n    atsCreateBackgroundCheckPackagesRequestDto: {\n      name: \"Test 1\",\n      description: \"Skills test to gauge a candidate's proficiency in job-specific skills\",\n      tests: [\n        {\n          name: \"Test 1\",\n          description: \"Skills test to gauge a candidate's proficiency in job-specific skills\",\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/background_checks/packages/{id}"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_delete_background_check_package"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.deleteBackgroundCheckPackage({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/background_checks/packages/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_get_background_check_package"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getBackgroundCheckPackage({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,description,tests\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/background_checks/packages/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_update_background_check_package"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.updateBackgroundCheckPackage({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    atsUpdateBackgroundCheckPackagesRequestDto: {\n      name: \"Test 1\",\n      description: \"Skills test to gauge a candidate's proficiency in job-specific skills\",\n      tests: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          name: \"Test 1\",\n          description: \"Skills test to gauge a candidate's proficiency in job-specific skills\",\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/candidates"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_list_candidates"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listCandidates({\n    fields: \"id,remote_id,name,first_name,last_name,email,emails,social_links,phone,phone_numbers,company,country,title,application_ids,remote_application_ids,hired_at,custom_fields,created_at,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n      createdAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    include: \"custom_fields\",\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/candidates"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_create_candidate"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.createCandidate({\n    xAccountId: \"<id>\",\n    atsCreateCandidateRequestDto: {\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n      unifiedCustomFields: {\n        \"my_project_custom_field_1\": \"REF-1236\",\n        \"my_project_custom_field_2\": \"some other value\",\n      },\n      phoneNumbers: [\n        {\n          phone: \"+447700112233\",\n        },\n      ],\n      name: \"Romain Sestier\",\n      firstName: \"Romain\",\n      lastName: \"Sestier\",\n      email: \"sestier.romain123@gmail.com\",\n      socialLinks: [\n        {\n          type: \"linkedin\",\n          url: \"https://www.linkedin.com/in/romainsestier/\",\n        },\n      ],\n      company: \"Company Inc.\",\n      title: \"Software Engineer\",\n      hiredAt: new Date(\"2021-01-01T01:01:01.000Z\"),\n      country: \"United States\",\n      customFields: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          name: \"Training Completion Status\",\n          value: \"Completed\",\n          valueId: \"value_456\",\n          remoteValueId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n        },\n      ],\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/candidates/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_get_candidate"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getCandidate({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,first_name,last_name,email,emails,social_links,phone,phone_numbers,company,country,title,application_ids,remote_application_ids,hired_at,custom_fields,created_at,updated_at\",\n    include: \"custom_fields\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/candidates/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_update_candidate"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.updateCandidate({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    atsUpdateCandidateRequestDto: {\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n      unifiedCustomFields: {\n        \"my_project_custom_field_1\": \"REF-1236\",\n        \"my_project_custom_field_2\": \"some other value\",\n      },\n      name: \"Romain Sestier\",\n      firstName: \"Romain\",\n      lastName: \"Sestier\",\n      email: \"sestier.romain123@gmail.com\",\n      emails: [\n        {\n          type: \"personal\",\n          value: \"sestier.romain123@gmail.com\",\n        },\n      ],\n      socialLinks: [\n        {\n          type: \"linkedin\",\n          url: \"https://www.linkedin.com/in/romainsestier/\",\n        },\n      ],\n      phoneNumbers: [\n        {\n          phone: \"+447700112233\",\n        },\n      ],\n      company: \"Company Inc.\",\n      title: \"Software Engineer\",\n      applicationIds: [\n        \"123e4567-e89b-12d3-a456-426614174000\",\n        \"523e1234-e89b-fdd2-a456-762545121101\",\n      ],\n      hiredAt: new Date(\"2021-01-01T01:01:01.000Z\"),\n      country: \"United States\",\n      customFields: null,\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/candidates/{id}/notes"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_list_candidate_notes"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listCandidateNotes({\n    id: \"<id>\",\n    fields: \"id,remote_id,content,author_id,remote_author_id,visibility,created_at,updated_at,deleted_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/candidates/{id}/notes"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_create_candidate_note"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { AtsCreateNotesRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.createCandidateNote({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    atsCreateNotesRequestDto: {\n      content: [\n        {\n          body: \"This candidate seems like a good fit for the role\",\n        },\n      ],\n      authorId: \"1234567890\",\n      visibility: {\n        value: AtsCreateNotesRequestDtoValue.Public,\n        sourceValue: \"Public\",\n      },\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/candidates/{id}/notes/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_get_candidate_note"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getCandidateNote({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    fields: \"id,remote_id,content,author_id,remote_author_id,visibility,created_at,updated_at,deleted_at\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/custom_field_definitions/applications"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_list_application_custom_field_definitions"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listApplicationCustomFieldDefinitions({\n    fields: \"id,remote_id,name,description,type,options\",\n    filter: null,\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/custom_field_definitions/applications/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_get_application_custom_field_definition"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getApplicationCustomFieldDefinition({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,description,type,options\",\n    filter: null,\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/custom_field_definitions/candidates"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_list_candidate_custom_field_definitions"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listCandidateCustomFieldDefinitions({\n    fields: \"id,remote_id,name,description,type,options\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/custom_field_definitions/candidates/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_get_candidate_custom_field_definition"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getCandidateCustomFieldDefinition({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,description,type,options\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/custom_field_definitions/jobs"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_list_job_custom_field_definitions"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listJobCustomFieldDefinitions({\n    fields: \"id,remote_id,name,description,type,options\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/custom_field_definitions/jobs/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_get_job_custom_field_definition"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getJobCustomFieldDefinition({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,description,type,options\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/departments"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_list_departments"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listDepartments({\n    fields: \"id,remote_id,name\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/departments/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_get_department"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getDepartment({\n    id: \"<id>\",\n    fields: \"id,remote_id,name\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/documents/application_categories"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_list_application_document_categories"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listApplicationDocumentCategories({\n    fields: \"id,remote_id,name,active\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/documents/application_categories/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_get_application_document_category"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getApplicationDocumentCategory({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,active\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/interviews"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_list_interviews"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listInterviews({\n    fields: \"id,remote_id,application_id,remote_application_id,interview_stage_id,remote_interview_stage_id,interview_stage,status,interview_status,interviewer_ids,remote_interviewer_ids,interview_parts,interviewers,start_at,end_at,meeting_url,created_at,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n      createdAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/interviews/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_get_interview"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getInterview({\n    id: \"<id>\",\n    fields: \"id,remote_id,application_id,remote_application_id,interview_stage_id,remote_interview_stage_id,interview_stage,status,interview_status,interviewer_ids,remote_interviewer_ids,interview_parts,interviewers,start_at,end_at,meeting_url,created_at,updated_at\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/job_postings"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_list_job_postings"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listJobPostings({\n    fields: \"id,remote_id,title,locations,internal,status,job_id,remote_job_id,content,compensation,employment_type,employment_contract_type,external_url,external_apply_url,questionnaires,start_date,updated_at,created_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n      createdAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    include: \"questionnaires\",\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/job_postings/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_get_job_posting"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getJobPosting({\n    id: \"<id>\",\n    fields: \"id,remote_id,title,locations,internal,status,job_id,remote_job_id,content,compensation,employment_type,employment_contract_type,external_url,external_apply_url,questionnaires,start_date,updated_at,created_at\",\n    include: \"questionnaires\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/jobs"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_list_jobs"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listJobs({\n    fields: \"id,remote_id,code,title,description,status,job_status,department_ids,remote_department_ids,location_ids,remote_location_ids,hiring_team,interview_stages,confidential,custom_fields,created_at,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n      createdAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    expand: \"job_postings,interview_stages\",\n    include: \"custom_fields\",\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/jobs"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_create_job"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { AtsCreateJobRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.createJob({\n    xAccountId: \"<id>\",\n    atsCreateJobRequestDto: {\n      unifiedCustomFields: {\n        \"my_project_custom_field_1\": \"REF-1236\",\n        \"my_project_custom_field_2\": \"some other value\",\n      },\n      code: \"184919\",\n      title: \"Software Engineer\",\n      description: \"Responsible for identifying business requirements\",\n      jobStatus: {\n        value: AtsCreateJobRequestDtoValue.Published,\n        sourceValue: \"Published\",\n      },\n      departmentIds: [\n        \"308570\",\n        \"308571\",\n        \"308572\",\n      ],\n      locationIds: [\n        \"668570\",\n        \"678571\",\n        \"688572\",\n      ],\n      hiringTeam: [\n        {\n          userId: \"123456\",\n          remoteUserId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n          firstName: \"John\",\n          lastName: \"Doe\",\n          email: \"john.doe@gmail.com\",\n          role: \"Software Engineer\",\n        },\n      ],\n      interviewStages: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          unifiedCustomFields: {\n            \"my_project_custom_field_1\": \"REF-1236\",\n            \"my_project_custom_field_2\": \"some other value\",\n          },\n          createdAt: new Date(\"2021-01-01T01:01:01.000Z\"),\n          updatedAt: new Date(\"2021-01-01T01:01:01.000Z\"),\n        },\n      ],\n      customFields: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          name: \"Training Completion Status\",\n          value: \"Completed\",\n          valueId: \"value_456\",\n          remoteValueId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/jobs/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_get_job"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getJob({\n    id: \"<id>\",\n    fields: \"id,remote_id,code,title,description,status,job_status,department_ids,remote_department_ids,location_ids,remote_location_ids,hiring_team,interview_stages,confidential,custom_fields,created_at,updated_at\",\n    expand: \"job_postings,interview_stages\",\n    include: \"custom_fields\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/jobs/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_update_job"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { AtsUpdateJobRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.updateJob({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    atsUpdateJobRequestDto: {\n      unifiedCustomFields: {\n        \"my_project_custom_field_1\": \"REF-1236\",\n        \"my_project_custom_field_2\": \"some other value\",\n      },\n      code: \"184919\",\n      title: \"Software Engineer\",\n      description: \"Responsible for identifying business requirements\",\n      jobStatus: {\n        value: AtsUpdateJobRequestDtoValue.Published,\n        sourceValue: \"Published\",\n      },\n      departmentIds: [\n        \"308570\",\n        \"308571\",\n        \"308572\",\n      ],\n      locationIds: [\n        \"668570\",\n        \"678571\",\n        \"688572\",\n      ],\n      hiringTeam: [\n        {\n          userId: \"123456\",\n          remoteUserId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n          firstName: \"John\",\n          lastName: \"Doe\",\n          email: \"john.doe@gmail.com\",\n          role: \"Software Engineer\",\n        },\n      ],\n      interviewStages: null,\n      customFields: null,\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/jobs/{id}/application_stages"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_list_job_application_stages"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listJobApplicationStages({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,order,created_at,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/jobs/{id}/application_stages/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_get_job_application_stage"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getJobApplicationStage({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    fields: \"id,remote_id,name,order,created_at,updated_at\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/lists"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_list_lists"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listLists({\n    fields: \"id,remote_id,name,created_at,updated_at,items,type\",\n    filter: null,\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/lists/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_get_list"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getList({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,created_at,updated_at,items,type\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/locations"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_list_locations"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listLocations({\n    fields: \"id,remote_id,name\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/locations/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_get_location"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getLocation({\n    id: \"<id>\",\n    fields: \"id,remote_id,name\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/offers"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_list_offers"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listOffers({\n    fields: \"id,remote_id,application_id,remote_application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/offers"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_create_offer"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { AtsCreateOfferRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.createOffer({\n    xAccountId: \"<id>\",\n    atsCreateOfferRequestDto: {\n      startDate: new Date(\"2021-01-01T01:01:01.000Z\"),\n      offerStatus: {\n        value: AtsCreateOfferRequestDtoValue.Pending,\n        sourceValue: \"Pending\",\n      },\n      offerHistory: [\n        {\n          startDate: new Date(\"2021-01-01T01:01:01.000Z\"),\n          createdAt: new Date(\"2021-01-01T01:01:01.000Z\"),\n          updatedAt: new Date(\"2021-01-01T01:01:01.000Z\"),\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/offers/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_get_offer"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getOffer({\n    id: \"<id>\",\n    fields: \"id,remote_id,application_id,remote_application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/rejected_reasons"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_list_rejected_reasons"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listRejectedReasons({\n    fields: \"id,remote_id,label,type,rejected_reason_type\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/rejected_reasons/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_get_rejected_reason"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getRejectedReason({\n    id: \"<id>\",\n    fields: \"id,remote_id,label,type,rejected_reason_type\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/users"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_list_users"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.listUsers({\n    fields: \"id,remote_id,first_name,last_name,name,email,phone\",\n    filter: null,\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ats/users/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ats_get_user"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ats.getUser({\n    id: \"<id>\",\n    fields: \"id,remote_id,first_name,last_name,name,email,phone\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/crm/accounts"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "crm_list_accounts"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.crm.listAccounts({\n    fields: \"id,remote_id,owner_id,remote_owner_id,name,description,industries,annual_revenue,website,addresses,phone_numbers,created_at,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/crm/accounts/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "crm_get_account"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.crm.getAccount({\n    id: \"<id>\",\n    fields: \"id,remote_id,owner_id,remote_owner_id,name,description,industries,annual_revenue,website,addresses,phone_numbers,created_at,updated_at\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/crm/contacts"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "crm_list_contacts"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.crm.listContacts({\n    fields: \"id,remote_id,first_name,last_name,company_name,emails,phone_numbers,deal_ids,remote_deal_ids,account_ids,remote_account_ids,custom_fields,created_at,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    include: \"custom_fields\",\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/crm/contacts"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "crm_create_contact"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.crm.createContact({\n    xAccountId: \"<id>\",\n    crmCreateContactRequestDto: {\n      firstName: \"Steve\",\n      lastName: \"Wozniak\",\n      companyName: \"Apple Inc.\",\n      emails: [\n        \"steve@apple.com\",\n      ],\n      phoneNumbers: [\n        \"123-456-7890\",\n      ],\n      dealIds: [\n        \"deal-001\",\n        \"deal-002\",\n      ],\n      accountIds: [\n        \"account-123\",\n        \"account-456\",\n      ],\n      customFields: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          name: \"Training Completion Status\",\n          value: \"Completed\",\n          valueId: \"value_456\",\n          remoteValueId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/crm/contacts/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "crm_get_contact"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.crm.getContact({\n    id: \"<id>\",\n    fields: \"id,remote_id,first_name,last_name,company_name,emails,phone_numbers,deal_ids,remote_deal_ids,account_ids,remote_account_ids,custom_fields,created_at,updated_at\",\n    include: \"custom_fields\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/crm/contacts/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "crm_update_contact"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.crm.updateContact({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    crmCreateContactRequestDto: {\n      firstName: \"Steve\",\n      lastName: \"Wozniak\",\n      companyName: \"Apple Inc.\",\n      emails: [\n        \"steve@apple.com\",\n      ],\n      phoneNumbers: [\n        \"123-456-7890\",\n      ],\n      dealIds: [\n        \"deal-001\",\n        \"deal-002\",\n      ],\n      accountIds: [\n        \"account-123\",\n        \"account-456\",\n      ],\n      customFields: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          name: \"Training Completion Status\",\n          value: \"Completed\",\n          valueId: \"value_456\",\n          remoteValueId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/crm/custom_field_definitions/contacts"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "crm_list_contact_custom_field_definitions"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.crm.listContactCustomFieldDefinitions({\n    fields: \"id,remote_id,name,description,type,options\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/crm/custom_field_definitions/contacts/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "crm_get_contact_custom_field_definition"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.crm.getContactCustomFieldDefinition({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,description,type,options\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/crm/lists"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "crm_list_lists"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.crm.listLists({\n    fields: \"id,remote_id,name,created_at,updated_at,items,type\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/crm/lists/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "crm_get_list"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.crm.getList({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,created_at,updated_at,items,type\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/documents/drives"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "documents_list_drives"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.documents.listDrives({\n    fields: \"id,remote_id,name,description,url,created_at,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/documents/drives/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "documents_get_drive"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.documents.getDrive({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,description,url,created_at,updated_at\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/documents/files"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "documents_list_files"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.documents.listFiles({\n    fields: \"id,remote_id,name,description,url,size,file_format,path,owner_id,remote_owner_id,folder_id,remote_folder_id,drive_id,remote_drive_id,export_formats,default_download_format,created_at,updated_at,has_content,has_children,all_parent_folder_ids,remote_all_parent_folder_ids\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n      name: \"john_doe_resume.pdf\",\n      content: \"FAQ of the project\",\n      createdAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n      driveId: \"1234567890\",\n      folderId: \"1234567890\",\n    },\n    folderId: \"1234567890\",\n    nestedItems: \"true\",\n    include: \"all_parent_folder_ids\",\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/documents/files/upload"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "documents_upload_file"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { UnifiedUploadRequestDtoSchemasValue, UnifiedUploadRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.documents.uploadFile({\n    xAccountId: \"<id>\",\n    unifiedUploadRequestDto: {\n      name: \"weather-forecast\",\n      fileFormat: {\n        value: UnifiedUploadRequestDtoValue.Pdf,\n        sourceValue: \"application/pdf\",\n      },\n      content: \"VGhpcyBpc24ndCByZWFsbHkgYSBzYW1wbGUgZmlsZSwgYnV0IG5vIG9uZSB3aWxsIGV2ZXIga25vdyE\",\n      categoryId: \"6530\",\n      path: \"/path/to/file\",\n      category: {\n        value: \"reports, resumes\",\n        sourceValue: \"550e8400-e29b-41d4-a716-446655440000, CUSTOM_CATEGORY_NAME\",\n      },\n      confidential: {\n        value: UnifiedUploadRequestDtoSchemasValue.True,\n        sourceValue: \"public\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/documents/files/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "documents_get_file"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.documents.getFile({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,description,url,size,file_format,path,owner_id,remote_owner_id,folder_id,remote_folder_id,drive_id,remote_drive_id,export_formats,default_download_format,created_at,updated_at,has_content,has_children,all_parent_folder_ids,remote_all_parent_folder_ids\",\n    include: \"all_parent_folder_ids\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/documents/files/{id}/download"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "documents_download_file"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.documents.downloadFile({\n    id: \"<id>\",\n    format: \"base64\",\n    exportFormat: \"text/plain\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/documents/folders"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "documents_list_folders"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.documents.listFolders({\n    fields: \"id,remote_id,name,description,url,size,path,owner_id,remote_owner_id,parent_folder_id,remote_parent_folder_id,drive_id,remote_drive_id,created_at,updated_at,has_content,has_children,is_root,all_parent_folder_ids,remote_all_parent_folder_ids\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n      driveId: \"1234567890\",\n      folderId: \"1234567890\",\n    },\n    folderId: \"1234567890\",\n    nestedItems: \"true\",\n    include: \"all_parent_folder_ids\",\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/documents/folders/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "documents_get_folder"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.documents.getFolder({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,description,url,size,path,owner_id,remote_owner_id,parent_folder_id,remote_parent_folder_id,drive_id,remote_drive_id,created_at,updated_at,has_content,has_children,is_root,all_parent_folder_ids,remote_all_parent_folder_ids\",\n    include: \"all_parent_folder_ids\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/benefits"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_benefits"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listBenefits({\n    fields: \"id,remote_id,name,benefit_type,provider,description,created_at,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/benefits/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_benefit"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getBenefit({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,benefit_type,provider,description,created_at,updated_at\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/companies"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_companies"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listCompanies({\n    fields: \"id,remote_id,name,full_name,display_name,created_at,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/companies/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_company"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getCompany({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,full_name,display_name,created_at,updated_at\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/custom_field_definitions/employees"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_employee_custom_field_definitions"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listEmployeeCustomFieldDefinitions({\n    fields: \"id,remote_id,name,description,type,options\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/custom_field_definitions/employees/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_employee_custom_field_definition"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getEmployeeCustomFieldDefinition({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,description,type,options\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/documents/employee_categories"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_employee_categories"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listEmployeeCategories({\n    fields: \"id,remote_id,name,active\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/documents/employee_categories/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_employee_document_category"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getEmployeeDocumentCategory({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,active\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_employees"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listEmployees({\n    fields: \"id,remote_id,first_name,last_name,name,display_name,gender,ethnicity,date_of_birth,birthday,marital_status,avatar_url,avatar,personal_email,personal_phone_number,work_email,work_phone_number,job_id,remote_job_id,job_title,job_description,department_id,remote_department_id,department,cost_centers,company,manager_id,remote_manager_id,hire_date,start_date,tenure,work_anniversary,employment_type,employment_contract_type,employment_status,termination_date,company_name,company_id,remote_company_id,preferred_language,citizenships,home_location,work_location,employments,custom_fields,created_at,updated_at,benefits,employee_number,national_identity_number,national_identity_numbers,skills\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    expand: \"company,employments,work_location,home_location,groups,skills\",\n    include: \"avatar_url,avatar,custom_fields,job_description,benefits\",\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_create_employee"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport {\n  CountryCodeEnumValue,\n  HrisCreateEmployeeRequestDtoSchemasHomeLocationValue,\n  HrisCreateEmployeeRequestDtoSchemasValue,\n  NationalIdentityNumberApiModelSchemasValue,\n  NationalIdentityNumberApiModelValue,\n} from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.createEmployee({\n    xAccountId: \"<id>\",\n    hrisCreateEmployeeRequestDto: {\n      firstName: \"Isaac\",\n      lastName: \"Newton\",\n      name: \"Isaac Newton\",\n      displayName: \"Sir Isaac Newton\",\n      avatarUrl: \"https://example.com/avatar.png\",\n      personalEmail: \"isaac.newton@example.com\",\n      personalPhoneNumber: \"+1234567890\",\n      workEmail: \"newton@example.com\",\n      workPhoneNumber: \"+1234567890\",\n      jobTitle: \"Physicist\",\n      departmentId: \"3093\",\n      teamId: \"2913\",\n      department: \"Physics\",\n      managerId: \"67890\",\n      gender: {},\n      preferredLanguage: {\n        value: HrisCreateEmployeeRequestDtoSchemasValue.Eng,\n      },\n      ethnicity: {},\n      dateOfBirth: new Date(\"1990-01-01T00:00:00.000Z\"),\n      birthday: new Date(\"2021-01-01T00:00:00Z\"),\n      maritalStatus: {},\n      avatar: {},\n      hireDate: new Date(\"2021-01-01T00:00:00.000Z\"),\n      startDate: new Date(\"2021-01-01T00:00:00.000Z\"),\n      employmentStatus: {},\n      terminationDate: new Date(\"2021-01-01T00:00:00Z\"),\n      companyId: \"1234567890\",\n      citizenships: [\n        {\n          value: CountryCodeEnumValue.Us,\n        },\n      ],\n      employment: null,\n      customFields: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          name: \"Training Completion Status\",\n          value: \"Completed\",\n          valueId: \"value_456\",\n          remoteValueId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n        },\n      ],\n      benefits: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          name: \"Health Insurance\",\n          provider: \"Aetna\",\n          description: \"Health insurance for employees\",\n          createdAt: new Date(\"2021-01-01T00:00:00Z\"),\n          updatedAt: new Date(\"2021-01-01T00:00:00Z\"),\n        },\n      ],\n      employeeNumber: \"125\",\n      nationalIdentityNumbers: [\n        {\n          value: \"123456789\",\n          type: {\n            value: NationalIdentityNumberApiModelValue.Ssn,\n          },\n          country: {\n            value: NationalIdentityNumberApiModelSchemasValue.Us,\n          },\n        },\n      ],\n      homeLocation: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        name: \"Woolsthorpe Manor\",\n        phoneNumber: \"+44 1476 860 364\",\n        street1: \"Water Lane\",\n        street2: \"Woolsthorpe by Colsterworth\",\n        city: \"Grantham\",\n        zipCode: \"NG33 5NR\",\n        country: {\n          value: HrisCreateEmployeeRequestDtoSchemasHomeLocationValue.Us,\n        },\n        passthrough: {\n          \"other_known_names\": \"John Doe\",\n        },\n        state: {},\n      },\n      workLocation: null,\n      costCenters: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          name: \"R&D\",\n          distributionPercentage: 100,\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_employee"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getEmployee({\n    id: \"<id>\",\n    fields: \"id,remote_id,first_name,last_name,name,display_name,gender,ethnicity,date_of_birth,birthday,marital_status,avatar_url,avatar,personal_email,personal_phone_number,work_email,work_phone_number,job_id,remote_job_id,job_title,job_description,department_id,remote_department_id,department,cost_centers,company,manager_id,remote_manager_id,hire_date,start_date,tenure,work_anniversary,employment_type,employment_contract_type,employment_status,termination_date,company_name,company_id,remote_company_id,preferred_language,citizenships,home_location,work_location,employments,custom_fields,created_at,updated_at,benefits,employee_number,national_identity_number,national_identity_numbers,skills\",\n    expand: \"company,employments,work_location,home_location,groups,skills\",\n    include: \"avatar_url,avatar,custom_fields,job_description,benefits\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_update_employee"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport {\n  CountryCodeEnumValue,\n  HrisUpdateEmployeeRequestDtoSchemasHomeLocationValue,\n  HrisUpdateEmployeeRequestDtoSchemasValue,\n  HrisUpdateEmployeeRequestDtoSchemasWorkLocationValue,\n  NationalIdentityNumberApiModelSchemasValue,\n  NationalIdentityNumberApiModelValue,\n} from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.updateEmployee({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    hrisUpdateEmployeeRequestDto: {\n      firstName: \"Isaac\",\n      lastName: \"Newton\",\n      name: \"Isaac Newton\",\n      displayName: \"Sir Isaac Newton\",\n      avatarUrl: \"https://example.com/avatar.png\",\n      personalEmail: \"isaac.newton@example.com\",\n      personalPhoneNumber: \"+1234567890\",\n      workEmail: \"newton@example.com\",\n      workPhoneNumber: \"+1234567890\",\n      jobTitle: \"Physicist\",\n      departmentId: \"3093\",\n      teamId: \"2913\",\n      department: \"Physics\",\n      managerId: \"67890\",\n      gender: {},\n      preferredLanguage: {\n        value: HrisUpdateEmployeeRequestDtoSchemasValue.Eng,\n      },\n      ethnicity: {},\n      dateOfBirth: new Date(\"1990-01-01T00:00:00.000Z\"),\n      birthday: new Date(\"2021-01-01T00:00:00Z\"),\n      maritalStatus: {},\n      avatar: {},\n      hireDate: new Date(\"2021-01-01T00:00:00.000Z\"),\n      startDate: new Date(\"2021-01-01T00:00:00.000Z\"),\n      employmentStatus: {},\n      terminationDate: new Date(\"2021-01-01T00:00:00Z\"),\n      companyId: \"1234567890\",\n      citizenships: [\n        {\n          value: CountryCodeEnumValue.Us,\n        },\n      ],\n      employment: null,\n      customFields: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          name: \"Training Completion Status\",\n          value: \"Completed\",\n          valueId: \"value_456\",\n          remoteValueId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n        },\n      ],\n      benefits: null,\n      employeeNumber: \"125\",\n      nationalIdentityNumbers: [\n        {\n          value: \"123456789\",\n          type: {\n            value: NationalIdentityNumberApiModelValue.Ssn,\n          },\n          country: {\n            value: NationalIdentityNumberApiModelSchemasValue.Us,\n          },\n        },\n      ],\n      homeLocation: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        name: \"Woolsthorpe Manor\",\n        phoneNumber: \"+44 1476 860 364\",\n        street1: \"Water Lane\",\n        street2: \"Woolsthorpe by Colsterworth\",\n        city: \"Grantham\",\n        zipCode: \"NG33 5NR\",\n        country: {\n          value: HrisUpdateEmployeeRequestDtoSchemasHomeLocationValue.Us,\n        },\n        passthrough: {\n          \"other_known_names\": \"John Doe\",\n        },\n        state: {},\n      },\n      workLocation: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        name: \"Woolsthorpe Manor\",\n        phoneNumber: \"+44 1476 860 364\",\n        street1: \"Water Lane\",\n        street2: \"Woolsthorpe by Colsterworth\",\n        city: \"Grantham\",\n        zipCode: \"NG33 5NR\",\n        country: {\n          value: HrisUpdateEmployeeRequestDtoSchemasWorkLocationValue.Us,\n        },\n        passthrough: {\n          \"other_known_names\": \"John Doe\",\n        },\n        state: {},\n      },\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/documents"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_employee_documents"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listEmployeeDocuments({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,type,category,category_id,remote_category_id,contents,created_at,updated_at,remote_url,file_format\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/documents/upload"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_upload_employee_document"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { HrisDocumentsUploadRequestDtoSchemasValue, HrisDocumentsUploadRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.uploadEmployeeDocument({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    hrisDocumentsUploadRequestDto: {\n      name: \"weather-forecast\",\n      fileFormat: {\n        value: HrisDocumentsUploadRequestDtoValue.Pdf,\n        sourceValue: \"application/pdf\",\n      },\n      content: \"VGhpcyBpc24ndCByZWFsbHkgYSBzYW1wbGUgZmlsZSwgYnV0IG5vIG9uZSB3aWxsIGV2ZXIga25vdyE\",\n      categoryId: \"6530\",\n      path: \"/path/to/file\",\n      confidential: {\n        value: HrisDocumentsUploadRequestDtoSchemasValue.True,\n        sourceValue: \"public\",\n      },\n      category: {},\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/documents/upload/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_batch_upload_employee_document"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { HrisDocumentsUploadRequestDtoSchemasValue, HrisDocumentsUploadRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.batchUploadEmployeeDocument({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    hrisBatchDocumentUploadRequestDto: {\n      items: [\n        {\n          name: \"weather-forecast\",\n          fileFormat: {\n            value: HrisDocumentsUploadRequestDtoValue.Pdf,\n            sourceValue: \"application/pdf\",\n          },\n          content: \"VGhpcyBpc24ndCByZWFsbHkgYSBzYW1wbGUgZmlsZSwgYnV0IG5vIG9uZSB3aWxsIGV2ZXIga25vdyE\",\n          categoryId: \"6530\",\n          path: \"/path/to/file\",\n          confidential: {\n            value: HrisDocumentsUploadRequestDtoSchemasValue.True,\n            sourceValue: \"public\",\n          },\n          category: {},\n        },\n      ],\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/documents/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_employee_document"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getEmployeeDocument({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    fields: \"id,remote_id,name,type,category,category_id,remote_category_id,contents,created_at,updated_at,remote_url,file_format\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/documents/{subResourceId}/download"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_download_employee_document"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.downloadEmployeeDocument({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    format: \"base64\",\n    exportFormat: \"text/plain\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/employments"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_employee_employments"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listEmployeeEmployments({\n    id: \"<id>\",\n    fields: \"id,remote_id,employee_id,remote_employee_id,job_title,pay_rate,pay_period,pay_frequency,pay_currency,effective_date,end_date,employment_type,employment_contract_type,type,contract_type,change_reason,grade,work_time,payroll_code,fte,created_at,updated_at,start_date,active,department,team,cost_center,cost_centers,division,job,manager,groups\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    expand: \"groups\",\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/employments"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_create_employee_employment"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { HrisCreateEmploymentRequestDtoSchemasValue, HrisCreateEmploymentRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.createEmployeeEmployment({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    hrisCreateEmploymentRequestDto: {\n      unifiedCustomFields: {\n        \"my_project_custom_field_1\": \"REF-1236\",\n        \"my_project_custom_field_2\": \"some other value\",\n      },\n      jobTitle: \"Software Engineer\",\n      payRate: \"40.00\",\n      payPeriod: {\n        value: HrisCreateEmploymentRequestDtoValue.Hour,\n        sourceValue: \"Hour\",\n      },\n      payFrequency: {\n        value: HrisCreateEmploymentRequestDtoSchemasValue.Hourly,\n        sourceValue: \"Hourly\",\n      },\n      payCurrency: \"USD\",\n      effectiveDate: new Date(\"2021-01-01T01:01:01.000Z\"),\n      endDate: new Date(\"2021-01-01T01:01:01.000Z\"),\n      grade: {\n        id: \"1687-3\",\n        remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        name: \"1687-4\",\n        description: \"Mid-level employee demonstrating proficiency and autonomy.\",\n      },\n      type: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        label: \"Permanent\",\n        type: {},\n      },\n      contractType: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        label: \"Full-Time\",\n        contractType: {},\n      },\n      workTime: null,\n      payrollCode: \"PC1\",\n      jobId: \"5290\",\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/employments/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_employee_employment"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getEmployeeEmployment({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    fields: \"id,remote_id,employee_id,remote_employee_id,job_title,pay_rate,pay_period,pay_frequency,pay_currency,effective_date,end_date,employment_type,employment_contract_type,type,contract_type,change_reason,grade,work_time,payroll_code,fte,created_at,updated_at,start_date,active,department,team,cost_center,cost_centers,division,job,manager,groups\",\n    expand: \"groups\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/employments/{subResourceId}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_update_employee_employment"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { HrisUpdateEmploymentRequestDtoSchemasValue, HrisUpdateEmploymentRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.updateEmployeeEmployment({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    xAccountId: \"<id>\",\n    hrisUpdateEmploymentRequestDto: {\n      unifiedCustomFields: {\n        \"my_project_custom_field_1\": \"REF-1236\",\n        \"my_project_custom_field_2\": \"some other value\",\n      },\n      jobTitle: \"Software Engineer\",\n      payRate: \"40.00\",\n      payPeriod: {\n        value: HrisUpdateEmploymentRequestDtoValue.Hour,\n        sourceValue: \"Hour\",\n      },\n      payFrequency: {\n        value: HrisUpdateEmploymentRequestDtoSchemasValue.Hourly,\n        sourceValue: \"Hourly\",\n      },\n      payCurrency: \"USD\",\n      effectiveDate: new Date(\"2021-01-01T01:01:01.000Z\"),\n      endDate: new Date(\"2021-01-01T01:01:01.000Z\"),\n      grade: {\n        id: \"1687-3\",\n        remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        name: \"1687-4\",\n        description: \"Mid-level employee demonstrating proficiency and autonomy.\",\n      },\n      type: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        label: \"Permanent\",\n        type: {},\n      },\n      contractType: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        label: \"Full-Time\",\n        contractType: {},\n      },\n      workTime: null,\n      payrollCode: \"PC1\",\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/invite"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_invite_employee"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.inviteEmployee({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    hrisInviteEmployeeRequestDto: {\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/shifts"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_employee_shifts"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listEmployeeShifts({\n    id: \"<id>\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/shifts/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_employee_shift"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getEmployeeShift({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/skills"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_employee_skills"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listEmployeeSkills({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,active,language,maximum_proficiency,minimum_proficiency\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/skills"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_create_employee_skill"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.createEmployeeSkill({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    entitySkillsCreateRequestDto: {\n      id: \"16873-IT345\",\n      name: \"Information-Technology\",\n      maximumProficiency: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        name: \"Expert\",\n      },\n      minimumProficiency: null,\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/skills/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_employee_skill"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getEmployeeSkill({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    fields: \"id,remote_id,name,active,language,maximum_proficiency,minimum_proficiency\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/tasks"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_employee_tasks"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listEmployeeTasks({\n    id: \"<id>\",\n    fields: \"id,remote_id,employee_id,remote_employee_id,name,description,type,status,due_date,completion_date,assigned_by_employee_id,remote_assigned_by_employee_id,assigned_by_employee_name,link_to_task,extracted_links,next_task_id,remote_next_task_id,parent_process_name,comments,attachments,created_at,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    expand: \"attachments\",\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/tasks/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_employee_task"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getEmployeeTask({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    fields: \"id,remote_id,employee_id,remote_employee_id,name,description,type,status,due_date,completion_date,assigned_by_employee_id,remote_assigned_by_employee_id,assigned_by_employee_name,link_to_task,extracted_links,next_task_id,remote_next_task_id,parent_process_name,comments,attachments,created_at,updated_at\",\n    expand: \"attachments\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/tasks/{subResourceId}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_update_employee_task"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { UpdateTaskRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.updateEmployeeTask({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    xAccountId: \"<id>\",\n    updateTaskRequestDto: {\n      comment: \"All required documents have been submitted\",\n      status: {\n        value: UpdateTaskRequestDtoValue.Open,\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/time_off"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_employee_time_off_requests"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listEmployeeTimeOffRequests({\n    id: \"<id>\",\n    fields: \"id,remote_id,employee_id,remote_employee_id,approver_id,remote_approver_id,status,type,start_date,end_date,start_half_day,end_half_day,time_off_policy_id,remote_time_off_policy_id,reason,comment,duration,created_at,updated_at,policy\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n      startDate: new Date(\"2020-01-01T00:00:00.000Z\"),\n      endDate: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    expand: \"policy\",\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/time_off"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_create_employee_time_off_request"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.createEmployeeTimeOffRequest({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    hrisCreateTimeOffRequestDto: {\n      approverId: \"1687-4\",\n      startDate: \"2021-01-01T01:01:01.000\",\n      endDate: \"2021-01-01T01:01:01.000\",\n      startHalfDay: true,\n      endHalfDay: true,\n      timeOffPolicyId: \"cx280928933\",\n      reason: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      },\n      comment: \"Taking a day off for personal reasons\",\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/time_off/{subResourceId}"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_cancel_employee_time_off_request"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.cancelEmployeeTimeOffRequest({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/time_off/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_employees_time_off_request"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getEmployeesTimeOffRequest({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    fields: \"id,remote_id,employee_id,remote_employee_id,approver_id,remote_approver_id,status,type,start_date,end_date,start_half_day,end_half_day,time_off_policy_id,remote_time_off_policy_id,reason,comment,duration,created_at,updated_at,policy\",\n    expand: \"policy\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/time_off/{subResourceId}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_update_employee_time_off_request"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.updateEmployeeTimeOffRequest({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    xAccountId: \"<id>\",\n    hrisCreateTimeOffRequestDto: {\n      approverId: \"1687-4\",\n      startDate: \"2021-01-01T01:01:01.000\",\n      endDate: \"2021-01-01T01:01:01.000\",\n      startHalfDay: true,\n      endHalfDay: true,\n      timeOffPolicyId: \"cx280928933\",\n      reason: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n      },\n      comment: \"Taking a day off for personal reasons\",\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/time_off_balances"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_employee_time_off_balances"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listEmployeeTimeOffBalances({\n    id: \"<id>\",\n    fields: \"id,remote_id,employee_id,remote_employee_id,policy_id,remote_policy_id,policy,current_balance,initial_balance,balance_unit,balance_start_date,balance_expiry_date,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    expand: \"policy\",\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/time_off_balances/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_employee_time_off_balance"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getEmployeeTimeOffBalance({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    fields: \"id,remote_id,employee_id,remote_employee_id,policy_id,remote_policy_id,policy,current_balance,initial_balance,balance_unit,balance_start_date,balance_expiry_date,updated_at\",\n    expand: \"policy\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/time_off_policies"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_employee_time_off_policies"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listEmployeeTimeOffPolicies({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,description,type,duration_unit,reasons,updated_at,created_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/work_eligibility"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_employee_work_eligibility"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listEmployeeWorkEligibility({\n    id: \"<id>\",\n    fields: \"id,remote_id,type,sub_type,document,valid_from,valid_to,issued_by,number\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/work_eligibility"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_create_employee_work_eligibility_request"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { HrisCreateWorkEligibilityRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.createEmployeeWorkEligibilityRequest({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    hrisCreateWorkEligibilityRequestDto: {\n      document: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        name: \"My Document\",\n        category: {},\n        categoryId: \"6530\",\n        createdAt: new Date(\"2021-01-01T01:01:01.000Z\"),\n        updatedAt: new Date(\"2021-01-02T01:01:01.000Z\"),\n        remoteUrl: \"https://example.com/file.pdf\",\n        fileFormat: null,\n      },\n      issuedBy: {\n        value: HrisCreateWorkEligibilityRequestDtoValue.Us,\n      },\n      number: \"1234567890\",\n      subType: \"H1B\",\n      type: {},\n      validFrom: new Date(\"2021-01-01T00:00:00.000Z\"),\n      validTo: new Date(\"2021-01-01T00:00:00.000Z\"),\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/work_eligibility/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_employees_work_eligibility"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getEmployeesWorkEligibility({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    fields: \"id,remote_id,type,sub_type,document,valid_from,valid_to,issued_by,number\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employees/{id}/work_eligibility/{subResourceId}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_update_employee_work_eligibility_request"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport {\n  HrisCreateWorkEligibilityRequestDtoSchemasDocumentValue,\n  HrisCreateWorkEligibilityRequestDtoValue,\n} from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.updateEmployeeWorkEligibilityRequest({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    xAccountId: \"<id>\",\n    hrisCreateWorkEligibilityRequestDto: {\n      document: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        name: \"My Document\",\n        category: {},\n        categoryId: \"6530\",\n        createdAt: new Date(\"2021-01-01T01:01:01.000Z\"),\n        updatedAt: new Date(\"2021-01-02T01:01:01.000Z\"),\n        remoteUrl: \"https://example.com/file.pdf\",\n        fileFormat: {\n          value: HrisCreateWorkEligibilityRequestDtoSchemasDocumentValue.Pdf,\n          sourceValue: \"application/pdf\",\n        },\n      },\n      issuedBy: {\n        value: HrisCreateWorkEligibilityRequestDtoValue.Us,\n      },\n      number: \"1234567890\",\n      subType: \"H1B\",\n      type: {},\n      validFrom: new Date(\"2021-01-01T00:00:00.000Z\"),\n      validTo: new Date(\"2021-01-01T00:00:00.000Z\"),\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employments"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_employments"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listEmployments({\n    fields: \"id,remote_id,employee_id,remote_employee_id,job_title,pay_rate,pay_period,pay_frequency,pay_currency,effective_date,end_date,employment_type,employment_contract_type,type,contract_type,change_reason,grade,work_time,payroll_code,fte,created_at,updated_at,start_date,active,department,team,cost_center,cost_centers,division,job,manager,groups\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    expand: \"groups\",\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/employments/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_employment"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getEmployment({\n    id: \"<id>\",\n    fields: \"id,remote_id,employee_id,remote_employee_id,job_title,pay_rate,pay_period,pay_frequency,pay_currency,effective_date,end_date,employment_type,employment_contract_type,type,contract_type,change_reason,grade,work_time,payroll_code,fte,created_at,updated_at,start_date,active,department,team,cost_center,cost_centers,division,job,manager,groups\",\n    expand: \"groups\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/groups"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_groups"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listGroups({\n    fields: \"id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids,company_id,remote_company_id\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/groups/companies"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_companies_groups"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listCompaniesGroups({\n    fields: \"id,remote_id,name,full_name,display_name,created_at,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/groups/companies/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_company_group"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getCompanyGroup({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,full_name,display_name,created_at,updated_at\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/groups/cost_centers"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_cost_center_groups"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listCostCenterGroups({\n    fields: \"id,remote_id,name,type,distribution_percentage,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids,company_id,remote_company_id\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/groups/cost_centers/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_cost_center_group"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getCostCenterGroup({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,type,distribution_percentage,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids,company_id,remote_company_id\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/groups/departments"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_department_groups"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listDepartmentGroups({\n    fields: \"id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids,company_id,remote_company_id\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/groups/departments/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_department_group"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getDepartmentGroup({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids,company_id,remote_company_id\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/groups/divisions"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_division_groups"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listDivisionGroups({\n    fields: \"id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids,company_id,remote_company_id\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/groups/divisions/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_division_group"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getDivisionGroup({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids,company_id,remote_company_id\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/groups/teams"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_team_groups"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listTeamGroups({\n    fields: \"id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/groups/teams/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_team_group"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getTeamGroup({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/groups/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_group"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getGroup({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids,company_id,remote_company_id\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/jobs"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_jobs"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listJobs({\n    fields: \"id,remote_id,code,title,description,status,created_at,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/jobs/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_job"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getJob({\n    id: \"<id>\",\n    fields: \"id,remote_id,code,title,description,status,created_at,updated_at\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/locations"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_locations"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listLocations({\n    fields: \"id,remote_id,employee_id,remote_employee_id,name,phone_number,street_1,street_2,city,state,zip_code,country,location_type,created_at,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/locations/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_location"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getLocation({\n    id: \"<id>\",\n    fields: \"id,remote_id,employee_id,remote_employee_id,name,phone_number,street_1,street_2,city,state,zip_code,country,location_type,created_at,updated_at\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/positions"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_positions"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { QueryParamStatus } from \"@stackone/stackone-client-ts/sdk/models/operations\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listPositions({\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    status: QueryParamStatus.Open,\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/positions/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_position"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getPosition({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/shifts"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_shifts"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listShifts({\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/shifts/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_shift"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getShift({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/tasks"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_tasks"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listTasks({\n    fields: \"id,remote_id,employee_id,remote_employee_id,name,description,type,status,due_date,completion_date,assigned_by_employee_id,remote_assigned_by_employee_id,assigned_by_employee_name,link_to_task,extracted_links,next_task_id,remote_next_task_id,parent_process_name,comments,attachments,created_at,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    expand: \"attachments\",\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/tasks/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_task"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getTask({\n    id: \"<id>\",\n    fields: \"id,remote_id,employee_id,remote_employee_id,name,description,type,status,due_date,completion_date,assigned_by_employee_id,remote_assigned_by_employee_id,assigned_by_employee_name,link_to_task,extracted_links,next_task_id,remote_next_task_id,parent_process_name,comments,attachments,created_at,updated_at\",\n    expand: \"attachments\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/time_entries"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_time_entries"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listTimeEntries({\n    fields: \"id,remote_id,employee_id,remote_employee_id,start_time,end_time,hours_worked,break_duration,labor_type,location,status,created_at,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n      startTime: \"2020-01-01T00:00:00.000Z\",\n      endTime: \"2020-01-01T00:00:00.000Z\",\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/time_entries/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_time_entries"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getTimeEntries({\n    id: \"<id>\",\n    fields: \"id,remote_id,employee_id,remote_employee_id,start_time,end_time,hours_worked,break_duration,labor_type,location,status,created_at,updated_at\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/time_off"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_time_off_requests"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listTimeOffRequests({\n    fields: \"id,remote_id,employee_id,remote_employee_id,approver_id,remote_approver_id,status,type,start_date,end_date,start_half_day,end_half_day,time_off_policy_id,remote_time_off_policy_id,reason,comment,duration,created_at,updated_at,policy\",\n    filter: null,\n    expand: \"policy\",\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/time_off/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_time_off_request"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getTimeOffRequest({\n    id: \"<id>\",\n    fields: \"id,remote_id,employee_id,remote_employee_id,approver_id,remote_approver_id,status,type,start_date,end_date,start_half_day,end_half_day,time_off_policy_id,remote_time_off_policy_id,reason,comment,duration,created_at,updated_at,policy\",\n    expand: \"policy\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/time_off_policies"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_list_time_off_policies"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.listTimeOffPolicies({\n    fields: \"id,remote_id,name,description,type,duration_unit,reasons,updated_at,created_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/hris/time_off_policies/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "hris_get_time_off_policy"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.hris.getTimeOffPolicy({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,description,type,duration_unit,reasons,updated_at,created_at\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/iam/groups"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "iam_list_groups"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.iam.listGroups({\n    fields: \"id,remote_id,parent_id,remote_parent_id,name,description,roles,type,created_at,updated_at\",\n    filter: null,\n    expand: \"roles\",\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/iam/groups/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "iam_get_group"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.iam.getGroup({\n    id: \"<id>\",\n    fields: \"id,remote_id,parent_id,remote_parent_id,name,description,roles,type,created_at,updated_at\",\n    expand: \"roles\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/iam/policies"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "iam_list_policies"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.iam.listPolicies({\n    fields: \"id,remote_id,name,permissions,description,created_at,updated_at\",\n    filter: null,\n    expand: \"permissions\",\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/iam/policies/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "iam_get_policy"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.iam.getPolicy({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,permissions,description,created_at,updated_at\",\n    expand: \"permissions\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/iam/roles"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "iam_list_roles"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.iam.listRoles({\n    fields: \"id,remote_id,name,type,policies,description,created_at,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    expand: \"policies\",\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/iam/roles/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "iam_get_role"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.iam.getRole({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,type,policies,description,created_at,updated_at\",\n    expand: \"policies\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/iam/users"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "iam_list_users"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.iam.listUsers({\n    fields: \"id,remote_id,first_name,last_name,name,primary_email_address,username,roles,groups,status,avatar,is_bot_user,last_active_at,last_login_at,created_at,updated_at,multi_factor_enabled\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    expand: \"roles,groups\",\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/iam/users/{id}"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "iam_delete_user"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.iam.deleteUser({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/iam/users/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "iam_get_user"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.iam.getUser({\n    id: \"<id>\",\n    fields: \"id,remote_id,first_name,last_name,name,primary_email_address,username,roles,groups,status,avatar,is_bot_user,last_active_at,last_login_at,created_at,updated_at,multi_factor_enabled\",\n    expand: \"roles,groups\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/iam/users/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "iam_update_user"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { IamUpdateUserRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.iam.updateUser({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    iamUpdateUserRequestDto: {\n      primaryEmailAddress: \"han@stackone.com\",\n      firstName: \"Han\",\n      lastName: \"Solo\",\n      name: \"Han Solo\",\n      username: \"hansolo1977\",\n      isBotUser: true,\n      status: {\n        value: IamUpdateUserRequestDtoValue.Enabled,\n      },\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/assignments"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "lms_list_assignments"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.listAssignments({\n    fields: \"id,remote_id,external_reference,user_id,remote_user_id,course_id,remote_course_id,updated_at,created_at,due_date,status,progress,learning_object_type,learning_object_id,remote_learning_object_id,learning_object_external_reference,certificate_url,result,completed_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    userId: \"c28xyrc55866bvuv\",\n    remoteUserId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/assignments/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "lms_get_assignment"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.getAssignment({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/categories"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "lms_list_categories"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.listCategories({\n    fields: \"id,remote_id,name,active,hierarchy,level,language\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/categories/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "lms_get_category"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.getCategory({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,active,hierarchy,level,language\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/completions"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "lms_list_completions"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.listCompletions({\n    fields: \"id,remote_id,external_id,remote_external_id,external_reference,content_id,remote_content_id,course_id,remote_course_id,user_id,remote_user_id,completed_at,updated_at,created_at,result,content_external_reference,learning_object_type,learning_object_id,remote_learning_object_id,learning_object_external_reference,time_spent,certificate_url\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/completions/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "lms_get_completion"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.getCompletion({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/content"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "lms_list_content"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.listContent({\n    fields: \"id,remote_id,external_reference,course_ids,remote_course_ids,title,description,additional_data,languages,content_url,mobile_launch_content_url,content_type,cover_url,active,duration,order,categories,skills,updated_at,created_at,provider,localizations,tags,authors\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/content"]["put"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "lms_upsert_content"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { CreateCategoriesApiModelSchemasLanguageValue, LanguageEnumValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.upsertContent({\n    xAccountId: \"<id>\",\n    lmsUpsertContentRequestDto: {\n      unifiedCustomFields: {\n        \"my_project_custom_field_1\": \"REF-1236\",\n        \"my_project_custom_field_2\": \"some other value\",\n      },\n      externalReference: \"SOFTWARE-ENG-LV1-TRAINING-VIDEO-1\",\n      title: \"Software Engineer Lv 1\",\n      description: \"This video acts as learning content for software engineers.\",\n      languages: [\n        {\n          value: LanguageEnumValue.EnGB,\n        },\n      ],\n      contentUrl: \"https://www.youtube.com/watch?v=16873\",\n      mobileLaunchContentUrl: \"https://www.mobile.youtube.com/watch?v=16873\",\n      coverUrl: \"https://www.googledrive.com/?v=16873\",\n      active: true,\n      duration: \"P3Y6M4DT12H30M5S\",\n      skills: [\n        {\n          id: \"12345\",\n          name: \"Sales Techniques\",\n        },\n      ],\n      order: 1,\n      localizations: [\n        {\n          title: \"Software Engineer Lv 1\",\n          description: \"This course acts as learning resource for software engineers.\",\n        },\n        {\n          title: \"Software Engineer: A comprehensive guide\",\n          description: \"This course acts as learning resource for software engineers.\",\n        },\n      ],\n      tags: [\n        \"Sales Techniques\",\n        \"Customer Service\",\n      ],\n      authors: [\n        {\n          id: \"123\",\n          name: \"John Doe\",\n        },\n      ],\n      updatedAt: new Date(\"2021-07-21T14:00:00.000Z\"),\n      createdAt: new Date(\"2021-07-21T14:00:00.000Z\"),\n      categories: [\n        {\n          id: \"16873-IT345\",\n          unifiedCustomFields: {\n            \"my_project_custom_field_1\": \"REF-1236\",\n            \"my_project_custom_field_2\": \"some other value\",\n          },\n          name: \"Information-Technology\",\n          language: {\n            value: CreateCategoriesApiModelSchemasLanguageValue.EnGB,\n          },\n        },\n      ],\n      additionalData: [\n        {\n          id: \"learning_outcomes\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          value: \"This is additional data\",\n        },\n      ],\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/content/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "lms_batch_upsert_content"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { CreateCategoriesApiModelSchemasLanguageValue, LanguageEnumValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.batchUpsertContent({\n    xAccountId: \"<id>\",\n    lmsBatchUpsertContentRequestDto: {\n      items: [\n        {\n          unifiedCustomFields: {\n            \"my_project_custom_field_1\": \"REF-1236\",\n            \"my_project_custom_field_2\": \"some other value\",\n          },\n          externalReference: \"SOFTWARE-ENG-LV1-TRAINING-VIDEO-1\",\n          title: \"Software Engineer Lv 1\",\n          description: \"This video acts as learning content for software engineers.\",\n          languages: [\n            {\n              value: LanguageEnumValue.EnGB,\n            },\n          ],\n          contentUrl: \"https://www.youtube.com/watch?v=16873\",\n          mobileLaunchContentUrl: \"https://www.mobile.youtube.com/watch?v=16873\",\n          coverUrl: \"https://www.googledrive.com/?v=16873\",\n          active: true,\n          duration: \"P3Y6M4DT12H30M5S\",\n          skills: [\n            {\n              id: \"12345\",\n              name: \"Sales Techniques\",\n            },\n          ],\n          order: 1,\n          localizations: [\n            {\n              title: \"Software Engineer Lv 1\",\n              description: \"This course acts as learning resource for software engineers.\",\n            },\n            {\n              title: \"Software Engineer: A comprehensive guide\",\n              description: \"This course acts as learning resource for software engineers.\",\n            },\n          ],\n          tags: [\n            \"Sales Techniques\",\n            \"Customer Service\",\n          ],\n          authors: [\n            {\n              id: \"123\",\n              name: \"John Doe\",\n            },\n          ],\n          updatedAt: new Date(\"2021-07-21T14:00:00.000Z\"),\n          createdAt: new Date(\"2021-07-21T14:00:00.000Z\"),\n          categories: [\n            {\n              id: \"16873-IT345\",\n              unifiedCustomFields: {\n                \"my_project_custom_field_1\": \"REF-1236\",\n                \"my_project_custom_field_2\": \"some other value\",\n              },\n              name: \"Information-Technology\",\n              language: {\n                value: CreateCategoriesApiModelSchemasLanguageValue.EnGB,\n              },\n            },\n          ],\n          additionalData: [\n            {\n              id: \"learning_outcomes\",\n              remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n              value: \"This is additional data\",\n            },\n          ],\n        },\n      ],\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/content/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "lms_get_content"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.getContent({\n    id: \"<id>\",\n    fields: \"id,remote_id,external_reference,course_ids,remote_course_ids,title,description,additional_data,languages,content_url,mobile_launch_content_url,content_type,cover_url,active,duration,order,categories,skills,updated_at,created_at,provider,localizations,tags,authors\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/content/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "lms_update_content"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { LanguageEnumValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.updateContent({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    lmsCreateContentRequestDto: {\n      unifiedCustomFields: {\n        \"my_project_custom_field_1\": \"REF-1236\",\n        \"my_project_custom_field_2\": \"some other value\",\n      },\n      externalReference: \"SOFTWARE-ENG-LV1-TRAINING-VIDEO-1\",\n      title: \"Software Engineer Lv 1\",\n      description: \"This video acts as learning content for software engineers.\",\n      languages: [\n        {\n          value: LanguageEnumValue.EnGB,\n        },\n      ],\n      contentUrl: \"https://www.youtube.com/watch?v=16873\",\n      mobileLaunchContentUrl: \"https://www.mobile.youtube.com/watch?v=16873\",\n      coverUrl: \"https://www.googledrive.com/?v=16873\",\n      active: true,\n      duration: \"P3Y6M4DT12H30M5S\",\n      skills: [\n        {\n          id: \"12345\",\n          name: \"Sales Techniques\",\n        },\n      ],\n      order: 1,\n      localizations: [\n        {\n          title: \"Software Engineer Lv 1\",\n          description: \"This course acts as learning resource for software engineers.\",\n        },\n        {\n          title: \"Software Engineer Lv 1\",\n          description: \"This video acts as learning content for software engineers.\",\n        },\n      ],\n      tags: [\n        \"Sales Techniques\",\n        \"Customer Service\",\n      ],\n      authors: [\n        {\n          id: \"123\",\n          name: \"John Doe\",\n        },\n      ],\n      updatedAt: new Date(\"2021-07-21T14:00:00.000Z\"),\n      createdAt: new Date(\"2021-07-21T14:00:00.000Z\"),\n      categories: [\n        {\n          name: \"Technology\",\n        },\n      ],\n      additionalData: [\n        {\n          id: \"learning_outcomes\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          value: \"This is additional data\",\n        },\n      ],\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/courses"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "lms_list_courses"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.listCourses({\n    fields: \"id,remote_id,external_reference,content_ids,remote_content_ids,title,description,languages,cover_url,url,active,duration,categories,skills,updated_at,created_at,content,provider,localizations,authors\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/courses/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "lms_get_course"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.getCourse({\n    id: \"<id>\",\n    fields: \"id,remote_id,external_reference,content_ids,remote_content_ids,title,description,languages,cover_url,url,active,duration,categories,skills,updated_at,created_at,content,provider,localizations,authors\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/skills"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "lms_list_skills"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.listSkills({\n    fields: \"id,remote_id,name,active,hierarchy,language\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/skills/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "lms_get_skill"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.getSkill({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,active,hierarchy,language\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/users"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "lms_list_users"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.listUsers({\n    fields: \"id,remote_id,external_reference,active,email,phone_number,created_at,updated_at,name\",\n    filter: null,\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/users/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "lms_get_user"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.getUser({\n    id: \"<id>\",\n    fields: \"id,remote_id,external_reference,active,email,phone_number,created_at,updated_at,name\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/users/{id}/assignments"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "lms_list_user_assignments"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.listUserAssignments({\n    id: \"<id>\",\n    fields: \"id,remote_id,external_reference,user_id,remote_user_id,course_id,remote_course_id,updated_at,created_at,due_date,status,progress,learning_object_type,learning_object_id,remote_learning_object_id,learning_object_external_reference,certificate_url,result,completed_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    userId: \"c28xyrc55866bvuv\",\n    remoteUserId: \"e3cb75bf-aa84-466e-a6c1-b8322b257a48\",\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/users/{id}/assignments"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "lms_create_user_assignment"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { LmsCreateAssignmentRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.createUserAssignment({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    lmsCreateAssignmentRequestDto: {\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n      learningObjectId: \"e3gd34-23tr21-er234-345er56\",\n      learningObjectExternalReference: \"learning-content-123\",\n      progress: 40,\n      createdAt: new Date(\"2021-07-21T14:00:00.000Z\"),\n      dueDate: new Date(\"2021-07-21T14:00:00.000Z\"),\n      status: {\n        value: LmsCreateAssignmentRequestDtoValue.InProgress,\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/users/{id}/assignments/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "lms_get_user_assignment"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.getUserAssignment({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/users/{id}/completions"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "lms_list_user_completions"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.listUserCompletions({\n    id: \"<id>\",\n    fields: \"id,remote_id,external_id,remote_external_id,external_reference,content_id,remote_content_id,course_id,remote_course_id,user_id,remote_user_id,completed_at,updated_at,created_at,result,content_external_reference,learning_object_type,learning_object_id,remote_learning_object_id,learning_object_external_reference,time_spent,certificate_url\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/users/{id}/completions"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "lms_create_user_completion"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.createUserCompletion({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    lmsCreateCompletionRequestDto: {\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n      completedAt: new Date(\"2021-07-21T14:00:00.000Z\"),\n      learningObjectId: \"e3gd34-23tr21-er234-345er56\",\n      learningObjectExternalReference: \"learning-content-123\",\n      timeSpent: \"PT1H30M45S\",\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/users/{id}/completions/{subResourceId}"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "lms_delete_user_completion"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.deleteUserCompletion({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/lms/users/{id}/completions/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "lms_get_user_completion"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.lms.getUserCompletion({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/campaigns"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "marketing_list_campaigns"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.listCampaigns({\n    fields: \"id,remote_id,name,created_at,updated_at,description,schedule_type,status,channels,first_sent_at,last_sent_at,tags,messages\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/campaigns/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "marketing_get_campaign"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.getCampaign({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,created_at,updated_at,description,schedule_type,status,channels,first_sent_at,last_sent_at,tags,messages\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/content_blocks"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "marketing_list_content_blocks"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.listContentBlocks({\n    fields: \"id,remote_id,name,type,content,status,tags,created_at,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/content_blocks"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "marketing_create_content_block"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { MarketingCreateContentBlocksRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.createContentBlock({\n    xAccountId: \"<id>\",\n    marketingCreateContentBlocksRequestDto: {\n      type: {\n        value: MarketingCreateContentBlocksRequestDtoValue.Html,\n        sourceValue: \"text\",\n      },\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/content_blocks/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "marketing_get_content_block"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.getContentBlock({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,type,content,status,tags,created_at,updated_at\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/content_blocks/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "marketing_update_content_block"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { MarketingCreateContentBlocksRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.updateContentBlock({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    marketingCreateContentBlocksRequestDto: {\n      type: {\n        value: MarketingCreateContentBlocksRequestDtoValue.Html,\n        sourceValue: \"text\",\n      },\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/email"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "marketing_list_email_templates"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.listEmailTemplates({\n    fields: \"id,remote_id,name,messages,created_at,updated_at,tags\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/email"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "marketing_create_email_template"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.createEmailTemplate({\n    xAccountId: \"<id>\",\n    marketingCreateEmailTemplateRequestDto: {\n      messages: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          messageType: null,\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/email/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "marketing_get_email_template"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.getEmailTemplate({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,messages,created_at,updated_at,tags\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/email/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "marketing_update_email_template"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { EmailMessagesValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.updateEmailTemplate({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    marketingCreateEmailTemplateRequestDto: {\n      messages: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          messageType: {\n            value: EmailMessagesValue.Email,\n            sourceValue: \"Email\",\n          },\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/in_app"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "marketing_list_in_app_templates"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.listInAppTemplates({\n    fields: \"id,remote_id,name,messages,created_at,updated_at,tags\",\n    filter: null,\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/in_app"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "marketing_create_in_app_template"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { InAppMessagesValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.createInAppTemplate({\n    xAccountId: \"<id>\",\n    marketingCreateInAppTemplateRequestDto: {\n      messages: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          messageType: {\n            value: InAppMessagesValue.Email,\n            sourceValue: \"Email\",\n          },\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/in_app/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "marketing_get_in_app_template"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.getInAppTemplate({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,messages,created_at,updated_at,tags\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/in_app/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "marketing_update_in_app_template"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { InAppMessagesValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.updateInAppTemplate({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    marketingCreateInAppTemplateRequestDto: {\n      messages: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          messageType: {\n            value: InAppMessagesValue.Email,\n            sourceValue: \"Email\",\n          },\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/push"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "marketing_list_push_templates"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.listPushTemplates({\n    fields: \"id,remote_id,name,messages,created_at,updated_at,tags\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/push"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "marketing_create_push_template"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { PushMessagesValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.createPushTemplate({\n    xAccountId: \"<id>\",\n    marketingCreatePushTemplateRequestDto: {\n      messages: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          messageType: {\n            value: PushMessagesValue.Email,\n            sourceValue: \"Email\",\n          },\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/push/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "marketing_get_push_template"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.getPushTemplate({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,messages,created_at,updated_at,tags\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/push/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "marketing_update_push_template"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { PushMessagesValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.updatePushTemplate({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    marketingCreatePushTemplateRequestDto: {\n      messages: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          messageType: {\n            value: PushMessagesValue.Email,\n            sourceValue: \"Email\",\n          },\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/sms"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "marketing_list_sms_templates"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.listSmsTemplates({\n    fields: \"id,remote_id,name,messages,created_at,updated_at,tags\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/sms"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "marketing_create_sms_template"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { SmsMessagesValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.createSmsTemplate({\n    xAccountId: \"<id>\",\n    marketingCreateSmsTemplateRequestDto: {\n      messages: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          messageType: {\n            value: SmsMessagesValue.Email,\n            sourceValue: \"Email\",\n          },\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/sms/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "marketing_get_sms_template"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.getSmsTemplate({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,messages,created_at,updated_at,tags\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/marketing/templates/sms/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "marketing_update_sms_template"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { SmsMessagesValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.marketing.updateSmsTemplate({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    marketingCreateSmsTemplateRequestDto: {\n      messages: [\n        {\n          id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n          messageType: {\n            value: SmsMessagesValue.Email,\n            sourceValue: \"Email\",\n          },\n        },\n      ],\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/messaging/conversations"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "messaging_list_conversations"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.messaging.listConversations({\n    fields: \"id,remote_id,participants,name,private,created_at,last_message_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/messaging/conversations"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "messaging_create_conversation"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.messaging.createConversation({\n    xAccountId: \"<id>\",\n    messagingCreateConversationRequestDto: {\n      participants: [\n        \"c28xIQ1\",\n        \"c28xIQ2\",\n      ],\n      name: \"Project Discussion\",\n      private: true,\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/messaging/conversations/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "messaging_get_conversation"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.messaging.getConversation({\n    id: \"<id>\",\n    fields: \"id,remote_id,participants,name,private,created_at,last_message_at\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/messaging/conversations/{id}/messages"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "messaging_list_conversation_messages"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.messaging.listConversationMessages({\n    id: \"<id>\",\n    fields: \"id,remote_id,content,parent_message_id,remote_parent_message_id,attachments,author,created_at,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/messaging/messages"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "messaging_send_message"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.messaging.sendMessage({\n    xAccountId: \"<id>\",\n    messagingMessageSendRequestDto: {\n      content: \"Hello, world!\",\n      recipient: \"c28xyrc55866bvuv\",\n      sender: \"+34820398402\",\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/messaging/messages/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "messaging_get_message"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.messaging.getMessage({\n    id: \"<id>\",\n    fields: \"id,remote_id,content,parent_message_id,remote_parent_message_id,attachments,author,created_at,updated_at\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/messaging/messages/{id}/attachments"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "messaging_list_attachments"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.messaging.listAttachments({\n    id: \"<id>\",\n    fields: \"id,remote_id,file_name,file_size,file_type\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/messaging/messages/{id}/attachments/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "messaging_get_attachment"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.messaging.getAttachment({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    fields: \"id,remote_id,file_name,file_size,file_type\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/messaging/messages/{id}/attachments/{subResourceId}/download"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "messaging_download_messaging_attachment"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.messaging.downloadMessagingAttachment({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    format: \"base64\",\n    exportFormat: \"text/plain\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/messaging/users"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "messaging_list_users"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.messaging.listUsers({\n    fields: \"id,remote_id,email,username,name,first_name,last_name,bot,active\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/messaging/users/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "messaging_get_user"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.messaging.getUser({\n    id: \"<id>\",\n    fields: \"id,remote_id,email,username,name,first_name,last_name,bot,active\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/proxy"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "stackone_proxy_request"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.proxy.proxyRequest({\n    xAccountId: \"<id>\",\n    proxyRequestBody: {\n      url: \"https://api.sample-integration.com/v1\",\n      path: \"/employees/directory\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/screening/orders"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "screening_create_screening_order"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.screening.createScreeningOrder({\n    xAccountId: \"<id>\",\n    screeningCreateOrderRequestDto: {\n      passthrough: {\n        \"other_known_names\": \"John Doe\",\n      },\n      unifiedCustomFields: {\n        \"my_project_custom_field_1\": \"REF-1236\",\n        \"my_project_custom_field_2\": \"some other value\",\n      },\n      packageId: \"54321\",\n      candidate: {\n        firstName: \"John\",\n        lastName: \"Doe\",\n        email: \"john.doe@example.com\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/screening/packages"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "screening_list_screening_packages"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.screening.listScreeningPackages({\n    fields: \"id,remote_id,name,description\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/screening/packages/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "screening_get_screening_package"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.screening.getScreeningPackage({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,description\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/screening/results/webhook"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "screening_webhook_screening_result"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { Event, ScreeningResultStatus } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.screening.webhookScreeningResult({\n    xAccountId: \"<id>\",\n    screeningResultWebhook: {\n      event: Event.ScreeningResultsCompleted,\n      data: {\n        id: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        remoteId: \"8187e5da-dc77-475e-9949-af0f1fa4e4e3\",\n        unifiedCustomFields: {\n          \"my_project_custom_field_1\": \"REF-1236\",\n          \"my_project_custom_field_2\": \"some other value\",\n        },\n        orderId: \"12345\",\n        score: {\n          label: \"Overall Risk\",\n          value: \"75\",\n          min: \"0\",\n          max: \"100\",\n        },\n        startDate: new Date(\"2023-01-01T00:00:00Z\"),\n        submissionDate: new Date(\"2023-01-02T00:00:00Z\"),\n        summary: \"Background check completed successfully\",\n        status: ScreeningResultStatus.Completed,\n        resultUrl: \"https://example.com/results/12345\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ticketing/projects"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ticketing_list_projects"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ticketing.listProjects({\n    fields: \"id,remote_id,organization_id,remote_organization_id,name,description,created_at,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ticketing/projects/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ticketing_get_project"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ticketing.getProject({\n    id: \"<id>\",\n    fields: \"id,remote_id,organization_id,remote_organization_id,name,description,created_at,updated_at\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ticketing/projects/{id}/components"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ticketing_list_project_components"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ticketing.listProjectComponents({\n    id: \"<id>\",\n    fields: \"id,remote_id,organization_id,remote_organization_id,project_id,remote_project_id,name,description,created_at,updated_at\",\n    filter: null,\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ticketing/projects/{id}/components/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ticketing_get_project_component"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ticketing.getProjectComponent({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    fields: \"id,remote_id,organization_id,remote_organization_id,project_id,remote_project_id,name,description,created_at,updated_at\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ticketing/projects/{id}/ticket_types"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ticketing_list_project_ticket_types"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ticketing.listProjectTicketTypes({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,project_id,remote_project_id\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ticketing/ticket_types"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ticketing_list_ticket_types"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ticketing.listTicketTypes({\n    fields: \"id,remote_id,name,project_id,remote_project_id\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ticketing/ticket_types/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ticketing_get_ticket_type"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ticketing.getTicketType({\n    id: \"<id>\",\n    fields: \"id,remote_id,name,project_id,remote_project_id\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ticketing/tickets"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ticketing_list_tickets"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ticketing.listTickets({\n    fields: \"id,remote_id,type,ticket_number,title,creator_id,remote_creator_id,reporters,assignees,content,parent_id,remote_parent_id,closed_at,ticket_url,status,priority,tags,projects,components,organization,created_at,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ticketing/tickets"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ticketing_create_ticket"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport { TicketingTicketCreateRequestDtoValue } from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ticketing.createTicket({\n    xAccountId: \"<id>\",\n    ticketingTicketCreateRequestDto: {\n      unifiedCustomFields: {\n        \"my_project_custom_field_1\": \"REF-1236\",\n        \"my_project_custom_field_2\": \"some other value\",\n      },\n      title: \"System outage in production environment\",\n      creatorId: \"user-001\",\n      reporters: [\n        \"user-001\",\n        \"user-002\",\n      ],\n      assignees: [\n        \"user-001\",\n        \"user-002\",\n      ],\n      content: [\n        {\n          plain: \"This is some content\",\n          html: \"<p>This is some content</p>\",\n        },\n      ],\n      parentId: \"ticket-002\",\n      priority: {\n        id: \"001\",\n        value: TicketingTicketCreateRequestDtoValue.Medium,\n        sourceValue: \"Normal\",\n      },\n      tags: [\n        \"tag-001\",\n        \"tag-002\",\n      ],\n      organizationId: \"organization-001\",\n      projectId: \"project-001\",\n      componentIds: \"[\\\"component-001\\\",\\\"component-002\\\"]\",\n      type: \"ticket-type-001\",\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ticketing/tickets/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ticketing_get_ticket"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ticketing.getTicket({\n    id: \"<id>\",\n    fields: \"id,remote_id,type,ticket_number,title,creator_id,remote_creator_id,reporters,assignees,content,parent_id,remote_parent_id,closed_at,ticket_url,status,priority,tags,projects,components,organization,created_at,updated_at\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ticketing/tickets/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ticketing_update_ticket"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\nimport {\n  TicketingTicketUpdateRequestDtoSchemasValue,\n  TicketingTicketUpdateRequestDtoValue,\n} from \"@stackone/stackone-client-ts/sdk/models/shared\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ticketing.updateTicket({\n    id: \"<id>\",\n    xAccountId: \"<id>\",\n    ticketingTicketUpdateRequestDto: {\n      unifiedCustomFields: {\n        \"my_project_custom_field_1\": \"REF-1236\",\n        \"my_project_custom_field_2\": \"some other value\",\n      },\n      title: \"System outage in production environment\",\n      reporters: [\n        \"user-001\",\n        \"user-002\",\n      ],\n      assignees: [\n        \"user-001\",\n        \"user-002\",\n      ],\n      content: [\n        {\n          plain: \"This is some content\",\n          html: \"<p>This is some content</p>\",\n        },\n      ],\n      parentId: \"ticket-002\",\n      priority: {\n        id: \"001\",\n        value: TicketingTicketUpdateRequestDtoValue.Medium,\n        sourceValue: \"Normal\",\n      },\n      tags: [\n        \"tag-001\",\n        \"tag-002\",\n      ],\n      projectId: \"project-001\",\n      componentIds: \"[\\\"component-001\\\",\\\"component-002\\\"]\",\n      status: {\n        id: \"001\",\n        type: {\n          value: TicketingTicketUpdateRequestDtoSchemasValue.ToDo,\n          sourceValue: \"New\",\n        },\n        name: \"Backlog\",\n      },\n    },\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ticketing/tickets/{id}/attachments"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ticketing_list_attachments"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ticketing.listAttachments({\n    id: \"<id>\",\n    fields: \"id,remote_id,ticket_id,remote_ticket_id,user_id,remote_user_id,file_name,file_format,file_url,size,created_at,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ticketing/tickets/{id}/attachments/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ticketing_get_attachment"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ticketing.getAttachment({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    fields: \"id,remote_id,ticket_id,remote_ticket_id,user_id,remote_user_id,file_name,file_format,file_url,size,created_at,updated_at\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ticketing/tickets/{id}/attachments/{subResourceId}/download"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ticketing_download_ticketing_attachment"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ticketing.downloadTicketingAttachment({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    format: \"base64\",\n    exportFormat: \"text/plain\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ticketing/tickets/{id}/comments"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ticketing_list_comments"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ticketing.listComments({\n    id: \"<id>\",\n    fields: \"id,remote_id,ticket_id,remote_ticket_id,content,user_id,remote_user_id,internal,created_at,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ticketing/tickets/{id}/comments/{subResourceId}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ticketing_get_comment"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ticketing.getComment({\n    id: \"<id>\",\n    subResourceId: \"<id>\",\n    fields: \"id,remote_id,ticket_id,remote_ticket_id,content,user_id,remote_user_id,internal,created_at,updated_at\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
  - target: $["paths"]["/unified/ticketing/tickets/{id}/statuses"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ticketing_list_ticket_statuses"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ticketing.listTicketStatuses({\n    id: \"<id>\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ticketing/users"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ticketing_list_users"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ticketing.listUsers({\n    fields: \"id,remote_id,type,name,primary_email,primary_phone,username,active,first_name,last_name,customer_account_reference,created_at,updated_at\",\n    filter: {\n      updatedAfter: new Date(\"2020-01-01T00:00:00.000Z\"),\n    },\n    xAccountId: \"<id>\",\n  });\n\n  for await (const page of result) {\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/unified/ticketing/users/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ticketing_get_user"
          "source": "import { StackOne } from \"@stackone/stackone-client-ts\";\n\nconst stackOne = new StackOne({\n  security: {\n    username: \"\",\n    password: \"\",\n  },\n});\n\nasync function run() {\n  const result = await stackOne.ticketing.getUser({\n    id: \"<id>\",\n    fields: \"id,remote_id,type,name,primary_email,primary_phone,username,active,first_name,last_name,customer_account_reference,created_at,updated_at\",\n    xAccountId: \"<id>\",\n  });\n\n  console.log(result);\n}\n\nrun();"
